namespace eoddata {
// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* eoddata.h
   Generated by wsdl2h 2.8.28 from http://ws.eoddata.com/data.asmx?WSDL and typemap.dat
   2016-06-06 11:56:49 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/** @page page_notes Notes

@note HINTS:
 - Run soapcpp2 on eoddata.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 -j to generate improved proxy and server classes.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c++,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://ws.eoddata.com/Data                                               *
 *                                                                            *
\******************************************************************************/

/* WSDL Documentation:

EODData Financial Information Web Service
*/


/******************************************************************************\
 *                                                                            *
 * $CONTAINER                                                                 *
 *   std::vector                                                              *
 *                                                                            *
\******************************************************************************/

template <class T> class std::vector;

/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/

#import "stl.h"	// enable STL containers when used (option -s removes STL dependency)

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

eoddata1 = "http://ws.eoddata.com/Data"

*/

#define SOAP_NAMESPACE_OF_eoddata1	"http://ws.eoddata.com/Data"
//gsoap eoddata1 schema namespace:	http://ws.eoddata.com/Data
//gsoap eoddata1 schema elementForm:	qualified
//gsoap eoddata1 schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


//  Forward declaration of class eoddata1__LOGINRESPONSE.
class eoddata1__LOGINRESPONSE;

//  Forward declaration of class eoddata1__RESPONSE.
class eoddata1__RESPONSE;

//  Forward declaration of class eoddata1__EXCHANGE.
class eoddata1__EXCHANGE;

//  Forward declaration of class eoddata1__ArrayOfEXCHANGE.
class eoddata1__ArrayOfEXCHANGE;

//  Forward declaration of class eoddata1__SYMBOL.
class eoddata1__SYMBOL;

//  Forward declaration of class eoddata1__ArrayOfSYMBOL.
class eoddata1__ArrayOfSYMBOL;

//  Forward declaration of class eoddata1__ArrayOfSYMBOL2.
class eoddata1__ArrayOfSYMBOL2;

//  Forward declaration of class eoddata1__SYMBOL2.
class eoddata1__SYMBOL2;

//  Forward declaration of class eoddata1__QUOTE.
class eoddata1__QUOTE;

//  Forward declaration of class eoddata1__ArrayOfQUOTE.
class eoddata1__ArrayOfQUOTE;

//  Forward declaration of class eoddata1__ArrayOfQUOTE2.
class eoddata1__ArrayOfQUOTE2;

//  Forward declaration of class eoddata1__QUOTE2.
class eoddata1__QUOTE2;

//  Forward declaration of class eoddata1__ArrayOfSPLIT.
class eoddata1__ArrayOfSPLIT;

//  Forward declaration of class eoddata1__SPLIT.
class eoddata1__SPLIT;

//  Forward declaration of class eoddata1__ArrayOfCountryBase.
class eoddata1__ArrayOfCountryBase;

//  Forward declaration of class eoddata1__CountryBase.
class eoddata1__CountryBase;

//  Forward declaration of class eoddata1__ArrayOfFUNDAMENTAL.
class eoddata1__ArrayOfFUNDAMENTAL;

//  Forward declaration of class eoddata1__FUNDAMENTAL.
class eoddata1__FUNDAMENTAL;

//  Forward declaration of class eoddata1__ArrayOfTECHNICAL.
class eoddata1__ArrayOfTECHNICAL;

//  Forward declaration of class eoddata1__TECHNICAL.
class eoddata1__TECHNICAL;

//  Forward declaration of class eoddata1__ArrayOfSYMBOLCHANGE.
class eoddata1__ArrayOfSYMBOLCHANGE;

//  Forward declaration of class eoddata1__SYMBOLCHANGE.
class eoddata1__SYMBOLCHANGE;

//  Forward declaration of class eoddata1__ArrayOfNEWS.
class eoddata1__ArrayOfNEWS;

//  Forward declaration of class eoddata1__NEWS.
class eoddata1__NEWS;

//  Forward declaration of class eoddata1__ArrayOfDATAFORMAT.
class eoddata1__ArrayOfDATAFORMAT;

//  Forward declaration of class eoddata1__DATAFORMAT.
class eoddata1__DATAFORMAT;

//  Forward declaration of class eoddata1__ArrayOfDATAFORMAT_USCORECOLUMN.
class eoddata1__ArrayOfDATAFORMAT_USCORECOLUMN;

//  Forward declaration of class eoddata1__DATAFORMAT_USCORECOLUMN.
class eoddata1__DATAFORMAT_USCORECOLUMN;

//  Forward declaration of class _eoddata1__Login.
class _eoddata1__Login;

//  Forward declaration of class _eoddata1__LoginResponse.
class _eoddata1__LoginResponse;

//  Forward declaration of class _eoddata1__Login2.
class _eoddata1__Login2;

//  Forward declaration of class _eoddata1__Login2Response.
class _eoddata1__Login2Response;

//  Forward declaration of class _eoddata1__Membership.
class _eoddata1__Membership;

//  Forward declaration of class _eoddata1__MembershipResponse.
class _eoddata1__MembershipResponse;

//  Forward declaration of class _eoddata1__ExchangeList.
class _eoddata1__ExchangeList;

//  Forward declaration of class _eoddata1__ExchangeListResponse.
class _eoddata1__ExchangeListResponse;

//  Forward declaration of class _eoddata1__ExchangeGet.
class _eoddata1__ExchangeGet;

//  Forward declaration of class _eoddata1__ExchangeGetResponse.
class _eoddata1__ExchangeGetResponse;

//  Forward declaration of class _eoddata1__SymbolList.
class _eoddata1__SymbolList;

//  Forward declaration of class _eoddata1__SymbolListResponse.
class _eoddata1__SymbolListResponse;

//  Forward declaration of class _eoddata1__SymbolList2.
class _eoddata1__SymbolList2;

//  Forward declaration of class _eoddata1__SymbolList2Response.
class _eoddata1__SymbolList2Response;

//  Forward declaration of class _eoddata1__QuoteGet.
class _eoddata1__QuoteGet;

//  Forward declaration of class _eoddata1__QuoteGetResponse.
class _eoddata1__QuoteGetResponse;

//  Forward declaration of class _eoddata1__QuoteList2.
class _eoddata1__QuoteList2;

//  Forward declaration of class _eoddata1__QuoteList2Response.
class _eoddata1__QuoteList2Response;

//  Forward declaration of class _eoddata1__SymbolGet.
class _eoddata1__SymbolGet;

//  Forward declaration of class _eoddata1__SymbolGetResponse.
class _eoddata1__SymbolGetResponse;

//  Forward declaration of class _eoddata1__QuoteList.
class _eoddata1__QuoteList;

//  Forward declaration of class _eoddata1__QuoteListResponse.
class _eoddata1__QuoteListResponse;

//  Forward declaration of class _eoddata1__NewsList.
class _eoddata1__NewsList;

//  Forward declaration of class _eoddata1__NewsListResponse.
class _eoddata1__NewsListResponse;

//  Forward declaration of class _eoddata1__NewsListBySymbol.
class _eoddata1__NewsListBySymbol;

//  Forward declaration of class _eoddata1__NewsListBySymbolResponse.
class _eoddata1__NewsListBySymbolResponse;

//  Forward declaration of class _eoddata1__FundamentalList.
class _eoddata1__FundamentalList;

//  Forward declaration of class _eoddata1__FundamentalListResponse.
class _eoddata1__FundamentalListResponse;

//  Forward declaration of class _eoddata1__TechnicalList.
class _eoddata1__TechnicalList;

//  Forward declaration of class _eoddata1__TechnicalListResponse.
class _eoddata1__TechnicalListResponse;

//  Forward declaration of class _eoddata1__QuoteListByDate.
class _eoddata1__QuoteListByDate;

//  Forward declaration of class _eoddata1__QuoteListByDateResponse.
class _eoddata1__QuoteListByDateResponse;

//  Forward declaration of class _eoddata1__QuoteListByDate2.
class _eoddata1__QuoteListByDate2;

//  Forward declaration of class _eoddata1__QuoteListByDate2Response.
class _eoddata1__QuoteListByDate2Response;

//  Forward declaration of class _eoddata1__SymbolHistory.
class _eoddata1__SymbolHistory;

//  Forward declaration of class _eoddata1__SymbolHistoryResponse.
class _eoddata1__SymbolHistoryResponse;

//  Forward declaration of class _eoddata1__Top10Gains.
class _eoddata1__Top10Gains;

//  Forward declaration of class _eoddata1__Top10GainsResponse.
class _eoddata1__Top10GainsResponse;

//  Forward declaration of class _eoddata1__Top10Losses.
class _eoddata1__Top10Losses;

//  Forward declaration of class _eoddata1__Top10LossesResponse.
class _eoddata1__Top10LossesResponse;

//  Forward declaration of class _eoddata1__SymbolChart.
class _eoddata1__SymbolChart;

//  Forward declaration of class _eoddata1__SymbolChartResponse.
class _eoddata1__SymbolChartResponse;

//  Forward declaration of class _eoddata1__ExchangeMonths.
class _eoddata1__ExchangeMonths;

//  Forward declaration of class _eoddata1__ExchangeMonthsResponse.
class _eoddata1__ExchangeMonthsResponse;

//  Forward declaration of class _eoddata1__SplitListByExchange.
class _eoddata1__SplitListByExchange;

//  Forward declaration of class _eoddata1__SplitListByExchangeResponse.
class _eoddata1__SplitListByExchangeResponse;

//  Forward declaration of class _eoddata1__SplitListBySymbol.
class _eoddata1__SplitListBySymbol;

//  Forward declaration of class _eoddata1__SplitListBySymbolResponse.
class _eoddata1__SplitListBySymbolResponse;

//  Forward declaration of class _eoddata1__CountryList.
class _eoddata1__CountryList;

//  Forward declaration of class _eoddata1__CountryListResponse.
class _eoddata1__CountryListResponse;

//  Forward declaration of class _eoddata1__SymbolHistoryPeriod.
class _eoddata1__SymbolHistoryPeriod;

//  Forward declaration of class _eoddata1__SymbolHistoryPeriodResponse.
class _eoddata1__SymbolHistoryPeriodResponse;

//  Forward declaration of class _eoddata1__SymbolHistoryPeriodByDateRange.
class _eoddata1__SymbolHistoryPeriodByDateRange;

//  Forward declaration of class _eoddata1__SymbolHistoryPeriodByDateRangeResponse.
class _eoddata1__SymbolHistoryPeriodByDateRangeResponse;

//  Forward declaration of class _eoddata1__QuoteListByDatePeriod.
class _eoddata1__QuoteListByDatePeriod;

//  Forward declaration of class _eoddata1__QuoteListByDatePeriodResponse.
class _eoddata1__QuoteListByDatePeriodResponse;

//  Forward declaration of class _eoddata1__QuoteListByDatePeriod2.
class _eoddata1__QuoteListByDatePeriod2;

//  Forward declaration of class _eoddata1__QuoteListByDatePeriod2Response.
class _eoddata1__QuoteListByDatePeriod2Response;

//  Forward declaration of class _eoddata1__SymbolChangesByExchange.
class _eoddata1__SymbolChangesByExchange;

//  Forward declaration of class _eoddata1__SymbolChangesByExchangeResponse.
class _eoddata1__SymbolChangesByExchangeResponse;

//  Forward declaration of class _eoddata1__DataClientLatestVersion.
class _eoddata1__DataClientLatestVersion;

//  Forward declaration of class _eoddata1__DataClientLatestVersionResponse.
class _eoddata1__DataClientLatestVersionResponse;

//  Forward declaration of class _eoddata1__DataFormats.
class _eoddata1__DataFormats;

//  Forward declaration of class _eoddata1__DataFormatsResponse.
class _eoddata1__DataFormatsResponse;

//  Forward declaration of class _eoddata1__UpdateDataFormat.
class _eoddata1__UpdateDataFormat;

//  Forward declaration of class _eoddata1__UpdateDataFormatResponse.
class _eoddata1__UpdateDataFormatResponse;

//  Forward declaration of class _eoddata1__ValidateAccess.
class _eoddata1__ValidateAccess;

//  Forward declaration of class _eoddata1__ValidateAccessResponse.
class _eoddata1__ValidateAccessResponse;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://ws.eoddata.com/Data                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://ws.eoddata.com/Data                                               *
 *                                                                            *
\******************************************************************************/

/// @brief "http://ws.eoddata.com/Data":LOGINRESPONSE is a complexType.
///
/// class eoddata1__LOGINRESPONSE operations:
/// - eoddata1__LOGINRESPONSE* soap_new_eoddata1__LOGINRESPONSE(soap*) allocate
/// - eoddata1__LOGINRESPONSE* soap_new_eoddata1__LOGINRESPONSE(soap*, int num) allocate array
/// - eoddata1__LOGINRESPONSE* soap_new_req_eoddata1__LOGINRESPONSE(soap*, ...) allocate, set required members
/// - eoddata1__LOGINRESPONSE* soap_new_set_eoddata1__LOGINRESPONSE(soap*, ...) allocate, set all public members
/// - eoddata1__LOGINRESPONSE::soap_default(soap*) reset members to default
/// - int soap_read_eoddata1__LOGINRESPONSE(soap*, eoddata1__LOGINRESPONSE*) deserialize from a stream
/// - int soap_write_eoddata1__LOGINRESPONSE(soap*, eoddata1__LOGINRESPONSE*) serialize to a stream
/// - eoddata1__LOGINRESPONSE* eoddata1__LOGINRESPONSE::soap_dup(soap*) returns deep copy of eoddata1__LOGINRESPONSE, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - eoddata1__LOGINRESPONSE::soap_del() deep deletes eoddata1__LOGINRESPONSE data members, use only after eoddata1__LOGINRESPONSE::soap_dup(NULL) (use soapcpp2 -Ed)
class eoddata1__LOGINRESPONSE
{ public:
/// Attribute "Message" of XSD type xs:string.
   @std::string*                         Message                        0;	///< Optional attribute.
/// Attribute "Token" of XSD type xs:string.
   @std::string*                         Token                          0;	///< Optional attribute.
/// Attribute "DataFormat" of XSD type xs:string.
   @std::string*                         DataFormat                     0;	///< Optional attribute.
/// Attribute "Header" of XSD type xs:boolean.
   @bool                                 Header                         1;	///< Required attribute.
/// Attribute "Suffix" of XSD type xs:boolean.
   @bool                                 Suffix                         1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://ws.eoddata.com/Data":RESPONSE is a complexType.
///
/// class eoddata1__RESPONSE operations:
/// - eoddata1__RESPONSE* soap_new_eoddata1__RESPONSE(soap*) allocate
/// - eoddata1__RESPONSE* soap_new_eoddata1__RESPONSE(soap*, int num) allocate array
/// - eoddata1__RESPONSE* soap_new_req_eoddata1__RESPONSE(soap*, ...) allocate, set required members
/// - eoddata1__RESPONSE* soap_new_set_eoddata1__RESPONSE(soap*, ...) allocate, set all public members
/// - eoddata1__RESPONSE::soap_default(soap*) reset members to default
/// - int soap_read_eoddata1__RESPONSE(soap*, eoddata1__RESPONSE*) deserialize from a stream
/// - int soap_write_eoddata1__RESPONSE(soap*, eoddata1__RESPONSE*) serialize to a stream
/// - eoddata1__RESPONSE* eoddata1__RESPONSE::soap_dup(soap*) returns deep copy of eoddata1__RESPONSE, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - eoddata1__RESPONSE::soap_del() deep deletes eoddata1__RESPONSE data members, use only after eoddata1__RESPONSE::soap_dup(NULL) (use soapcpp2 -Ed)
class eoddata1__RESPONSE
{ public:
/// Element "EXCHANGE" of XSD type "http://ws.eoddata.com/Data":EXCHANGE.
    eoddata1__EXCHANGE*                  EXCHANGE                       0;	///< Optional element.
/// Element "EXCHANGES" of XSD type "http://ws.eoddata.com/Data":ArrayOfEXCHANGE.
    eoddata1__ArrayOfEXCHANGE*           EXCHANGES                      0;	///< Optional element.
/// Element "SYMBOL" of XSD type "http://ws.eoddata.com/Data":SYMBOL.
    eoddata1__SYMBOL*                    SYMBOL                         0;	///< Optional element.
/// Element "SYMBOLS" of XSD type "http://ws.eoddata.com/Data":ArrayOfSYMBOL.
    eoddata1__ArrayOfSYMBOL*             SYMBOLS                        0;	///< Optional element.
/// Element "SYMBOLS2" of XSD type "http://ws.eoddata.com/Data":ArrayOfSYMBOL2.
    eoddata1__ArrayOfSYMBOL2*            SYMBOLS2                       0;	///< Optional element.
/// Element "QUOTE" of XSD type "http://ws.eoddata.com/Data":QUOTE.
    eoddata1__QUOTE*                     QUOTE                          0;	///< Optional element.
/// Element "QUOTES" of XSD type "http://ws.eoddata.com/Data":ArrayOfQUOTE.
    eoddata1__ArrayOfQUOTE*              QUOTES                         0;	///< Optional element.
/// Element "QUOTES2" of XSD type "http://ws.eoddata.com/Data":ArrayOfQUOTE2.
    eoddata1__ArrayOfQUOTE2*             QUOTES2                        0;	///< Optional element.
/// Element "SPLITS" of XSD type "http://ws.eoddata.com/Data":ArrayOfSPLIT.
    eoddata1__ArrayOfSPLIT*              SPLITS                         0;	///< Optional element.
/// Element "COUNTRIES" of XSD type "http://ws.eoddata.com/Data":ArrayOfCountryBase.
    eoddata1__ArrayOfCountryBase*        COUNTRIES                      0;	///< Optional element.
/// Element "FUNDAMENTALS" of XSD type "http://ws.eoddata.com/Data":ArrayOfFUNDAMENTAL.
    eoddata1__ArrayOfFUNDAMENTAL*        FUNDAMENTALS                   0;	///< Optional element.
/// Element "TECHNICALS" of XSD type "http://ws.eoddata.com/Data":ArrayOfTECHNICAL.
    eoddata1__ArrayOfTECHNICAL*          TECHNICALS                     0;	///< Optional element.
/// Element "SYMBOLCHANGES" of XSD type "http://ws.eoddata.com/Data":ArrayOfSYMBOLCHANGE.
    eoddata1__ArrayOfSYMBOLCHANGE*       SYMBOLCHANGES                  0;	///< Optional element.
/// Element "NEWSLIST" of XSD type "http://ws.eoddata.com/Data":ArrayOfNEWS.
    eoddata1__ArrayOfNEWS*               NEWSLIST                       0;	///< Optional element.
/// Element "CHART" of XSD type xs:string.
    std::string*                         CHART                          0;	///< Optional element.
/// Element "MEMBERSHIP" of XSD type xs:string.
    std::string*                         MEMBERSHIP                     0;	///< Optional element.
/// Element "VERSION" of XSD type xs:string.
    std::string*                         VERSION                        0;	///< Optional element.
/// Element "MONTHS" of XSD type xs:string.
    std::string*                         MONTHS                         0;	///< Optional element.
/// Element "DATAFORMATS" of XSD type "http://ws.eoddata.com/Data":ArrayOfDATAFORMAT.
    eoddata1__ArrayOfDATAFORMAT*         DATAFORMATS                    0;	///< Optional element.
/// Attribute "Source" of XSD type xs:string.
   @std::string*                         Source                         0;	///< Optional attribute.
/// Attribute "Message" of XSD type xs:string.
   @std::string*                         Message                        0;	///< Optional attribute.
/// Attribute "Date" of XSD type xs:dateTime.
   @time_t                               Date                           1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://ws.eoddata.com/Data":EXCHANGE is a complexType.
///
/// class eoddata1__EXCHANGE operations:
/// - eoddata1__EXCHANGE* soap_new_eoddata1__EXCHANGE(soap*) allocate
/// - eoddata1__EXCHANGE* soap_new_eoddata1__EXCHANGE(soap*, int num) allocate array
/// - eoddata1__EXCHANGE* soap_new_req_eoddata1__EXCHANGE(soap*, ...) allocate, set required members
/// - eoddata1__EXCHANGE* soap_new_set_eoddata1__EXCHANGE(soap*, ...) allocate, set all public members
/// - eoddata1__EXCHANGE::soap_default(soap*) reset members to default
/// - int soap_read_eoddata1__EXCHANGE(soap*, eoddata1__EXCHANGE*) deserialize from a stream
/// - int soap_write_eoddata1__EXCHANGE(soap*, eoddata1__EXCHANGE*) serialize to a stream
/// - eoddata1__EXCHANGE* eoddata1__EXCHANGE::soap_dup(soap*) returns deep copy of eoddata1__EXCHANGE, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - eoddata1__EXCHANGE::soap_del() deep deletes eoddata1__EXCHANGE data members, use only after eoddata1__EXCHANGE::soap_dup(NULL) (use soapcpp2 -Ed)
class eoddata1__EXCHANGE
{ public:
/// Attribute "Code" of XSD type xs:string.
   @std::string*                         Code                           0;	///< Optional attribute.
/// Attribute "Name" of XSD type xs:string.
   @std::string*                         Name                           0;	///< Optional attribute.
/// Attribute "LastTradeDateTime" of XSD type xs:dateTime.
   @time_t                               LastTradeDateTime              1;	///< Required attribute.
/// Attribute "Country" of XSD type xs:string.
   @std::string*                         Country                        0;	///< Optional attribute.
/// Attribute "Currency" of XSD type xs:string.
   @std::string*                         Currency                       0;	///< Optional attribute.
/// Attribute "Advances" of XSD type xs:int.
   @int                                  Advances                       1;	///< Required attribute.
/// Attribute "Declines" of XSD type xs:int.
   @int                                  Declines                       1;	///< Required attribute.
/// Attribute "Suffix" of XSD type xs:string.
   @std::string*                         Suffix                         0;	///< Optional attribute.
/// Attribute "TimeZone" of XSD type xs:string.
   @std::string*                         TimeZone                       0;	///< Optional attribute.
/// Attribute "IsIntraday" of XSD type xs:boolean.
   @bool                                 IsIntraday                     1;	///< Required attribute.
/// Attribute "IntradayStartDate" of XSD type xs:dateTime.
   @time_t                               IntradayStartDate              1;	///< Required attribute.
/// Attribute "HasIntradayProduct" of XSD type xs:boolean.
   @bool                                 HasIntradayProduct             1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://ws.eoddata.com/Data":ArrayOfEXCHANGE is a complexType.
///
/// class eoddata1__ArrayOfEXCHANGE operations:
/// - eoddata1__ArrayOfEXCHANGE* soap_new_eoddata1__ArrayOfEXCHANGE(soap*) allocate
/// - eoddata1__ArrayOfEXCHANGE* soap_new_eoddata1__ArrayOfEXCHANGE(soap*, int num) allocate array
/// - eoddata1__ArrayOfEXCHANGE* soap_new_req_eoddata1__ArrayOfEXCHANGE(soap*, ...) allocate, set required members
/// - eoddata1__ArrayOfEXCHANGE* soap_new_set_eoddata1__ArrayOfEXCHANGE(soap*, ...) allocate, set all public members
/// - eoddata1__ArrayOfEXCHANGE::soap_default(soap*) reset members to default
/// - int soap_read_eoddata1__ArrayOfEXCHANGE(soap*, eoddata1__ArrayOfEXCHANGE*) deserialize from a stream
/// - int soap_write_eoddata1__ArrayOfEXCHANGE(soap*, eoddata1__ArrayOfEXCHANGE*) serialize to a stream
/// - eoddata1__ArrayOfEXCHANGE* eoddata1__ArrayOfEXCHANGE::soap_dup(soap*) returns deep copy of eoddata1__ArrayOfEXCHANGE, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - eoddata1__ArrayOfEXCHANGE::soap_del() deep deletes eoddata1__ArrayOfEXCHANGE data members, use only after eoddata1__ArrayOfEXCHANGE::soap_dup(NULL) (use soapcpp2 -Ed)
class eoddata1__ArrayOfEXCHANGE
{ public:
/// Vector of eoddata1__EXCHANGE* of length 0..unbounded.
    std::vector<eoddata1__EXCHANGE*    > EXCHANGE                       0;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://ws.eoddata.com/Data":SYMBOL is a complexType.
///
/// class eoddata1__SYMBOL operations:
/// - eoddata1__SYMBOL* soap_new_eoddata1__SYMBOL(soap*) allocate
/// - eoddata1__SYMBOL* soap_new_eoddata1__SYMBOL(soap*, int num) allocate array
/// - eoddata1__SYMBOL* soap_new_req_eoddata1__SYMBOL(soap*, ...) allocate, set required members
/// - eoddata1__SYMBOL* soap_new_set_eoddata1__SYMBOL(soap*, ...) allocate, set all public members
/// - eoddata1__SYMBOL::soap_default(soap*) reset members to default
/// - int soap_read_eoddata1__SYMBOL(soap*, eoddata1__SYMBOL*) deserialize from a stream
/// - int soap_write_eoddata1__SYMBOL(soap*, eoddata1__SYMBOL*) serialize to a stream
/// - eoddata1__SYMBOL* eoddata1__SYMBOL::soap_dup(soap*) returns deep copy of eoddata1__SYMBOL, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - eoddata1__SYMBOL::soap_del() deep deletes eoddata1__SYMBOL data members, use only after eoddata1__SYMBOL::soap_dup(NULL) (use soapcpp2 -Ed)
class eoddata1__SYMBOL
{ public:
/// Attribute "Code" of XSD type xs:string.
   @std::string*                         Code                           0;	///< Optional attribute.
/// Attribute "Name" of XSD type xs:string.
   @std::string*                         Name                           0;	///< Optional attribute.
/// Attribute "LongName" of XSD type xs:string.
   @std::string*                         LongName                       0;	///< Optional attribute.
/// Attribute "DateTime" of XSD type xs:dateTime.
   @time_t                               DateTime                       1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://ws.eoddata.com/Data":ArrayOfSYMBOL is a complexType.
///
/// class eoddata1__ArrayOfSYMBOL operations:
/// - eoddata1__ArrayOfSYMBOL* soap_new_eoddata1__ArrayOfSYMBOL(soap*) allocate
/// - eoddata1__ArrayOfSYMBOL* soap_new_eoddata1__ArrayOfSYMBOL(soap*, int num) allocate array
/// - eoddata1__ArrayOfSYMBOL* soap_new_req_eoddata1__ArrayOfSYMBOL(soap*, ...) allocate, set required members
/// - eoddata1__ArrayOfSYMBOL* soap_new_set_eoddata1__ArrayOfSYMBOL(soap*, ...) allocate, set all public members
/// - eoddata1__ArrayOfSYMBOL::soap_default(soap*) reset members to default
/// - int soap_read_eoddata1__ArrayOfSYMBOL(soap*, eoddata1__ArrayOfSYMBOL*) deserialize from a stream
/// - int soap_write_eoddata1__ArrayOfSYMBOL(soap*, eoddata1__ArrayOfSYMBOL*) serialize to a stream
/// - eoddata1__ArrayOfSYMBOL* eoddata1__ArrayOfSYMBOL::soap_dup(soap*) returns deep copy of eoddata1__ArrayOfSYMBOL, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - eoddata1__ArrayOfSYMBOL::soap_del() deep deletes eoddata1__ArrayOfSYMBOL data members, use only after eoddata1__ArrayOfSYMBOL::soap_dup(NULL) (use soapcpp2 -Ed)
class eoddata1__ArrayOfSYMBOL
{ public:
/// Vector of eoddata1__SYMBOL* of length 0..unbounded.
    std::vector<eoddata1__SYMBOL*      > SYMBOL                         0;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://ws.eoddata.com/Data":ArrayOfSYMBOL2 is a complexType.
///
/// class eoddata1__ArrayOfSYMBOL2 operations:
/// - eoddata1__ArrayOfSYMBOL2* soap_new_eoddata1__ArrayOfSYMBOL2(soap*) allocate
/// - eoddata1__ArrayOfSYMBOL2* soap_new_eoddata1__ArrayOfSYMBOL2(soap*, int num) allocate array
/// - eoddata1__ArrayOfSYMBOL2* soap_new_req_eoddata1__ArrayOfSYMBOL2(soap*, ...) allocate, set required members
/// - eoddata1__ArrayOfSYMBOL2* soap_new_set_eoddata1__ArrayOfSYMBOL2(soap*, ...) allocate, set all public members
/// - eoddata1__ArrayOfSYMBOL2::soap_default(soap*) reset members to default
/// - int soap_read_eoddata1__ArrayOfSYMBOL2(soap*, eoddata1__ArrayOfSYMBOL2*) deserialize from a stream
/// - int soap_write_eoddata1__ArrayOfSYMBOL2(soap*, eoddata1__ArrayOfSYMBOL2*) serialize to a stream
/// - eoddata1__ArrayOfSYMBOL2* eoddata1__ArrayOfSYMBOL2::soap_dup(soap*) returns deep copy of eoddata1__ArrayOfSYMBOL2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - eoddata1__ArrayOfSYMBOL2::soap_del() deep deletes eoddata1__ArrayOfSYMBOL2 data members, use only after eoddata1__ArrayOfSYMBOL2::soap_dup(NULL) (use soapcpp2 -Ed)
class eoddata1__ArrayOfSYMBOL2
{ public:
/// Vector of eoddata1__SYMBOL2* of length 0..unbounded.
    std::vector<eoddata1__SYMBOL2*     > SYMBOL2                        0;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://ws.eoddata.com/Data":SYMBOL2 is a complexType.
///
/// class eoddata1__SYMBOL2 operations:
/// - eoddata1__SYMBOL2* soap_new_eoddata1__SYMBOL2(soap*) allocate
/// - eoddata1__SYMBOL2* soap_new_eoddata1__SYMBOL2(soap*, int num) allocate array
/// - eoddata1__SYMBOL2* soap_new_req_eoddata1__SYMBOL2(soap*, ...) allocate, set required members
/// - eoddata1__SYMBOL2* soap_new_set_eoddata1__SYMBOL2(soap*, ...) allocate, set all public members
/// - eoddata1__SYMBOL2::soap_default(soap*) reset members to default
/// - int soap_read_eoddata1__SYMBOL2(soap*, eoddata1__SYMBOL2*) deserialize from a stream
/// - int soap_write_eoddata1__SYMBOL2(soap*, eoddata1__SYMBOL2*) serialize to a stream
/// - eoddata1__SYMBOL2* eoddata1__SYMBOL2::soap_dup(soap*) returns deep copy of eoddata1__SYMBOL2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - eoddata1__SYMBOL2::soap_del() deep deletes eoddata1__SYMBOL2 data members, use only after eoddata1__SYMBOL2::soap_dup(NULL) (use soapcpp2 -Ed)
class eoddata1__SYMBOL2
{ public:
/// Attribute "c" of XSD type xs:string.
   @std::string*                         c                              0;	///< Optional attribute.
/// Attribute "n" of XSD type xs:string.
   @std::string*                         n                              0;	///< Optional attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://ws.eoddata.com/Data":QUOTE is a complexType.
///
/// class eoddata1__QUOTE operations:
/// - eoddata1__QUOTE* soap_new_eoddata1__QUOTE(soap*) allocate
/// - eoddata1__QUOTE* soap_new_eoddata1__QUOTE(soap*, int num) allocate array
/// - eoddata1__QUOTE* soap_new_req_eoddata1__QUOTE(soap*, ...) allocate, set required members
/// - eoddata1__QUOTE* soap_new_set_eoddata1__QUOTE(soap*, ...) allocate, set all public members
/// - eoddata1__QUOTE::soap_default(soap*) reset members to default
/// - int soap_read_eoddata1__QUOTE(soap*, eoddata1__QUOTE*) deserialize from a stream
/// - int soap_write_eoddata1__QUOTE(soap*, eoddata1__QUOTE*) serialize to a stream
/// - eoddata1__QUOTE* eoddata1__QUOTE::soap_dup(soap*) returns deep copy of eoddata1__QUOTE, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - eoddata1__QUOTE::soap_del() deep deletes eoddata1__QUOTE data members, use only after eoddata1__QUOTE::soap_dup(NULL) (use soapcpp2 -Ed)
class eoddata1__QUOTE
{ public:
/// Attribute "Symbol" of XSD type xs:string.
   @std::string*                         Symbol                         0;	///< Optional attribute.
/// Attribute "Description" of XSD type xs:string.
   @std::string*                         Description                    0;	///< Optional attribute.
/// Attribute "Name" of XSD type xs:string.
   @std::string*                         Name                           0;	///< Optional attribute.
/// Attribute "DateTime" of XSD type xs:dateTime.
   @time_t                               DateTime                       1;	///< Required attribute.
/// Attribute "Open" of XSD type xs:double.
   @double                               Open                           1;	///< Required attribute.
/// Attribute "High" of XSD type xs:double.
   @double                               High                           1;	///< Required attribute.
/// Attribute "Low" of XSD type xs:double.
   @double                               Low                            1;	///< Required attribute.
/// Attribute "Close" of XSD type xs:double.
   @double                               Close                          1;	///< Required attribute.
/// Attribute "Volume" of XSD type xs:long.
   @LONG64                               Volume                         1;	///< Required attribute.
/// Attribute "OpenInterest" of XSD type xs:long.
   @LONG64                               OpenInterest                   1;	///< Required attribute.
/// Attribute "Previous" of XSD type xs:double.
   @double                               Previous                       1;	///< Required attribute.
/// Attribute "Change" of XSD type xs:double.
   @double                               Change                         1;	///< Required attribute.
/// Attribute "Bid" of XSD type xs:double.
   @double                               Bid                            1;	///< Required attribute.
/// Attribute "Ask" of XSD type xs:double.
   @double                               Ask                            1;	///< Required attribute.
/// Attribute "PreviousClose" of XSD type xs:double.
   @double                               PreviousClose                  1;	///< Required attribute.
/// Attribute "NextOpen" of XSD type xs:double.
   @double                               NextOpen                       1;	///< Required attribute.
/// Attribute "Modified" of XSD type xs:dateTime.
   @time_t                               Modified                       1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://ws.eoddata.com/Data":ArrayOfQUOTE is a complexType.
///
/// class eoddata1__ArrayOfQUOTE operations:
/// - eoddata1__ArrayOfQUOTE* soap_new_eoddata1__ArrayOfQUOTE(soap*) allocate
/// - eoddata1__ArrayOfQUOTE* soap_new_eoddata1__ArrayOfQUOTE(soap*, int num) allocate array
/// - eoddata1__ArrayOfQUOTE* soap_new_req_eoddata1__ArrayOfQUOTE(soap*, ...) allocate, set required members
/// - eoddata1__ArrayOfQUOTE* soap_new_set_eoddata1__ArrayOfQUOTE(soap*, ...) allocate, set all public members
/// - eoddata1__ArrayOfQUOTE::soap_default(soap*) reset members to default
/// - int soap_read_eoddata1__ArrayOfQUOTE(soap*, eoddata1__ArrayOfQUOTE*) deserialize from a stream
/// - int soap_write_eoddata1__ArrayOfQUOTE(soap*, eoddata1__ArrayOfQUOTE*) serialize to a stream
/// - eoddata1__ArrayOfQUOTE* eoddata1__ArrayOfQUOTE::soap_dup(soap*) returns deep copy of eoddata1__ArrayOfQUOTE, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - eoddata1__ArrayOfQUOTE::soap_del() deep deletes eoddata1__ArrayOfQUOTE data members, use only after eoddata1__ArrayOfQUOTE::soap_dup(NULL) (use soapcpp2 -Ed)
class eoddata1__ArrayOfQUOTE
{ public:
/// Vector of eoddata1__QUOTE* of length 0..unbounded.
    std::vector<eoddata1__QUOTE*       > QUOTE                          0;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://ws.eoddata.com/Data":ArrayOfQUOTE2 is a complexType.
///
/// class eoddata1__ArrayOfQUOTE2 operations:
/// - eoddata1__ArrayOfQUOTE2* soap_new_eoddata1__ArrayOfQUOTE2(soap*) allocate
/// - eoddata1__ArrayOfQUOTE2* soap_new_eoddata1__ArrayOfQUOTE2(soap*, int num) allocate array
/// - eoddata1__ArrayOfQUOTE2* soap_new_req_eoddata1__ArrayOfQUOTE2(soap*, ...) allocate, set required members
/// - eoddata1__ArrayOfQUOTE2* soap_new_set_eoddata1__ArrayOfQUOTE2(soap*, ...) allocate, set all public members
/// - eoddata1__ArrayOfQUOTE2::soap_default(soap*) reset members to default
/// - int soap_read_eoddata1__ArrayOfQUOTE2(soap*, eoddata1__ArrayOfQUOTE2*) deserialize from a stream
/// - int soap_write_eoddata1__ArrayOfQUOTE2(soap*, eoddata1__ArrayOfQUOTE2*) serialize to a stream
/// - eoddata1__ArrayOfQUOTE2* eoddata1__ArrayOfQUOTE2::soap_dup(soap*) returns deep copy of eoddata1__ArrayOfQUOTE2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - eoddata1__ArrayOfQUOTE2::soap_del() deep deletes eoddata1__ArrayOfQUOTE2 data members, use only after eoddata1__ArrayOfQUOTE2::soap_dup(NULL) (use soapcpp2 -Ed)
class eoddata1__ArrayOfQUOTE2
{ public:
/// Vector of eoddata1__QUOTE2* of length 0..unbounded.
    std::vector<eoddata1__QUOTE2*      > QUOTE2                         0;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://ws.eoddata.com/Data":QUOTE2 is a complexType.
///
/// class eoddata1__QUOTE2 operations:
/// - eoddata1__QUOTE2* soap_new_eoddata1__QUOTE2(soap*) allocate
/// - eoddata1__QUOTE2* soap_new_eoddata1__QUOTE2(soap*, int num) allocate array
/// - eoddata1__QUOTE2* soap_new_req_eoddata1__QUOTE2(soap*, ...) allocate, set required members
/// - eoddata1__QUOTE2* soap_new_set_eoddata1__QUOTE2(soap*, ...) allocate, set all public members
/// - eoddata1__QUOTE2::soap_default(soap*) reset members to default
/// - int soap_read_eoddata1__QUOTE2(soap*, eoddata1__QUOTE2*) deserialize from a stream
/// - int soap_write_eoddata1__QUOTE2(soap*, eoddata1__QUOTE2*) serialize to a stream
/// - eoddata1__QUOTE2* eoddata1__QUOTE2::soap_dup(soap*) returns deep copy of eoddata1__QUOTE2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - eoddata1__QUOTE2::soap_del() deep deletes eoddata1__QUOTE2 data members, use only after eoddata1__QUOTE2::soap_dup(NULL) (use soapcpp2 -Ed)
class eoddata1__QUOTE2
{ public:
/// Attribute "s" of XSD type xs:string.
   @std::string*                         s                              0;	///< Optional attribute.
/// Attribute "d" of XSD type xs:dateTime.
   @time_t                               d                              1;	///< Required attribute.
/// Attribute "o" of XSD type xs:double.
   @double                               o                              1;	///< Required attribute.
/// Attribute "h" of XSD type xs:double.
   @double                               h                              1;	///< Required attribute.
/// Attribute "l" of XSD type xs:double.
   @double                               l                              1;	///< Required attribute.
/// Attribute "c" of XSD type xs:double.
   @double                               c                              1;	///< Required attribute.
/// Attribute "v" of XSD type xs:long.
   @LONG64                               v                              1;	///< Required attribute.
/// Attribute "i" of XSD type xs:long.
   @LONG64                               i                              1;	///< Required attribute.
/// Attribute "b" of XSD type xs:double.
   @double                               b                              1;	///< Required attribute.
/// Attribute "a" of XSD type xs:double.
   @double                               a                              1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://ws.eoddata.com/Data":ArrayOfSPLIT is a complexType.
///
/// class eoddata1__ArrayOfSPLIT operations:
/// - eoddata1__ArrayOfSPLIT* soap_new_eoddata1__ArrayOfSPLIT(soap*) allocate
/// - eoddata1__ArrayOfSPLIT* soap_new_eoddata1__ArrayOfSPLIT(soap*, int num) allocate array
/// - eoddata1__ArrayOfSPLIT* soap_new_req_eoddata1__ArrayOfSPLIT(soap*, ...) allocate, set required members
/// - eoddata1__ArrayOfSPLIT* soap_new_set_eoddata1__ArrayOfSPLIT(soap*, ...) allocate, set all public members
/// - eoddata1__ArrayOfSPLIT::soap_default(soap*) reset members to default
/// - int soap_read_eoddata1__ArrayOfSPLIT(soap*, eoddata1__ArrayOfSPLIT*) deserialize from a stream
/// - int soap_write_eoddata1__ArrayOfSPLIT(soap*, eoddata1__ArrayOfSPLIT*) serialize to a stream
/// - eoddata1__ArrayOfSPLIT* eoddata1__ArrayOfSPLIT::soap_dup(soap*) returns deep copy of eoddata1__ArrayOfSPLIT, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - eoddata1__ArrayOfSPLIT::soap_del() deep deletes eoddata1__ArrayOfSPLIT data members, use only after eoddata1__ArrayOfSPLIT::soap_dup(NULL) (use soapcpp2 -Ed)
class eoddata1__ArrayOfSPLIT
{ public:
/// Vector of eoddata1__SPLIT* of length 0..unbounded.
    std::vector<eoddata1__SPLIT*       > SPLIT                          0;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://ws.eoddata.com/Data":SPLIT is a complexType.
///
/// class eoddata1__SPLIT operations:
/// - eoddata1__SPLIT* soap_new_eoddata1__SPLIT(soap*) allocate
/// - eoddata1__SPLIT* soap_new_eoddata1__SPLIT(soap*, int num) allocate array
/// - eoddata1__SPLIT* soap_new_req_eoddata1__SPLIT(soap*, ...) allocate, set required members
/// - eoddata1__SPLIT* soap_new_set_eoddata1__SPLIT(soap*, ...) allocate, set all public members
/// - eoddata1__SPLIT::soap_default(soap*) reset members to default
/// - int soap_read_eoddata1__SPLIT(soap*, eoddata1__SPLIT*) deserialize from a stream
/// - int soap_write_eoddata1__SPLIT(soap*, eoddata1__SPLIT*) serialize to a stream
/// - eoddata1__SPLIT* eoddata1__SPLIT::soap_dup(soap*) returns deep copy of eoddata1__SPLIT, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - eoddata1__SPLIT::soap_del() deep deletes eoddata1__SPLIT data members, use only after eoddata1__SPLIT::soap_dup(NULL) (use soapcpp2 -Ed)
class eoddata1__SPLIT
{ public:
/// Attribute "Exchange" of XSD type xs:string.
   @std::string*                         Exchange                       0;	///< Optional attribute.
/// Attribute "Symbol" of XSD type xs:string.
   @std::string*                         Symbol                         0;	///< Optional attribute.
/// Attribute "DateTime" of XSD type xs:dateTime.
   @time_t                               DateTime                       1;	///< Required attribute.
/// Attribute "Ratio" of XSD type xs:string.
   @std::string*                         Ratio                          0;	///< Optional attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://ws.eoddata.com/Data":ArrayOfCountryBase is a complexType.
///
/// class eoddata1__ArrayOfCountryBase operations:
/// - eoddata1__ArrayOfCountryBase* soap_new_eoddata1__ArrayOfCountryBase(soap*) allocate
/// - eoddata1__ArrayOfCountryBase* soap_new_eoddata1__ArrayOfCountryBase(soap*, int num) allocate array
/// - eoddata1__ArrayOfCountryBase* soap_new_req_eoddata1__ArrayOfCountryBase(soap*, ...) allocate, set required members
/// - eoddata1__ArrayOfCountryBase* soap_new_set_eoddata1__ArrayOfCountryBase(soap*, ...) allocate, set all public members
/// - eoddata1__ArrayOfCountryBase::soap_default(soap*) reset members to default
/// - int soap_read_eoddata1__ArrayOfCountryBase(soap*, eoddata1__ArrayOfCountryBase*) deserialize from a stream
/// - int soap_write_eoddata1__ArrayOfCountryBase(soap*, eoddata1__ArrayOfCountryBase*) serialize to a stream
/// - eoddata1__ArrayOfCountryBase* eoddata1__ArrayOfCountryBase::soap_dup(soap*) returns deep copy of eoddata1__ArrayOfCountryBase, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - eoddata1__ArrayOfCountryBase::soap_del() deep deletes eoddata1__ArrayOfCountryBase data members, use only after eoddata1__ArrayOfCountryBase::soap_dup(NULL) (use soapcpp2 -Ed)
class eoddata1__ArrayOfCountryBase
{ public:
/// Vector of eoddata1__CountryBase* of length 0..unbounded.
    std::vector<eoddata1__CountryBase* > CountryBase                    0;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://ws.eoddata.com/Data":CountryBase is a complexType.
///
/// class eoddata1__CountryBase operations:
/// - eoddata1__CountryBase* soap_new_eoddata1__CountryBase(soap*) allocate
/// - eoddata1__CountryBase* soap_new_eoddata1__CountryBase(soap*, int num) allocate array
/// - eoddata1__CountryBase* soap_new_req_eoddata1__CountryBase(soap*, ...) allocate, set required members
/// - eoddata1__CountryBase* soap_new_set_eoddata1__CountryBase(soap*, ...) allocate, set all public members
/// - eoddata1__CountryBase::soap_default(soap*) reset members to default
/// - int soap_read_eoddata1__CountryBase(soap*, eoddata1__CountryBase*) deserialize from a stream
/// - int soap_write_eoddata1__CountryBase(soap*, eoddata1__CountryBase*) serialize to a stream
/// - eoddata1__CountryBase* eoddata1__CountryBase::soap_dup(soap*) returns deep copy of eoddata1__CountryBase, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - eoddata1__CountryBase::soap_del() deep deletes eoddata1__CountryBase data members, use only after eoddata1__CountryBase::soap_dup(NULL) (use soapcpp2 -Ed)
class eoddata1__CountryBase
{ public:
/// Attribute "Code" of XSD type xs:string.
   @std::string*                         Code                           0;	///< Optional attribute.
/// Attribute "Name" of XSD type xs:string.
   @std::string*                         Name                           0;	///< Optional attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://ws.eoddata.com/Data":ArrayOfFUNDAMENTAL is a complexType.
///
/// class eoddata1__ArrayOfFUNDAMENTAL operations:
/// - eoddata1__ArrayOfFUNDAMENTAL* soap_new_eoddata1__ArrayOfFUNDAMENTAL(soap*) allocate
/// - eoddata1__ArrayOfFUNDAMENTAL* soap_new_eoddata1__ArrayOfFUNDAMENTAL(soap*, int num) allocate array
/// - eoddata1__ArrayOfFUNDAMENTAL* soap_new_req_eoddata1__ArrayOfFUNDAMENTAL(soap*, ...) allocate, set required members
/// - eoddata1__ArrayOfFUNDAMENTAL* soap_new_set_eoddata1__ArrayOfFUNDAMENTAL(soap*, ...) allocate, set all public members
/// - eoddata1__ArrayOfFUNDAMENTAL::soap_default(soap*) reset members to default
/// - int soap_read_eoddata1__ArrayOfFUNDAMENTAL(soap*, eoddata1__ArrayOfFUNDAMENTAL*) deserialize from a stream
/// - int soap_write_eoddata1__ArrayOfFUNDAMENTAL(soap*, eoddata1__ArrayOfFUNDAMENTAL*) serialize to a stream
/// - eoddata1__ArrayOfFUNDAMENTAL* eoddata1__ArrayOfFUNDAMENTAL::soap_dup(soap*) returns deep copy of eoddata1__ArrayOfFUNDAMENTAL, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - eoddata1__ArrayOfFUNDAMENTAL::soap_del() deep deletes eoddata1__ArrayOfFUNDAMENTAL data members, use only after eoddata1__ArrayOfFUNDAMENTAL::soap_dup(NULL) (use soapcpp2 -Ed)
class eoddata1__ArrayOfFUNDAMENTAL
{ public:
/// Vector of eoddata1__FUNDAMENTAL* of length 0..unbounded.
    std::vector<eoddata1__FUNDAMENTAL* > FUNDAMENTAL                    0;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://ws.eoddata.com/Data":FUNDAMENTAL is a complexType.
///
/// class eoddata1__FUNDAMENTAL operations:
/// - eoddata1__FUNDAMENTAL* soap_new_eoddata1__FUNDAMENTAL(soap*) allocate
/// - eoddata1__FUNDAMENTAL* soap_new_eoddata1__FUNDAMENTAL(soap*, int num) allocate array
/// - eoddata1__FUNDAMENTAL* soap_new_req_eoddata1__FUNDAMENTAL(soap*, ...) allocate, set required members
/// - eoddata1__FUNDAMENTAL* soap_new_set_eoddata1__FUNDAMENTAL(soap*, ...) allocate, set all public members
/// - eoddata1__FUNDAMENTAL::soap_default(soap*) reset members to default
/// - int soap_read_eoddata1__FUNDAMENTAL(soap*, eoddata1__FUNDAMENTAL*) deserialize from a stream
/// - int soap_write_eoddata1__FUNDAMENTAL(soap*, eoddata1__FUNDAMENTAL*) serialize to a stream
/// - eoddata1__FUNDAMENTAL* eoddata1__FUNDAMENTAL::soap_dup(soap*) returns deep copy of eoddata1__FUNDAMENTAL, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - eoddata1__FUNDAMENTAL::soap_del() deep deletes eoddata1__FUNDAMENTAL data members, use only after eoddata1__FUNDAMENTAL::soap_dup(NULL) (use soapcpp2 -Ed)
class eoddata1__FUNDAMENTAL
{ public:
/// Attribute "Symbol" of XSD type xs:string.
   @std::string*                         Symbol                         0;	///< Optional attribute.
/// Attribute "Name" of XSD type xs:string.
   @std::string*                         Name                           0;	///< Optional attribute.
/// Attribute "Description" of XSD type xs:string.
   @std::string*                         Description                    0;	///< Optional attribute.
/// Attribute "DateTime" of XSD type xs:dateTime.
   @time_t                               DateTime                       1;	///< Required attribute.
/// Attribute "Industry" of XSD type xs:string.
   @std::string*                         Industry                       0;	///< Optional attribute.
/// Attribute "Sector" of XSD type xs:string.
   @std::string*                         Sector                         0;	///< Optional attribute.
/// Attribute "Shares" of XSD type xs:long.
   @LONG64                               Shares                         1;	///< Required attribute.
/// Attribute "MarketCap" of XSD type xs:long.
   @LONG64                               MarketCap                      1;	///< Required attribute.
/// Attribute "PE" of XSD type xs:double.
   @double                               PE                             1;	///< Required attribute.
/// Attribute "EPS" of XSD type xs:double.
   @double                               EPS                            1;	///< Required attribute.
/// Attribute "NTA" of XSD type xs:double.
   @double                               NTA                            1;	///< Required attribute.
/// Attribute "DivYield" of XSD type xs:double.
   @double                               DivYield                       1;	///< Required attribute.
/// Attribute "Dividend" of XSD type xs:double.
   @double                               Dividend                       1;	///< Required attribute.
/// Attribute "DividendDate" of XSD type xs:dateTime.
   @time_t                               DividendDate                   1;	///< Required attribute.
/// Attribute "DPS" of XSD type xs:double.
   @double                               DPS                            1;	///< Required attribute.
/// Attribute "ImputationCredits" of XSD type xs:double.
   @double                               ImputationCredits              1;	///< Required attribute.
/// Attribute "EBITDA" of XSD type xs:double.
   @double                               EBITDA                         1;	///< Required attribute.
/// Attribute "PEG" of XSD type xs:double.
   @double                               PEG                            1;	///< Required attribute.
/// Attribute "PtS" of XSD type xs:double.
   @double                               PtS                            1;	///< Required attribute.
/// Attribute "PtB" of XSD type xs:double.
   @double                               PtB                            1;	///< Required attribute.
/// Attribute "Yield" of XSD type xs:double.
   @double                               Yield                          1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://ws.eoddata.com/Data":ArrayOfTECHNICAL is a complexType.
///
/// class eoddata1__ArrayOfTECHNICAL operations:
/// - eoddata1__ArrayOfTECHNICAL* soap_new_eoddata1__ArrayOfTECHNICAL(soap*) allocate
/// - eoddata1__ArrayOfTECHNICAL* soap_new_eoddata1__ArrayOfTECHNICAL(soap*, int num) allocate array
/// - eoddata1__ArrayOfTECHNICAL* soap_new_req_eoddata1__ArrayOfTECHNICAL(soap*, ...) allocate, set required members
/// - eoddata1__ArrayOfTECHNICAL* soap_new_set_eoddata1__ArrayOfTECHNICAL(soap*, ...) allocate, set all public members
/// - eoddata1__ArrayOfTECHNICAL::soap_default(soap*) reset members to default
/// - int soap_read_eoddata1__ArrayOfTECHNICAL(soap*, eoddata1__ArrayOfTECHNICAL*) deserialize from a stream
/// - int soap_write_eoddata1__ArrayOfTECHNICAL(soap*, eoddata1__ArrayOfTECHNICAL*) serialize to a stream
/// - eoddata1__ArrayOfTECHNICAL* eoddata1__ArrayOfTECHNICAL::soap_dup(soap*) returns deep copy of eoddata1__ArrayOfTECHNICAL, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - eoddata1__ArrayOfTECHNICAL::soap_del() deep deletes eoddata1__ArrayOfTECHNICAL data members, use only after eoddata1__ArrayOfTECHNICAL::soap_dup(NULL) (use soapcpp2 -Ed)
class eoddata1__ArrayOfTECHNICAL
{ public:
/// Vector of eoddata1__TECHNICAL* of length 0..unbounded.
    std::vector<eoddata1__TECHNICAL*   > TECHNICAL                      0;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://ws.eoddata.com/Data":TECHNICAL is a complexType.
///
/// class eoddata1__TECHNICAL operations:
/// - eoddata1__TECHNICAL* soap_new_eoddata1__TECHNICAL(soap*) allocate
/// - eoddata1__TECHNICAL* soap_new_eoddata1__TECHNICAL(soap*, int num) allocate array
/// - eoddata1__TECHNICAL* soap_new_req_eoddata1__TECHNICAL(soap*, ...) allocate, set required members
/// - eoddata1__TECHNICAL* soap_new_set_eoddata1__TECHNICAL(soap*, ...) allocate, set all public members
/// - eoddata1__TECHNICAL::soap_default(soap*) reset members to default
/// - int soap_read_eoddata1__TECHNICAL(soap*, eoddata1__TECHNICAL*) deserialize from a stream
/// - int soap_write_eoddata1__TECHNICAL(soap*, eoddata1__TECHNICAL*) serialize to a stream
/// - eoddata1__TECHNICAL* eoddata1__TECHNICAL::soap_dup(soap*) returns deep copy of eoddata1__TECHNICAL, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - eoddata1__TECHNICAL::soap_del() deep deletes eoddata1__TECHNICAL data members, use only after eoddata1__TECHNICAL::soap_dup(NULL) (use soapcpp2 -Ed)
class eoddata1__TECHNICAL
{ public:
/// Attribute "Symbol" of XSD type xs:string.
   @std::string*                         Symbol                         0;	///< Optional attribute.
/// Attribute "Name" of XSD type xs:string.
   @std::string*                         Name                           0;	///< Optional attribute.
/// Attribute "Description" of XSD type xs:string.
   @std::string*                         Description                    0;	///< Optional attribute.
/// Attribute "DateTime" of XSD type xs:dateTime.
   @time_t                               DateTime                       1;	///< Required attribute.
/// Attribute "Previous" of XSD type xs:double.
   @double                               Previous                       1;	///< Required attribute.
/// Attribute "Change" of XSD type xs:double.
   @double                               Change                         1;	///< Required attribute.
/// Attribute "MA1" of XSD type xs:int.
   @int                                  MA1                            1;	///< Required attribute.
/// Attribute "MA2" of XSD type xs:int.
   @int                                  MA2                            1;	///< Required attribute.
/// Attribute "MA5" of XSD type xs:int.
   @int                                  MA5                            1;	///< Required attribute.
/// Attribute "MA20" of XSD type xs:int.
   @int                                  MA20                           1;	///< Required attribute.
/// Attribute "MA50" of XSD type xs:int.
   @int                                  MA50                           1;	///< Required attribute.
/// Attribute "MA100" of XSD type xs:int.
   @int                                  MA100                          1;	///< Required attribute.
/// Attribute "MA200" of XSD type xs:int.
   @int                                  MA200                          1;	///< Required attribute.
/// Attribute "MAPercent" of XSD type xs:double.
   @double                               MAPercent                      1;	///< Required attribute.
/// Attribute "MAReturn" of XSD type xs:double.
   @double                               MAReturn                       1;	///< Required attribute.
/// Attribute "VolumeChange" of XSD type xs:long.
   @LONG64                               VolumeChange                   1;	///< Required attribute.
/// Attribute "ThreeMonthChange" of XSD type xs:double.
   @double                               ThreeMonthChange               1;	///< Required attribute.
/// Attribute "SixMonthChange" of XSD type xs:double.
   @double                               SixMonthChange                 1;	///< Required attribute.
/// Attribute "WeekHigh" of XSD type xs:double.
   @double                               WeekHigh                       1;	///< Required attribute.
/// Attribute "WeekLow" of XSD type xs:double.
   @double                               WeekLow                        1;	///< Required attribute.
/// Attribute "WeekChange" of XSD type xs:double.
   @double                               WeekChange                     1;	///< Required attribute.
/// Attribute "AvgWeekChange" of XSD type xs:double.
   @double                               AvgWeekChange                  1;	///< Required attribute.
/// Attribute "AvgWeekVolume" of XSD type xs:double.
   @double                               AvgWeekVolume                  1;	///< Required attribute.
/// Attribute "WeekVolume" of XSD type xs:double.
   @double                               WeekVolume                     1;	///< Required attribute.
/// Attribute "MonthHigh" of XSD type xs:double.
   @double                               MonthHigh                      1;	///< Required attribute.
/// Attribute "MonthLow" of XSD type xs:double.
   @double                               MonthLow                       1;	///< Required attribute.
/// Attribute "MonthChange" of XSD type xs:double.
   @double                               MonthChange                    1;	///< Required attribute.
/// Attribute "AvgMonthChange" of XSD type xs:double.
   @double                               AvgMonthChange                 1;	///< Required attribute.
/// Attribute "AvgMonthVolume" of XSD type xs:double.
   @double                               AvgMonthVolume                 1;	///< Required attribute.
/// Attribute "MonthVolume" of XSD type xs:double.
   @double                               MonthVolume                    1;	///< Required attribute.
/// Attribute "YearHigh" of XSD type xs:double.
   @double                               YearHigh                       1;	///< Required attribute.
/// Attribute "YearLow" of XSD type xs:double.
   @double                               YearLow                        1;	///< Required attribute.
/// Attribute "YearChange" of XSD type xs:double.
   @double                               YearChange                     1;	///< Required attribute.
/// Attribute "AvgYearChange" of XSD type xs:double.
   @double                               AvgYearChange                  1;	///< Required attribute.
/// Attribute "AvgYearVolume" of XSD type xs:double.
   @double                               AvgYearVolume                  1;	///< Required attribute.
/// Attribute "YTDChange" of XSD type xs:double.
   @double                               YTDChange                      1;	///< Required attribute.
/// Attribute "RSI14" of XSD type xs:double.
   @double                               RSI14                          1;	///< Required attribute.
/// Attribute "STO9" of XSD type xs:double.
   @double                               STO9                           1;	///< Required attribute.
/// Attribute "WPR14" of XSD type xs:double.
   @double                               WPR14                          1;	///< Required attribute.
/// Attribute "MTM14" of XSD type xs:double.
   @double                               MTM14                          1;	///< Required attribute.
/// Attribute "ROC14" of XSD type xs:double.
   @double                               ROC14                          1;	///< Required attribute.
/// Attribute "PTC" of XSD type xs:long.
   @LONG64                               PTC                            1;	///< Required attribute.
/// Attribute "SAR" of XSD type xs:double.
   @double                               SAR                            1;	///< Required attribute.
/// Attribute "Volatility" of XSD type xs:double.
   @double                               Volatility                     1;	///< Required attribute.
/// Attribute "Liquidity" of XSD type xs:double.
   @double                               Liquidity                      1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://ws.eoddata.com/Data":ArrayOfSYMBOLCHANGE is a complexType.
///
/// class eoddata1__ArrayOfSYMBOLCHANGE operations:
/// - eoddata1__ArrayOfSYMBOLCHANGE* soap_new_eoddata1__ArrayOfSYMBOLCHANGE(soap*) allocate
/// - eoddata1__ArrayOfSYMBOLCHANGE* soap_new_eoddata1__ArrayOfSYMBOLCHANGE(soap*, int num) allocate array
/// - eoddata1__ArrayOfSYMBOLCHANGE* soap_new_req_eoddata1__ArrayOfSYMBOLCHANGE(soap*, ...) allocate, set required members
/// - eoddata1__ArrayOfSYMBOLCHANGE* soap_new_set_eoddata1__ArrayOfSYMBOLCHANGE(soap*, ...) allocate, set all public members
/// - eoddata1__ArrayOfSYMBOLCHANGE::soap_default(soap*) reset members to default
/// - int soap_read_eoddata1__ArrayOfSYMBOLCHANGE(soap*, eoddata1__ArrayOfSYMBOLCHANGE*) deserialize from a stream
/// - int soap_write_eoddata1__ArrayOfSYMBOLCHANGE(soap*, eoddata1__ArrayOfSYMBOLCHANGE*) serialize to a stream
/// - eoddata1__ArrayOfSYMBOLCHANGE* eoddata1__ArrayOfSYMBOLCHANGE::soap_dup(soap*) returns deep copy of eoddata1__ArrayOfSYMBOLCHANGE, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - eoddata1__ArrayOfSYMBOLCHANGE::soap_del() deep deletes eoddata1__ArrayOfSYMBOLCHANGE data members, use only after eoddata1__ArrayOfSYMBOLCHANGE::soap_dup(NULL) (use soapcpp2 -Ed)
class eoddata1__ArrayOfSYMBOLCHANGE
{ public:
/// Vector of eoddata1__SYMBOLCHANGE* of length 0..unbounded.
    std::vector<eoddata1__SYMBOLCHANGE*> SYMBOLCHANGE                   0;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://ws.eoddata.com/Data":SYMBOLCHANGE is a complexType.
///
/// class eoddata1__SYMBOLCHANGE operations:
/// - eoddata1__SYMBOLCHANGE* soap_new_eoddata1__SYMBOLCHANGE(soap*) allocate
/// - eoddata1__SYMBOLCHANGE* soap_new_eoddata1__SYMBOLCHANGE(soap*, int num) allocate array
/// - eoddata1__SYMBOLCHANGE* soap_new_req_eoddata1__SYMBOLCHANGE(soap*, ...) allocate, set required members
/// - eoddata1__SYMBOLCHANGE* soap_new_set_eoddata1__SYMBOLCHANGE(soap*, ...) allocate, set all public members
/// - eoddata1__SYMBOLCHANGE::soap_default(soap*) reset members to default
/// - int soap_read_eoddata1__SYMBOLCHANGE(soap*, eoddata1__SYMBOLCHANGE*) deserialize from a stream
/// - int soap_write_eoddata1__SYMBOLCHANGE(soap*, eoddata1__SYMBOLCHANGE*) serialize to a stream
/// - eoddata1__SYMBOLCHANGE* eoddata1__SYMBOLCHANGE::soap_dup(soap*) returns deep copy of eoddata1__SYMBOLCHANGE, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - eoddata1__SYMBOLCHANGE::soap_del() deep deletes eoddata1__SYMBOLCHANGE data members, use only after eoddata1__SYMBOLCHANGE::soap_dup(NULL) (use soapcpp2 -Ed)
class eoddata1__SYMBOLCHANGE
{ public:
/// Attribute "DateTime" of XSD type xs:dateTime.
   @time_t                               DateTime                       1;	///< Required attribute.
/// Attribute "OldSymbol" of XSD type xs:string.
   @std::string*                         OldSymbol                      0;	///< Optional attribute.
/// Attribute "NewSymbol" of XSD type xs:string.
   @std::string*                         NewSymbol                      0;	///< Optional attribute.
/// Attribute "ExchangeCode" of XSD type xs:string.
   @std::string*                         ExchangeCode                   0;	///< Optional attribute.
/// Attribute "NewExchangeCode" of XSD type xs:string.
   @std::string*                         NewExchangeCode                0;	///< Optional attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://ws.eoddata.com/Data":ArrayOfNEWS is a complexType.
///
/// class eoddata1__ArrayOfNEWS operations:
/// - eoddata1__ArrayOfNEWS* soap_new_eoddata1__ArrayOfNEWS(soap*) allocate
/// - eoddata1__ArrayOfNEWS* soap_new_eoddata1__ArrayOfNEWS(soap*, int num) allocate array
/// - eoddata1__ArrayOfNEWS* soap_new_req_eoddata1__ArrayOfNEWS(soap*, ...) allocate, set required members
/// - eoddata1__ArrayOfNEWS* soap_new_set_eoddata1__ArrayOfNEWS(soap*, ...) allocate, set all public members
/// - eoddata1__ArrayOfNEWS::soap_default(soap*) reset members to default
/// - int soap_read_eoddata1__ArrayOfNEWS(soap*, eoddata1__ArrayOfNEWS*) deserialize from a stream
/// - int soap_write_eoddata1__ArrayOfNEWS(soap*, eoddata1__ArrayOfNEWS*) serialize to a stream
/// - eoddata1__ArrayOfNEWS* eoddata1__ArrayOfNEWS::soap_dup(soap*) returns deep copy of eoddata1__ArrayOfNEWS, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - eoddata1__ArrayOfNEWS::soap_del() deep deletes eoddata1__ArrayOfNEWS data members, use only after eoddata1__ArrayOfNEWS::soap_dup(NULL) (use soapcpp2 -Ed)
class eoddata1__ArrayOfNEWS
{ public:
/// Vector of eoddata1__NEWS* of length 0..unbounded.
    std::vector<eoddata1__NEWS*        > NEWS                           0;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://ws.eoddata.com/Data":NEWS is a complexType.
///
/// class eoddata1__NEWS operations:
/// - eoddata1__NEWS* soap_new_eoddata1__NEWS(soap*) allocate
/// - eoddata1__NEWS* soap_new_eoddata1__NEWS(soap*, int num) allocate array
/// - eoddata1__NEWS* soap_new_req_eoddata1__NEWS(soap*, ...) allocate, set required members
/// - eoddata1__NEWS* soap_new_set_eoddata1__NEWS(soap*, ...) allocate, set all public members
/// - eoddata1__NEWS::soap_default(soap*) reset members to default
/// - int soap_read_eoddata1__NEWS(soap*, eoddata1__NEWS*) deserialize from a stream
/// - int soap_write_eoddata1__NEWS(soap*, eoddata1__NEWS*) serialize to a stream
/// - eoddata1__NEWS* eoddata1__NEWS::soap_dup(soap*) returns deep copy of eoddata1__NEWS, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - eoddata1__NEWS::soap_del() deep deletes eoddata1__NEWS data members, use only after eoddata1__NEWS::soap_dup(NULL) (use soapcpp2 -Ed)
class eoddata1__NEWS
{ public:
/// Attribute "Exchange" of XSD type xs:string.
   @std::string*                         Exchange                       0;	///< Optional attribute.
/// Attribute "Symbol" of XSD type xs:string.
   @std::string*                         Symbol                         0;	///< Optional attribute.
/// Attribute "Id" of XSD type xs:long.
   @LONG64                               Id                             1;	///< Required attribute.
/// Attribute "SourceKey" of XSD type xs:string.
   @std::string*                         SourceKey                      0;	///< Optional attribute.
/// Attribute "DateTime" of XSD type xs:dateTime.
   @time_t                               DateTime                       1;	///< Required attribute.
/// Attribute "Headline" of XSD type xs:string.
   @std::string*                         Headline                       0;	///< Optional attribute.
/// Attribute "Introduction" of XSD type xs:string.
   @std::string*                         Introduction                   0;	///< Optional attribute.
/// Attribute "Story" of XSD type xs:string.
   @std::string*                         Story                          0;	///< Optional attribute.
/// Attribute "Caption" of XSD type xs:string.
   @std::string*                         Caption                        0;	///< Optional attribute.
/// Attribute "Views" of XSD type xs:int.
   @int                                  Views                          1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://ws.eoddata.com/Data":ArrayOfDATAFORMAT is a complexType.
///
/// class eoddata1__ArrayOfDATAFORMAT operations:
/// - eoddata1__ArrayOfDATAFORMAT* soap_new_eoddata1__ArrayOfDATAFORMAT(soap*) allocate
/// - eoddata1__ArrayOfDATAFORMAT* soap_new_eoddata1__ArrayOfDATAFORMAT(soap*, int num) allocate array
/// - eoddata1__ArrayOfDATAFORMAT* soap_new_req_eoddata1__ArrayOfDATAFORMAT(soap*, ...) allocate, set required members
/// - eoddata1__ArrayOfDATAFORMAT* soap_new_set_eoddata1__ArrayOfDATAFORMAT(soap*, ...) allocate, set all public members
/// - eoddata1__ArrayOfDATAFORMAT::soap_default(soap*) reset members to default
/// - int soap_read_eoddata1__ArrayOfDATAFORMAT(soap*, eoddata1__ArrayOfDATAFORMAT*) deserialize from a stream
/// - int soap_write_eoddata1__ArrayOfDATAFORMAT(soap*, eoddata1__ArrayOfDATAFORMAT*) serialize to a stream
/// - eoddata1__ArrayOfDATAFORMAT* eoddata1__ArrayOfDATAFORMAT::soap_dup(soap*) returns deep copy of eoddata1__ArrayOfDATAFORMAT, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - eoddata1__ArrayOfDATAFORMAT::soap_del() deep deletes eoddata1__ArrayOfDATAFORMAT data members, use only after eoddata1__ArrayOfDATAFORMAT::soap_dup(NULL) (use soapcpp2 -Ed)
class eoddata1__ArrayOfDATAFORMAT
{ public:
/// Vector of eoddata1__DATAFORMAT* of length 0..unbounded.
    std::vector<eoddata1__DATAFORMAT*  > DATAFORMAT                     0;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://ws.eoddata.com/Data":DATAFORMAT is a complexType.
///
/// class eoddata1__DATAFORMAT operations:
/// - eoddata1__DATAFORMAT* soap_new_eoddata1__DATAFORMAT(soap*) allocate
/// - eoddata1__DATAFORMAT* soap_new_eoddata1__DATAFORMAT(soap*, int num) allocate array
/// - eoddata1__DATAFORMAT* soap_new_req_eoddata1__DATAFORMAT(soap*, ...) allocate, set required members
/// - eoddata1__DATAFORMAT* soap_new_set_eoddata1__DATAFORMAT(soap*, ...) allocate, set all public members
/// - eoddata1__DATAFORMAT::soap_default(soap*) reset members to default
/// - int soap_read_eoddata1__DATAFORMAT(soap*, eoddata1__DATAFORMAT*) deserialize from a stream
/// - int soap_write_eoddata1__DATAFORMAT(soap*, eoddata1__DATAFORMAT*) serialize to a stream
/// - eoddata1__DATAFORMAT* eoddata1__DATAFORMAT::soap_dup(soap*) returns deep copy of eoddata1__DATAFORMAT, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - eoddata1__DATAFORMAT::soap_del() deep deletes eoddata1__DATAFORMAT data members, use only after eoddata1__DATAFORMAT::soap_dup(NULL) (use soapcpp2 -Ed)
class eoddata1__DATAFORMAT
{ public:
/// Element "COLUMNS" of XSD type "http://ws.eoddata.com/Data":ArrayOfDATAFORMAT_COLUMN.
    eoddata1__ArrayOfDATAFORMAT_USCORECOLUMN*  COLUMNS                        0;	///< Optional element.
/// Attribute "Code" of XSD type xs:string.
   @std::string*                         Code                           0;	///< Optional attribute.
/// Attribute "Name" of XSD type xs:string.
   @std::string*                         Name                           0;	///< Optional attribute.
/// Attribute "Header" of XSD type xs:string.
   @std::string*                         Header                         0;	///< Optional attribute.
/// Attribute "DateFormat" of XSD type xs:string.
   @std::string*                         DateFormat                     0;	///< Optional attribute.
/// Attribute "Extension" of XSD type xs:string.
   @std::string*                         Extension                      0;	///< Optional attribute.
/// Attribute "IncludeSuffix" of XSD type xs:boolean.
   @bool                                 IncludeSuffix                  1;	///< Required attribute.
/// Attribute "TabColumnSeperator" of XSD type xs:boolean.
   @bool                                 TabColumnSeperator             1;	///< Required attribute.
/// Attribute "ColumnSeperator" of XSD type xs:string.
   @std::string*                         ColumnSeperator                0;	///< Optional attribute.
/// Attribute "TextQualifier" of XSD type xs:string.
   @std::string*                         TextQualifier                  0;	///< Optional attribute.
/// Attribute "FilenamePrefix" of XSD type xs:string.
   @std::string*                         FilenamePrefix                 0;	///< Optional attribute.
/// Attribute "FilenameExchangeCode" of XSD type xs:boolean.
   @bool                                 FilenameExchangeCode           1;	///< Required attribute.
/// Attribute "FilenameDate" of XSD type xs:boolean.
   @bool                                 FilenameDate                   1;	///< Required attribute.
/// Attribute "IncludeHeaderRow" of XSD type xs:boolean.
   @bool                                 IncludeHeaderRow               1;	///< Required attribute.
/// Attribute "HourFormat" of XSD type xs:string.
   @std::string*                         HourFormat                     0;	///< Optional attribute.
/// Attribute "DateTimeSeperator" of XSD type xs:string.
   @std::string*                         DateTimeSeperator              0;	///< Optional attribute.
/// Attribute "ExchangeFilenameFormatDate" of XSD type xs:string.
   @std::string*                         ExchangeFilenameFormatDate     0;	///< Optional attribute.
/// Attribute "ExchangeFilenameFormatDateRange" of XSD type xs:string.
   @std::string*                         ExchangeFilenameFormatDateRange 0;	///< Optional attribute.
/// Attribute "SymbolFilenameFormatDate" of XSD type xs:string.
   @std::string*                         SymbolFilenameFormatDate       0;	///< Optional attribute.
/// Attribute "SymbolFilenameFormatDateRange" of XSD type xs:string.
   @std::string*                         SymbolFilenameFormatDateRange  0;	///< Optional attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://ws.eoddata.com/Data":ArrayOfDATAFORMAT_COLUMN is a complexType.
///
/// class eoddata1__ArrayOfDATAFORMAT_USCORECOLUMN operations:
/// - eoddata1__ArrayOfDATAFORMAT_USCORECOLUMN* soap_new_eoddata1__ArrayOfDATAFORMAT_USCORECOLUMN(soap*) allocate
/// - eoddata1__ArrayOfDATAFORMAT_USCORECOLUMN* soap_new_eoddata1__ArrayOfDATAFORMAT_USCORECOLUMN(soap*, int num) allocate array
/// - eoddata1__ArrayOfDATAFORMAT_USCORECOLUMN* soap_new_req_eoddata1__ArrayOfDATAFORMAT_USCORECOLUMN(soap*, ...) allocate, set required members
/// - eoddata1__ArrayOfDATAFORMAT_USCORECOLUMN* soap_new_set_eoddata1__ArrayOfDATAFORMAT_USCORECOLUMN(soap*, ...) allocate, set all public members
/// - eoddata1__ArrayOfDATAFORMAT_USCORECOLUMN::soap_default(soap*) reset members to default
/// - int soap_read_eoddata1__ArrayOfDATAFORMAT_USCORECOLUMN(soap*, eoddata1__ArrayOfDATAFORMAT_USCORECOLUMN*) deserialize from a stream
/// - int soap_write_eoddata1__ArrayOfDATAFORMAT_USCORECOLUMN(soap*, eoddata1__ArrayOfDATAFORMAT_USCORECOLUMN*) serialize to a stream
/// - eoddata1__ArrayOfDATAFORMAT_USCORECOLUMN* eoddata1__ArrayOfDATAFORMAT_USCORECOLUMN::soap_dup(soap*) returns deep copy of eoddata1__ArrayOfDATAFORMAT_USCORECOLUMN, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - eoddata1__ArrayOfDATAFORMAT_USCORECOLUMN::soap_del() deep deletes eoddata1__ArrayOfDATAFORMAT_USCORECOLUMN data members, use only after eoddata1__ArrayOfDATAFORMAT_USCORECOLUMN::soap_dup(NULL) (use soapcpp2 -Ed)
class eoddata1__ArrayOfDATAFORMAT_USCORECOLUMN
{ public:
/// Vector of eoddata1__DATAFORMAT_USCORECOLUMN* of length 0..unbounded.
    std::vector<eoddata1__DATAFORMAT_USCORECOLUMN*> DATAFORMAT_USCORECOLUMN        0;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://ws.eoddata.com/Data":DATAFORMAT_COLUMN is a complexType.
///
/// class eoddata1__DATAFORMAT_USCORECOLUMN operations:
/// - eoddata1__DATAFORMAT_USCORECOLUMN* soap_new_eoddata1__DATAFORMAT_USCORECOLUMN(soap*) allocate
/// - eoddata1__DATAFORMAT_USCORECOLUMN* soap_new_eoddata1__DATAFORMAT_USCORECOLUMN(soap*, int num) allocate array
/// - eoddata1__DATAFORMAT_USCORECOLUMN* soap_new_req_eoddata1__DATAFORMAT_USCORECOLUMN(soap*, ...) allocate, set required members
/// - eoddata1__DATAFORMAT_USCORECOLUMN* soap_new_set_eoddata1__DATAFORMAT_USCORECOLUMN(soap*, ...) allocate, set all public members
/// - eoddata1__DATAFORMAT_USCORECOLUMN::soap_default(soap*) reset members to default
/// - int soap_read_eoddata1__DATAFORMAT_USCORECOLUMN(soap*, eoddata1__DATAFORMAT_USCORECOLUMN*) deserialize from a stream
/// - int soap_write_eoddata1__DATAFORMAT_USCORECOLUMN(soap*, eoddata1__DATAFORMAT_USCORECOLUMN*) serialize to a stream
/// - eoddata1__DATAFORMAT_USCORECOLUMN* eoddata1__DATAFORMAT_USCORECOLUMN::soap_dup(soap*) returns deep copy of eoddata1__DATAFORMAT_USCORECOLUMN, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - eoddata1__DATAFORMAT_USCORECOLUMN::soap_del() deep deletes eoddata1__DATAFORMAT_USCORECOLUMN data members, use only after eoddata1__DATAFORMAT_USCORECOLUMN::soap_dup(NULL) (use soapcpp2 -Ed)
class eoddata1__DATAFORMAT_USCORECOLUMN
{ public:
/// Attribute "SortOrder" of XSD type xs:int.
   @int                                  SortOrder                      1;	///< Required attribute.
/// Attribute "Code" of XSD type xs:string.
   @std::string*                         Code                           0;	///< Optional attribute.
/// Attribute "DataFormat" of XSD type xs:string.
   @std::string*                         DataFormat                     0;	///< Optional attribute.
/// Attribute "ColumnCode" of XSD type xs:string.
   @std::string*                         ColumnCode                     0;	///< Optional attribute.
/// Attribute "ColumnName" of XSD type xs:string.
   @std::string*                         ColumnName                     0;	///< Optional attribute.
/// Attribute "ColumnTypeId" of XSD type xs:int.
   @int                                  ColumnTypeId                   1;	///< Required attribute.
/// Attribute "ColumnType" of XSD type xs:string.
   @std::string*                         ColumnType                     0;	///< Optional attribute.
/// Attribute "Header" of XSD type xs:string.
   @std::string*                         Header                         0;	///< Optional attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":Login
/// @brief "http://ws.eoddata.com/Data":Login is a complexType.
///
/// class _eoddata1__Login operations:
/// - _eoddata1__Login* soap_new__eoddata1__Login(soap*) allocate
/// - _eoddata1__Login* soap_new__eoddata1__Login(soap*, int num) allocate array
/// - _eoddata1__Login* soap_new_req__eoddata1__Login(soap*, ...) allocate, set required members
/// - _eoddata1__Login* soap_new_set__eoddata1__Login(soap*, ...) allocate, set all public members
/// - _eoddata1__Login::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__Login(soap*, _eoddata1__Login*) deserialize from a stream
/// - int soap_write__eoddata1__Login(soap*, _eoddata1__Login*) serialize to a stream
/// - _eoddata1__Login* _eoddata1__Login::soap_dup(soap*) returns deep copy of _eoddata1__Login, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__Login::soap_del() deep deletes _eoddata1__Login data members, use only after _eoddata1__Login::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__Login
{ public:
/// Element "Username" of XSD type xs:string.
    std::string*                         Username                       0;	///< Optional element.
/// Element "Password" of XSD type xs:string.
    std::string*                         Password                       0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":LoginResponse
/// @brief "http://ws.eoddata.com/Data":LoginResponse is a complexType.
///
/// class _eoddata1__LoginResponse operations:
/// - _eoddata1__LoginResponse* soap_new__eoddata1__LoginResponse(soap*) allocate
/// - _eoddata1__LoginResponse* soap_new__eoddata1__LoginResponse(soap*, int num) allocate array
/// - _eoddata1__LoginResponse* soap_new_req__eoddata1__LoginResponse(soap*, ...) allocate, set required members
/// - _eoddata1__LoginResponse* soap_new_set__eoddata1__LoginResponse(soap*, ...) allocate, set all public members
/// - _eoddata1__LoginResponse::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__LoginResponse(soap*, _eoddata1__LoginResponse*) deserialize from a stream
/// - int soap_write__eoddata1__LoginResponse(soap*, _eoddata1__LoginResponse*) serialize to a stream
/// - _eoddata1__LoginResponse* _eoddata1__LoginResponse::soap_dup(soap*) returns deep copy of _eoddata1__LoginResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__LoginResponse::soap_del() deep deletes _eoddata1__LoginResponse data members, use only after _eoddata1__LoginResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__LoginResponse
{ public:
/// Element "LoginResult" of XSD type "http://ws.eoddata.com/Data":LOGINRESPONSE.
    eoddata1__LOGINRESPONSE*             LoginResult                    0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":Login2
/// @brief "http://ws.eoddata.com/Data":Login2 is a complexType.
///
/// class _eoddata1__Login2 operations:
/// - _eoddata1__Login2* soap_new__eoddata1__Login2(soap*) allocate
/// - _eoddata1__Login2* soap_new__eoddata1__Login2(soap*, int num) allocate array
/// - _eoddata1__Login2* soap_new_req__eoddata1__Login2(soap*, ...) allocate, set required members
/// - _eoddata1__Login2* soap_new_set__eoddata1__Login2(soap*, ...) allocate, set all public members
/// - _eoddata1__Login2::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__Login2(soap*, _eoddata1__Login2*) deserialize from a stream
/// - int soap_write__eoddata1__Login2(soap*, _eoddata1__Login2*) serialize to a stream
/// - _eoddata1__Login2* _eoddata1__Login2::soap_dup(soap*) returns deep copy of _eoddata1__Login2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__Login2::soap_del() deep deletes _eoddata1__Login2 data members, use only after _eoddata1__Login2::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__Login2
{ public:
/// Element "Username" of XSD type xs:string.
    std::string*                         Username                       0;	///< Optional element.
/// Element "Password" of XSD type xs:string.
    std::string*                         Password                       0;	///< Optional element.
/// Element "Version" of XSD type xs:string.
    std::string*                         Version                        0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":Login2Response
/// @brief "http://ws.eoddata.com/Data":Login2Response is a complexType.
///
/// class _eoddata1__Login2Response operations:
/// - _eoddata1__Login2Response* soap_new__eoddata1__Login2Response(soap*) allocate
/// - _eoddata1__Login2Response* soap_new__eoddata1__Login2Response(soap*, int num) allocate array
/// - _eoddata1__Login2Response* soap_new_req__eoddata1__Login2Response(soap*, ...) allocate, set required members
/// - _eoddata1__Login2Response* soap_new_set__eoddata1__Login2Response(soap*, ...) allocate, set all public members
/// - _eoddata1__Login2Response::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__Login2Response(soap*, _eoddata1__Login2Response*) deserialize from a stream
/// - int soap_write__eoddata1__Login2Response(soap*, _eoddata1__Login2Response*) serialize to a stream
/// - _eoddata1__Login2Response* _eoddata1__Login2Response::soap_dup(soap*) returns deep copy of _eoddata1__Login2Response, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__Login2Response::soap_del() deep deletes _eoddata1__Login2Response data members, use only after _eoddata1__Login2Response::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__Login2Response
{ public:
/// Element "Login2Result" of XSD type "http://ws.eoddata.com/Data":LOGINRESPONSE.
    eoddata1__LOGINRESPONSE*             Login2Result                   0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":Membership
/// @brief "http://ws.eoddata.com/Data":Membership is a complexType.
///
/// class _eoddata1__Membership operations:
/// - _eoddata1__Membership* soap_new__eoddata1__Membership(soap*) allocate
/// - _eoddata1__Membership* soap_new__eoddata1__Membership(soap*, int num) allocate array
/// - _eoddata1__Membership* soap_new_req__eoddata1__Membership(soap*, ...) allocate, set required members
/// - _eoddata1__Membership* soap_new_set__eoddata1__Membership(soap*, ...) allocate, set all public members
/// - _eoddata1__Membership::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__Membership(soap*, _eoddata1__Membership*) deserialize from a stream
/// - int soap_write__eoddata1__Membership(soap*, _eoddata1__Membership*) serialize to a stream
/// - _eoddata1__Membership* _eoddata1__Membership::soap_dup(soap*) returns deep copy of _eoddata1__Membership, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__Membership::soap_del() deep deletes _eoddata1__Membership data members, use only after _eoddata1__Membership::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__Membership
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":MembershipResponse
/// @brief "http://ws.eoddata.com/Data":MembershipResponse is a complexType.
///
/// class _eoddata1__MembershipResponse operations:
/// - _eoddata1__MembershipResponse* soap_new__eoddata1__MembershipResponse(soap*) allocate
/// - _eoddata1__MembershipResponse* soap_new__eoddata1__MembershipResponse(soap*, int num) allocate array
/// - _eoddata1__MembershipResponse* soap_new_req__eoddata1__MembershipResponse(soap*, ...) allocate, set required members
/// - _eoddata1__MembershipResponse* soap_new_set__eoddata1__MembershipResponse(soap*, ...) allocate, set all public members
/// - _eoddata1__MembershipResponse::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__MembershipResponse(soap*, _eoddata1__MembershipResponse*) deserialize from a stream
/// - int soap_write__eoddata1__MembershipResponse(soap*, _eoddata1__MembershipResponse*) serialize to a stream
/// - _eoddata1__MembershipResponse* _eoddata1__MembershipResponse::soap_dup(soap*) returns deep copy of _eoddata1__MembershipResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__MembershipResponse::soap_del() deep deletes _eoddata1__MembershipResponse data members, use only after _eoddata1__MembershipResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__MembershipResponse
{ public:
/// Element "MembershipResult" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    eoddata1__RESPONSE*                  MembershipResult               0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":ExchangeList
/// @brief "http://ws.eoddata.com/Data":ExchangeList is a complexType.
///
/// class _eoddata1__ExchangeList operations:
/// - _eoddata1__ExchangeList* soap_new__eoddata1__ExchangeList(soap*) allocate
/// - _eoddata1__ExchangeList* soap_new__eoddata1__ExchangeList(soap*, int num) allocate array
/// - _eoddata1__ExchangeList* soap_new_req__eoddata1__ExchangeList(soap*, ...) allocate, set required members
/// - _eoddata1__ExchangeList* soap_new_set__eoddata1__ExchangeList(soap*, ...) allocate, set all public members
/// - _eoddata1__ExchangeList::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__ExchangeList(soap*, _eoddata1__ExchangeList*) deserialize from a stream
/// - int soap_write__eoddata1__ExchangeList(soap*, _eoddata1__ExchangeList*) serialize to a stream
/// - _eoddata1__ExchangeList* _eoddata1__ExchangeList::soap_dup(soap*) returns deep copy of _eoddata1__ExchangeList, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__ExchangeList::soap_del() deep deletes _eoddata1__ExchangeList data members, use only after _eoddata1__ExchangeList::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__ExchangeList
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":ExchangeListResponse
/// @brief "http://ws.eoddata.com/Data":ExchangeListResponse is a complexType.
///
/// class _eoddata1__ExchangeListResponse operations:
/// - _eoddata1__ExchangeListResponse* soap_new__eoddata1__ExchangeListResponse(soap*) allocate
/// - _eoddata1__ExchangeListResponse* soap_new__eoddata1__ExchangeListResponse(soap*, int num) allocate array
/// - _eoddata1__ExchangeListResponse* soap_new_req__eoddata1__ExchangeListResponse(soap*, ...) allocate, set required members
/// - _eoddata1__ExchangeListResponse* soap_new_set__eoddata1__ExchangeListResponse(soap*, ...) allocate, set all public members
/// - _eoddata1__ExchangeListResponse::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__ExchangeListResponse(soap*, _eoddata1__ExchangeListResponse*) deserialize from a stream
/// - int soap_write__eoddata1__ExchangeListResponse(soap*, _eoddata1__ExchangeListResponse*) serialize to a stream
/// - _eoddata1__ExchangeListResponse* _eoddata1__ExchangeListResponse::soap_dup(soap*) returns deep copy of _eoddata1__ExchangeListResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__ExchangeListResponse::soap_del() deep deletes _eoddata1__ExchangeListResponse data members, use only after _eoddata1__ExchangeListResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__ExchangeListResponse
{ public:
/// Element "ExchangeListResult" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    eoddata1__RESPONSE*                  ExchangeListResult             0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":ExchangeGet
/// @brief "http://ws.eoddata.com/Data":ExchangeGet is a complexType.
///
/// class _eoddata1__ExchangeGet operations:
/// - _eoddata1__ExchangeGet* soap_new__eoddata1__ExchangeGet(soap*) allocate
/// - _eoddata1__ExchangeGet* soap_new__eoddata1__ExchangeGet(soap*, int num) allocate array
/// - _eoddata1__ExchangeGet* soap_new_req__eoddata1__ExchangeGet(soap*, ...) allocate, set required members
/// - _eoddata1__ExchangeGet* soap_new_set__eoddata1__ExchangeGet(soap*, ...) allocate, set all public members
/// - _eoddata1__ExchangeGet::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__ExchangeGet(soap*, _eoddata1__ExchangeGet*) deserialize from a stream
/// - int soap_write__eoddata1__ExchangeGet(soap*, _eoddata1__ExchangeGet*) serialize to a stream
/// - _eoddata1__ExchangeGet* _eoddata1__ExchangeGet::soap_dup(soap*) returns deep copy of _eoddata1__ExchangeGet, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__ExchangeGet::soap_del() deep deletes _eoddata1__ExchangeGet data members, use only after _eoddata1__ExchangeGet::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__ExchangeGet
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// Element "Exchange" of XSD type xs:string.
    std::string*                         Exchange                       0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":ExchangeGetResponse
/// @brief "http://ws.eoddata.com/Data":ExchangeGetResponse is a complexType.
///
/// class _eoddata1__ExchangeGetResponse operations:
/// - _eoddata1__ExchangeGetResponse* soap_new__eoddata1__ExchangeGetResponse(soap*) allocate
/// - _eoddata1__ExchangeGetResponse* soap_new__eoddata1__ExchangeGetResponse(soap*, int num) allocate array
/// - _eoddata1__ExchangeGetResponse* soap_new_req__eoddata1__ExchangeGetResponse(soap*, ...) allocate, set required members
/// - _eoddata1__ExchangeGetResponse* soap_new_set__eoddata1__ExchangeGetResponse(soap*, ...) allocate, set all public members
/// - _eoddata1__ExchangeGetResponse::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__ExchangeGetResponse(soap*, _eoddata1__ExchangeGetResponse*) deserialize from a stream
/// - int soap_write__eoddata1__ExchangeGetResponse(soap*, _eoddata1__ExchangeGetResponse*) serialize to a stream
/// - _eoddata1__ExchangeGetResponse* _eoddata1__ExchangeGetResponse::soap_dup(soap*) returns deep copy of _eoddata1__ExchangeGetResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__ExchangeGetResponse::soap_del() deep deletes _eoddata1__ExchangeGetResponse data members, use only after _eoddata1__ExchangeGetResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__ExchangeGetResponse
{ public:
/// Element "ExchangeGetResult" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    eoddata1__RESPONSE*                  ExchangeGetResult              0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":SymbolList
/// @brief "http://ws.eoddata.com/Data":SymbolList is a complexType.
///
/// class _eoddata1__SymbolList operations:
/// - _eoddata1__SymbolList* soap_new__eoddata1__SymbolList(soap*) allocate
/// - _eoddata1__SymbolList* soap_new__eoddata1__SymbolList(soap*, int num) allocate array
/// - _eoddata1__SymbolList* soap_new_req__eoddata1__SymbolList(soap*, ...) allocate, set required members
/// - _eoddata1__SymbolList* soap_new_set__eoddata1__SymbolList(soap*, ...) allocate, set all public members
/// - _eoddata1__SymbolList::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__SymbolList(soap*, _eoddata1__SymbolList*) deserialize from a stream
/// - int soap_write__eoddata1__SymbolList(soap*, _eoddata1__SymbolList*) serialize to a stream
/// - _eoddata1__SymbolList* _eoddata1__SymbolList::soap_dup(soap*) returns deep copy of _eoddata1__SymbolList, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__SymbolList::soap_del() deep deletes _eoddata1__SymbolList data members, use only after _eoddata1__SymbolList::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__SymbolList
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// Element "Exchange" of XSD type xs:string.
    std::string*                         Exchange                       0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":SymbolListResponse
/// @brief "http://ws.eoddata.com/Data":SymbolListResponse is a complexType.
///
/// class _eoddata1__SymbolListResponse operations:
/// - _eoddata1__SymbolListResponse* soap_new__eoddata1__SymbolListResponse(soap*) allocate
/// - _eoddata1__SymbolListResponse* soap_new__eoddata1__SymbolListResponse(soap*, int num) allocate array
/// - _eoddata1__SymbolListResponse* soap_new_req__eoddata1__SymbolListResponse(soap*, ...) allocate, set required members
/// - _eoddata1__SymbolListResponse* soap_new_set__eoddata1__SymbolListResponse(soap*, ...) allocate, set all public members
/// - _eoddata1__SymbolListResponse::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__SymbolListResponse(soap*, _eoddata1__SymbolListResponse*) deserialize from a stream
/// - int soap_write__eoddata1__SymbolListResponse(soap*, _eoddata1__SymbolListResponse*) serialize to a stream
/// - _eoddata1__SymbolListResponse* _eoddata1__SymbolListResponse::soap_dup(soap*) returns deep copy of _eoddata1__SymbolListResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__SymbolListResponse::soap_del() deep deletes _eoddata1__SymbolListResponse data members, use only after _eoddata1__SymbolListResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__SymbolListResponse
{ public:
/// Element "SymbolListResult" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    eoddata1__RESPONSE*                  SymbolListResult               0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":SymbolList2
/// @brief "http://ws.eoddata.com/Data":SymbolList2 is a complexType.
///
/// class _eoddata1__SymbolList2 operations:
/// - _eoddata1__SymbolList2* soap_new__eoddata1__SymbolList2(soap*) allocate
/// - _eoddata1__SymbolList2* soap_new__eoddata1__SymbolList2(soap*, int num) allocate array
/// - _eoddata1__SymbolList2* soap_new_req__eoddata1__SymbolList2(soap*, ...) allocate, set required members
/// - _eoddata1__SymbolList2* soap_new_set__eoddata1__SymbolList2(soap*, ...) allocate, set all public members
/// - _eoddata1__SymbolList2::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__SymbolList2(soap*, _eoddata1__SymbolList2*) deserialize from a stream
/// - int soap_write__eoddata1__SymbolList2(soap*, _eoddata1__SymbolList2*) serialize to a stream
/// - _eoddata1__SymbolList2* _eoddata1__SymbolList2::soap_dup(soap*) returns deep copy of _eoddata1__SymbolList2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__SymbolList2::soap_del() deep deletes _eoddata1__SymbolList2 data members, use only after _eoddata1__SymbolList2::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__SymbolList2
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// Element "Exchange" of XSD type xs:string.
    std::string*                         Exchange                       0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":SymbolList2Response
/// @brief "http://ws.eoddata.com/Data":SymbolList2Response is a complexType.
///
/// class _eoddata1__SymbolList2Response operations:
/// - _eoddata1__SymbolList2Response* soap_new__eoddata1__SymbolList2Response(soap*) allocate
/// - _eoddata1__SymbolList2Response* soap_new__eoddata1__SymbolList2Response(soap*, int num) allocate array
/// - _eoddata1__SymbolList2Response* soap_new_req__eoddata1__SymbolList2Response(soap*, ...) allocate, set required members
/// - _eoddata1__SymbolList2Response* soap_new_set__eoddata1__SymbolList2Response(soap*, ...) allocate, set all public members
/// - _eoddata1__SymbolList2Response::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__SymbolList2Response(soap*, _eoddata1__SymbolList2Response*) deserialize from a stream
/// - int soap_write__eoddata1__SymbolList2Response(soap*, _eoddata1__SymbolList2Response*) serialize to a stream
/// - _eoddata1__SymbolList2Response* _eoddata1__SymbolList2Response::soap_dup(soap*) returns deep copy of _eoddata1__SymbolList2Response, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__SymbolList2Response::soap_del() deep deletes _eoddata1__SymbolList2Response data members, use only after _eoddata1__SymbolList2Response::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__SymbolList2Response
{ public:
/// Element "SymbolList2Result" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    eoddata1__RESPONSE*                  SymbolList2Result              0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":QuoteGet
/// @brief "http://ws.eoddata.com/Data":QuoteGet is a complexType.
///
/// class _eoddata1__QuoteGet operations:
/// - _eoddata1__QuoteGet* soap_new__eoddata1__QuoteGet(soap*) allocate
/// - _eoddata1__QuoteGet* soap_new__eoddata1__QuoteGet(soap*, int num) allocate array
/// - _eoddata1__QuoteGet* soap_new_req__eoddata1__QuoteGet(soap*, ...) allocate, set required members
/// - _eoddata1__QuoteGet* soap_new_set__eoddata1__QuoteGet(soap*, ...) allocate, set all public members
/// - _eoddata1__QuoteGet::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__QuoteGet(soap*, _eoddata1__QuoteGet*) deserialize from a stream
/// - int soap_write__eoddata1__QuoteGet(soap*, _eoddata1__QuoteGet*) serialize to a stream
/// - _eoddata1__QuoteGet* _eoddata1__QuoteGet::soap_dup(soap*) returns deep copy of _eoddata1__QuoteGet, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__QuoteGet::soap_del() deep deletes _eoddata1__QuoteGet data members, use only after _eoddata1__QuoteGet::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__QuoteGet
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// Element "Exchange" of XSD type xs:string.
    std::string*                         Exchange                       0;	///< Optional element.
/// Element "Symbol" of XSD type xs:string.
    std::string*                         Symbol                         0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":QuoteGetResponse
/// @brief "http://ws.eoddata.com/Data":QuoteGetResponse is a complexType.
///
/// class _eoddata1__QuoteGetResponse operations:
/// - _eoddata1__QuoteGetResponse* soap_new__eoddata1__QuoteGetResponse(soap*) allocate
/// - _eoddata1__QuoteGetResponse* soap_new__eoddata1__QuoteGetResponse(soap*, int num) allocate array
/// - _eoddata1__QuoteGetResponse* soap_new_req__eoddata1__QuoteGetResponse(soap*, ...) allocate, set required members
/// - _eoddata1__QuoteGetResponse* soap_new_set__eoddata1__QuoteGetResponse(soap*, ...) allocate, set all public members
/// - _eoddata1__QuoteGetResponse::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__QuoteGetResponse(soap*, _eoddata1__QuoteGetResponse*) deserialize from a stream
/// - int soap_write__eoddata1__QuoteGetResponse(soap*, _eoddata1__QuoteGetResponse*) serialize to a stream
/// - _eoddata1__QuoteGetResponse* _eoddata1__QuoteGetResponse::soap_dup(soap*) returns deep copy of _eoddata1__QuoteGetResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__QuoteGetResponse::soap_del() deep deletes _eoddata1__QuoteGetResponse data members, use only after _eoddata1__QuoteGetResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__QuoteGetResponse
{ public:
/// Element "QuoteGetResult" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    eoddata1__RESPONSE*                  QuoteGetResult                 0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":QuoteList2
/// @brief "http://ws.eoddata.com/Data":QuoteList2 is a complexType.
///
/// class _eoddata1__QuoteList2 operations:
/// - _eoddata1__QuoteList2* soap_new__eoddata1__QuoteList2(soap*) allocate
/// - _eoddata1__QuoteList2* soap_new__eoddata1__QuoteList2(soap*, int num) allocate array
/// - _eoddata1__QuoteList2* soap_new_req__eoddata1__QuoteList2(soap*, ...) allocate, set required members
/// - _eoddata1__QuoteList2* soap_new_set__eoddata1__QuoteList2(soap*, ...) allocate, set all public members
/// - _eoddata1__QuoteList2::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__QuoteList2(soap*, _eoddata1__QuoteList2*) deserialize from a stream
/// - int soap_write__eoddata1__QuoteList2(soap*, _eoddata1__QuoteList2*) serialize to a stream
/// - _eoddata1__QuoteList2* _eoddata1__QuoteList2::soap_dup(soap*) returns deep copy of _eoddata1__QuoteList2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__QuoteList2::soap_del() deep deletes _eoddata1__QuoteList2 data members, use only after _eoddata1__QuoteList2::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__QuoteList2
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// Element "Exchange" of XSD type xs:string.
    std::string*                         Exchange                       0;	///< Optional element.
/// Element "Symbols" of XSD type xs:string.
    std::string*                         Symbols                        0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":QuoteList2Response
/// @brief "http://ws.eoddata.com/Data":QuoteList2Response is a complexType.
///
/// class _eoddata1__QuoteList2Response operations:
/// - _eoddata1__QuoteList2Response* soap_new__eoddata1__QuoteList2Response(soap*) allocate
/// - _eoddata1__QuoteList2Response* soap_new__eoddata1__QuoteList2Response(soap*, int num) allocate array
/// - _eoddata1__QuoteList2Response* soap_new_req__eoddata1__QuoteList2Response(soap*, ...) allocate, set required members
/// - _eoddata1__QuoteList2Response* soap_new_set__eoddata1__QuoteList2Response(soap*, ...) allocate, set all public members
/// - _eoddata1__QuoteList2Response::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__QuoteList2Response(soap*, _eoddata1__QuoteList2Response*) deserialize from a stream
/// - int soap_write__eoddata1__QuoteList2Response(soap*, _eoddata1__QuoteList2Response*) serialize to a stream
/// - _eoddata1__QuoteList2Response* _eoddata1__QuoteList2Response::soap_dup(soap*) returns deep copy of _eoddata1__QuoteList2Response, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__QuoteList2Response::soap_del() deep deletes _eoddata1__QuoteList2Response data members, use only after _eoddata1__QuoteList2Response::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__QuoteList2Response
{ public:
/// Element "QuoteList2Result" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    eoddata1__RESPONSE*                  QuoteList2Result               0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":SymbolGet
/// @brief "http://ws.eoddata.com/Data":SymbolGet is a complexType.
///
/// class _eoddata1__SymbolGet operations:
/// - _eoddata1__SymbolGet* soap_new__eoddata1__SymbolGet(soap*) allocate
/// - _eoddata1__SymbolGet* soap_new__eoddata1__SymbolGet(soap*, int num) allocate array
/// - _eoddata1__SymbolGet* soap_new_req__eoddata1__SymbolGet(soap*, ...) allocate, set required members
/// - _eoddata1__SymbolGet* soap_new_set__eoddata1__SymbolGet(soap*, ...) allocate, set all public members
/// - _eoddata1__SymbolGet::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__SymbolGet(soap*, _eoddata1__SymbolGet*) deserialize from a stream
/// - int soap_write__eoddata1__SymbolGet(soap*, _eoddata1__SymbolGet*) serialize to a stream
/// - _eoddata1__SymbolGet* _eoddata1__SymbolGet::soap_dup(soap*) returns deep copy of _eoddata1__SymbolGet, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__SymbolGet::soap_del() deep deletes _eoddata1__SymbolGet data members, use only after _eoddata1__SymbolGet::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__SymbolGet
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// Element "Exchange" of XSD type xs:string.
    std::string*                         Exchange                       0;	///< Optional element.
/// Element "Symbol" of XSD type xs:string.
    std::string*                         Symbol                         0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":SymbolGetResponse
/// @brief "http://ws.eoddata.com/Data":SymbolGetResponse is a complexType.
///
/// class _eoddata1__SymbolGetResponse operations:
/// - _eoddata1__SymbolGetResponse* soap_new__eoddata1__SymbolGetResponse(soap*) allocate
/// - _eoddata1__SymbolGetResponse* soap_new__eoddata1__SymbolGetResponse(soap*, int num) allocate array
/// - _eoddata1__SymbolGetResponse* soap_new_req__eoddata1__SymbolGetResponse(soap*, ...) allocate, set required members
/// - _eoddata1__SymbolGetResponse* soap_new_set__eoddata1__SymbolGetResponse(soap*, ...) allocate, set all public members
/// - _eoddata1__SymbolGetResponse::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__SymbolGetResponse(soap*, _eoddata1__SymbolGetResponse*) deserialize from a stream
/// - int soap_write__eoddata1__SymbolGetResponse(soap*, _eoddata1__SymbolGetResponse*) serialize to a stream
/// - _eoddata1__SymbolGetResponse* _eoddata1__SymbolGetResponse::soap_dup(soap*) returns deep copy of _eoddata1__SymbolGetResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__SymbolGetResponse::soap_del() deep deletes _eoddata1__SymbolGetResponse data members, use only after _eoddata1__SymbolGetResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__SymbolGetResponse
{ public:
/// Element "SymbolGetResult" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    eoddata1__RESPONSE*                  SymbolGetResult                0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":QuoteList
/// @brief "http://ws.eoddata.com/Data":QuoteList is a complexType.
///
/// class _eoddata1__QuoteList operations:
/// - _eoddata1__QuoteList* soap_new__eoddata1__QuoteList(soap*) allocate
/// - _eoddata1__QuoteList* soap_new__eoddata1__QuoteList(soap*, int num) allocate array
/// - _eoddata1__QuoteList* soap_new_req__eoddata1__QuoteList(soap*, ...) allocate, set required members
/// - _eoddata1__QuoteList* soap_new_set__eoddata1__QuoteList(soap*, ...) allocate, set all public members
/// - _eoddata1__QuoteList::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__QuoteList(soap*, _eoddata1__QuoteList*) deserialize from a stream
/// - int soap_write__eoddata1__QuoteList(soap*, _eoddata1__QuoteList*) serialize to a stream
/// - _eoddata1__QuoteList* _eoddata1__QuoteList::soap_dup(soap*) returns deep copy of _eoddata1__QuoteList, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__QuoteList::soap_del() deep deletes _eoddata1__QuoteList data members, use only after _eoddata1__QuoteList::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__QuoteList
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// Element "Exchange" of XSD type xs:string.
    std::string*                         Exchange                       0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":QuoteListResponse
/// @brief "http://ws.eoddata.com/Data":QuoteListResponse is a complexType.
///
/// class _eoddata1__QuoteListResponse operations:
/// - _eoddata1__QuoteListResponse* soap_new__eoddata1__QuoteListResponse(soap*) allocate
/// - _eoddata1__QuoteListResponse* soap_new__eoddata1__QuoteListResponse(soap*, int num) allocate array
/// - _eoddata1__QuoteListResponse* soap_new_req__eoddata1__QuoteListResponse(soap*, ...) allocate, set required members
/// - _eoddata1__QuoteListResponse* soap_new_set__eoddata1__QuoteListResponse(soap*, ...) allocate, set all public members
/// - _eoddata1__QuoteListResponse::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__QuoteListResponse(soap*, _eoddata1__QuoteListResponse*) deserialize from a stream
/// - int soap_write__eoddata1__QuoteListResponse(soap*, _eoddata1__QuoteListResponse*) serialize to a stream
/// - _eoddata1__QuoteListResponse* _eoddata1__QuoteListResponse::soap_dup(soap*) returns deep copy of _eoddata1__QuoteListResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__QuoteListResponse::soap_del() deep deletes _eoddata1__QuoteListResponse data members, use only after _eoddata1__QuoteListResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__QuoteListResponse
{ public:
/// Element "QuoteListResult" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    eoddata1__RESPONSE*                  QuoteListResult                0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":NewsList
/// @brief "http://ws.eoddata.com/Data":NewsList is a complexType.
///
/// class _eoddata1__NewsList operations:
/// - _eoddata1__NewsList* soap_new__eoddata1__NewsList(soap*) allocate
/// - _eoddata1__NewsList* soap_new__eoddata1__NewsList(soap*, int num) allocate array
/// - _eoddata1__NewsList* soap_new_req__eoddata1__NewsList(soap*, ...) allocate, set required members
/// - _eoddata1__NewsList* soap_new_set__eoddata1__NewsList(soap*, ...) allocate, set all public members
/// - _eoddata1__NewsList::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__NewsList(soap*, _eoddata1__NewsList*) deserialize from a stream
/// - int soap_write__eoddata1__NewsList(soap*, _eoddata1__NewsList*) serialize to a stream
/// - _eoddata1__NewsList* _eoddata1__NewsList::soap_dup(soap*) returns deep copy of _eoddata1__NewsList, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__NewsList::soap_del() deep deletes _eoddata1__NewsList data members, use only after _eoddata1__NewsList::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__NewsList
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// Element "Exchange" of XSD type xs:string.
    std::string*                         Exchange                       0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":NewsListResponse
/// @brief "http://ws.eoddata.com/Data":NewsListResponse is a complexType.
///
/// class _eoddata1__NewsListResponse operations:
/// - _eoddata1__NewsListResponse* soap_new__eoddata1__NewsListResponse(soap*) allocate
/// - _eoddata1__NewsListResponse* soap_new__eoddata1__NewsListResponse(soap*, int num) allocate array
/// - _eoddata1__NewsListResponse* soap_new_req__eoddata1__NewsListResponse(soap*, ...) allocate, set required members
/// - _eoddata1__NewsListResponse* soap_new_set__eoddata1__NewsListResponse(soap*, ...) allocate, set all public members
/// - _eoddata1__NewsListResponse::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__NewsListResponse(soap*, _eoddata1__NewsListResponse*) deserialize from a stream
/// - int soap_write__eoddata1__NewsListResponse(soap*, _eoddata1__NewsListResponse*) serialize to a stream
/// - _eoddata1__NewsListResponse* _eoddata1__NewsListResponse::soap_dup(soap*) returns deep copy of _eoddata1__NewsListResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__NewsListResponse::soap_del() deep deletes _eoddata1__NewsListResponse data members, use only after _eoddata1__NewsListResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__NewsListResponse
{ public:
/// Element "NewsListResult" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    eoddata1__RESPONSE*                  NewsListResult                 0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":NewsListBySymbol
/// @brief "http://ws.eoddata.com/Data":NewsListBySymbol is a complexType.
///
/// class _eoddata1__NewsListBySymbol operations:
/// - _eoddata1__NewsListBySymbol* soap_new__eoddata1__NewsListBySymbol(soap*) allocate
/// - _eoddata1__NewsListBySymbol* soap_new__eoddata1__NewsListBySymbol(soap*, int num) allocate array
/// - _eoddata1__NewsListBySymbol* soap_new_req__eoddata1__NewsListBySymbol(soap*, ...) allocate, set required members
/// - _eoddata1__NewsListBySymbol* soap_new_set__eoddata1__NewsListBySymbol(soap*, ...) allocate, set all public members
/// - _eoddata1__NewsListBySymbol::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__NewsListBySymbol(soap*, _eoddata1__NewsListBySymbol*) deserialize from a stream
/// - int soap_write__eoddata1__NewsListBySymbol(soap*, _eoddata1__NewsListBySymbol*) serialize to a stream
/// - _eoddata1__NewsListBySymbol* _eoddata1__NewsListBySymbol::soap_dup(soap*) returns deep copy of _eoddata1__NewsListBySymbol, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__NewsListBySymbol::soap_del() deep deletes _eoddata1__NewsListBySymbol data members, use only after _eoddata1__NewsListBySymbol::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__NewsListBySymbol
{ public:
/// Element "token" of XSD type xs:string.
    std::string*                         token                          0;	///< Optional element.
/// Element "Exchange" of XSD type xs:string.
    std::string*                         Exchange                       0;	///< Optional element.
/// Element "symbol" of XSD type xs:string.
    std::string*                         symbol                         0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":NewsListBySymbolResponse
/// @brief "http://ws.eoddata.com/Data":NewsListBySymbolResponse is a complexType.
///
/// class _eoddata1__NewsListBySymbolResponse operations:
/// - _eoddata1__NewsListBySymbolResponse* soap_new__eoddata1__NewsListBySymbolResponse(soap*) allocate
/// - _eoddata1__NewsListBySymbolResponse* soap_new__eoddata1__NewsListBySymbolResponse(soap*, int num) allocate array
/// - _eoddata1__NewsListBySymbolResponse* soap_new_req__eoddata1__NewsListBySymbolResponse(soap*, ...) allocate, set required members
/// - _eoddata1__NewsListBySymbolResponse* soap_new_set__eoddata1__NewsListBySymbolResponse(soap*, ...) allocate, set all public members
/// - _eoddata1__NewsListBySymbolResponse::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__NewsListBySymbolResponse(soap*, _eoddata1__NewsListBySymbolResponse*) deserialize from a stream
/// - int soap_write__eoddata1__NewsListBySymbolResponse(soap*, _eoddata1__NewsListBySymbolResponse*) serialize to a stream
/// - _eoddata1__NewsListBySymbolResponse* _eoddata1__NewsListBySymbolResponse::soap_dup(soap*) returns deep copy of _eoddata1__NewsListBySymbolResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__NewsListBySymbolResponse::soap_del() deep deletes _eoddata1__NewsListBySymbolResponse data members, use only after _eoddata1__NewsListBySymbolResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__NewsListBySymbolResponse
{ public:
/// Element "NewsListBySymbolResult" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    eoddata1__RESPONSE*                  NewsListBySymbolResult         0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":FundamentalList
/// @brief "http://ws.eoddata.com/Data":FundamentalList is a complexType.
///
/// class _eoddata1__FundamentalList operations:
/// - _eoddata1__FundamentalList* soap_new__eoddata1__FundamentalList(soap*) allocate
/// - _eoddata1__FundamentalList* soap_new__eoddata1__FundamentalList(soap*, int num) allocate array
/// - _eoddata1__FundamentalList* soap_new_req__eoddata1__FundamentalList(soap*, ...) allocate, set required members
/// - _eoddata1__FundamentalList* soap_new_set__eoddata1__FundamentalList(soap*, ...) allocate, set all public members
/// - _eoddata1__FundamentalList::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__FundamentalList(soap*, _eoddata1__FundamentalList*) deserialize from a stream
/// - int soap_write__eoddata1__FundamentalList(soap*, _eoddata1__FundamentalList*) serialize to a stream
/// - _eoddata1__FundamentalList* _eoddata1__FundamentalList::soap_dup(soap*) returns deep copy of _eoddata1__FundamentalList, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__FundamentalList::soap_del() deep deletes _eoddata1__FundamentalList data members, use only after _eoddata1__FundamentalList::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__FundamentalList
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// Element "Exchange" of XSD type xs:string.
    std::string*                         Exchange                       0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":FundamentalListResponse
/// @brief "http://ws.eoddata.com/Data":FundamentalListResponse is a complexType.
///
/// class _eoddata1__FundamentalListResponse operations:
/// - _eoddata1__FundamentalListResponse* soap_new__eoddata1__FundamentalListResponse(soap*) allocate
/// - _eoddata1__FundamentalListResponse* soap_new__eoddata1__FundamentalListResponse(soap*, int num) allocate array
/// - _eoddata1__FundamentalListResponse* soap_new_req__eoddata1__FundamentalListResponse(soap*, ...) allocate, set required members
/// - _eoddata1__FundamentalListResponse* soap_new_set__eoddata1__FundamentalListResponse(soap*, ...) allocate, set all public members
/// - _eoddata1__FundamentalListResponse::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__FundamentalListResponse(soap*, _eoddata1__FundamentalListResponse*) deserialize from a stream
/// - int soap_write__eoddata1__FundamentalListResponse(soap*, _eoddata1__FundamentalListResponse*) serialize to a stream
/// - _eoddata1__FundamentalListResponse* _eoddata1__FundamentalListResponse::soap_dup(soap*) returns deep copy of _eoddata1__FundamentalListResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__FundamentalListResponse::soap_del() deep deletes _eoddata1__FundamentalListResponse data members, use only after _eoddata1__FundamentalListResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__FundamentalListResponse
{ public:
/// Element "FundamentalListResult" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    eoddata1__RESPONSE*                  FundamentalListResult          0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":TechnicalList
/// @brief "http://ws.eoddata.com/Data":TechnicalList is a complexType.
///
/// class _eoddata1__TechnicalList operations:
/// - _eoddata1__TechnicalList* soap_new__eoddata1__TechnicalList(soap*) allocate
/// - _eoddata1__TechnicalList* soap_new__eoddata1__TechnicalList(soap*, int num) allocate array
/// - _eoddata1__TechnicalList* soap_new_req__eoddata1__TechnicalList(soap*, ...) allocate, set required members
/// - _eoddata1__TechnicalList* soap_new_set__eoddata1__TechnicalList(soap*, ...) allocate, set all public members
/// - _eoddata1__TechnicalList::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__TechnicalList(soap*, _eoddata1__TechnicalList*) deserialize from a stream
/// - int soap_write__eoddata1__TechnicalList(soap*, _eoddata1__TechnicalList*) serialize to a stream
/// - _eoddata1__TechnicalList* _eoddata1__TechnicalList::soap_dup(soap*) returns deep copy of _eoddata1__TechnicalList, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__TechnicalList::soap_del() deep deletes _eoddata1__TechnicalList data members, use only after _eoddata1__TechnicalList::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__TechnicalList
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// Element "Exchange" of XSD type xs:string.
    std::string*                         Exchange                       0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":TechnicalListResponse
/// @brief "http://ws.eoddata.com/Data":TechnicalListResponse is a complexType.
///
/// class _eoddata1__TechnicalListResponse operations:
/// - _eoddata1__TechnicalListResponse* soap_new__eoddata1__TechnicalListResponse(soap*) allocate
/// - _eoddata1__TechnicalListResponse* soap_new__eoddata1__TechnicalListResponse(soap*, int num) allocate array
/// - _eoddata1__TechnicalListResponse* soap_new_req__eoddata1__TechnicalListResponse(soap*, ...) allocate, set required members
/// - _eoddata1__TechnicalListResponse* soap_new_set__eoddata1__TechnicalListResponse(soap*, ...) allocate, set all public members
/// - _eoddata1__TechnicalListResponse::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__TechnicalListResponse(soap*, _eoddata1__TechnicalListResponse*) deserialize from a stream
/// - int soap_write__eoddata1__TechnicalListResponse(soap*, _eoddata1__TechnicalListResponse*) serialize to a stream
/// - _eoddata1__TechnicalListResponse* _eoddata1__TechnicalListResponse::soap_dup(soap*) returns deep copy of _eoddata1__TechnicalListResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__TechnicalListResponse::soap_del() deep deletes _eoddata1__TechnicalListResponse data members, use only after _eoddata1__TechnicalListResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__TechnicalListResponse
{ public:
/// Element "TechnicalListResult" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    eoddata1__RESPONSE*                  TechnicalListResult            0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":QuoteListByDate
/// @brief "http://ws.eoddata.com/Data":QuoteListByDate is a complexType.
///
/// class _eoddata1__QuoteListByDate operations:
/// - _eoddata1__QuoteListByDate* soap_new__eoddata1__QuoteListByDate(soap*) allocate
/// - _eoddata1__QuoteListByDate* soap_new__eoddata1__QuoteListByDate(soap*, int num) allocate array
/// - _eoddata1__QuoteListByDate* soap_new_req__eoddata1__QuoteListByDate(soap*, ...) allocate, set required members
/// - _eoddata1__QuoteListByDate* soap_new_set__eoddata1__QuoteListByDate(soap*, ...) allocate, set all public members
/// - _eoddata1__QuoteListByDate::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__QuoteListByDate(soap*, _eoddata1__QuoteListByDate*) deserialize from a stream
/// - int soap_write__eoddata1__QuoteListByDate(soap*, _eoddata1__QuoteListByDate*) serialize to a stream
/// - _eoddata1__QuoteListByDate* _eoddata1__QuoteListByDate::soap_dup(soap*) returns deep copy of _eoddata1__QuoteListByDate, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__QuoteListByDate::soap_del() deep deletes _eoddata1__QuoteListByDate data members, use only after _eoddata1__QuoteListByDate::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__QuoteListByDate
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// Element "Exchange" of XSD type xs:string.
    std::string*                         Exchange                       0;	///< Optional element.
/// Element "QuoteDate" of XSD type xs:string.
    std::string*                         QuoteDate                      0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":QuoteListByDateResponse
/// @brief "http://ws.eoddata.com/Data":QuoteListByDateResponse is a complexType.
///
/// class _eoddata1__QuoteListByDateResponse operations:
/// - _eoddata1__QuoteListByDateResponse* soap_new__eoddata1__QuoteListByDateResponse(soap*) allocate
/// - _eoddata1__QuoteListByDateResponse* soap_new__eoddata1__QuoteListByDateResponse(soap*, int num) allocate array
/// - _eoddata1__QuoteListByDateResponse* soap_new_req__eoddata1__QuoteListByDateResponse(soap*, ...) allocate, set required members
/// - _eoddata1__QuoteListByDateResponse* soap_new_set__eoddata1__QuoteListByDateResponse(soap*, ...) allocate, set all public members
/// - _eoddata1__QuoteListByDateResponse::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__QuoteListByDateResponse(soap*, _eoddata1__QuoteListByDateResponse*) deserialize from a stream
/// - int soap_write__eoddata1__QuoteListByDateResponse(soap*, _eoddata1__QuoteListByDateResponse*) serialize to a stream
/// - _eoddata1__QuoteListByDateResponse* _eoddata1__QuoteListByDateResponse::soap_dup(soap*) returns deep copy of _eoddata1__QuoteListByDateResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__QuoteListByDateResponse::soap_del() deep deletes _eoddata1__QuoteListByDateResponse data members, use only after _eoddata1__QuoteListByDateResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__QuoteListByDateResponse
{ public:
/// Element "QuoteListByDateResult" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    eoddata1__RESPONSE*                  QuoteListByDateResult          0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":QuoteListByDate2
/// @brief "http://ws.eoddata.com/Data":QuoteListByDate2 is a complexType.
///
/// class _eoddata1__QuoteListByDate2 operations:
/// - _eoddata1__QuoteListByDate2* soap_new__eoddata1__QuoteListByDate2(soap*) allocate
/// - _eoddata1__QuoteListByDate2* soap_new__eoddata1__QuoteListByDate2(soap*, int num) allocate array
/// - _eoddata1__QuoteListByDate2* soap_new_req__eoddata1__QuoteListByDate2(soap*, ...) allocate, set required members
/// - _eoddata1__QuoteListByDate2* soap_new_set__eoddata1__QuoteListByDate2(soap*, ...) allocate, set all public members
/// - _eoddata1__QuoteListByDate2::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__QuoteListByDate2(soap*, _eoddata1__QuoteListByDate2*) deserialize from a stream
/// - int soap_write__eoddata1__QuoteListByDate2(soap*, _eoddata1__QuoteListByDate2*) serialize to a stream
/// - _eoddata1__QuoteListByDate2* _eoddata1__QuoteListByDate2::soap_dup(soap*) returns deep copy of _eoddata1__QuoteListByDate2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__QuoteListByDate2::soap_del() deep deletes _eoddata1__QuoteListByDate2 data members, use only after _eoddata1__QuoteListByDate2::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__QuoteListByDate2
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// Element "Exchange" of XSD type xs:string.
    std::string*                         Exchange                       0;	///< Optional element.
/// Element "QuoteDate" of XSD type xs:string.
    std::string*                         QuoteDate                      0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":QuoteListByDate2Response
/// @brief "http://ws.eoddata.com/Data":QuoteListByDate2Response is a complexType.
///
/// class _eoddata1__QuoteListByDate2Response operations:
/// - _eoddata1__QuoteListByDate2Response* soap_new__eoddata1__QuoteListByDate2Response(soap*) allocate
/// - _eoddata1__QuoteListByDate2Response* soap_new__eoddata1__QuoteListByDate2Response(soap*, int num) allocate array
/// - _eoddata1__QuoteListByDate2Response* soap_new_req__eoddata1__QuoteListByDate2Response(soap*, ...) allocate, set required members
/// - _eoddata1__QuoteListByDate2Response* soap_new_set__eoddata1__QuoteListByDate2Response(soap*, ...) allocate, set all public members
/// - _eoddata1__QuoteListByDate2Response::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__QuoteListByDate2Response(soap*, _eoddata1__QuoteListByDate2Response*) deserialize from a stream
/// - int soap_write__eoddata1__QuoteListByDate2Response(soap*, _eoddata1__QuoteListByDate2Response*) serialize to a stream
/// - _eoddata1__QuoteListByDate2Response* _eoddata1__QuoteListByDate2Response::soap_dup(soap*) returns deep copy of _eoddata1__QuoteListByDate2Response, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__QuoteListByDate2Response::soap_del() deep deletes _eoddata1__QuoteListByDate2Response data members, use only after _eoddata1__QuoteListByDate2Response::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__QuoteListByDate2Response
{ public:
/// Element "QuoteListByDate2Result" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    eoddata1__RESPONSE*                  QuoteListByDate2Result         0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":SymbolHistory
/// @brief "http://ws.eoddata.com/Data":SymbolHistory is a complexType.
///
/// class _eoddata1__SymbolHistory operations:
/// - _eoddata1__SymbolHistory* soap_new__eoddata1__SymbolHistory(soap*) allocate
/// - _eoddata1__SymbolHistory* soap_new__eoddata1__SymbolHistory(soap*, int num) allocate array
/// - _eoddata1__SymbolHistory* soap_new_req__eoddata1__SymbolHistory(soap*, ...) allocate, set required members
/// - _eoddata1__SymbolHistory* soap_new_set__eoddata1__SymbolHistory(soap*, ...) allocate, set all public members
/// - _eoddata1__SymbolHistory::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__SymbolHistory(soap*, _eoddata1__SymbolHistory*) deserialize from a stream
/// - int soap_write__eoddata1__SymbolHistory(soap*, _eoddata1__SymbolHistory*) serialize to a stream
/// - _eoddata1__SymbolHistory* _eoddata1__SymbolHistory::soap_dup(soap*) returns deep copy of _eoddata1__SymbolHistory, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__SymbolHistory::soap_del() deep deletes _eoddata1__SymbolHistory data members, use only after _eoddata1__SymbolHistory::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__SymbolHistory
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// Element "Exchange" of XSD type xs:string.
    std::string*                         Exchange                       0;	///< Optional element.
/// Element "Symbol" of XSD type xs:string.
    std::string*                         Symbol                         0;	///< Optional element.
/// Element "StartDate" of XSD type xs:string.
    std::string*                         StartDate                      0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":SymbolHistoryResponse
/// @brief "http://ws.eoddata.com/Data":SymbolHistoryResponse is a complexType.
///
/// class _eoddata1__SymbolHistoryResponse operations:
/// - _eoddata1__SymbolHistoryResponse* soap_new__eoddata1__SymbolHistoryResponse(soap*) allocate
/// - _eoddata1__SymbolHistoryResponse* soap_new__eoddata1__SymbolHistoryResponse(soap*, int num) allocate array
/// - _eoddata1__SymbolHistoryResponse* soap_new_req__eoddata1__SymbolHistoryResponse(soap*, ...) allocate, set required members
/// - _eoddata1__SymbolHistoryResponse* soap_new_set__eoddata1__SymbolHistoryResponse(soap*, ...) allocate, set all public members
/// - _eoddata1__SymbolHistoryResponse::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__SymbolHistoryResponse(soap*, _eoddata1__SymbolHistoryResponse*) deserialize from a stream
/// - int soap_write__eoddata1__SymbolHistoryResponse(soap*, _eoddata1__SymbolHistoryResponse*) serialize to a stream
/// - _eoddata1__SymbolHistoryResponse* _eoddata1__SymbolHistoryResponse::soap_dup(soap*) returns deep copy of _eoddata1__SymbolHistoryResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__SymbolHistoryResponse::soap_del() deep deletes _eoddata1__SymbolHistoryResponse data members, use only after _eoddata1__SymbolHistoryResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__SymbolHistoryResponse
{ public:
/// Element "SymbolHistoryResult" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    eoddata1__RESPONSE*                  SymbolHistoryResult            0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":Top10Gains
/// @brief "http://ws.eoddata.com/Data":Top10Gains is a complexType.
///
/// class _eoddata1__Top10Gains operations:
/// - _eoddata1__Top10Gains* soap_new__eoddata1__Top10Gains(soap*) allocate
/// - _eoddata1__Top10Gains* soap_new__eoddata1__Top10Gains(soap*, int num) allocate array
/// - _eoddata1__Top10Gains* soap_new_req__eoddata1__Top10Gains(soap*, ...) allocate, set required members
/// - _eoddata1__Top10Gains* soap_new_set__eoddata1__Top10Gains(soap*, ...) allocate, set all public members
/// - _eoddata1__Top10Gains::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__Top10Gains(soap*, _eoddata1__Top10Gains*) deserialize from a stream
/// - int soap_write__eoddata1__Top10Gains(soap*, _eoddata1__Top10Gains*) serialize to a stream
/// - _eoddata1__Top10Gains* _eoddata1__Top10Gains::soap_dup(soap*) returns deep copy of _eoddata1__Top10Gains, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__Top10Gains::soap_del() deep deletes _eoddata1__Top10Gains data members, use only after _eoddata1__Top10Gains::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__Top10Gains
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// Element "Exchange" of XSD type xs:string.
    std::string*                         Exchange                       0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":Top10GainsResponse
/// @brief "http://ws.eoddata.com/Data":Top10GainsResponse is a complexType.
///
/// class _eoddata1__Top10GainsResponse operations:
/// - _eoddata1__Top10GainsResponse* soap_new__eoddata1__Top10GainsResponse(soap*) allocate
/// - _eoddata1__Top10GainsResponse* soap_new__eoddata1__Top10GainsResponse(soap*, int num) allocate array
/// - _eoddata1__Top10GainsResponse* soap_new_req__eoddata1__Top10GainsResponse(soap*, ...) allocate, set required members
/// - _eoddata1__Top10GainsResponse* soap_new_set__eoddata1__Top10GainsResponse(soap*, ...) allocate, set all public members
/// - _eoddata1__Top10GainsResponse::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__Top10GainsResponse(soap*, _eoddata1__Top10GainsResponse*) deserialize from a stream
/// - int soap_write__eoddata1__Top10GainsResponse(soap*, _eoddata1__Top10GainsResponse*) serialize to a stream
/// - _eoddata1__Top10GainsResponse* _eoddata1__Top10GainsResponse::soap_dup(soap*) returns deep copy of _eoddata1__Top10GainsResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__Top10GainsResponse::soap_del() deep deletes _eoddata1__Top10GainsResponse data members, use only after _eoddata1__Top10GainsResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__Top10GainsResponse
{ public:
/// Element "Top10GainsResult" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    eoddata1__RESPONSE*                  Top10GainsResult               0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":Top10Losses
/// @brief "http://ws.eoddata.com/Data":Top10Losses is a complexType.
///
/// class _eoddata1__Top10Losses operations:
/// - _eoddata1__Top10Losses* soap_new__eoddata1__Top10Losses(soap*) allocate
/// - _eoddata1__Top10Losses* soap_new__eoddata1__Top10Losses(soap*, int num) allocate array
/// - _eoddata1__Top10Losses* soap_new_req__eoddata1__Top10Losses(soap*, ...) allocate, set required members
/// - _eoddata1__Top10Losses* soap_new_set__eoddata1__Top10Losses(soap*, ...) allocate, set all public members
/// - _eoddata1__Top10Losses::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__Top10Losses(soap*, _eoddata1__Top10Losses*) deserialize from a stream
/// - int soap_write__eoddata1__Top10Losses(soap*, _eoddata1__Top10Losses*) serialize to a stream
/// - _eoddata1__Top10Losses* _eoddata1__Top10Losses::soap_dup(soap*) returns deep copy of _eoddata1__Top10Losses, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__Top10Losses::soap_del() deep deletes _eoddata1__Top10Losses data members, use only after _eoddata1__Top10Losses::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__Top10Losses
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// Element "Exchange" of XSD type xs:string.
    std::string*                         Exchange                       0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":Top10LossesResponse
/// @brief "http://ws.eoddata.com/Data":Top10LossesResponse is a complexType.
///
/// class _eoddata1__Top10LossesResponse operations:
/// - _eoddata1__Top10LossesResponse* soap_new__eoddata1__Top10LossesResponse(soap*) allocate
/// - _eoddata1__Top10LossesResponse* soap_new__eoddata1__Top10LossesResponse(soap*, int num) allocate array
/// - _eoddata1__Top10LossesResponse* soap_new_req__eoddata1__Top10LossesResponse(soap*, ...) allocate, set required members
/// - _eoddata1__Top10LossesResponse* soap_new_set__eoddata1__Top10LossesResponse(soap*, ...) allocate, set all public members
/// - _eoddata1__Top10LossesResponse::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__Top10LossesResponse(soap*, _eoddata1__Top10LossesResponse*) deserialize from a stream
/// - int soap_write__eoddata1__Top10LossesResponse(soap*, _eoddata1__Top10LossesResponse*) serialize to a stream
/// - _eoddata1__Top10LossesResponse* _eoddata1__Top10LossesResponse::soap_dup(soap*) returns deep copy of _eoddata1__Top10LossesResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__Top10LossesResponse::soap_del() deep deletes _eoddata1__Top10LossesResponse data members, use only after _eoddata1__Top10LossesResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__Top10LossesResponse
{ public:
/// Element "Top10LossesResult" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    eoddata1__RESPONSE*                  Top10LossesResult              0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":SymbolChart
/// @brief "http://ws.eoddata.com/Data":SymbolChart is a complexType.
///
/// class _eoddata1__SymbolChart operations:
/// - _eoddata1__SymbolChart* soap_new__eoddata1__SymbolChart(soap*) allocate
/// - _eoddata1__SymbolChart* soap_new__eoddata1__SymbolChart(soap*, int num) allocate array
/// - _eoddata1__SymbolChart* soap_new_req__eoddata1__SymbolChart(soap*, ...) allocate, set required members
/// - _eoddata1__SymbolChart* soap_new_set__eoddata1__SymbolChart(soap*, ...) allocate, set all public members
/// - _eoddata1__SymbolChart::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__SymbolChart(soap*, _eoddata1__SymbolChart*) deserialize from a stream
/// - int soap_write__eoddata1__SymbolChart(soap*, _eoddata1__SymbolChart*) serialize to a stream
/// - _eoddata1__SymbolChart* _eoddata1__SymbolChart::soap_dup(soap*) returns deep copy of _eoddata1__SymbolChart, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__SymbolChart::soap_del() deep deletes _eoddata1__SymbolChart data members, use only after _eoddata1__SymbolChart::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__SymbolChart
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// Element "Exchange" of XSD type xs:string.
    std::string*                         Exchange                       0;	///< Optional element.
/// Element "Symbol" of XSD type xs:string.
    std::string*                         Symbol                         0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":SymbolChartResponse
/// @brief "http://ws.eoddata.com/Data":SymbolChartResponse is a complexType.
///
/// class _eoddata1__SymbolChartResponse operations:
/// - _eoddata1__SymbolChartResponse* soap_new__eoddata1__SymbolChartResponse(soap*) allocate
/// - _eoddata1__SymbolChartResponse* soap_new__eoddata1__SymbolChartResponse(soap*, int num) allocate array
/// - _eoddata1__SymbolChartResponse* soap_new_req__eoddata1__SymbolChartResponse(soap*, ...) allocate, set required members
/// - _eoddata1__SymbolChartResponse* soap_new_set__eoddata1__SymbolChartResponse(soap*, ...) allocate, set all public members
/// - _eoddata1__SymbolChartResponse::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__SymbolChartResponse(soap*, _eoddata1__SymbolChartResponse*) deserialize from a stream
/// - int soap_write__eoddata1__SymbolChartResponse(soap*, _eoddata1__SymbolChartResponse*) serialize to a stream
/// - _eoddata1__SymbolChartResponse* _eoddata1__SymbolChartResponse::soap_dup(soap*) returns deep copy of _eoddata1__SymbolChartResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__SymbolChartResponse::soap_del() deep deletes _eoddata1__SymbolChartResponse data members, use only after _eoddata1__SymbolChartResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__SymbolChartResponse
{ public:
/// Element "SymbolChartResult" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    eoddata1__RESPONSE*                  SymbolChartResult              0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":ExchangeMonths
/// @brief "http://ws.eoddata.com/Data":ExchangeMonths is a complexType.
///
/// class _eoddata1__ExchangeMonths operations:
/// - _eoddata1__ExchangeMonths* soap_new__eoddata1__ExchangeMonths(soap*) allocate
/// - _eoddata1__ExchangeMonths* soap_new__eoddata1__ExchangeMonths(soap*, int num) allocate array
/// - _eoddata1__ExchangeMonths* soap_new_req__eoddata1__ExchangeMonths(soap*, ...) allocate, set required members
/// - _eoddata1__ExchangeMonths* soap_new_set__eoddata1__ExchangeMonths(soap*, ...) allocate, set all public members
/// - _eoddata1__ExchangeMonths::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__ExchangeMonths(soap*, _eoddata1__ExchangeMonths*) deserialize from a stream
/// - int soap_write__eoddata1__ExchangeMonths(soap*, _eoddata1__ExchangeMonths*) serialize to a stream
/// - _eoddata1__ExchangeMonths* _eoddata1__ExchangeMonths::soap_dup(soap*) returns deep copy of _eoddata1__ExchangeMonths, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__ExchangeMonths::soap_del() deep deletes _eoddata1__ExchangeMonths data members, use only after _eoddata1__ExchangeMonths::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__ExchangeMonths
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// Element "Exchange" of XSD type xs:string.
    std::string*                         Exchange                       0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":ExchangeMonthsResponse
/// @brief "http://ws.eoddata.com/Data":ExchangeMonthsResponse is a complexType.
///
/// class _eoddata1__ExchangeMonthsResponse operations:
/// - _eoddata1__ExchangeMonthsResponse* soap_new__eoddata1__ExchangeMonthsResponse(soap*) allocate
/// - _eoddata1__ExchangeMonthsResponse* soap_new__eoddata1__ExchangeMonthsResponse(soap*, int num) allocate array
/// - _eoddata1__ExchangeMonthsResponse* soap_new_req__eoddata1__ExchangeMonthsResponse(soap*, ...) allocate, set required members
/// - _eoddata1__ExchangeMonthsResponse* soap_new_set__eoddata1__ExchangeMonthsResponse(soap*, ...) allocate, set all public members
/// - _eoddata1__ExchangeMonthsResponse::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__ExchangeMonthsResponse(soap*, _eoddata1__ExchangeMonthsResponse*) deserialize from a stream
/// - int soap_write__eoddata1__ExchangeMonthsResponse(soap*, _eoddata1__ExchangeMonthsResponse*) serialize to a stream
/// - _eoddata1__ExchangeMonthsResponse* _eoddata1__ExchangeMonthsResponse::soap_dup(soap*) returns deep copy of _eoddata1__ExchangeMonthsResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__ExchangeMonthsResponse::soap_del() deep deletes _eoddata1__ExchangeMonthsResponse data members, use only after _eoddata1__ExchangeMonthsResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__ExchangeMonthsResponse
{ public:
/// Element "ExchangeMonthsResult" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    eoddata1__RESPONSE*                  ExchangeMonthsResult           0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":SplitListByExchange
/// @brief "http://ws.eoddata.com/Data":SplitListByExchange is a complexType.
///
/// class _eoddata1__SplitListByExchange operations:
/// - _eoddata1__SplitListByExchange* soap_new__eoddata1__SplitListByExchange(soap*) allocate
/// - _eoddata1__SplitListByExchange* soap_new__eoddata1__SplitListByExchange(soap*, int num) allocate array
/// - _eoddata1__SplitListByExchange* soap_new_req__eoddata1__SplitListByExchange(soap*, ...) allocate, set required members
/// - _eoddata1__SplitListByExchange* soap_new_set__eoddata1__SplitListByExchange(soap*, ...) allocate, set all public members
/// - _eoddata1__SplitListByExchange::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__SplitListByExchange(soap*, _eoddata1__SplitListByExchange*) deserialize from a stream
/// - int soap_write__eoddata1__SplitListByExchange(soap*, _eoddata1__SplitListByExchange*) serialize to a stream
/// - _eoddata1__SplitListByExchange* _eoddata1__SplitListByExchange::soap_dup(soap*) returns deep copy of _eoddata1__SplitListByExchange, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__SplitListByExchange::soap_del() deep deletes _eoddata1__SplitListByExchange data members, use only after _eoddata1__SplitListByExchange::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__SplitListByExchange
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// Element "Exchange" of XSD type xs:string.
    std::string*                         Exchange                       0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":SplitListByExchangeResponse
/// @brief "http://ws.eoddata.com/Data":SplitListByExchangeResponse is a complexType.
///
/// class _eoddata1__SplitListByExchangeResponse operations:
/// - _eoddata1__SplitListByExchangeResponse* soap_new__eoddata1__SplitListByExchangeResponse(soap*) allocate
/// - _eoddata1__SplitListByExchangeResponse* soap_new__eoddata1__SplitListByExchangeResponse(soap*, int num) allocate array
/// - _eoddata1__SplitListByExchangeResponse* soap_new_req__eoddata1__SplitListByExchangeResponse(soap*, ...) allocate, set required members
/// - _eoddata1__SplitListByExchangeResponse* soap_new_set__eoddata1__SplitListByExchangeResponse(soap*, ...) allocate, set all public members
/// - _eoddata1__SplitListByExchangeResponse::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__SplitListByExchangeResponse(soap*, _eoddata1__SplitListByExchangeResponse*) deserialize from a stream
/// - int soap_write__eoddata1__SplitListByExchangeResponse(soap*, _eoddata1__SplitListByExchangeResponse*) serialize to a stream
/// - _eoddata1__SplitListByExchangeResponse* _eoddata1__SplitListByExchangeResponse::soap_dup(soap*) returns deep copy of _eoddata1__SplitListByExchangeResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__SplitListByExchangeResponse::soap_del() deep deletes _eoddata1__SplitListByExchangeResponse data members, use only after _eoddata1__SplitListByExchangeResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__SplitListByExchangeResponse
{ public:
/// Element "SplitListByExchangeResult" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    eoddata1__RESPONSE*                  SplitListByExchangeResult      0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":SplitListBySymbol
/// @brief "http://ws.eoddata.com/Data":SplitListBySymbol is a complexType.
///
/// class _eoddata1__SplitListBySymbol operations:
/// - _eoddata1__SplitListBySymbol* soap_new__eoddata1__SplitListBySymbol(soap*) allocate
/// - _eoddata1__SplitListBySymbol* soap_new__eoddata1__SplitListBySymbol(soap*, int num) allocate array
/// - _eoddata1__SplitListBySymbol* soap_new_req__eoddata1__SplitListBySymbol(soap*, ...) allocate, set required members
/// - _eoddata1__SplitListBySymbol* soap_new_set__eoddata1__SplitListBySymbol(soap*, ...) allocate, set all public members
/// - _eoddata1__SplitListBySymbol::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__SplitListBySymbol(soap*, _eoddata1__SplitListBySymbol*) deserialize from a stream
/// - int soap_write__eoddata1__SplitListBySymbol(soap*, _eoddata1__SplitListBySymbol*) serialize to a stream
/// - _eoddata1__SplitListBySymbol* _eoddata1__SplitListBySymbol::soap_dup(soap*) returns deep copy of _eoddata1__SplitListBySymbol, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__SplitListBySymbol::soap_del() deep deletes _eoddata1__SplitListBySymbol data members, use only after _eoddata1__SplitListBySymbol::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__SplitListBySymbol
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// Element "Exchange" of XSD type xs:string.
    std::string*                         Exchange                       0;	///< Optional element.
/// Element "Symbol" of XSD type xs:string.
    std::string*                         Symbol                         0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":SplitListBySymbolResponse
/// @brief "http://ws.eoddata.com/Data":SplitListBySymbolResponse is a complexType.
///
/// class _eoddata1__SplitListBySymbolResponse operations:
/// - _eoddata1__SplitListBySymbolResponse* soap_new__eoddata1__SplitListBySymbolResponse(soap*) allocate
/// - _eoddata1__SplitListBySymbolResponse* soap_new__eoddata1__SplitListBySymbolResponse(soap*, int num) allocate array
/// - _eoddata1__SplitListBySymbolResponse* soap_new_req__eoddata1__SplitListBySymbolResponse(soap*, ...) allocate, set required members
/// - _eoddata1__SplitListBySymbolResponse* soap_new_set__eoddata1__SplitListBySymbolResponse(soap*, ...) allocate, set all public members
/// - _eoddata1__SplitListBySymbolResponse::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__SplitListBySymbolResponse(soap*, _eoddata1__SplitListBySymbolResponse*) deserialize from a stream
/// - int soap_write__eoddata1__SplitListBySymbolResponse(soap*, _eoddata1__SplitListBySymbolResponse*) serialize to a stream
/// - _eoddata1__SplitListBySymbolResponse* _eoddata1__SplitListBySymbolResponse::soap_dup(soap*) returns deep copy of _eoddata1__SplitListBySymbolResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__SplitListBySymbolResponse::soap_del() deep deletes _eoddata1__SplitListBySymbolResponse data members, use only after _eoddata1__SplitListBySymbolResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__SplitListBySymbolResponse
{ public:
/// Element "SplitListBySymbolResult" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    eoddata1__RESPONSE*                  SplitListBySymbolResult        0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":CountryList
/// @brief "http://ws.eoddata.com/Data":CountryList is a complexType.
///
/// class _eoddata1__CountryList operations:
/// - _eoddata1__CountryList* soap_new__eoddata1__CountryList(soap*) allocate
/// - _eoddata1__CountryList* soap_new__eoddata1__CountryList(soap*, int num) allocate array
/// - _eoddata1__CountryList* soap_new_req__eoddata1__CountryList(soap*, ...) allocate, set required members
/// - _eoddata1__CountryList* soap_new_set__eoddata1__CountryList(soap*, ...) allocate, set all public members
/// - _eoddata1__CountryList::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__CountryList(soap*, _eoddata1__CountryList*) deserialize from a stream
/// - int soap_write__eoddata1__CountryList(soap*, _eoddata1__CountryList*) serialize to a stream
/// - _eoddata1__CountryList* _eoddata1__CountryList::soap_dup(soap*) returns deep copy of _eoddata1__CountryList, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__CountryList::soap_del() deep deletes _eoddata1__CountryList data members, use only after _eoddata1__CountryList::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__CountryList
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":CountryListResponse
/// @brief "http://ws.eoddata.com/Data":CountryListResponse is a complexType.
///
/// class _eoddata1__CountryListResponse operations:
/// - _eoddata1__CountryListResponse* soap_new__eoddata1__CountryListResponse(soap*) allocate
/// - _eoddata1__CountryListResponse* soap_new__eoddata1__CountryListResponse(soap*, int num) allocate array
/// - _eoddata1__CountryListResponse* soap_new_req__eoddata1__CountryListResponse(soap*, ...) allocate, set required members
/// - _eoddata1__CountryListResponse* soap_new_set__eoddata1__CountryListResponse(soap*, ...) allocate, set all public members
/// - _eoddata1__CountryListResponse::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__CountryListResponse(soap*, _eoddata1__CountryListResponse*) deserialize from a stream
/// - int soap_write__eoddata1__CountryListResponse(soap*, _eoddata1__CountryListResponse*) serialize to a stream
/// - _eoddata1__CountryListResponse* _eoddata1__CountryListResponse::soap_dup(soap*) returns deep copy of _eoddata1__CountryListResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__CountryListResponse::soap_del() deep deletes _eoddata1__CountryListResponse data members, use only after _eoddata1__CountryListResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__CountryListResponse
{ public:
/// Element "CountryListResult" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    eoddata1__RESPONSE*                  CountryListResult              0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":SymbolHistoryPeriod
/// @brief "http://ws.eoddata.com/Data":SymbolHistoryPeriod is a complexType.
///
/// class _eoddata1__SymbolHistoryPeriod operations:
/// - _eoddata1__SymbolHistoryPeriod* soap_new__eoddata1__SymbolHistoryPeriod(soap*) allocate
/// - _eoddata1__SymbolHistoryPeriod* soap_new__eoddata1__SymbolHistoryPeriod(soap*, int num) allocate array
/// - _eoddata1__SymbolHistoryPeriod* soap_new_req__eoddata1__SymbolHistoryPeriod(soap*, ...) allocate, set required members
/// - _eoddata1__SymbolHistoryPeriod* soap_new_set__eoddata1__SymbolHistoryPeriod(soap*, ...) allocate, set all public members
/// - _eoddata1__SymbolHistoryPeriod::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__SymbolHistoryPeriod(soap*, _eoddata1__SymbolHistoryPeriod*) deserialize from a stream
/// - int soap_write__eoddata1__SymbolHistoryPeriod(soap*, _eoddata1__SymbolHistoryPeriod*) serialize to a stream
/// - _eoddata1__SymbolHistoryPeriod* _eoddata1__SymbolHistoryPeriod::soap_dup(soap*) returns deep copy of _eoddata1__SymbolHistoryPeriod, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__SymbolHistoryPeriod::soap_del() deep deletes _eoddata1__SymbolHistoryPeriod data members, use only after _eoddata1__SymbolHistoryPeriod::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__SymbolHistoryPeriod
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// Element "Exchange" of XSD type xs:string.
    std::string*                         Exchange                       0;	///< Optional element.
/// Element "Symbol" of XSD type xs:string.
    std::string*                         Symbol                         0;	///< Optional element.
/// Element "Date" of XSD type xs:string.
    std::string*                         Date                           0;	///< Optional element.
/// Element "Period" of XSD type xs:string.
    std::string*                         Period                         0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":SymbolHistoryPeriodResponse
/// @brief "http://ws.eoddata.com/Data":SymbolHistoryPeriodResponse is a complexType.
///
/// class _eoddata1__SymbolHistoryPeriodResponse operations:
/// - _eoddata1__SymbolHistoryPeriodResponse* soap_new__eoddata1__SymbolHistoryPeriodResponse(soap*) allocate
/// - _eoddata1__SymbolHistoryPeriodResponse* soap_new__eoddata1__SymbolHistoryPeriodResponse(soap*, int num) allocate array
/// - _eoddata1__SymbolHistoryPeriodResponse* soap_new_req__eoddata1__SymbolHistoryPeriodResponse(soap*, ...) allocate, set required members
/// - _eoddata1__SymbolHistoryPeriodResponse* soap_new_set__eoddata1__SymbolHistoryPeriodResponse(soap*, ...) allocate, set all public members
/// - _eoddata1__SymbolHistoryPeriodResponse::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__SymbolHistoryPeriodResponse(soap*, _eoddata1__SymbolHistoryPeriodResponse*) deserialize from a stream
/// - int soap_write__eoddata1__SymbolHistoryPeriodResponse(soap*, _eoddata1__SymbolHistoryPeriodResponse*) serialize to a stream
/// - _eoddata1__SymbolHistoryPeriodResponse* _eoddata1__SymbolHistoryPeriodResponse::soap_dup(soap*) returns deep copy of _eoddata1__SymbolHistoryPeriodResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__SymbolHistoryPeriodResponse::soap_del() deep deletes _eoddata1__SymbolHistoryPeriodResponse data members, use only after _eoddata1__SymbolHistoryPeriodResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__SymbolHistoryPeriodResponse
{ public:
/// Element "SymbolHistoryPeriodResult" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    eoddata1__RESPONSE*                  SymbolHistoryPeriodResult      0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":SymbolHistoryPeriodByDateRange
/// @brief "http://ws.eoddata.com/Data":SymbolHistoryPeriodByDateRange is a complexType.
///
/// class _eoddata1__SymbolHistoryPeriodByDateRange operations:
/// - _eoddata1__SymbolHistoryPeriodByDateRange* soap_new__eoddata1__SymbolHistoryPeriodByDateRange(soap*) allocate
/// - _eoddata1__SymbolHistoryPeriodByDateRange* soap_new__eoddata1__SymbolHistoryPeriodByDateRange(soap*, int num) allocate array
/// - _eoddata1__SymbolHistoryPeriodByDateRange* soap_new_req__eoddata1__SymbolHistoryPeriodByDateRange(soap*, ...) allocate, set required members
/// - _eoddata1__SymbolHistoryPeriodByDateRange* soap_new_set__eoddata1__SymbolHistoryPeriodByDateRange(soap*, ...) allocate, set all public members
/// - _eoddata1__SymbolHistoryPeriodByDateRange::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__SymbolHistoryPeriodByDateRange(soap*, _eoddata1__SymbolHistoryPeriodByDateRange*) deserialize from a stream
/// - int soap_write__eoddata1__SymbolHistoryPeriodByDateRange(soap*, _eoddata1__SymbolHistoryPeriodByDateRange*) serialize to a stream
/// - _eoddata1__SymbolHistoryPeriodByDateRange* _eoddata1__SymbolHistoryPeriodByDateRange::soap_dup(soap*) returns deep copy of _eoddata1__SymbolHistoryPeriodByDateRange, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__SymbolHistoryPeriodByDateRange::soap_del() deep deletes _eoddata1__SymbolHistoryPeriodByDateRange data members, use only after _eoddata1__SymbolHistoryPeriodByDateRange::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__SymbolHistoryPeriodByDateRange
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// Element "Exchange" of XSD type xs:string.
    std::string*                         Exchange                       0;	///< Optional element.
/// Element "Symbol" of XSD type xs:string.
    std::string*                         Symbol                         0;	///< Optional element.
/// Element "StartDate" of XSD type xs:string.
    std::string*                         StartDate                      0;	///< Optional element.
/// Element "EndDate" of XSD type xs:string.
    std::string*                         EndDate                        0;	///< Optional element.
/// Element "Period" of XSD type xs:string.
    std::string*                         Period                         0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":SymbolHistoryPeriodByDateRangeResponse
/// @brief "http://ws.eoddata.com/Data":SymbolHistoryPeriodByDateRangeResponse is a complexType.
///
/// class _eoddata1__SymbolHistoryPeriodByDateRangeResponse operations:
/// - _eoddata1__SymbolHistoryPeriodByDateRangeResponse* soap_new__eoddata1__SymbolHistoryPeriodByDateRangeResponse(soap*) allocate
/// - _eoddata1__SymbolHistoryPeriodByDateRangeResponse* soap_new__eoddata1__SymbolHistoryPeriodByDateRangeResponse(soap*, int num) allocate array
/// - _eoddata1__SymbolHistoryPeriodByDateRangeResponse* soap_new_req__eoddata1__SymbolHistoryPeriodByDateRangeResponse(soap*, ...) allocate, set required members
/// - _eoddata1__SymbolHistoryPeriodByDateRangeResponse* soap_new_set__eoddata1__SymbolHistoryPeriodByDateRangeResponse(soap*, ...) allocate, set all public members
/// - _eoddata1__SymbolHistoryPeriodByDateRangeResponse::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__SymbolHistoryPeriodByDateRangeResponse(soap*, _eoddata1__SymbolHistoryPeriodByDateRangeResponse*) deserialize from a stream
/// - int soap_write__eoddata1__SymbolHistoryPeriodByDateRangeResponse(soap*, _eoddata1__SymbolHistoryPeriodByDateRangeResponse*) serialize to a stream
/// - _eoddata1__SymbolHistoryPeriodByDateRangeResponse* _eoddata1__SymbolHistoryPeriodByDateRangeResponse::soap_dup(soap*) returns deep copy of _eoddata1__SymbolHistoryPeriodByDateRangeResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__SymbolHistoryPeriodByDateRangeResponse::soap_del() deep deletes _eoddata1__SymbolHistoryPeriodByDateRangeResponse data members, use only after _eoddata1__SymbolHistoryPeriodByDateRangeResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__SymbolHistoryPeriodByDateRangeResponse
{ public:
/// Element "SymbolHistoryPeriodByDateRangeResult" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    eoddata1__RESPONSE*                  SymbolHistoryPeriodByDateRangeResult 0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":QuoteListByDatePeriod
/// @brief "http://ws.eoddata.com/Data":QuoteListByDatePeriod is a complexType.
///
/// class _eoddata1__QuoteListByDatePeriod operations:
/// - _eoddata1__QuoteListByDatePeriod* soap_new__eoddata1__QuoteListByDatePeriod(soap*) allocate
/// - _eoddata1__QuoteListByDatePeriod* soap_new__eoddata1__QuoteListByDatePeriod(soap*, int num) allocate array
/// - _eoddata1__QuoteListByDatePeriod* soap_new_req__eoddata1__QuoteListByDatePeriod(soap*, ...) allocate, set required members
/// - _eoddata1__QuoteListByDatePeriod* soap_new_set__eoddata1__QuoteListByDatePeriod(soap*, ...) allocate, set all public members
/// - _eoddata1__QuoteListByDatePeriod::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__QuoteListByDatePeriod(soap*, _eoddata1__QuoteListByDatePeriod*) deserialize from a stream
/// - int soap_write__eoddata1__QuoteListByDatePeriod(soap*, _eoddata1__QuoteListByDatePeriod*) serialize to a stream
/// - _eoddata1__QuoteListByDatePeriod* _eoddata1__QuoteListByDatePeriod::soap_dup(soap*) returns deep copy of _eoddata1__QuoteListByDatePeriod, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__QuoteListByDatePeriod::soap_del() deep deletes _eoddata1__QuoteListByDatePeriod data members, use only after _eoddata1__QuoteListByDatePeriod::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__QuoteListByDatePeriod
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// Element "Exchange" of XSD type xs:string.
    std::string*                         Exchange                       0;	///< Optional element.
/// Element "QuoteDate" of XSD type xs:string.
    std::string*                         QuoteDate                      0;	///< Optional element.
/// Element "Period" of XSD type xs:string.
    std::string*                         Period                         0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":QuoteListByDatePeriodResponse
/// @brief "http://ws.eoddata.com/Data":QuoteListByDatePeriodResponse is a complexType.
///
/// class _eoddata1__QuoteListByDatePeriodResponse operations:
/// - _eoddata1__QuoteListByDatePeriodResponse* soap_new__eoddata1__QuoteListByDatePeriodResponse(soap*) allocate
/// - _eoddata1__QuoteListByDatePeriodResponse* soap_new__eoddata1__QuoteListByDatePeriodResponse(soap*, int num) allocate array
/// - _eoddata1__QuoteListByDatePeriodResponse* soap_new_req__eoddata1__QuoteListByDatePeriodResponse(soap*, ...) allocate, set required members
/// - _eoddata1__QuoteListByDatePeriodResponse* soap_new_set__eoddata1__QuoteListByDatePeriodResponse(soap*, ...) allocate, set all public members
/// - _eoddata1__QuoteListByDatePeriodResponse::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__QuoteListByDatePeriodResponse(soap*, _eoddata1__QuoteListByDatePeriodResponse*) deserialize from a stream
/// - int soap_write__eoddata1__QuoteListByDatePeriodResponse(soap*, _eoddata1__QuoteListByDatePeriodResponse*) serialize to a stream
/// - _eoddata1__QuoteListByDatePeriodResponse* _eoddata1__QuoteListByDatePeriodResponse::soap_dup(soap*) returns deep copy of _eoddata1__QuoteListByDatePeriodResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__QuoteListByDatePeriodResponse::soap_del() deep deletes _eoddata1__QuoteListByDatePeriodResponse data members, use only after _eoddata1__QuoteListByDatePeriodResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__QuoteListByDatePeriodResponse
{ public:
/// Element "QuoteListByDatePeriodResult" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    eoddata1__RESPONSE*                  QuoteListByDatePeriodResult    0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":QuoteListByDatePeriod2
/// @brief "http://ws.eoddata.com/Data":QuoteListByDatePeriod2 is a complexType.
///
/// class _eoddata1__QuoteListByDatePeriod2 operations:
/// - _eoddata1__QuoteListByDatePeriod2* soap_new__eoddata1__QuoteListByDatePeriod2(soap*) allocate
/// - _eoddata1__QuoteListByDatePeriod2* soap_new__eoddata1__QuoteListByDatePeriod2(soap*, int num) allocate array
/// - _eoddata1__QuoteListByDatePeriod2* soap_new_req__eoddata1__QuoteListByDatePeriod2(soap*, ...) allocate, set required members
/// - _eoddata1__QuoteListByDatePeriod2* soap_new_set__eoddata1__QuoteListByDatePeriod2(soap*, ...) allocate, set all public members
/// - _eoddata1__QuoteListByDatePeriod2::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__QuoteListByDatePeriod2(soap*, _eoddata1__QuoteListByDatePeriod2*) deserialize from a stream
/// - int soap_write__eoddata1__QuoteListByDatePeriod2(soap*, _eoddata1__QuoteListByDatePeriod2*) serialize to a stream
/// - _eoddata1__QuoteListByDatePeriod2* _eoddata1__QuoteListByDatePeriod2::soap_dup(soap*) returns deep copy of _eoddata1__QuoteListByDatePeriod2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__QuoteListByDatePeriod2::soap_del() deep deletes _eoddata1__QuoteListByDatePeriod2 data members, use only after _eoddata1__QuoteListByDatePeriod2::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__QuoteListByDatePeriod2
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// Element "Exchange" of XSD type xs:string.
    std::string*                         Exchange                       0;	///< Optional element.
/// Element "QuoteDate" of XSD type xs:string.
    std::string*                         QuoteDate                      0;	///< Optional element.
/// Element "Period" of XSD type xs:string.
    std::string*                         Period                         0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":QuoteListByDatePeriod2Response
/// @brief "http://ws.eoddata.com/Data":QuoteListByDatePeriod2Response is a complexType.
///
/// class _eoddata1__QuoteListByDatePeriod2Response operations:
/// - _eoddata1__QuoteListByDatePeriod2Response* soap_new__eoddata1__QuoteListByDatePeriod2Response(soap*) allocate
/// - _eoddata1__QuoteListByDatePeriod2Response* soap_new__eoddata1__QuoteListByDatePeriod2Response(soap*, int num) allocate array
/// - _eoddata1__QuoteListByDatePeriod2Response* soap_new_req__eoddata1__QuoteListByDatePeriod2Response(soap*, ...) allocate, set required members
/// - _eoddata1__QuoteListByDatePeriod2Response* soap_new_set__eoddata1__QuoteListByDatePeriod2Response(soap*, ...) allocate, set all public members
/// - _eoddata1__QuoteListByDatePeriod2Response::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__QuoteListByDatePeriod2Response(soap*, _eoddata1__QuoteListByDatePeriod2Response*) deserialize from a stream
/// - int soap_write__eoddata1__QuoteListByDatePeriod2Response(soap*, _eoddata1__QuoteListByDatePeriod2Response*) serialize to a stream
/// - _eoddata1__QuoteListByDatePeriod2Response* _eoddata1__QuoteListByDatePeriod2Response::soap_dup(soap*) returns deep copy of _eoddata1__QuoteListByDatePeriod2Response, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__QuoteListByDatePeriod2Response::soap_del() deep deletes _eoddata1__QuoteListByDatePeriod2Response data members, use only after _eoddata1__QuoteListByDatePeriod2Response::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__QuoteListByDatePeriod2Response
{ public:
/// Element "QuoteListByDatePeriod2Result" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    eoddata1__RESPONSE*                  QuoteListByDatePeriod2Result   0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":SymbolChangesByExchange
/// @brief "http://ws.eoddata.com/Data":SymbolChangesByExchange is a complexType.
///
/// class _eoddata1__SymbolChangesByExchange operations:
/// - _eoddata1__SymbolChangesByExchange* soap_new__eoddata1__SymbolChangesByExchange(soap*) allocate
/// - _eoddata1__SymbolChangesByExchange* soap_new__eoddata1__SymbolChangesByExchange(soap*, int num) allocate array
/// - _eoddata1__SymbolChangesByExchange* soap_new_req__eoddata1__SymbolChangesByExchange(soap*, ...) allocate, set required members
/// - _eoddata1__SymbolChangesByExchange* soap_new_set__eoddata1__SymbolChangesByExchange(soap*, ...) allocate, set all public members
/// - _eoddata1__SymbolChangesByExchange::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__SymbolChangesByExchange(soap*, _eoddata1__SymbolChangesByExchange*) deserialize from a stream
/// - int soap_write__eoddata1__SymbolChangesByExchange(soap*, _eoddata1__SymbolChangesByExchange*) serialize to a stream
/// - _eoddata1__SymbolChangesByExchange* _eoddata1__SymbolChangesByExchange::soap_dup(soap*) returns deep copy of _eoddata1__SymbolChangesByExchange, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__SymbolChangesByExchange::soap_del() deep deletes _eoddata1__SymbolChangesByExchange data members, use only after _eoddata1__SymbolChangesByExchange::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__SymbolChangesByExchange
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// Element "Exchange" of XSD type xs:string.
    std::string*                         Exchange                       0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":SymbolChangesByExchangeResponse
/// @brief "http://ws.eoddata.com/Data":SymbolChangesByExchangeResponse is a complexType.
///
/// class _eoddata1__SymbolChangesByExchangeResponse operations:
/// - _eoddata1__SymbolChangesByExchangeResponse* soap_new__eoddata1__SymbolChangesByExchangeResponse(soap*) allocate
/// - _eoddata1__SymbolChangesByExchangeResponse* soap_new__eoddata1__SymbolChangesByExchangeResponse(soap*, int num) allocate array
/// - _eoddata1__SymbolChangesByExchangeResponse* soap_new_req__eoddata1__SymbolChangesByExchangeResponse(soap*, ...) allocate, set required members
/// - _eoddata1__SymbolChangesByExchangeResponse* soap_new_set__eoddata1__SymbolChangesByExchangeResponse(soap*, ...) allocate, set all public members
/// - _eoddata1__SymbolChangesByExchangeResponse::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__SymbolChangesByExchangeResponse(soap*, _eoddata1__SymbolChangesByExchangeResponse*) deserialize from a stream
/// - int soap_write__eoddata1__SymbolChangesByExchangeResponse(soap*, _eoddata1__SymbolChangesByExchangeResponse*) serialize to a stream
/// - _eoddata1__SymbolChangesByExchangeResponse* _eoddata1__SymbolChangesByExchangeResponse::soap_dup(soap*) returns deep copy of _eoddata1__SymbolChangesByExchangeResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__SymbolChangesByExchangeResponse::soap_del() deep deletes _eoddata1__SymbolChangesByExchangeResponse data members, use only after _eoddata1__SymbolChangesByExchangeResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__SymbolChangesByExchangeResponse
{ public:
/// Element "SymbolChangesByExchangeResult" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    eoddata1__RESPONSE*                  SymbolChangesByExchangeResult  0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":DataClientLatestVersion
/// @brief "http://ws.eoddata.com/Data":DataClientLatestVersion is a complexType.
///
/// class _eoddata1__DataClientLatestVersion operations:
/// - _eoddata1__DataClientLatestVersion* soap_new__eoddata1__DataClientLatestVersion(soap*) allocate
/// - _eoddata1__DataClientLatestVersion* soap_new__eoddata1__DataClientLatestVersion(soap*, int num) allocate array
/// - _eoddata1__DataClientLatestVersion* soap_new_req__eoddata1__DataClientLatestVersion(soap*, ...) allocate, set required members
/// - _eoddata1__DataClientLatestVersion* soap_new_set__eoddata1__DataClientLatestVersion(soap*, ...) allocate, set all public members
/// - _eoddata1__DataClientLatestVersion::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__DataClientLatestVersion(soap*, _eoddata1__DataClientLatestVersion*) deserialize from a stream
/// - int soap_write__eoddata1__DataClientLatestVersion(soap*, _eoddata1__DataClientLatestVersion*) serialize to a stream
/// - _eoddata1__DataClientLatestVersion* _eoddata1__DataClientLatestVersion::soap_dup(soap*) returns deep copy of _eoddata1__DataClientLatestVersion, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__DataClientLatestVersion::soap_del() deep deletes _eoddata1__DataClientLatestVersion data members, use only after _eoddata1__DataClientLatestVersion::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__DataClientLatestVersion
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":DataClientLatestVersionResponse
/// @brief "http://ws.eoddata.com/Data":DataClientLatestVersionResponse is a complexType.
///
/// class _eoddata1__DataClientLatestVersionResponse operations:
/// - _eoddata1__DataClientLatestVersionResponse* soap_new__eoddata1__DataClientLatestVersionResponse(soap*) allocate
/// - _eoddata1__DataClientLatestVersionResponse* soap_new__eoddata1__DataClientLatestVersionResponse(soap*, int num) allocate array
/// - _eoddata1__DataClientLatestVersionResponse* soap_new_req__eoddata1__DataClientLatestVersionResponse(soap*, ...) allocate, set required members
/// - _eoddata1__DataClientLatestVersionResponse* soap_new_set__eoddata1__DataClientLatestVersionResponse(soap*, ...) allocate, set all public members
/// - _eoddata1__DataClientLatestVersionResponse::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__DataClientLatestVersionResponse(soap*, _eoddata1__DataClientLatestVersionResponse*) deserialize from a stream
/// - int soap_write__eoddata1__DataClientLatestVersionResponse(soap*, _eoddata1__DataClientLatestVersionResponse*) serialize to a stream
/// - _eoddata1__DataClientLatestVersionResponse* _eoddata1__DataClientLatestVersionResponse::soap_dup(soap*) returns deep copy of _eoddata1__DataClientLatestVersionResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__DataClientLatestVersionResponse::soap_del() deep deletes _eoddata1__DataClientLatestVersionResponse data members, use only after _eoddata1__DataClientLatestVersionResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__DataClientLatestVersionResponse
{ public:
/// Element "DataClientLatestVersionResult" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    eoddata1__RESPONSE*                  DataClientLatestVersionResult  0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":DataFormats
/// @brief "http://ws.eoddata.com/Data":DataFormats is a complexType.
///
/// class _eoddata1__DataFormats operations:
/// - _eoddata1__DataFormats* soap_new__eoddata1__DataFormats(soap*) allocate
/// - _eoddata1__DataFormats* soap_new__eoddata1__DataFormats(soap*, int num) allocate array
/// - _eoddata1__DataFormats* soap_new_req__eoddata1__DataFormats(soap*, ...) allocate, set required members
/// - _eoddata1__DataFormats* soap_new_set__eoddata1__DataFormats(soap*, ...) allocate, set all public members
/// - _eoddata1__DataFormats::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__DataFormats(soap*, _eoddata1__DataFormats*) deserialize from a stream
/// - int soap_write__eoddata1__DataFormats(soap*, _eoddata1__DataFormats*) serialize to a stream
/// - _eoddata1__DataFormats* _eoddata1__DataFormats::soap_dup(soap*) returns deep copy of _eoddata1__DataFormats, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__DataFormats::soap_del() deep deletes _eoddata1__DataFormats data members, use only after _eoddata1__DataFormats::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__DataFormats
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":DataFormatsResponse
/// @brief "http://ws.eoddata.com/Data":DataFormatsResponse is a complexType.
///
/// class _eoddata1__DataFormatsResponse operations:
/// - _eoddata1__DataFormatsResponse* soap_new__eoddata1__DataFormatsResponse(soap*) allocate
/// - _eoddata1__DataFormatsResponse* soap_new__eoddata1__DataFormatsResponse(soap*, int num) allocate array
/// - _eoddata1__DataFormatsResponse* soap_new_req__eoddata1__DataFormatsResponse(soap*, ...) allocate, set required members
/// - _eoddata1__DataFormatsResponse* soap_new_set__eoddata1__DataFormatsResponse(soap*, ...) allocate, set all public members
/// - _eoddata1__DataFormatsResponse::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__DataFormatsResponse(soap*, _eoddata1__DataFormatsResponse*) deserialize from a stream
/// - int soap_write__eoddata1__DataFormatsResponse(soap*, _eoddata1__DataFormatsResponse*) serialize to a stream
/// - _eoddata1__DataFormatsResponse* _eoddata1__DataFormatsResponse::soap_dup(soap*) returns deep copy of _eoddata1__DataFormatsResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__DataFormatsResponse::soap_del() deep deletes _eoddata1__DataFormatsResponse data members, use only after _eoddata1__DataFormatsResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__DataFormatsResponse
{ public:
/// Element "DataFormatsResult" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    eoddata1__RESPONSE*                  DataFormatsResult              0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":UpdateDataFormat
/// @brief "http://ws.eoddata.com/Data":UpdateDataFormat is a complexType.
///
/// class _eoddata1__UpdateDataFormat operations:
/// - _eoddata1__UpdateDataFormat* soap_new__eoddata1__UpdateDataFormat(soap*) allocate
/// - _eoddata1__UpdateDataFormat* soap_new__eoddata1__UpdateDataFormat(soap*, int num) allocate array
/// - _eoddata1__UpdateDataFormat* soap_new_req__eoddata1__UpdateDataFormat(soap*, ...) allocate, set required members
/// - _eoddata1__UpdateDataFormat* soap_new_set__eoddata1__UpdateDataFormat(soap*, ...) allocate, set all public members
/// - _eoddata1__UpdateDataFormat::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__UpdateDataFormat(soap*, _eoddata1__UpdateDataFormat*) deserialize from a stream
/// - int soap_write__eoddata1__UpdateDataFormat(soap*, _eoddata1__UpdateDataFormat*) serialize to a stream
/// - _eoddata1__UpdateDataFormat* _eoddata1__UpdateDataFormat::soap_dup(soap*) returns deep copy of _eoddata1__UpdateDataFormat, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__UpdateDataFormat::soap_del() deep deletes _eoddata1__UpdateDataFormat data members, use only after _eoddata1__UpdateDataFormat::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__UpdateDataFormat
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// Element "DataFormat" of XSD type xs:string.
    std::string*                         DataFormat                     0;	///< Optional element.
/// Element "IncludeHeader" of XSD type xs:boolean.
    bool                                 IncludeHeader                  1;	///< Required element.
/// Element "IncludeSuffix" of XSD type xs:boolean.
    bool                                 IncludeSuffix                  1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":UpdateDataFormatResponse
/// @brief "http://ws.eoddata.com/Data":UpdateDataFormatResponse is a complexType.
///
/// class _eoddata1__UpdateDataFormatResponse operations:
/// - _eoddata1__UpdateDataFormatResponse* soap_new__eoddata1__UpdateDataFormatResponse(soap*) allocate
/// - _eoddata1__UpdateDataFormatResponse* soap_new__eoddata1__UpdateDataFormatResponse(soap*, int num) allocate array
/// - _eoddata1__UpdateDataFormatResponse* soap_new_req__eoddata1__UpdateDataFormatResponse(soap*, ...) allocate, set required members
/// - _eoddata1__UpdateDataFormatResponse* soap_new_set__eoddata1__UpdateDataFormatResponse(soap*, ...) allocate, set all public members
/// - _eoddata1__UpdateDataFormatResponse::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__UpdateDataFormatResponse(soap*, _eoddata1__UpdateDataFormatResponse*) deserialize from a stream
/// - int soap_write__eoddata1__UpdateDataFormatResponse(soap*, _eoddata1__UpdateDataFormatResponse*) serialize to a stream
/// - _eoddata1__UpdateDataFormatResponse* _eoddata1__UpdateDataFormatResponse::soap_dup(soap*) returns deep copy of _eoddata1__UpdateDataFormatResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__UpdateDataFormatResponse::soap_del() deep deletes _eoddata1__UpdateDataFormatResponse data members, use only after _eoddata1__UpdateDataFormatResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__UpdateDataFormatResponse
{ public:
/// Element "UpdateDataFormatResult" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    eoddata1__RESPONSE*                  UpdateDataFormatResult         0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":ValidateAccess
/// @brief "http://ws.eoddata.com/Data":ValidateAccess is a complexType.
///
/// class _eoddata1__ValidateAccess operations:
/// - _eoddata1__ValidateAccess* soap_new__eoddata1__ValidateAccess(soap*) allocate
/// - _eoddata1__ValidateAccess* soap_new__eoddata1__ValidateAccess(soap*, int num) allocate array
/// - _eoddata1__ValidateAccess* soap_new_req__eoddata1__ValidateAccess(soap*, ...) allocate, set required members
/// - _eoddata1__ValidateAccess* soap_new_set__eoddata1__ValidateAccess(soap*, ...) allocate, set all public members
/// - _eoddata1__ValidateAccess::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__ValidateAccess(soap*, _eoddata1__ValidateAccess*) deserialize from a stream
/// - int soap_write__eoddata1__ValidateAccess(soap*, _eoddata1__ValidateAccess*) serialize to a stream
/// - _eoddata1__ValidateAccess* _eoddata1__ValidateAccess::soap_dup(soap*) returns deep copy of _eoddata1__ValidateAccess, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__ValidateAccess::soap_del() deep deletes _eoddata1__ValidateAccess data members, use only after _eoddata1__ValidateAccess::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__ValidateAccess
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// Element "Exchange" of XSD type xs:string.
    std::string*                         Exchange                       0;	///< Optional element.
/// Element "QuoteDate" of XSD type xs:string.
    std::string*                         QuoteDate                      0;	///< Optional element.
/// Element "Period" of XSD type xs:string.
    std::string*                         Period                         0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":ValidateAccessResponse
/// @brief "http://ws.eoddata.com/Data":ValidateAccessResponse is a complexType.
///
/// class _eoddata1__ValidateAccessResponse operations:
/// - _eoddata1__ValidateAccessResponse* soap_new__eoddata1__ValidateAccessResponse(soap*) allocate
/// - _eoddata1__ValidateAccessResponse* soap_new__eoddata1__ValidateAccessResponse(soap*, int num) allocate array
/// - _eoddata1__ValidateAccessResponse* soap_new_req__eoddata1__ValidateAccessResponse(soap*, ...) allocate, set required members
/// - _eoddata1__ValidateAccessResponse* soap_new_set__eoddata1__ValidateAccessResponse(soap*, ...) allocate, set all public members
/// - _eoddata1__ValidateAccessResponse::soap_default(soap*) reset members to default
/// - int soap_read__eoddata1__ValidateAccessResponse(soap*, _eoddata1__ValidateAccessResponse*) deserialize from a stream
/// - int soap_write__eoddata1__ValidateAccessResponse(soap*, _eoddata1__ValidateAccessResponse*) serialize to a stream
/// - _eoddata1__ValidateAccessResponse* _eoddata1__ValidateAccessResponse::soap_dup(soap*) returns deep copy of _eoddata1__ValidateAccessResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _eoddata1__ValidateAccessResponse::soap_del() deep deletes _eoddata1__ValidateAccessResponse data members, use only after _eoddata1__ValidateAccessResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _eoddata1__ValidateAccessResponse
{ public:
/// Element "ValidateAccessResult" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    eoddata1__RESPONSE*                  ValidateAccessResult           0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://ws.eoddata.com/Data                                               *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://ws.eoddata.com/Data":LOGINRESPONSE of XSD type "http://ws.eoddata.com/Data":LOGINRESPONSE.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://ws.eoddata.com/Data":RESPONSE of XSD type "http://ws.eoddata.com/Data":RESPONSE.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://ws.eoddata.com/Data                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/

// This service supports SOAP 1.2 namespaces:
#import "soap12.h"

//gsoap eoddata1 service name:	DataSoap 
//gsoap eoddata1 service type:	DataSoap 
//gsoap eoddata1 service port:	http://ws.eoddata.com/data.asmx 
//gsoap eoddata1 service namespace:	http://ws.eoddata.com/Data 
//gsoap eoddata1 service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_documentation Documentation
EODData Financial Information Web Service

@section Service_bindings Service Bindings

  - @ref DataSoap

@section Service_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page DataSoap Binding "DataSoap"

@section DataSoap_service Service Documentation "DataSoap"
EODData Financial Information Web Service

@section DataSoap_operations Operations of Binding "DataSoap"

  - @ref __eoddata1__Login

  - @ref __eoddata1__Login2

  - @ref __eoddata1__Membership

  - @ref __eoddata1__ExchangeList

  - @ref __eoddata1__ExchangeGet

  - @ref __eoddata1__SymbolList

  - @ref __eoddata1__SymbolList2

  - @ref __eoddata1__QuoteGet

  - @ref __eoddata1__QuoteList2

  - @ref __eoddata1__SymbolGet

  - @ref __eoddata1__QuoteList

  - @ref __eoddata1__NewsList

  - @ref __eoddata1__NewsListBySymbol

  - @ref __eoddata1__FundamentalList

  - @ref __eoddata1__TechnicalList

  - @ref __eoddata1__QuoteListByDate

  - @ref __eoddata1__QuoteListByDate2

  - @ref __eoddata1__SymbolHistory

  - @ref __eoddata1__Top10Gains

  - @ref __eoddata1__Top10Losses

  - @ref __eoddata1__SymbolChart

  - @ref __eoddata1__ExchangeMonths

  - @ref __eoddata1__SplitListByExchange

  - @ref __eoddata1__SplitListBySymbol

  - @ref __eoddata1__CountryList

  - @ref __eoddata1__SymbolHistoryPeriod

  - @ref __eoddata1__SymbolHistoryPeriodByDateRange

  - @ref __eoddata1__QuoteListByDatePeriod

  - @ref __eoddata1__QuoteListByDatePeriod2

  - @ref __eoddata1__SymbolChangesByExchange

  - @ref __eoddata1__DataClientLatestVersion

  - @ref __eoddata1__DataFormats

  - @ref __eoddata1__UpdateDataFormat

  - @ref __eoddata1__ValidateAccess

  - @ref __eoddata1__Login_

  - @ref __eoddata1__Login2_

  - @ref __eoddata1__Membership_

  - @ref __eoddata1__ExchangeList_

  - @ref __eoddata1__ExchangeGet_

  - @ref __eoddata1__SymbolList_

  - @ref __eoddata1__SymbolList2_

  - @ref __eoddata1__QuoteGet_

  - @ref __eoddata1__QuoteList2_

  - @ref __eoddata1__SymbolGet_

  - @ref __eoddata1__QuoteList_

  - @ref __eoddata1__NewsList_

  - @ref __eoddata1__NewsListBySymbol_

  - @ref __eoddata1__FundamentalList_

  - @ref __eoddata1__TechnicalList_

  - @ref __eoddata1__QuoteListByDate_

  - @ref __eoddata1__QuoteListByDate2_

  - @ref __eoddata1__SymbolHistory_

  - @ref __eoddata1__Top10Gains_

  - @ref __eoddata1__Top10Losses_

  - @ref __eoddata1__SymbolChart_

  - @ref __eoddata1__ExchangeMonths_

  - @ref __eoddata1__SplitListByExchange_

  - @ref __eoddata1__SplitListBySymbol_

  - @ref __eoddata1__CountryList_

  - @ref __eoddata1__SymbolHistoryPeriod_

  - @ref __eoddata1__SymbolHistoryPeriodByDateRange_

  - @ref __eoddata1__QuoteListByDatePeriod_

  - @ref __eoddata1__QuoteListByDatePeriod2_

  - @ref __eoddata1__SymbolChangesByExchange_

  - @ref __eoddata1__DataClientLatestVersion_

  - @ref __eoddata1__DataFormats_

  - @ref __eoddata1__UpdateDataFormat_

  - @ref __eoddata1__ValidateAccess_

@section DataSoap_ports Endpoints of Binding "DataSoap"

  - http://ws.eoddata.com/data.asmx

@note Multiple service bindings collected as one, use wsdl2h option -Nname to produce a separate service for each binding


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   DataSoap                                                                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__Login                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__Login" of service binding "DataSoap".
Login to EODData Financial Information Web Service. Used for Web Authentication.<br/>INPUT:
Username, Password<br/>OUTPUT: Login Token

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/Login"

  - Addressing input action: "http://ws.eoddata.com/Data/Login"

  - Addressing output action: "http://ws.eoddata.com/Data/LoginResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__Login(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__Login*                   eoddata1__Login,
    // output parameters:
    _eoddata1__LoginResponse           &eoddata1__LoginResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__Login(
    struct soap *soap,
    // input parameters:
    _eoddata1__Login*                   eoddata1__Login,
    // output parameters:
    _eoddata1__LoginResponse           &eoddata1__LoginResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	Login SOAP
//gsoap eoddata1 service method-style:	Login document
//gsoap eoddata1 service method-encoding:	Login literal
//gsoap eoddata1 service method-input-action:	Login http://ws.eoddata.com/Data/Login
//gsoap eoddata1 service method-output-action:	Login http://ws.eoddata.com/Data/LoginResponse
int __eoddata1__Login(
    _eoddata1__Login*                   eoddata1__Login,	///< Input parameter
    _eoddata1__LoginResponse           &eoddata1__LoginResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__Login2                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__Login2" of service binding "DataSoap".
Login to EODData Financial Information Web Service. Used for Application Authentication.<br/>INPUT:
Username, Password, Version (Application Version)<br/>OUTPUT: Login Token

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/Login2"

  - Addressing input action: "http://ws.eoddata.com/Data/Login2"

  - Addressing output action: "http://ws.eoddata.com/Data/Login2Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__Login2(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__Login2*                  eoddata1__Login2,
    // output parameters:
    _eoddata1__Login2Response          &eoddata1__Login2Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__Login2(
    struct soap *soap,
    // input parameters:
    _eoddata1__Login2*                  eoddata1__Login2,
    // output parameters:
    _eoddata1__Login2Response          &eoddata1__Login2Response
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	Login2 SOAP
//gsoap eoddata1 service method-style:	Login2 document
//gsoap eoddata1 service method-encoding:	Login2 literal
//gsoap eoddata1 service method-input-action:	Login2 http://ws.eoddata.com/Data/Login2
//gsoap eoddata1 service method-output-action:	Login2 http://ws.eoddata.com/Data/Login2Response
int __eoddata1__Login2(
    _eoddata1__Login2*                  eoddata1__Login2,	///< Input parameter
    _eoddata1__Login2Response          &eoddata1__Login2Response	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__Membership                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__Membership" of service binding "DataSoap".
Returns membership of user.<br/>INPUT: Token (Login Token)<br/>OUTPUT: Membership

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/Membership"

  - Addressing input action: "http://ws.eoddata.com/Data/Membership"

  - Addressing output action: "http://ws.eoddata.com/Data/MembershipResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__Membership(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__Membership*              eoddata1__Membership,
    // output parameters:
    _eoddata1__MembershipResponse      &eoddata1__MembershipResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__Membership(
    struct soap *soap,
    // input parameters:
    _eoddata1__Membership*              eoddata1__Membership,
    // output parameters:
    _eoddata1__MembershipResponse      &eoddata1__MembershipResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	Membership SOAP
//gsoap eoddata1 service method-style:	Membership document
//gsoap eoddata1 service method-encoding:	Membership literal
//gsoap eoddata1 service method-input-action:	Membership http://ws.eoddata.com/Data/Membership
//gsoap eoddata1 service method-output-action:	Membership http://ws.eoddata.com/Data/MembershipResponse
int __eoddata1__Membership(
    _eoddata1__Membership*              eoddata1__Membership,	///< Input parameter
    _eoddata1__MembershipResponse      &eoddata1__MembershipResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__ExchangeList                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__ExchangeList" of service binding "DataSoap".
Returns a list of available exchanges.<br/>INPUT: Token (Login Token)<br/>OUTPUT:
List of exchanges

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/ExchangeList"

  - Addressing input action: "http://ws.eoddata.com/Data/ExchangeList"

  - Addressing output action: "http://ws.eoddata.com/Data/ExchangeListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__ExchangeList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__ExchangeList*            eoddata1__ExchangeList,
    // output parameters:
    _eoddata1__ExchangeListResponse    &eoddata1__ExchangeListResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__ExchangeList(
    struct soap *soap,
    // input parameters:
    _eoddata1__ExchangeList*            eoddata1__ExchangeList,
    // output parameters:
    _eoddata1__ExchangeListResponse    &eoddata1__ExchangeListResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	ExchangeList SOAP
//gsoap eoddata1 service method-style:	ExchangeList document
//gsoap eoddata1 service method-encoding:	ExchangeList literal
//gsoap eoddata1 service method-input-action:	ExchangeList http://ws.eoddata.com/Data/ExchangeList
//gsoap eoddata1 service method-output-action:	ExchangeList http://ws.eoddata.com/Data/ExchangeListResponse
int __eoddata1__ExchangeList(
    _eoddata1__ExchangeList*            eoddata1__ExchangeList,	///< Input parameter
    _eoddata1__ExchangeListResponse    &eoddata1__ExchangeListResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__ExchangeGet                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__ExchangeGet" of service binding "DataSoap".
Returns detailed information of a specific exchange.<br/>INPUT: Token (Login Token),
Exchange (eg: NASDAQ)<br/>OUTPUT: Exchange

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/ExchangeGet"

  - Addressing input action: "http://ws.eoddata.com/Data/ExchangeGet"

  - Addressing output action: "http://ws.eoddata.com/Data/ExchangeGetResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__ExchangeGet(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__ExchangeGet*             eoddata1__ExchangeGet,
    // output parameters:
    _eoddata1__ExchangeGetResponse     &eoddata1__ExchangeGetResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__ExchangeGet(
    struct soap *soap,
    // input parameters:
    _eoddata1__ExchangeGet*             eoddata1__ExchangeGet,
    // output parameters:
    _eoddata1__ExchangeGetResponse     &eoddata1__ExchangeGetResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	ExchangeGet SOAP
//gsoap eoddata1 service method-style:	ExchangeGet document
//gsoap eoddata1 service method-encoding:	ExchangeGet literal
//gsoap eoddata1 service method-input-action:	ExchangeGet http://ws.eoddata.com/Data/ExchangeGet
//gsoap eoddata1 service method-output-action:	ExchangeGet http://ws.eoddata.com/Data/ExchangeGetResponse
int __eoddata1__ExchangeGet(
    _eoddata1__ExchangeGet*             eoddata1__ExchangeGet,	///< Input parameter
    _eoddata1__ExchangeGetResponse     &eoddata1__ExchangeGetResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__SymbolList                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__SymbolList" of service binding "DataSoap".
Returns a list of symbols of a specified exchange. <br/>INPUT: Token (Login Token),
Exchange (eg: NASDAQ)<br/>OUTPUT: List of symbols

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/SymbolList"

  - Addressing input action: "http://ws.eoddata.com/Data/SymbolList"

  - Addressing output action: "http://ws.eoddata.com/Data/SymbolListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__SymbolList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__SymbolList*              eoddata1__SymbolList,
    // output parameters:
    _eoddata1__SymbolListResponse      &eoddata1__SymbolListResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__SymbolList(
    struct soap *soap,
    // input parameters:
    _eoddata1__SymbolList*              eoddata1__SymbolList,
    // output parameters:
    _eoddata1__SymbolListResponse      &eoddata1__SymbolListResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	SymbolList SOAP
//gsoap eoddata1 service method-style:	SymbolList document
//gsoap eoddata1 service method-encoding:	SymbolList literal
//gsoap eoddata1 service method-input-action:	SymbolList http://ws.eoddata.com/Data/SymbolList
//gsoap eoddata1 service method-output-action:	SymbolList http://ws.eoddata.com/Data/SymbolListResponse
int __eoddata1__SymbolList(
    _eoddata1__SymbolList*              eoddata1__SymbolList,	///< Input parameter
    _eoddata1__SymbolListResponse      &eoddata1__SymbolListResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__SymbolList2                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__SymbolList2" of service binding "DataSoap".
Returns a list of symbols of a specified exchange (compact format).<br/>INPUT: Token
(Login Token), Exchange (eg: NASDAQ)<br/>OUTPUT: List of symbols

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/SymbolList2"

  - Addressing input action: "http://ws.eoddata.com/Data/SymbolList2"

  - Addressing output action: "http://ws.eoddata.com/Data/SymbolList2Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__SymbolList2(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__SymbolList2*             eoddata1__SymbolList2,
    // output parameters:
    _eoddata1__SymbolList2Response     &eoddata1__SymbolList2Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__SymbolList2(
    struct soap *soap,
    // input parameters:
    _eoddata1__SymbolList2*             eoddata1__SymbolList2,
    // output parameters:
    _eoddata1__SymbolList2Response     &eoddata1__SymbolList2Response
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	SymbolList2 SOAP
//gsoap eoddata1 service method-style:	SymbolList2 document
//gsoap eoddata1 service method-encoding:	SymbolList2 literal
//gsoap eoddata1 service method-input-action:	SymbolList2 http://ws.eoddata.com/Data/SymbolList2
//gsoap eoddata1 service method-output-action:	SymbolList2 http://ws.eoddata.com/Data/SymbolList2Response
int __eoddata1__SymbolList2(
    _eoddata1__SymbolList2*             eoddata1__SymbolList2,	///< Input parameter
    _eoddata1__SymbolList2Response     &eoddata1__SymbolList2Response	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__QuoteGet                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__QuoteGet" of service binding "DataSoap".
Returns an end of day quote for a specific symbol.<br/>INPUT: Token (Login Token),
Exchange (eg: NASDAQ), Symbol (eg:MSFT)<br/>OUTPUT: End of day quote

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/QuoteGet"

  - Addressing input action: "http://ws.eoddata.com/Data/QuoteGet"

  - Addressing output action: "http://ws.eoddata.com/Data/QuoteGetResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__QuoteGet(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__QuoteGet*                eoddata1__QuoteGet,
    // output parameters:
    _eoddata1__QuoteGetResponse        &eoddata1__QuoteGetResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__QuoteGet(
    struct soap *soap,
    // input parameters:
    _eoddata1__QuoteGet*                eoddata1__QuoteGet,
    // output parameters:
    _eoddata1__QuoteGetResponse        &eoddata1__QuoteGetResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	QuoteGet SOAP
//gsoap eoddata1 service method-style:	QuoteGet document
//gsoap eoddata1 service method-encoding:	QuoteGet literal
//gsoap eoddata1 service method-input-action:	QuoteGet http://ws.eoddata.com/Data/QuoteGet
//gsoap eoddata1 service method-output-action:	QuoteGet http://ws.eoddata.com/Data/QuoteGetResponse
int __eoddata1__QuoteGet(
    _eoddata1__QuoteGet*                eoddata1__QuoteGet,	///< Input parameter
    _eoddata1__QuoteGetResponse        &eoddata1__QuoteGetResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__QuoteList2                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__QuoteList2" of service binding "DataSoap".
Returns latest end of day quotes for a list of symbols of a specific exchange (compact
format).<br/>INPUT: Token (Login Token), Exchange (eg: NASDAQ), Symbols (eg:MSFT,INTC)<br/>OUTPUT:
List of end of day quotes

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/QuoteList2"

  - Addressing input action: "http://ws.eoddata.com/Data/QuoteList2"

  - Addressing output action: "http://ws.eoddata.com/Data/QuoteList2Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__QuoteList2(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__QuoteList2*              eoddata1__QuoteList2,
    // output parameters:
    _eoddata1__QuoteList2Response      &eoddata1__QuoteList2Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__QuoteList2(
    struct soap *soap,
    // input parameters:
    _eoddata1__QuoteList2*              eoddata1__QuoteList2,
    // output parameters:
    _eoddata1__QuoteList2Response      &eoddata1__QuoteList2Response
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	QuoteList2 SOAP
//gsoap eoddata1 service method-style:	QuoteList2 document
//gsoap eoddata1 service method-encoding:	QuoteList2 literal
//gsoap eoddata1 service method-input-action:	QuoteList2 http://ws.eoddata.com/Data/QuoteList2
//gsoap eoddata1 service method-output-action:	QuoteList2 http://ws.eoddata.com/Data/QuoteList2Response
int __eoddata1__QuoteList2(
    _eoddata1__QuoteList2*              eoddata1__QuoteList2,	///< Input parameter
    _eoddata1__QuoteList2Response      &eoddata1__QuoteList2Response	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__SymbolGet                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__SymbolGet" of service binding "DataSoap".
Returns detailed information of a specific symbol.<br/>INPUT: Token (Login Token),
Exchange (eg: NASDAQ), Symbol (eg:MSFT)<br/>OUTPUT: Symbol

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/SymbolGet"

  - Addressing input action: "http://ws.eoddata.com/Data/SymbolGet"

  - Addressing output action: "http://ws.eoddata.com/Data/SymbolGetResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__SymbolGet(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__SymbolGet*               eoddata1__SymbolGet,
    // output parameters:
    _eoddata1__SymbolGetResponse       &eoddata1__SymbolGetResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__SymbolGet(
    struct soap *soap,
    // input parameters:
    _eoddata1__SymbolGet*               eoddata1__SymbolGet,
    // output parameters:
    _eoddata1__SymbolGetResponse       &eoddata1__SymbolGetResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	SymbolGet SOAP
//gsoap eoddata1 service method-style:	SymbolGet document
//gsoap eoddata1 service method-encoding:	SymbolGet literal
//gsoap eoddata1 service method-input-action:	SymbolGet http://ws.eoddata.com/Data/SymbolGet
//gsoap eoddata1 service method-output-action:	SymbolGet http://ws.eoddata.com/Data/SymbolGetResponse
int __eoddata1__SymbolGet(
    _eoddata1__SymbolGet*               eoddata1__SymbolGet,	///< Input parameter
    _eoddata1__SymbolGetResponse       &eoddata1__SymbolGetResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__QuoteList                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__QuoteList" of service binding "DataSoap".
Returns a complete list of end of day quotes for an entire exchange.<br/>INPUT:
Token (Login Token), Exchange (eg: NASDAQ)<br/>OUTPUT: List of end of day quotes

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/QuoteList"

  - Addressing input action: "http://ws.eoddata.com/Data/QuoteList"

  - Addressing output action: "http://ws.eoddata.com/Data/QuoteListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__QuoteList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__QuoteList*               eoddata1__QuoteList,
    // output parameters:
    _eoddata1__QuoteListResponse       &eoddata1__QuoteListResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__QuoteList(
    struct soap *soap,
    // input parameters:
    _eoddata1__QuoteList*               eoddata1__QuoteList,
    // output parameters:
    _eoddata1__QuoteListResponse       &eoddata1__QuoteListResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	QuoteList SOAP
//gsoap eoddata1 service method-style:	QuoteList document
//gsoap eoddata1 service method-encoding:	QuoteList literal
//gsoap eoddata1 service method-input-action:	QuoteList http://ws.eoddata.com/Data/QuoteList
//gsoap eoddata1 service method-output-action:	QuoteList http://ws.eoddata.com/Data/QuoteListResponse
int __eoddata1__QuoteList(
    _eoddata1__QuoteList*               eoddata1__QuoteList,	///< Input parameter
    _eoddata1__QuoteListResponse       &eoddata1__QuoteListResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__NewsList                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__NewsList" of service binding "DataSoap".
Returns a list of News articles for an entire exchange.<br/>INPUT: Token (Login
Token), Exchange (eg: NASDAQ)<br/>OUTPUT: List of News articles

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/NewsList"

  - Addressing input action: "http://ws.eoddata.com/Data/NewsList"

  - Addressing output action: "http://ws.eoddata.com/Data/NewsListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__NewsList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__NewsList*                eoddata1__NewsList,
    // output parameters:
    _eoddata1__NewsListResponse        &eoddata1__NewsListResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__NewsList(
    struct soap *soap,
    // input parameters:
    _eoddata1__NewsList*                eoddata1__NewsList,
    // output parameters:
    _eoddata1__NewsListResponse        &eoddata1__NewsListResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	NewsList SOAP
//gsoap eoddata1 service method-style:	NewsList document
//gsoap eoddata1 service method-encoding:	NewsList literal
//gsoap eoddata1 service method-input-action:	NewsList http://ws.eoddata.com/Data/NewsList
//gsoap eoddata1 service method-output-action:	NewsList http://ws.eoddata.com/Data/NewsListResponse
int __eoddata1__NewsList(
    _eoddata1__NewsList*                eoddata1__NewsList,	///< Input parameter
    _eoddata1__NewsListResponse        &eoddata1__NewsListResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__NewsListBySymbol                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__NewsListBySymbol" of service binding "DataSoap".
Returns a list of News articles for a given Exchange and Symbol.<br/>INPUT: Token
(Login Token), Exchange (eg: NASDAQ), Symbol (eg: AAPL)<br/>OUTPUT: List of News
articles

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/NewsListBySymbol"

  - Addressing input action: "http://ws.eoddata.com/Data/NewsListBySymbol"

  - Addressing output action: "http://ws.eoddata.com/Data/NewsListBySymbolResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__NewsListBySymbol(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__NewsListBySymbol*        eoddata1__NewsListBySymbol,
    // output parameters:
    _eoddata1__NewsListBySymbolResponse&eoddata1__NewsListBySymbolResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__NewsListBySymbol(
    struct soap *soap,
    // input parameters:
    _eoddata1__NewsListBySymbol*        eoddata1__NewsListBySymbol,
    // output parameters:
    _eoddata1__NewsListBySymbolResponse&eoddata1__NewsListBySymbolResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	NewsListBySymbol SOAP
//gsoap eoddata1 service method-style:	NewsListBySymbol document
//gsoap eoddata1 service method-encoding:	NewsListBySymbol literal
//gsoap eoddata1 service method-input-action:	NewsListBySymbol http://ws.eoddata.com/Data/NewsListBySymbol
//gsoap eoddata1 service method-output-action:	NewsListBySymbol http://ws.eoddata.com/Data/NewsListBySymbolResponse
int __eoddata1__NewsListBySymbol(
    _eoddata1__NewsListBySymbol*        eoddata1__NewsListBySymbol,	///< Input parameter
    _eoddata1__NewsListBySymbolResponse&eoddata1__NewsListBySymbolResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__FundamentalList                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__FundamentalList" of service binding "DataSoap".
Returns a complete list of fundamental data for an entire exchange.<br/>INPUT: Token
(Login Token), Exchange (eg: NASDAQ)<br/>OUTPUT: List of fundamentals

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/FundamentalList"

  - Addressing input action: "http://ws.eoddata.com/Data/FundamentalList"

  - Addressing output action: "http://ws.eoddata.com/Data/FundamentalListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__FundamentalList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__FundamentalList*         eoddata1__FundamentalList,
    // output parameters:
    _eoddata1__FundamentalListResponse &eoddata1__FundamentalListResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__FundamentalList(
    struct soap *soap,
    // input parameters:
    _eoddata1__FundamentalList*         eoddata1__FundamentalList,
    // output parameters:
    _eoddata1__FundamentalListResponse &eoddata1__FundamentalListResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	FundamentalList SOAP
//gsoap eoddata1 service method-style:	FundamentalList document
//gsoap eoddata1 service method-encoding:	FundamentalList literal
//gsoap eoddata1 service method-input-action:	FundamentalList http://ws.eoddata.com/Data/FundamentalList
//gsoap eoddata1 service method-output-action:	FundamentalList http://ws.eoddata.com/Data/FundamentalListResponse
int __eoddata1__FundamentalList(
    _eoddata1__FundamentalList*         eoddata1__FundamentalList,	///< Input parameter
    _eoddata1__FundamentalListResponse &eoddata1__FundamentalListResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__TechnicalList                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__TechnicalList" of service binding "DataSoap".
Returns a complete list of technical data for an entire exchange. <br/>INPUT: Token
(Login Token), Exchange (eg: NASDAQ)<br/>OUTPUT: List of quotes

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/TechnicalList"

  - Addressing input action: "http://ws.eoddata.com/Data/TechnicalList"

  - Addressing output action: "http://ws.eoddata.com/Data/TechnicalListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__TechnicalList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__TechnicalList*           eoddata1__TechnicalList,
    // output parameters:
    _eoddata1__TechnicalListResponse   &eoddata1__TechnicalListResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__TechnicalList(
    struct soap *soap,
    // input parameters:
    _eoddata1__TechnicalList*           eoddata1__TechnicalList,
    // output parameters:
    _eoddata1__TechnicalListResponse   &eoddata1__TechnicalListResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	TechnicalList SOAP
//gsoap eoddata1 service method-style:	TechnicalList document
//gsoap eoddata1 service method-encoding:	TechnicalList literal
//gsoap eoddata1 service method-input-action:	TechnicalList http://ws.eoddata.com/Data/TechnicalList
//gsoap eoddata1 service method-output-action:	TechnicalList http://ws.eoddata.com/Data/TechnicalListResponse
int __eoddata1__TechnicalList(
    _eoddata1__TechnicalList*           eoddata1__TechnicalList,	///< Input parameter
    _eoddata1__TechnicalListResponse   &eoddata1__TechnicalListResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__QuoteListByDate                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__QuoteListByDate" of service binding "DataSoap".
Returns a complete list of end of day quotes for an entire exchange and a specific
date.<br/>INPUT: Token (Login Token), Exchange (eg: NASDAQ), QuoteDate (format:yyyyMMdd
eg:20080225)<br/>OUTPUT: List of end of day quotes

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/QuoteListByDate"

  - Addressing input action: "http://ws.eoddata.com/Data/QuoteListByDate"

  - Addressing output action: "http://ws.eoddata.com/Data/QuoteListByDateResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__QuoteListByDate(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__QuoteListByDate*         eoddata1__QuoteListByDate,
    // output parameters:
    _eoddata1__QuoteListByDateResponse &eoddata1__QuoteListByDateResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__QuoteListByDate(
    struct soap *soap,
    // input parameters:
    _eoddata1__QuoteListByDate*         eoddata1__QuoteListByDate,
    // output parameters:
    _eoddata1__QuoteListByDateResponse &eoddata1__QuoteListByDateResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	QuoteListByDate SOAP
//gsoap eoddata1 service method-style:	QuoteListByDate document
//gsoap eoddata1 service method-encoding:	QuoteListByDate literal
//gsoap eoddata1 service method-input-action:	QuoteListByDate http://ws.eoddata.com/Data/QuoteListByDate
//gsoap eoddata1 service method-output-action:	QuoteListByDate http://ws.eoddata.com/Data/QuoteListByDateResponse
int __eoddata1__QuoteListByDate(
    _eoddata1__QuoteListByDate*         eoddata1__QuoteListByDate,	///< Input parameter
    _eoddata1__QuoteListByDateResponse &eoddata1__QuoteListByDateResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__QuoteListByDate2                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__QuoteListByDate2" of service binding "DataSoap".
Returns a complete list of end of day quotes for an entire exchange and a specific
date (compact format).<br/>INPUT: Token (Login Token), Exchange (eg: NASDAQ), QuoteDate
(format:yyyyMMdd eg:20080225)<br/>OUTPUT: List of end of day quotes

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/QuoteListByDate2"

  - Addressing input action: "http://ws.eoddata.com/Data/QuoteListByDate2"

  - Addressing output action: "http://ws.eoddata.com/Data/QuoteListByDate2Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__QuoteListByDate2(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__QuoteListByDate2*        eoddata1__QuoteListByDate2,
    // output parameters:
    _eoddata1__QuoteListByDate2Response&eoddata1__QuoteListByDate2Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__QuoteListByDate2(
    struct soap *soap,
    // input parameters:
    _eoddata1__QuoteListByDate2*        eoddata1__QuoteListByDate2,
    // output parameters:
    _eoddata1__QuoteListByDate2Response&eoddata1__QuoteListByDate2Response
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	QuoteListByDate2 SOAP
//gsoap eoddata1 service method-style:	QuoteListByDate2 document
//gsoap eoddata1 service method-encoding:	QuoteListByDate2 literal
//gsoap eoddata1 service method-input-action:	QuoteListByDate2 http://ws.eoddata.com/Data/QuoteListByDate2
//gsoap eoddata1 service method-output-action:	QuoteListByDate2 http://ws.eoddata.com/Data/QuoteListByDate2Response
int __eoddata1__QuoteListByDate2(
    _eoddata1__QuoteListByDate2*        eoddata1__QuoteListByDate2,	///< Input parameter
    _eoddata1__QuoteListByDate2Response&eoddata1__QuoteListByDate2Response	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__SymbolHistory                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__SymbolHistory" of service binding "DataSoap".
Returns a list of historical end of day data of a specified symbol and specified
start date up to today's date.<br/>INPUT: Token (Login Token), Exchange (eg: NASDAQ),
Symbol (eg:MSFT), StartDate (format:yyyyMMdd eg:20080225)<br/>OUTPUT: List of historical
end of day quotes

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/SymbolHistory"

  - Addressing input action: "http://ws.eoddata.com/Data/SymbolHistory"

  - Addressing output action: "http://ws.eoddata.com/Data/SymbolHistoryResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__SymbolHistory(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__SymbolHistory*           eoddata1__SymbolHistory,
    // output parameters:
    _eoddata1__SymbolHistoryResponse   &eoddata1__SymbolHistoryResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__SymbolHistory(
    struct soap *soap,
    // input parameters:
    _eoddata1__SymbolHistory*           eoddata1__SymbolHistory,
    // output parameters:
    _eoddata1__SymbolHistoryResponse   &eoddata1__SymbolHistoryResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	SymbolHistory SOAP
//gsoap eoddata1 service method-style:	SymbolHistory document
//gsoap eoddata1 service method-encoding:	SymbolHistory literal
//gsoap eoddata1 service method-input-action:	SymbolHistory http://ws.eoddata.com/Data/SymbolHistory
//gsoap eoddata1 service method-output-action:	SymbolHistory http://ws.eoddata.com/Data/SymbolHistoryResponse
int __eoddata1__SymbolHistory(
    _eoddata1__SymbolHistory*           eoddata1__SymbolHistory,	///< Input parameter
    _eoddata1__SymbolHistoryResponse   &eoddata1__SymbolHistoryResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__Top10Gains                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__Top10Gains" of service binding "DataSoap".
Returns a list of the Top 10 Gains of a specified exchange. <br/>INPUT: Token (Login
Token), Exchange (eg: NASDAQ)<br/>OUTPUT: List of quotes

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/Top10Gains"

  - Addressing input action: "http://ws.eoddata.com/Data/Top10Gains"

  - Addressing output action: "http://ws.eoddata.com/Data/Top10GainsResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__Top10Gains(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__Top10Gains*              eoddata1__Top10Gains,
    // output parameters:
    _eoddata1__Top10GainsResponse      &eoddata1__Top10GainsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__Top10Gains(
    struct soap *soap,
    // input parameters:
    _eoddata1__Top10Gains*              eoddata1__Top10Gains,
    // output parameters:
    _eoddata1__Top10GainsResponse      &eoddata1__Top10GainsResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	Top10Gains SOAP
//gsoap eoddata1 service method-style:	Top10Gains document
//gsoap eoddata1 service method-encoding:	Top10Gains literal
//gsoap eoddata1 service method-input-action:	Top10Gains http://ws.eoddata.com/Data/Top10Gains
//gsoap eoddata1 service method-output-action:	Top10Gains http://ws.eoddata.com/Data/Top10GainsResponse
int __eoddata1__Top10Gains(
    _eoddata1__Top10Gains*              eoddata1__Top10Gains,	///< Input parameter
    _eoddata1__Top10GainsResponse      &eoddata1__Top10GainsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__Top10Losses                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__Top10Losses" of service binding "DataSoap".
Returns a list of the Top 10 Losses of a specified exchange. <br/>INPUT: Token (Login
Token), Exchange (eg: NASDAQ)<br/>OUTPUT: List of quotes

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/Top10Losses"

  - Addressing input action: "http://ws.eoddata.com/Data/Top10Losses"

  - Addressing output action: "http://ws.eoddata.com/Data/Top10LossesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__Top10Losses(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__Top10Losses*             eoddata1__Top10Losses,
    // output parameters:
    _eoddata1__Top10LossesResponse     &eoddata1__Top10LossesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__Top10Losses(
    struct soap *soap,
    // input parameters:
    _eoddata1__Top10Losses*             eoddata1__Top10Losses,
    // output parameters:
    _eoddata1__Top10LossesResponse     &eoddata1__Top10LossesResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	Top10Losses SOAP
//gsoap eoddata1 service method-style:	Top10Losses document
//gsoap eoddata1 service method-encoding:	Top10Losses literal
//gsoap eoddata1 service method-input-action:	Top10Losses http://ws.eoddata.com/Data/Top10Losses
//gsoap eoddata1 service method-output-action:	Top10Losses http://ws.eoddata.com/Data/Top10LossesResponse
int __eoddata1__Top10Losses(
    _eoddata1__Top10Losses*             eoddata1__Top10Losses,	///< Input parameter
    _eoddata1__Top10LossesResponse     &eoddata1__Top10LossesResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__SymbolChart                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__SymbolChart" of service binding "DataSoap".
Returns a URL to a chart image of a specific symbol.<br/>INPUT: Token (Login Token),
Exchange (eg: NASDAQ), Symbol (eg:MSFT)<br/>OUTPUT: Chart URL

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/SymbolChart"

  - Addressing input action: "http://ws.eoddata.com/Data/SymbolChart"

  - Addressing output action: "http://ws.eoddata.com/Data/SymbolChartResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__SymbolChart(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__SymbolChart*             eoddata1__SymbolChart,
    // output parameters:
    _eoddata1__SymbolChartResponse     &eoddata1__SymbolChartResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__SymbolChart(
    struct soap *soap,
    // input parameters:
    _eoddata1__SymbolChart*             eoddata1__SymbolChart,
    // output parameters:
    _eoddata1__SymbolChartResponse     &eoddata1__SymbolChartResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	SymbolChart SOAP
//gsoap eoddata1 service method-style:	SymbolChart document
//gsoap eoddata1 service method-encoding:	SymbolChart literal
//gsoap eoddata1 service method-input-action:	SymbolChart http://ws.eoddata.com/Data/SymbolChart
//gsoap eoddata1 service method-output-action:	SymbolChart http://ws.eoddata.com/Data/SymbolChartResponse
int __eoddata1__SymbolChart(
    _eoddata1__SymbolChart*             eoddata1__SymbolChart,	///< Input parameter
    _eoddata1__SymbolChartResponse     &eoddata1__SymbolChartResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__ExchangeMonths                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__ExchangeMonths" of service binding "DataSoap".
Returns the number of Months history a user is allowed to download.<br/>INPUT: Token
(Login Token), Exchange (eg: NASDAQ)<br/>OUTPUT: Number of Months

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/ExchangeMonths"

  - Addressing input action: "http://ws.eoddata.com/Data/ExchangeMonths"

  - Addressing output action: "http://ws.eoddata.com/Data/ExchangeMonthsResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__ExchangeMonths(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__ExchangeMonths*          eoddata1__ExchangeMonths,
    // output parameters:
    _eoddata1__ExchangeMonthsResponse  &eoddata1__ExchangeMonthsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__ExchangeMonths(
    struct soap *soap,
    // input parameters:
    _eoddata1__ExchangeMonths*          eoddata1__ExchangeMonths,
    // output parameters:
    _eoddata1__ExchangeMonthsResponse  &eoddata1__ExchangeMonthsResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	ExchangeMonths SOAP
//gsoap eoddata1 service method-style:	ExchangeMonths document
//gsoap eoddata1 service method-encoding:	ExchangeMonths literal
//gsoap eoddata1 service method-input-action:	ExchangeMonths http://ws.eoddata.com/Data/ExchangeMonths
//gsoap eoddata1 service method-output-action:	ExchangeMonths http://ws.eoddata.com/Data/ExchangeMonthsResponse
int __eoddata1__ExchangeMonths(
    _eoddata1__ExchangeMonths*          eoddata1__ExchangeMonths,	///< Input parameter
    _eoddata1__ExchangeMonthsResponse  &eoddata1__ExchangeMonthsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__SplitListByExchange                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__SplitListByExchange" of service binding "DataSoap".
Returns a list of Splits of a specific exchange.<br/>INPUT: Token (Login Token),
Exchange (eg: NASDAQ)<br/>OUTPUT: List of splits

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/SplitListByExchange"

  - Addressing input action: "http://ws.eoddata.com/Data/SplitListByExchange"

  - Addressing output action: "http://ws.eoddata.com/Data/SplitListByExchangeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__SplitListByExchange(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__SplitListByExchange*     eoddata1__SplitListByExchange,
    // output parameters:
    _eoddata1__SplitListByExchangeResponse&eoddata1__SplitListByExchangeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__SplitListByExchange(
    struct soap *soap,
    // input parameters:
    _eoddata1__SplitListByExchange*     eoddata1__SplitListByExchange,
    // output parameters:
    _eoddata1__SplitListByExchangeResponse&eoddata1__SplitListByExchangeResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	SplitListByExchange SOAP
//gsoap eoddata1 service method-style:	SplitListByExchange document
//gsoap eoddata1 service method-encoding:	SplitListByExchange literal
//gsoap eoddata1 service method-input-action:	SplitListByExchange http://ws.eoddata.com/Data/SplitListByExchange
//gsoap eoddata1 service method-output-action:	SplitListByExchange http://ws.eoddata.com/Data/SplitListByExchangeResponse
int __eoddata1__SplitListByExchange(
    _eoddata1__SplitListByExchange*     eoddata1__SplitListByExchange,	///< Input parameter
    _eoddata1__SplitListByExchangeResponse&eoddata1__SplitListByExchangeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__SplitListBySymbol                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__SplitListBySymbol" of service binding "DataSoap".
Returns a list of Splits of a specific symbol.<br/>INPUT: Token (Login Token), Exchange
(eg: NASDAQ), Symbol (eg:MSFT)<br/>OUTPUT: List of splits

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/SplitListBySymbol"

  - Addressing input action: "http://ws.eoddata.com/Data/SplitListBySymbol"

  - Addressing output action: "http://ws.eoddata.com/Data/SplitListBySymbolResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__SplitListBySymbol(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__SplitListBySymbol*       eoddata1__SplitListBySymbol,
    // output parameters:
    _eoddata1__SplitListBySymbolResponse&eoddata1__SplitListBySymbolResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__SplitListBySymbol(
    struct soap *soap,
    // input parameters:
    _eoddata1__SplitListBySymbol*       eoddata1__SplitListBySymbol,
    // output parameters:
    _eoddata1__SplitListBySymbolResponse&eoddata1__SplitListBySymbolResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	SplitListBySymbol SOAP
//gsoap eoddata1 service method-style:	SplitListBySymbol document
//gsoap eoddata1 service method-encoding:	SplitListBySymbol literal
//gsoap eoddata1 service method-input-action:	SplitListBySymbol http://ws.eoddata.com/Data/SplitListBySymbol
//gsoap eoddata1 service method-output-action:	SplitListBySymbol http://ws.eoddata.com/Data/SplitListBySymbolResponse
int __eoddata1__SplitListBySymbol(
    _eoddata1__SplitListBySymbol*       eoddata1__SplitListBySymbol,	///< Input parameter
    _eoddata1__SplitListBySymbolResponse&eoddata1__SplitListBySymbolResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__CountryList                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__CountryList" of service binding "DataSoap".
Returns a list of available countries.<br/>INPUT: Token (Login Token)<br/>OUTPUT:
List of countries

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/CountryList"

  - Addressing input action: "http://ws.eoddata.com/Data/CountryList"

  - Addressing output action: "http://ws.eoddata.com/Data/CountryListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__CountryList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__CountryList*             eoddata1__CountryList,
    // output parameters:
    _eoddata1__CountryListResponse     &eoddata1__CountryListResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__CountryList(
    struct soap *soap,
    // input parameters:
    _eoddata1__CountryList*             eoddata1__CountryList,
    // output parameters:
    _eoddata1__CountryListResponse     &eoddata1__CountryListResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	CountryList SOAP
//gsoap eoddata1 service method-style:	CountryList document
//gsoap eoddata1 service method-encoding:	CountryList literal
//gsoap eoddata1 service method-input-action:	CountryList http://ws.eoddata.com/Data/CountryList
//gsoap eoddata1 service method-output-action:	CountryList http://ws.eoddata.com/Data/CountryListResponse
int __eoddata1__CountryList(
    _eoddata1__CountryList*             eoddata1__CountryList,	///< Input parameter
    _eoddata1__CountryListResponse     &eoddata1__CountryListResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__SymbolHistoryPeriod                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__SymbolHistoryPeriod" of service binding "DataSoap".
Returns a list of historical data of a specified symbol, specified date and specified
period.<br/>INPUT: Token (Login Token), Exchange (eg: NASDAQ), Symbol (eg:MSFT),
Date (format:yyyyMMdd eg:20080225), Period (1, 5, 10, 15, 30, h, d, w, m)<br/>OUTPUT:
List of historical quotes

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/SymbolHistoryPeriod"

  - Addressing input action: "http://ws.eoddata.com/Data/SymbolHistoryPeriod"

  - Addressing output action: "http://ws.eoddata.com/Data/SymbolHistoryPeriodResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__SymbolHistoryPeriod(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__SymbolHistoryPeriod*     eoddata1__SymbolHistoryPeriod,
    // output parameters:
    _eoddata1__SymbolHistoryPeriodResponse&eoddata1__SymbolHistoryPeriodResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__SymbolHistoryPeriod(
    struct soap *soap,
    // input parameters:
    _eoddata1__SymbolHistoryPeriod*     eoddata1__SymbolHistoryPeriod,
    // output parameters:
    _eoddata1__SymbolHistoryPeriodResponse&eoddata1__SymbolHistoryPeriodResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	SymbolHistoryPeriod SOAP
//gsoap eoddata1 service method-style:	SymbolHistoryPeriod document
//gsoap eoddata1 service method-encoding:	SymbolHistoryPeriod literal
//gsoap eoddata1 service method-input-action:	SymbolHistoryPeriod http://ws.eoddata.com/Data/SymbolHistoryPeriod
//gsoap eoddata1 service method-output-action:	SymbolHistoryPeriod http://ws.eoddata.com/Data/SymbolHistoryPeriodResponse
int __eoddata1__SymbolHistoryPeriod(
    _eoddata1__SymbolHistoryPeriod*     eoddata1__SymbolHistoryPeriod,	///< Input parameter
    _eoddata1__SymbolHistoryPeriodResponse&eoddata1__SymbolHistoryPeriodResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__SymbolHistoryPeriodByDateRange                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__SymbolHistoryPeriodByDateRange" of service binding "DataSoap".
Returns a list of historical data of a specified symbol, specified date range and
specified period.<br/>INPUT: Token (Login Token), Exchange (eg: NASDAQ), Symbol
(eg:MSFT), StartDate (format:yyyyMMdd eg:20080225), EndDate (format:yyyyMMdd eg:20080225),
Period (1, 5, 10, 15, 30, h, d, w, m)<br/>OUTPUT: List of historical quotes

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/SymbolHistoryPeriodByDateRange"

  - Addressing input action: "http://ws.eoddata.com/Data/SymbolHistoryPeriodByDateRange"

  - Addressing output action: "http://ws.eoddata.com/Data/SymbolHistoryPeriodByDateRangeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__SymbolHistoryPeriodByDateRange(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__SymbolHistoryPeriodByDateRange* eoddata1__SymbolHistoryPeriodByDateRange,
    // output parameters:
    _eoddata1__SymbolHistoryPeriodByDateRangeResponse&eoddata1__SymbolHistoryPeriodByDateRangeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__SymbolHistoryPeriodByDateRange(
    struct soap *soap,
    // input parameters:
    _eoddata1__SymbolHistoryPeriodByDateRange* eoddata1__SymbolHistoryPeriodByDateRange,
    // output parameters:
    _eoddata1__SymbolHistoryPeriodByDateRangeResponse&eoddata1__SymbolHistoryPeriodByDateRangeResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	SymbolHistoryPeriodByDateRange SOAP
//gsoap eoddata1 service method-style:	SymbolHistoryPeriodByDateRange document
//gsoap eoddata1 service method-encoding:	SymbolHistoryPeriodByDateRange literal
//gsoap eoddata1 service method-input-action:	SymbolHistoryPeriodByDateRange http://ws.eoddata.com/Data/SymbolHistoryPeriodByDateRange
//gsoap eoddata1 service method-output-action:	SymbolHistoryPeriodByDateRange http://ws.eoddata.com/Data/SymbolHistoryPeriodByDateRangeResponse
int __eoddata1__SymbolHistoryPeriodByDateRange(
    _eoddata1__SymbolHistoryPeriodByDateRange* eoddata1__SymbolHistoryPeriodByDateRange,	///< Input parameter
    _eoddata1__SymbolHistoryPeriodByDateRangeResponse&eoddata1__SymbolHistoryPeriodByDateRangeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__QuoteListByDatePeriod                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__QuoteListByDatePeriod" of service binding "DataSoap".
Returns a complete list of quotes for an entire exchange, specific date, and specific
period.<br/>INPUT: Token (Login Token), Exchange (eg: NASDAQ), QuoteDate (format:yyyyMMdd
eg:20080225), Period (1, 5, 10, 15, 30, h, d, w, m)<br/>OUTPUT: List of quotes

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/QuoteListByDatePeriod"

  - Addressing input action: "http://ws.eoddata.com/Data/QuoteListByDatePeriod"

  - Addressing output action: "http://ws.eoddata.com/Data/QuoteListByDatePeriodResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__QuoteListByDatePeriod(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__QuoteListByDatePeriod*   eoddata1__QuoteListByDatePeriod,
    // output parameters:
    _eoddata1__QuoteListByDatePeriodResponse&eoddata1__QuoteListByDatePeriodResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__QuoteListByDatePeriod(
    struct soap *soap,
    // input parameters:
    _eoddata1__QuoteListByDatePeriod*   eoddata1__QuoteListByDatePeriod,
    // output parameters:
    _eoddata1__QuoteListByDatePeriodResponse&eoddata1__QuoteListByDatePeriodResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	QuoteListByDatePeriod SOAP
//gsoap eoddata1 service method-style:	QuoteListByDatePeriod document
//gsoap eoddata1 service method-encoding:	QuoteListByDatePeriod literal
//gsoap eoddata1 service method-input-action:	QuoteListByDatePeriod http://ws.eoddata.com/Data/QuoteListByDatePeriod
//gsoap eoddata1 service method-output-action:	QuoteListByDatePeriod http://ws.eoddata.com/Data/QuoteListByDatePeriodResponse
int __eoddata1__QuoteListByDatePeriod(
    _eoddata1__QuoteListByDatePeriod*   eoddata1__QuoteListByDatePeriod,	///< Input parameter
    _eoddata1__QuoteListByDatePeriodResponse&eoddata1__QuoteListByDatePeriodResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__QuoteListByDatePeriod2                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__QuoteListByDatePeriod2" of service binding "DataSoap".
Returns a complete list of quotes for an entire exchange, specific date, and specific
period (compact format).<br/>INPUT: Token (Login Token), Exchange (eg: NASDAQ),
QuoteDate (format:yyyyMMdd eg:20080225), Period (1, 5, 10, 15, 30, h, d, w, m)<br/>OUTPUT:
List of quotes

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/QuoteListByDatePeriod2"

  - Addressing input action: "http://ws.eoddata.com/Data/QuoteListByDatePeriod2"

  - Addressing output action: "http://ws.eoddata.com/Data/QuoteListByDatePeriod2Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__QuoteListByDatePeriod2(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__QuoteListByDatePeriod2*  eoddata1__QuoteListByDatePeriod2,
    // output parameters:
    _eoddata1__QuoteListByDatePeriod2Response&eoddata1__QuoteListByDatePeriod2Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__QuoteListByDatePeriod2(
    struct soap *soap,
    // input parameters:
    _eoddata1__QuoteListByDatePeriod2*  eoddata1__QuoteListByDatePeriod2,
    // output parameters:
    _eoddata1__QuoteListByDatePeriod2Response&eoddata1__QuoteListByDatePeriod2Response
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	QuoteListByDatePeriod2 SOAP
//gsoap eoddata1 service method-style:	QuoteListByDatePeriod2 document
//gsoap eoddata1 service method-encoding:	QuoteListByDatePeriod2 literal
//gsoap eoddata1 service method-input-action:	QuoteListByDatePeriod2 http://ws.eoddata.com/Data/QuoteListByDatePeriod2
//gsoap eoddata1 service method-output-action:	QuoteListByDatePeriod2 http://ws.eoddata.com/Data/QuoteListByDatePeriod2Response
int __eoddata1__QuoteListByDatePeriod2(
    _eoddata1__QuoteListByDatePeriod2*  eoddata1__QuoteListByDatePeriod2,	///< Input parameter
    _eoddata1__QuoteListByDatePeriod2Response&eoddata1__QuoteListByDatePeriod2Response	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__SymbolChangesByExchange                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__SymbolChangesByExchange" of service binding "DataSoap".
Returns a list of symbol changes of a given exchange. <br/>INPUT: Token (Login Token),
Exchange (eg: NASDAQ)<br/>OUTPUT: List of symbol changes

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/SymbolChangesByExchange"

  - Addressing input action: "http://ws.eoddata.com/Data/SymbolChangesByExchange"

  - Addressing output action: "http://ws.eoddata.com/Data/SymbolChangesByExchangeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__SymbolChangesByExchange(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__SymbolChangesByExchange* eoddata1__SymbolChangesByExchange,
    // output parameters:
    _eoddata1__SymbolChangesByExchangeResponse&eoddata1__SymbolChangesByExchangeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__SymbolChangesByExchange(
    struct soap *soap,
    // input parameters:
    _eoddata1__SymbolChangesByExchange* eoddata1__SymbolChangesByExchange,
    // output parameters:
    _eoddata1__SymbolChangesByExchangeResponse&eoddata1__SymbolChangesByExchangeResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	SymbolChangesByExchange SOAP
//gsoap eoddata1 service method-style:	SymbolChangesByExchange document
//gsoap eoddata1 service method-encoding:	SymbolChangesByExchange literal
//gsoap eoddata1 service method-input-action:	SymbolChangesByExchange http://ws.eoddata.com/Data/SymbolChangesByExchange
//gsoap eoddata1 service method-output-action:	SymbolChangesByExchange http://ws.eoddata.com/Data/SymbolChangesByExchangeResponse
int __eoddata1__SymbolChangesByExchange(
    _eoddata1__SymbolChangesByExchange* eoddata1__SymbolChangesByExchange,	///< Input parameter
    _eoddata1__SymbolChangesByExchangeResponse&eoddata1__SymbolChangesByExchangeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__DataClientLatestVersion                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__DataClientLatestVersion" of service binding "DataSoap".
Returns the latest version information of Data Client.<br/>INPUT: Token (Login Token)<br/>OUTPUT:
Date Client Version

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/DataClientLatestVersion"

  - Addressing input action: "http://ws.eoddata.com/Data/DataClientLatestVersion"

  - Addressing output action: "http://ws.eoddata.com/Data/DataClientLatestVersionResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__DataClientLatestVersion(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__DataClientLatestVersion* eoddata1__DataClientLatestVersion,
    // output parameters:
    _eoddata1__DataClientLatestVersionResponse&eoddata1__DataClientLatestVersionResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__DataClientLatestVersion(
    struct soap *soap,
    // input parameters:
    _eoddata1__DataClientLatestVersion* eoddata1__DataClientLatestVersion,
    // output parameters:
    _eoddata1__DataClientLatestVersionResponse&eoddata1__DataClientLatestVersionResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	DataClientLatestVersion SOAP
//gsoap eoddata1 service method-style:	DataClientLatestVersion document
//gsoap eoddata1 service method-encoding:	DataClientLatestVersion literal
//gsoap eoddata1 service method-input-action:	DataClientLatestVersion http://ws.eoddata.com/Data/DataClientLatestVersion
//gsoap eoddata1 service method-output-action:	DataClientLatestVersion http://ws.eoddata.com/Data/DataClientLatestVersionResponse
int __eoddata1__DataClientLatestVersion(
    _eoddata1__DataClientLatestVersion* eoddata1__DataClientLatestVersion,	///< Input parameter
    _eoddata1__DataClientLatestVersionResponse&eoddata1__DataClientLatestVersionResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__DataFormats                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__DataFormats" of service binding "DataSoap".
Returns the list of data formats.<br/>INPUT: Token (Login Token)<br/>OUTPUT: List
of DataFormats

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/DataFormats"

  - Addressing input action: "http://ws.eoddata.com/Data/DataFormats"

  - Addressing output action: "http://ws.eoddata.com/Data/DataFormatsResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__DataFormats(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__DataFormats*             eoddata1__DataFormats,
    // output parameters:
    _eoddata1__DataFormatsResponse     &eoddata1__DataFormatsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__DataFormats(
    struct soap *soap,
    // input parameters:
    _eoddata1__DataFormats*             eoddata1__DataFormats,
    // output parameters:
    _eoddata1__DataFormatsResponse     &eoddata1__DataFormatsResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	DataFormats SOAP
//gsoap eoddata1 service method-style:	DataFormats document
//gsoap eoddata1 service method-encoding:	DataFormats literal
//gsoap eoddata1 service method-input-action:	DataFormats http://ws.eoddata.com/Data/DataFormats
//gsoap eoddata1 service method-output-action:	DataFormats http://ws.eoddata.com/Data/DataFormatsResponse
int __eoddata1__DataFormats(
    _eoddata1__DataFormats*             eoddata1__DataFormats,	///< Input parameter
    _eoddata1__DataFormatsResponse     &eoddata1__DataFormatsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__UpdateDataFormat                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__UpdateDataFormat" of service binding "DataSoap".
Update preferred Data Format<br/>INPUT: Token (Login Token), IncludeHeader, IncludeSuffix<br/>OUTPUT:
List of DataFormats

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/UpdateDataFormat"

  - Addressing input action: "http://ws.eoddata.com/Data/UpdateDataFormat"

  - Addressing output action: "http://ws.eoddata.com/Data/UpdateDataFormatResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__UpdateDataFormat(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__UpdateDataFormat*        eoddata1__UpdateDataFormat,
    // output parameters:
    _eoddata1__UpdateDataFormatResponse&eoddata1__UpdateDataFormatResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__UpdateDataFormat(
    struct soap *soap,
    // input parameters:
    _eoddata1__UpdateDataFormat*        eoddata1__UpdateDataFormat,
    // output parameters:
    _eoddata1__UpdateDataFormatResponse&eoddata1__UpdateDataFormatResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	UpdateDataFormat SOAP
//gsoap eoddata1 service method-style:	UpdateDataFormat document
//gsoap eoddata1 service method-encoding:	UpdateDataFormat literal
//gsoap eoddata1 service method-input-action:	UpdateDataFormat http://ws.eoddata.com/Data/UpdateDataFormat
//gsoap eoddata1 service method-output-action:	UpdateDataFormat http://ws.eoddata.com/Data/UpdateDataFormatResponse
int __eoddata1__UpdateDataFormat(
    _eoddata1__UpdateDataFormat*        eoddata1__UpdateDataFormat,	///< Input parameter
    _eoddata1__UpdateDataFormatResponse&eoddata1__UpdateDataFormatResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__ValidateAccess                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__ValidateAccess" of service binding "DataSoap".
Validate access for an entire exchange, specific date, and specific period.<br/>INPUT:
Token (Login Token), Exchange (eg: NASDAQ), QuoteDate (format:yyyyMMdd eg:20080225),
Period (1, 5, 10, 15, 30, h, d, w, m)<br/>OUTPUT: RESPONSE

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/ValidateAccess"

  - Addressing input action: "http://ws.eoddata.com/Data/ValidateAccess"

  - Addressing output action: "http://ws.eoddata.com/Data/ValidateAccessResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__ValidateAccess(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__ValidateAccess*          eoddata1__ValidateAccess,
    // output parameters:
    _eoddata1__ValidateAccessResponse  &eoddata1__ValidateAccessResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__ValidateAccess(
    struct soap *soap,
    // input parameters:
    _eoddata1__ValidateAccess*          eoddata1__ValidateAccess,
    // output parameters:
    _eoddata1__ValidateAccessResponse  &eoddata1__ValidateAccessResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	ValidateAccess SOAP
//gsoap eoddata1 service method-style:	ValidateAccess document
//gsoap eoddata1 service method-encoding:	ValidateAccess literal
//gsoap eoddata1 service method-input-action:	ValidateAccess http://ws.eoddata.com/Data/ValidateAccess
//gsoap eoddata1 service method-output-action:	ValidateAccess http://ws.eoddata.com/Data/ValidateAccessResponse
int __eoddata1__ValidateAccess(
    _eoddata1__ValidateAccess*          eoddata1__ValidateAccess,	///< Input parameter
    _eoddata1__ValidateAccessResponse  &eoddata1__ValidateAccessResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__Login_                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__Login_" of service binding "DataSoap".
Login to EODData Financial Information Web Service. Used for Web Authentication.<br/>INPUT:
Username, Password<br/>OUTPUT: Login Token

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/Login"

  - Addressing input action: "http://ws.eoddata.com/Data/Login"

  - Addressing output action: "http://ws.eoddata.com/Data/LoginResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__Login_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__Login*                   eoddata1__Login,
    // output parameters:
    _eoddata1__LoginResponse           &eoddata1__LoginResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__Login_(
    struct soap *soap,
    // input parameters:
    _eoddata1__Login*                   eoddata1__Login,
    // output parameters:
    _eoddata1__LoginResponse           &eoddata1__LoginResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	Login_ SOAP
//gsoap eoddata1 service method-style:	Login_ document
//gsoap eoddata1 service method-encoding:	Login_ literal
//gsoap eoddata1 service method-input-action:	Login_ http://ws.eoddata.com/Data/Login
//gsoap eoddata1 service method-output-action:	Login_ http://ws.eoddata.com/Data/LoginResponse
int __eoddata1__Login_(
    _eoddata1__Login*                   eoddata1__Login,	///< Input parameter
    _eoddata1__LoginResponse           &eoddata1__LoginResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__Login2_                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__Login2_" of service binding "DataSoap".
Login to EODData Financial Information Web Service. Used for Application Authentication.<br/>INPUT:
Username, Password, Version (Application Version)<br/>OUTPUT: Login Token

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/Login2"

  - Addressing input action: "http://ws.eoddata.com/Data/Login2"

  - Addressing output action: "http://ws.eoddata.com/Data/Login2Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__Login2_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__Login2*                  eoddata1__Login2,
    // output parameters:
    _eoddata1__Login2Response          &eoddata1__Login2Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__Login2_(
    struct soap *soap,
    // input parameters:
    _eoddata1__Login2*                  eoddata1__Login2,
    // output parameters:
    _eoddata1__Login2Response          &eoddata1__Login2Response
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	Login2_ SOAP
//gsoap eoddata1 service method-style:	Login2_ document
//gsoap eoddata1 service method-encoding:	Login2_ literal
//gsoap eoddata1 service method-input-action:	Login2_ http://ws.eoddata.com/Data/Login2
//gsoap eoddata1 service method-output-action:	Login2_ http://ws.eoddata.com/Data/Login2Response
int __eoddata1__Login2_(
    _eoddata1__Login2*                  eoddata1__Login2,	///< Input parameter
    _eoddata1__Login2Response          &eoddata1__Login2Response	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__Membership_                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__Membership_" of service binding "DataSoap".
Returns membership of user.<br/>INPUT: Token (Login Token)<br/>OUTPUT: Membership

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/Membership"

  - Addressing input action: "http://ws.eoddata.com/Data/Membership"

  - Addressing output action: "http://ws.eoddata.com/Data/MembershipResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__Membership_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__Membership*              eoddata1__Membership,
    // output parameters:
    _eoddata1__MembershipResponse      &eoddata1__MembershipResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__Membership_(
    struct soap *soap,
    // input parameters:
    _eoddata1__Membership*              eoddata1__Membership,
    // output parameters:
    _eoddata1__MembershipResponse      &eoddata1__MembershipResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	Membership_ SOAP
//gsoap eoddata1 service method-style:	Membership_ document
//gsoap eoddata1 service method-encoding:	Membership_ literal
//gsoap eoddata1 service method-input-action:	Membership_ http://ws.eoddata.com/Data/Membership
//gsoap eoddata1 service method-output-action:	Membership_ http://ws.eoddata.com/Data/MembershipResponse
int __eoddata1__Membership_(
    _eoddata1__Membership*              eoddata1__Membership,	///< Input parameter
    _eoddata1__MembershipResponse      &eoddata1__MembershipResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__ExchangeList_                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__ExchangeList_" of service binding "DataSoap".
Returns a list of available exchanges.<br/>INPUT: Token (Login Token)<br/>OUTPUT:
List of exchanges

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/ExchangeList"

  - Addressing input action: "http://ws.eoddata.com/Data/ExchangeList"

  - Addressing output action: "http://ws.eoddata.com/Data/ExchangeListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__ExchangeList_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__ExchangeList*            eoddata1__ExchangeList,
    // output parameters:
    _eoddata1__ExchangeListResponse    &eoddata1__ExchangeListResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__ExchangeList_(
    struct soap *soap,
    // input parameters:
    _eoddata1__ExchangeList*            eoddata1__ExchangeList,
    // output parameters:
    _eoddata1__ExchangeListResponse    &eoddata1__ExchangeListResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	ExchangeList_ SOAP
//gsoap eoddata1 service method-style:	ExchangeList_ document
//gsoap eoddata1 service method-encoding:	ExchangeList_ literal
//gsoap eoddata1 service method-input-action:	ExchangeList_ http://ws.eoddata.com/Data/ExchangeList
//gsoap eoddata1 service method-output-action:	ExchangeList_ http://ws.eoddata.com/Data/ExchangeListResponse
int __eoddata1__ExchangeList_(
    _eoddata1__ExchangeList*            eoddata1__ExchangeList,	///< Input parameter
    _eoddata1__ExchangeListResponse    &eoddata1__ExchangeListResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__ExchangeGet_                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__ExchangeGet_" of service binding "DataSoap".
Returns detailed information of a specific exchange.<br/>INPUT: Token (Login Token),
Exchange (eg: NASDAQ)<br/>OUTPUT: Exchange

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/ExchangeGet"

  - Addressing input action: "http://ws.eoddata.com/Data/ExchangeGet"

  - Addressing output action: "http://ws.eoddata.com/Data/ExchangeGetResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__ExchangeGet_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__ExchangeGet*             eoddata1__ExchangeGet,
    // output parameters:
    _eoddata1__ExchangeGetResponse     &eoddata1__ExchangeGetResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__ExchangeGet_(
    struct soap *soap,
    // input parameters:
    _eoddata1__ExchangeGet*             eoddata1__ExchangeGet,
    // output parameters:
    _eoddata1__ExchangeGetResponse     &eoddata1__ExchangeGetResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	ExchangeGet_ SOAP
//gsoap eoddata1 service method-style:	ExchangeGet_ document
//gsoap eoddata1 service method-encoding:	ExchangeGet_ literal
//gsoap eoddata1 service method-input-action:	ExchangeGet_ http://ws.eoddata.com/Data/ExchangeGet
//gsoap eoddata1 service method-output-action:	ExchangeGet_ http://ws.eoddata.com/Data/ExchangeGetResponse
int __eoddata1__ExchangeGet_(
    _eoddata1__ExchangeGet*             eoddata1__ExchangeGet,	///< Input parameter
    _eoddata1__ExchangeGetResponse     &eoddata1__ExchangeGetResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__SymbolList_                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__SymbolList_" of service binding "DataSoap".
Returns a list of symbols of a specified exchange. <br/>INPUT: Token (Login Token),
Exchange (eg: NASDAQ)<br/>OUTPUT: List of symbols

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/SymbolList"

  - Addressing input action: "http://ws.eoddata.com/Data/SymbolList"

  - Addressing output action: "http://ws.eoddata.com/Data/SymbolListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__SymbolList_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__SymbolList*              eoddata1__SymbolList,
    // output parameters:
    _eoddata1__SymbolListResponse      &eoddata1__SymbolListResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__SymbolList_(
    struct soap *soap,
    // input parameters:
    _eoddata1__SymbolList*              eoddata1__SymbolList,
    // output parameters:
    _eoddata1__SymbolListResponse      &eoddata1__SymbolListResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	SymbolList_ SOAP
//gsoap eoddata1 service method-style:	SymbolList_ document
//gsoap eoddata1 service method-encoding:	SymbolList_ literal
//gsoap eoddata1 service method-input-action:	SymbolList_ http://ws.eoddata.com/Data/SymbolList
//gsoap eoddata1 service method-output-action:	SymbolList_ http://ws.eoddata.com/Data/SymbolListResponse
int __eoddata1__SymbolList_(
    _eoddata1__SymbolList*              eoddata1__SymbolList,	///< Input parameter
    _eoddata1__SymbolListResponse      &eoddata1__SymbolListResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__SymbolList2_                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__SymbolList2_" of service binding "DataSoap".
Returns a list of symbols of a specified exchange (compact format).<br/>INPUT: Token
(Login Token), Exchange (eg: NASDAQ)<br/>OUTPUT: List of symbols

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/SymbolList2"

  - Addressing input action: "http://ws.eoddata.com/Data/SymbolList2"

  - Addressing output action: "http://ws.eoddata.com/Data/SymbolList2Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__SymbolList2_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__SymbolList2*             eoddata1__SymbolList2,
    // output parameters:
    _eoddata1__SymbolList2Response     &eoddata1__SymbolList2Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__SymbolList2_(
    struct soap *soap,
    // input parameters:
    _eoddata1__SymbolList2*             eoddata1__SymbolList2,
    // output parameters:
    _eoddata1__SymbolList2Response     &eoddata1__SymbolList2Response
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	SymbolList2_ SOAP
//gsoap eoddata1 service method-style:	SymbolList2_ document
//gsoap eoddata1 service method-encoding:	SymbolList2_ literal
//gsoap eoddata1 service method-input-action:	SymbolList2_ http://ws.eoddata.com/Data/SymbolList2
//gsoap eoddata1 service method-output-action:	SymbolList2_ http://ws.eoddata.com/Data/SymbolList2Response
int __eoddata1__SymbolList2_(
    _eoddata1__SymbolList2*             eoddata1__SymbolList2,	///< Input parameter
    _eoddata1__SymbolList2Response     &eoddata1__SymbolList2Response	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__QuoteGet_                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__QuoteGet_" of service binding "DataSoap".
Returns an end of day quote for a specific symbol.<br/>INPUT: Token (Login Token),
Exchange (eg: NASDAQ), Symbol (eg:MSFT)<br/>OUTPUT: End of day quote

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/QuoteGet"

  - Addressing input action: "http://ws.eoddata.com/Data/QuoteGet"

  - Addressing output action: "http://ws.eoddata.com/Data/QuoteGetResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__QuoteGet_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__QuoteGet*                eoddata1__QuoteGet,
    // output parameters:
    _eoddata1__QuoteGetResponse        &eoddata1__QuoteGetResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__QuoteGet_(
    struct soap *soap,
    // input parameters:
    _eoddata1__QuoteGet*                eoddata1__QuoteGet,
    // output parameters:
    _eoddata1__QuoteGetResponse        &eoddata1__QuoteGetResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	QuoteGet_ SOAP
//gsoap eoddata1 service method-style:	QuoteGet_ document
//gsoap eoddata1 service method-encoding:	QuoteGet_ literal
//gsoap eoddata1 service method-input-action:	QuoteGet_ http://ws.eoddata.com/Data/QuoteGet
//gsoap eoddata1 service method-output-action:	QuoteGet_ http://ws.eoddata.com/Data/QuoteGetResponse
int __eoddata1__QuoteGet_(
    _eoddata1__QuoteGet*                eoddata1__QuoteGet,	///< Input parameter
    _eoddata1__QuoteGetResponse        &eoddata1__QuoteGetResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__QuoteList2_                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__QuoteList2_" of service binding "DataSoap".
Returns latest end of day quotes for a list of symbols of a specific exchange (compact
format).<br/>INPUT: Token (Login Token), Exchange (eg: NASDAQ), Symbols (eg:MSFT,INTC)<br/>OUTPUT:
List of end of day quotes

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/QuoteList2"

  - Addressing input action: "http://ws.eoddata.com/Data/QuoteList2"

  - Addressing output action: "http://ws.eoddata.com/Data/QuoteList2Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__QuoteList2_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__QuoteList2*              eoddata1__QuoteList2,
    // output parameters:
    _eoddata1__QuoteList2Response      &eoddata1__QuoteList2Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__QuoteList2_(
    struct soap *soap,
    // input parameters:
    _eoddata1__QuoteList2*              eoddata1__QuoteList2,
    // output parameters:
    _eoddata1__QuoteList2Response      &eoddata1__QuoteList2Response
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	QuoteList2_ SOAP
//gsoap eoddata1 service method-style:	QuoteList2_ document
//gsoap eoddata1 service method-encoding:	QuoteList2_ literal
//gsoap eoddata1 service method-input-action:	QuoteList2_ http://ws.eoddata.com/Data/QuoteList2
//gsoap eoddata1 service method-output-action:	QuoteList2_ http://ws.eoddata.com/Data/QuoteList2Response
int __eoddata1__QuoteList2_(
    _eoddata1__QuoteList2*              eoddata1__QuoteList2,	///< Input parameter
    _eoddata1__QuoteList2Response      &eoddata1__QuoteList2Response	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__SymbolGet_                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__SymbolGet_" of service binding "DataSoap".
Returns detailed information of a specific symbol.<br/>INPUT: Token (Login Token),
Exchange (eg: NASDAQ), Symbol (eg:MSFT)<br/>OUTPUT: Symbol

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/SymbolGet"

  - Addressing input action: "http://ws.eoddata.com/Data/SymbolGet"

  - Addressing output action: "http://ws.eoddata.com/Data/SymbolGetResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__SymbolGet_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__SymbolGet*               eoddata1__SymbolGet,
    // output parameters:
    _eoddata1__SymbolGetResponse       &eoddata1__SymbolGetResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__SymbolGet_(
    struct soap *soap,
    // input parameters:
    _eoddata1__SymbolGet*               eoddata1__SymbolGet,
    // output parameters:
    _eoddata1__SymbolGetResponse       &eoddata1__SymbolGetResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	SymbolGet_ SOAP
//gsoap eoddata1 service method-style:	SymbolGet_ document
//gsoap eoddata1 service method-encoding:	SymbolGet_ literal
//gsoap eoddata1 service method-input-action:	SymbolGet_ http://ws.eoddata.com/Data/SymbolGet
//gsoap eoddata1 service method-output-action:	SymbolGet_ http://ws.eoddata.com/Data/SymbolGetResponse
int __eoddata1__SymbolGet_(
    _eoddata1__SymbolGet*               eoddata1__SymbolGet,	///< Input parameter
    _eoddata1__SymbolGetResponse       &eoddata1__SymbolGetResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__QuoteList_                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__QuoteList_" of service binding "DataSoap".
Returns a complete list of end of day quotes for an entire exchange.<br/>INPUT:
Token (Login Token), Exchange (eg: NASDAQ)<br/>OUTPUT: List of end of day quotes

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/QuoteList"

  - Addressing input action: "http://ws.eoddata.com/Data/QuoteList"

  - Addressing output action: "http://ws.eoddata.com/Data/QuoteListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__QuoteList_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__QuoteList*               eoddata1__QuoteList,
    // output parameters:
    _eoddata1__QuoteListResponse       &eoddata1__QuoteListResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__QuoteList_(
    struct soap *soap,
    // input parameters:
    _eoddata1__QuoteList*               eoddata1__QuoteList,
    // output parameters:
    _eoddata1__QuoteListResponse       &eoddata1__QuoteListResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	QuoteList_ SOAP
//gsoap eoddata1 service method-style:	QuoteList_ document
//gsoap eoddata1 service method-encoding:	QuoteList_ literal
//gsoap eoddata1 service method-input-action:	QuoteList_ http://ws.eoddata.com/Data/QuoteList
//gsoap eoddata1 service method-output-action:	QuoteList_ http://ws.eoddata.com/Data/QuoteListResponse
int __eoddata1__QuoteList_(
    _eoddata1__QuoteList*               eoddata1__QuoteList,	///< Input parameter
    _eoddata1__QuoteListResponse       &eoddata1__QuoteListResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__NewsList_                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__NewsList_" of service binding "DataSoap".
Returns a list of News articles for an entire exchange.<br/>INPUT: Token (Login
Token), Exchange (eg: NASDAQ)<br/>OUTPUT: List of News articles

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/NewsList"

  - Addressing input action: "http://ws.eoddata.com/Data/NewsList"

  - Addressing output action: "http://ws.eoddata.com/Data/NewsListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__NewsList_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__NewsList*                eoddata1__NewsList,
    // output parameters:
    _eoddata1__NewsListResponse        &eoddata1__NewsListResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__NewsList_(
    struct soap *soap,
    // input parameters:
    _eoddata1__NewsList*                eoddata1__NewsList,
    // output parameters:
    _eoddata1__NewsListResponse        &eoddata1__NewsListResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	NewsList_ SOAP
//gsoap eoddata1 service method-style:	NewsList_ document
//gsoap eoddata1 service method-encoding:	NewsList_ literal
//gsoap eoddata1 service method-input-action:	NewsList_ http://ws.eoddata.com/Data/NewsList
//gsoap eoddata1 service method-output-action:	NewsList_ http://ws.eoddata.com/Data/NewsListResponse
int __eoddata1__NewsList_(
    _eoddata1__NewsList*                eoddata1__NewsList,	///< Input parameter
    _eoddata1__NewsListResponse        &eoddata1__NewsListResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__NewsListBySymbol_                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__NewsListBySymbol_" of service binding "DataSoap".
Returns a list of News articles for a given Exchange and Symbol.<br/>INPUT: Token
(Login Token), Exchange (eg: NASDAQ), Symbol (eg: AAPL)<br/>OUTPUT: List of News
articles

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/NewsListBySymbol"

  - Addressing input action: "http://ws.eoddata.com/Data/NewsListBySymbol"

  - Addressing output action: "http://ws.eoddata.com/Data/NewsListBySymbolResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__NewsListBySymbol_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__NewsListBySymbol*        eoddata1__NewsListBySymbol,
    // output parameters:
    _eoddata1__NewsListBySymbolResponse&eoddata1__NewsListBySymbolResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__NewsListBySymbol_(
    struct soap *soap,
    // input parameters:
    _eoddata1__NewsListBySymbol*        eoddata1__NewsListBySymbol,
    // output parameters:
    _eoddata1__NewsListBySymbolResponse&eoddata1__NewsListBySymbolResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	NewsListBySymbol_ SOAP
//gsoap eoddata1 service method-style:	NewsListBySymbol_ document
//gsoap eoddata1 service method-encoding:	NewsListBySymbol_ literal
//gsoap eoddata1 service method-input-action:	NewsListBySymbol_ http://ws.eoddata.com/Data/NewsListBySymbol
//gsoap eoddata1 service method-output-action:	NewsListBySymbol_ http://ws.eoddata.com/Data/NewsListBySymbolResponse
int __eoddata1__NewsListBySymbol_(
    _eoddata1__NewsListBySymbol*        eoddata1__NewsListBySymbol,	///< Input parameter
    _eoddata1__NewsListBySymbolResponse&eoddata1__NewsListBySymbolResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__FundamentalList_                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__FundamentalList_" of service binding "DataSoap".
Returns a complete list of fundamental data for an entire exchange.<br/>INPUT: Token
(Login Token), Exchange (eg: NASDAQ)<br/>OUTPUT: List of fundamentals

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/FundamentalList"

  - Addressing input action: "http://ws.eoddata.com/Data/FundamentalList"

  - Addressing output action: "http://ws.eoddata.com/Data/FundamentalListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__FundamentalList_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__FundamentalList*         eoddata1__FundamentalList,
    // output parameters:
    _eoddata1__FundamentalListResponse &eoddata1__FundamentalListResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__FundamentalList_(
    struct soap *soap,
    // input parameters:
    _eoddata1__FundamentalList*         eoddata1__FundamentalList,
    // output parameters:
    _eoddata1__FundamentalListResponse &eoddata1__FundamentalListResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	FundamentalList_ SOAP
//gsoap eoddata1 service method-style:	FundamentalList_ document
//gsoap eoddata1 service method-encoding:	FundamentalList_ literal
//gsoap eoddata1 service method-input-action:	FundamentalList_ http://ws.eoddata.com/Data/FundamentalList
//gsoap eoddata1 service method-output-action:	FundamentalList_ http://ws.eoddata.com/Data/FundamentalListResponse
int __eoddata1__FundamentalList_(
    _eoddata1__FundamentalList*         eoddata1__FundamentalList,	///< Input parameter
    _eoddata1__FundamentalListResponse &eoddata1__FundamentalListResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__TechnicalList_                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__TechnicalList_" of service binding "DataSoap".
Returns a complete list of technical data for an entire exchange. <br/>INPUT: Token
(Login Token), Exchange (eg: NASDAQ)<br/>OUTPUT: List of quotes

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/TechnicalList"

  - Addressing input action: "http://ws.eoddata.com/Data/TechnicalList"

  - Addressing output action: "http://ws.eoddata.com/Data/TechnicalListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__TechnicalList_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__TechnicalList*           eoddata1__TechnicalList,
    // output parameters:
    _eoddata1__TechnicalListResponse   &eoddata1__TechnicalListResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__TechnicalList_(
    struct soap *soap,
    // input parameters:
    _eoddata1__TechnicalList*           eoddata1__TechnicalList,
    // output parameters:
    _eoddata1__TechnicalListResponse   &eoddata1__TechnicalListResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	TechnicalList_ SOAP
//gsoap eoddata1 service method-style:	TechnicalList_ document
//gsoap eoddata1 service method-encoding:	TechnicalList_ literal
//gsoap eoddata1 service method-input-action:	TechnicalList_ http://ws.eoddata.com/Data/TechnicalList
//gsoap eoddata1 service method-output-action:	TechnicalList_ http://ws.eoddata.com/Data/TechnicalListResponse
int __eoddata1__TechnicalList_(
    _eoddata1__TechnicalList*           eoddata1__TechnicalList,	///< Input parameter
    _eoddata1__TechnicalListResponse   &eoddata1__TechnicalListResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__QuoteListByDate_                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__QuoteListByDate_" of service binding "DataSoap".
Returns a complete list of end of day quotes for an entire exchange and a specific
date.<br/>INPUT: Token (Login Token), Exchange (eg: NASDAQ), QuoteDate (format:yyyyMMdd
eg:20080225)<br/>OUTPUT: List of end of day quotes

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/QuoteListByDate"

  - Addressing input action: "http://ws.eoddata.com/Data/QuoteListByDate"

  - Addressing output action: "http://ws.eoddata.com/Data/QuoteListByDateResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__QuoteListByDate_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__QuoteListByDate*         eoddata1__QuoteListByDate,
    // output parameters:
    _eoddata1__QuoteListByDateResponse &eoddata1__QuoteListByDateResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__QuoteListByDate_(
    struct soap *soap,
    // input parameters:
    _eoddata1__QuoteListByDate*         eoddata1__QuoteListByDate,
    // output parameters:
    _eoddata1__QuoteListByDateResponse &eoddata1__QuoteListByDateResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	QuoteListByDate_ SOAP
//gsoap eoddata1 service method-style:	QuoteListByDate_ document
//gsoap eoddata1 service method-encoding:	QuoteListByDate_ literal
//gsoap eoddata1 service method-input-action:	QuoteListByDate_ http://ws.eoddata.com/Data/QuoteListByDate
//gsoap eoddata1 service method-output-action:	QuoteListByDate_ http://ws.eoddata.com/Data/QuoteListByDateResponse
int __eoddata1__QuoteListByDate_(
    _eoddata1__QuoteListByDate*         eoddata1__QuoteListByDate,	///< Input parameter
    _eoddata1__QuoteListByDateResponse &eoddata1__QuoteListByDateResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__QuoteListByDate2_                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__QuoteListByDate2_" of service binding "DataSoap".
Returns a complete list of end of day quotes for an entire exchange and a specific
date (compact format).<br/>INPUT: Token (Login Token), Exchange (eg: NASDAQ), QuoteDate
(format:yyyyMMdd eg:20080225)<br/>OUTPUT: List of end of day quotes

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/QuoteListByDate2"

  - Addressing input action: "http://ws.eoddata.com/Data/QuoteListByDate2"

  - Addressing output action: "http://ws.eoddata.com/Data/QuoteListByDate2Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__QuoteListByDate2_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__QuoteListByDate2*        eoddata1__QuoteListByDate2,
    // output parameters:
    _eoddata1__QuoteListByDate2Response&eoddata1__QuoteListByDate2Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__QuoteListByDate2_(
    struct soap *soap,
    // input parameters:
    _eoddata1__QuoteListByDate2*        eoddata1__QuoteListByDate2,
    // output parameters:
    _eoddata1__QuoteListByDate2Response&eoddata1__QuoteListByDate2Response
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	QuoteListByDate2_ SOAP
//gsoap eoddata1 service method-style:	QuoteListByDate2_ document
//gsoap eoddata1 service method-encoding:	QuoteListByDate2_ literal
//gsoap eoddata1 service method-input-action:	QuoteListByDate2_ http://ws.eoddata.com/Data/QuoteListByDate2
//gsoap eoddata1 service method-output-action:	QuoteListByDate2_ http://ws.eoddata.com/Data/QuoteListByDate2Response
int __eoddata1__QuoteListByDate2_(
    _eoddata1__QuoteListByDate2*        eoddata1__QuoteListByDate2,	///< Input parameter
    _eoddata1__QuoteListByDate2Response&eoddata1__QuoteListByDate2Response	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__SymbolHistory_                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__SymbolHistory_" of service binding "DataSoap".
Returns a list of historical end of day data of a specified symbol and specified
start date up to today's date.<br/>INPUT: Token (Login Token), Exchange (eg: NASDAQ),
Symbol (eg:MSFT), StartDate (format:yyyyMMdd eg:20080225)<br/>OUTPUT: List of historical
end of day quotes

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/SymbolHistory"

  - Addressing input action: "http://ws.eoddata.com/Data/SymbolHistory"

  - Addressing output action: "http://ws.eoddata.com/Data/SymbolHistoryResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__SymbolHistory_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__SymbolHistory*           eoddata1__SymbolHistory,
    // output parameters:
    _eoddata1__SymbolHistoryResponse   &eoddata1__SymbolHistoryResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__SymbolHistory_(
    struct soap *soap,
    // input parameters:
    _eoddata1__SymbolHistory*           eoddata1__SymbolHistory,
    // output parameters:
    _eoddata1__SymbolHistoryResponse   &eoddata1__SymbolHistoryResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	SymbolHistory_ SOAP
//gsoap eoddata1 service method-style:	SymbolHistory_ document
//gsoap eoddata1 service method-encoding:	SymbolHistory_ literal
//gsoap eoddata1 service method-input-action:	SymbolHistory_ http://ws.eoddata.com/Data/SymbolHistory
//gsoap eoddata1 service method-output-action:	SymbolHistory_ http://ws.eoddata.com/Data/SymbolHistoryResponse
int __eoddata1__SymbolHistory_(
    _eoddata1__SymbolHistory*           eoddata1__SymbolHistory,	///< Input parameter
    _eoddata1__SymbolHistoryResponse   &eoddata1__SymbolHistoryResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__Top10Gains_                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__Top10Gains_" of service binding "DataSoap".
Returns a list of the Top 10 Gains of a specified exchange. <br/>INPUT: Token (Login
Token), Exchange (eg: NASDAQ)<br/>OUTPUT: List of quotes

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/Top10Gains"

  - Addressing input action: "http://ws.eoddata.com/Data/Top10Gains"

  - Addressing output action: "http://ws.eoddata.com/Data/Top10GainsResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__Top10Gains_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__Top10Gains*              eoddata1__Top10Gains,
    // output parameters:
    _eoddata1__Top10GainsResponse      &eoddata1__Top10GainsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__Top10Gains_(
    struct soap *soap,
    // input parameters:
    _eoddata1__Top10Gains*              eoddata1__Top10Gains,
    // output parameters:
    _eoddata1__Top10GainsResponse      &eoddata1__Top10GainsResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	Top10Gains_ SOAP
//gsoap eoddata1 service method-style:	Top10Gains_ document
//gsoap eoddata1 service method-encoding:	Top10Gains_ literal
//gsoap eoddata1 service method-input-action:	Top10Gains_ http://ws.eoddata.com/Data/Top10Gains
//gsoap eoddata1 service method-output-action:	Top10Gains_ http://ws.eoddata.com/Data/Top10GainsResponse
int __eoddata1__Top10Gains_(
    _eoddata1__Top10Gains*              eoddata1__Top10Gains,	///< Input parameter
    _eoddata1__Top10GainsResponse      &eoddata1__Top10GainsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__Top10Losses_                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__Top10Losses_" of service binding "DataSoap".
Returns a list of the Top 10 Losses of a specified exchange. <br/>INPUT: Token (Login
Token), Exchange (eg: NASDAQ)<br/>OUTPUT: List of quotes

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/Top10Losses"

  - Addressing input action: "http://ws.eoddata.com/Data/Top10Losses"

  - Addressing output action: "http://ws.eoddata.com/Data/Top10LossesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__Top10Losses_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__Top10Losses*             eoddata1__Top10Losses,
    // output parameters:
    _eoddata1__Top10LossesResponse     &eoddata1__Top10LossesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__Top10Losses_(
    struct soap *soap,
    // input parameters:
    _eoddata1__Top10Losses*             eoddata1__Top10Losses,
    // output parameters:
    _eoddata1__Top10LossesResponse     &eoddata1__Top10LossesResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	Top10Losses_ SOAP
//gsoap eoddata1 service method-style:	Top10Losses_ document
//gsoap eoddata1 service method-encoding:	Top10Losses_ literal
//gsoap eoddata1 service method-input-action:	Top10Losses_ http://ws.eoddata.com/Data/Top10Losses
//gsoap eoddata1 service method-output-action:	Top10Losses_ http://ws.eoddata.com/Data/Top10LossesResponse
int __eoddata1__Top10Losses_(
    _eoddata1__Top10Losses*             eoddata1__Top10Losses,	///< Input parameter
    _eoddata1__Top10LossesResponse     &eoddata1__Top10LossesResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__SymbolChart_                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__SymbolChart_" of service binding "DataSoap".
Returns a URL to a chart image of a specific symbol.<br/>INPUT: Token (Login Token),
Exchange (eg: NASDAQ), Symbol (eg:MSFT)<br/>OUTPUT: Chart URL

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/SymbolChart"

  - Addressing input action: "http://ws.eoddata.com/Data/SymbolChart"

  - Addressing output action: "http://ws.eoddata.com/Data/SymbolChartResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__SymbolChart_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__SymbolChart*             eoddata1__SymbolChart,
    // output parameters:
    _eoddata1__SymbolChartResponse     &eoddata1__SymbolChartResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__SymbolChart_(
    struct soap *soap,
    // input parameters:
    _eoddata1__SymbolChart*             eoddata1__SymbolChart,
    // output parameters:
    _eoddata1__SymbolChartResponse     &eoddata1__SymbolChartResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	SymbolChart_ SOAP
//gsoap eoddata1 service method-style:	SymbolChart_ document
//gsoap eoddata1 service method-encoding:	SymbolChart_ literal
//gsoap eoddata1 service method-input-action:	SymbolChart_ http://ws.eoddata.com/Data/SymbolChart
//gsoap eoddata1 service method-output-action:	SymbolChart_ http://ws.eoddata.com/Data/SymbolChartResponse
int __eoddata1__SymbolChart_(
    _eoddata1__SymbolChart*             eoddata1__SymbolChart,	///< Input parameter
    _eoddata1__SymbolChartResponse     &eoddata1__SymbolChartResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__ExchangeMonths_                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__ExchangeMonths_" of service binding "DataSoap".
Returns the number of Months history a user is allowed to download.<br/>INPUT: Token
(Login Token), Exchange (eg: NASDAQ)<br/>OUTPUT: Number of Months

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/ExchangeMonths"

  - Addressing input action: "http://ws.eoddata.com/Data/ExchangeMonths"

  - Addressing output action: "http://ws.eoddata.com/Data/ExchangeMonthsResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__ExchangeMonths_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__ExchangeMonths*          eoddata1__ExchangeMonths,
    // output parameters:
    _eoddata1__ExchangeMonthsResponse  &eoddata1__ExchangeMonthsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__ExchangeMonths_(
    struct soap *soap,
    // input parameters:
    _eoddata1__ExchangeMonths*          eoddata1__ExchangeMonths,
    // output parameters:
    _eoddata1__ExchangeMonthsResponse  &eoddata1__ExchangeMonthsResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	ExchangeMonths_ SOAP
//gsoap eoddata1 service method-style:	ExchangeMonths_ document
//gsoap eoddata1 service method-encoding:	ExchangeMonths_ literal
//gsoap eoddata1 service method-input-action:	ExchangeMonths_ http://ws.eoddata.com/Data/ExchangeMonths
//gsoap eoddata1 service method-output-action:	ExchangeMonths_ http://ws.eoddata.com/Data/ExchangeMonthsResponse
int __eoddata1__ExchangeMonths_(
    _eoddata1__ExchangeMonths*          eoddata1__ExchangeMonths,	///< Input parameter
    _eoddata1__ExchangeMonthsResponse  &eoddata1__ExchangeMonthsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__SplitListByExchange_                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__SplitListByExchange_" of service binding "DataSoap".
Returns a list of Splits of a specific exchange.<br/>INPUT: Token (Login Token),
Exchange (eg: NASDAQ)<br/>OUTPUT: List of splits

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/SplitListByExchange"

  - Addressing input action: "http://ws.eoddata.com/Data/SplitListByExchange"

  - Addressing output action: "http://ws.eoddata.com/Data/SplitListByExchangeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__SplitListByExchange_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__SplitListByExchange*     eoddata1__SplitListByExchange,
    // output parameters:
    _eoddata1__SplitListByExchangeResponse&eoddata1__SplitListByExchangeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__SplitListByExchange_(
    struct soap *soap,
    // input parameters:
    _eoddata1__SplitListByExchange*     eoddata1__SplitListByExchange,
    // output parameters:
    _eoddata1__SplitListByExchangeResponse&eoddata1__SplitListByExchangeResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	SplitListByExchange_ SOAP
//gsoap eoddata1 service method-style:	SplitListByExchange_ document
//gsoap eoddata1 service method-encoding:	SplitListByExchange_ literal
//gsoap eoddata1 service method-input-action:	SplitListByExchange_ http://ws.eoddata.com/Data/SplitListByExchange
//gsoap eoddata1 service method-output-action:	SplitListByExchange_ http://ws.eoddata.com/Data/SplitListByExchangeResponse
int __eoddata1__SplitListByExchange_(
    _eoddata1__SplitListByExchange*     eoddata1__SplitListByExchange,	///< Input parameter
    _eoddata1__SplitListByExchangeResponse&eoddata1__SplitListByExchangeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__SplitListBySymbol_                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__SplitListBySymbol_" of service binding "DataSoap".
Returns a list of Splits of a specific symbol.<br/>INPUT: Token (Login Token), Exchange
(eg: NASDAQ), Symbol (eg:MSFT)<br/>OUTPUT: List of splits

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/SplitListBySymbol"

  - Addressing input action: "http://ws.eoddata.com/Data/SplitListBySymbol"

  - Addressing output action: "http://ws.eoddata.com/Data/SplitListBySymbolResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__SplitListBySymbol_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__SplitListBySymbol*       eoddata1__SplitListBySymbol,
    // output parameters:
    _eoddata1__SplitListBySymbolResponse&eoddata1__SplitListBySymbolResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__SplitListBySymbol_(
    struct soap *soap,
    // input parameters:
    _eoddata1__SplitListBySymbol*       eoddata1__SplitListBySymbol,
    // output parameters:
    _eoddata1__SplitListBySymbolResponse&eoddata1__SplitListBySymbolResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	SplitListBySymbol_ SOAP
//gsoap eoddata1 service method-style:	SplitListBySymbol_ document
//gsoap eoddata1 service method-encoding:	SplitListBySymbol_ literal
//gsoap eoddata1 service method-input-action:	SplitListBySymbol_ http://ws.eoddata.com/Data/SplitListBySymbol
//gsoap eoddata1 service method-output-action:	SplitListBySymbol_ http://ws.eoddata.com/Data/SplitListBySymbolResponse
int __eoddata1__SplitListBySymbol_(
    _eoddata1__SplitListBySymbol*       eoddata1__SplitListBySymbol,	///< Input parameter
    _eoddata1__SplitListBySymbolResponse&eoddata1__SplitListBySymbolResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__CountryList_                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__CountryList_" of service binding "DataSoap".
Returns a list of available countries.<br/>INPUT: Token (Login Token)<br/>OUTPUT:
List of countries

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/CountryList"

  - Addressing input action: "http://ws.eoddata.com/Data/CountryList"

  - Addressing output action: "http://ws.eoddata.com/Data/CountryListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__CountryList_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__CountryList*             eoddata1__CountryList,
    // output parameters:
    _eoddata1__CountryListResponse     &eoddata1__CountryListResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__CountryList_(
    struct soap *soap,
    // input parameters:
    _eoddata1__CountryList*             eoddata1__CountryList,
    // output parameters:
    _eoddata1__CountryListResponse     &eoddata1__CountryListResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	CountryList_ SOAP
//gsoap eoddata1 service method-style:	CountryList_ document
//gsoap eoddata1 service method-encoding:	CountryList_ literal
//gsoap eoddata1 service method-input-action:	CountryList_ http://ws.eoddata.com/Data/CountryList
//gsoap eoddata1 service method-output-action:	CountryList_ http://ws.eoddata.com/Data/CountryListResponse
int __eoddata1__CountryList_(
    _eoddata1__CountryList*             eoddata1__CountryList,	///< Input parameter
    _eoddata1__CountryListResponse     &eoddata1__CountryListResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__SymbolHistoryPeriod_                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__SymbolHistoryPeriod_" of service binding "DataSoap".
Returns a list of historical data of a specified symbol, specified date and specified
period.<br/>INPUT: Token (Login Token), Exchange (eg: NASDAQ), Symbol (eg:MSFT),
Date (format:yyyyMMdd eg:20080225), Period (1, 5, 10, 15, 30, h, d, w, m)<br/>OUTPUT:
List of historical quotes

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/SymbolHistoryPeriod"

  - Addressing input action: "http://ws.eoddata.com/Data/SymbolHistoryPeriod"

  - Addressing output action: "http://ws.eoddata.com/Data/SymbolHistoryPeriodResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__SymbolHistoryPeriod_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__SymbolHistoryPeriod*     eoddata1__SymbolHistoryPeriod,
    // output parameters:
    _eoddata1__SymbolHistoryPeriodResponse&eoddata1__SymbolHistoryPeriodResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__SymbolHistoryPeriod_(
    struct soap *soap,
    // input parameters:
    _eoddata1__SymbolHistoryPeriod*     eoddata1__SymbolHistoryPeriod,
    // output parameters:
    _eoddata1__SymbolHistoryPeriodResponse&eoddata1__SymbolHistoryPeriodResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	SymbolHistoryPeriod_ SOAP
//gsoap eoddata1 service method-style:	SymbolHistoryPeriod_ document
//gsoap eoddata1 service method-encoding:	SymbolHistoryPeriod_ literal
//gsoap eoddata1 service method-input-action:	SymbolHistoryPeriod_ http://ws.eoddata.com/Data/SymbolHistoryPeriod
//gsoap eoddata1 service method-output-action:	SymbolHistoryPeriod_ http://ws.eoddata.com/Data/SymbolHistoryPeriodResponse
int __eoddata1__SymbolHistoryPeriod_(
    _eoddata1__SymbolHistoryPeriod*     eoddata1__SymbolHistoryPeriod,	///< Input parameter
    _eoddata1__SymbolHistoryPeriodResponse&eoddata1__SymbolHistoryPeriodResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__SymbolHistoryPeriodByDateRange_                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__SymbolHistoryPeriodByDateRange_" of service binding "DataSoap".
Returns a list of historical data of a specified symbol, specified date range and
specified period.<br/>INPUT: Token (Login Token), Exchange (eg: NASDAQ), Symbol
(eg:MSFT), StartDate (format:yyyyMMdd eg:20080225), EndDate (format:yyyyMMdd eg:20080225),
Period (1, 5, 10, 15, 30, h, d, w, m)<br/>OUTPUT: List of historical quotes

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/SymbolHistoryPeriodByDateRange"

  - Addressing input action: "http://ws.eoddata.com/Data/SymbolHistoryPeriodByDateRange"

  - Addressing output action: "http://ws.eoddata.com/Data/SymbolHistoryPeriodByDateRangeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__SymbolHistoryPeriodByDateRange_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__SymbolHistoryPeriodByDateRange* eoddata1__SymbolHistoryPeriodByDateRange,
    // output parameters:
    _eoddata1__SymbolHistoryPeriodByDateRangeResponse&eoddata1__SymbolHistoryPeriodByDateRangeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__SymbolHistoryPeriodByDateRange_(
    struct soap *soap,
    // input parameters:
    _eoddata1__SymbolHistoryPeriodByDateRange* eoddata1__SymbolHistoryPeriodByDateRange,
    // output parameters:
    _eoddata1__SymbolHistoryPeriodByDateRangeResponse&eoddata1__SymbolHistoryPeriodByDateRangeResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	SymbolHistoryPeriodByDateRange_ SOAP
//gsoap eoddata1 service method-style:	SymbolHistoryPeriodByDateRange_ document
//gsoap eoddata1 service method-encoding:	SymbolHistoryPeriodByDateRange_ literal
//gsoap eoddata1 service method-input-action:	SymbolHistoryPeriodByDateRange_ http://ws.eoddata.com/Data/SymbolHistoryPeriodByDateRange
//gsoap eoddata1 service method-output-action:	SymbolHistoryPeriodByDateRange_ http://ws.eoddata.com/Data/SymbolHistoryPeriodByDateRangeResponse
int __eoddata1__SymbolHistoryPeriodByDateRange_(
    _eoddata1__SymbolHistoryPeriodByDateRange* eoddata1__SymbolHistoryPeriodByDateRange,	///< Input parameter
    _eoddata1__SymbolHistoryPeriodByDateRangeResponse&eoddata1__SymbolHistoryPeriodByDateRangeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__QuoteListByDatePeriod_                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__QuoteListByDatePeriod_" of service binding "DataSoap".
Returns a complete list of quotes for an entire exchange, specific date, and specific
period.<br/>INPUT: Token (Login Token), Exchange (eg: NASDAQ), QuoteDate (format:yyyyMMdd
eg:20080225), Period (1, 5, 10, 15, 30, h, d, w, m)<br/>OUTPUT: List of quotes

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/QuoteListByDatePeriod"

  - Addressing input action: "http://ws.eoddata.com/Data/QuoteListByDatePeriod"

  - Addressing output action: "http://ws.eoddata.com/Data/QuoteListByDatePeriodResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__QuoteListByDatePeriod_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__QuoteListByDatePeriod*   eoddata1__QuoteListByDatePeriod,
    // output parameters:
    _eoddata1__QuoteListByDatePeriodResponse&eoddata1__QuoteListByDatePeriodResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__QuoteListByDatePeriod_(
    struct soap *soap,
    // input parameters:
    _eoddata1__QuoteListByDatePeriod*   eoddata1__QuoteListByDatePeriod,
    // output parameters:
    _eoddata1__QuoteListByDatePeriodResponse&eoddata1__QuoteListByDatePeriodResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	QuoteListByDatePeriod_ SOAP
//gsoap eoddata1 service method-style:	QuoteListByDatePeriod_ document
//gsoap eoddata1 service method-encoding:	QuoteListByDatePeriod_ literal
//gsoap eoddata1 service method-input-action:	QuoteListByDatePeriod_ http://ws.eoddata.com/Data/QuoteListByDatePeriod
//gsoap eoddata1 service method-output-action:	QuoteListByDatePeriod_ http://ws.eoddata.com/Data/QuoteListByDatePeriodResponse
int __eoddata1__QuoteListByDatePeriod_(
    _eoddata1__QuoteListByDatePeriod*   eoddata1__QuoteListByDatePeriod,	///< Input parameter
    _eoddata1__QuoteListByDatePeriodResponse&eoddata1__QuoteListByDatePeriodResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__QuoteListByDatePeriod2_                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__QuoteListByDatePeriod2_" of service binding "DataSoap".
Returns a complete list of quotes for an entire exchange, specific date, and specific
period (compact format).<br/>INPUT: Token (Login Token), Exchange (eg: NASDAQ),
QuoteDate (format:yyyyMMdd eg:20080225), Period (1, 5, 10, 15, 30, h, d, w, m)<br/>OUTPUT:
List of quotes

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/QuoteListByDatePeriod2"

  - Addressing input action: "http://ws.eoddata.com/Data/QuoteListByDatePeriod2"

  - Addressing output action: "http://ws.eoddata.com/Data/QuoteListByDatePeriod2Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__QuoteListByDatePeriod2_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__QuoteListByDatePeriod2*  eoddata1__QuoteListByDatePeriod2,
    // output parameters:
    _eoddata1__QuoteListByDatePeriod2Response&eoddata1__QuoteListByDatePeriod2Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__QuoteListByDatePeriod2_(
    struct soap *soap,
    // input parameters:
    _eoddata1__QuoteListByDatePeriod2*  eoddata1__QuoteListByDatePeriod2,
    // output parameters:
    _eoddata1__QuoteListByDatePeriod2Response&eoddata1__QuoteListByDatePeriod2Response
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	QuoteListByDatePeriod2_ SOAP
//gsoap eoddata1 service method-style:	QuoteListByDatePeriod2_ document
//gsoap eoddata1 service method-encoding:	QuoteListByDatePeriod2_ literal
//gsoap eoddata1 service method-input-action:	QuoteListByDatePeriod2_ http://ws.eoddata.com/Data/QuoteListByDatePeriod2
//gsoap eoddata1 service method-output-action:	QuoteListByDatePeriod2_ http://ws.eoddata.com/Data/QuoteListByDatePeriod2Response
int __eoddata1__QuoteListByDatePeriod2_(
    _eoddata1__QuoteListByDatePeriod2*  eoddata1__QuoteListByDatePeriod2,	///< Input parameter
    _eoddata1__QuoteListByDatePeriod2Response&eoddata1__QuoteListByDatePeriod2Response	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__SymbolChangesByExchange_                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__SymbolChangesByExchange_" of service binding "DataSoap".
Returns a list of symbol changes of a given exchange. <br/>INPUT: Token (Login Token),
Exchange (eg: NASDAQ)<br/>OUTPUT: List of symbol changes

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/SymbolChangesByExchange"

  - Addressing input action: "http://ws.eoddata.com/Data/SymbolChangesByExchange"

  - Addressing output action: "http://ws.eoddata.com/Data/SymbolChangesByExchangeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__SymbolChangesByExchange_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__SymbolChangesByExchange* eoddata1__SymbolChangesByExchange,
    // output parameters:
    _eoddata1__SymbolChangesByExchangeResponse&eoddata1__SymbolChangesByExchangeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__SymbolChangesByExchange_(
    struct soap *soap,
    // input parameters:
    _eoddata1__SymbolChangesByExchange* eoddata1__SymbolChangesByExchange,
    // output parameters:
    _eoddata1__SymbolChangesByExchangeResponse&eoddata1__SymbolChangesByExchangeResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	SymbolChangesByExchange_ SOAP
//gsoap eoddata1 service method-style:	SymbolChangesByExchange_ document
//gsoap eoddata1 service method-encoding:	SymbolChangesByExchange_ literal
//gsoap eoddata1 service method-input-action:	SymbolChangesByExchange_ http://ws.eoddata.com/Data/SymbolChangesByExchange
//gsoap eoddata1 service method-output-action:	SymbolChangesByExchange_ http://ws.eoddata.com/Data/SymbolChangesByExchangeResponse
int __eoddata1__SymbolChangesByExchange_(
    _eoddata1__SymbolChangesByExchange* eoddata1__SymbolChangesByExchange,	///< Input parameter
    _eoddata1__SymbolChangesByExchangeResponse&eoddata1__SymbolChangesByExchangeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__DataClientLatestVersion_                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__DataClientLatestVersion_" of service binding "DataSoap".
Returns the latest version information of Data Client.<br/>INPUT: Token (Login Token)<br/>OUTPUT:
Date Client Version

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/DataClientLatestVersion"

  - Addressing input action: "http://ws.eoddata.com/Data/DataClientLatestVersion"

  - Addressing output action: "http://ws.eoddata.com/Data/DataClientLatestVersionResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__DataClientLatestVersion_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__DataClientLatestVersion* eoddata1__DataClientLatestVersion,
    // output parameters:
    _eoddata1__DataClientLatestVersionResponse&eoddata1__DataClientLatestVersionResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__DataClientLatestVersion_(
    struct soap *soap,
    // input parameters:
    _eoddata1__DataClientLatestVersion* eoddata1__DataClientLatestVersion,
    // output parameters:
    _eoddata1__DataClientLatestVersionResponse&eoddata1__DataClientLatestVersionResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	DataClientLatestVersion_ SOAP
//gsoap eoddata1 service method-style:	DataClientLatestVersion_ document
//gsoap eoddata1 service method-encoding:	DataClientLatestVersion_ literal
//gsoap eoddata1 service method-input-action:	DataClientLatestVersion_ http://ws.eoddata.com/Data/DataClientLatestVersion
//gsoap eoddata1 service method-output-action:	DataClientLatestVersion_ http://ws.eoddata.com/Data/DataClientLatestVersionResponse
int __eoddata1__DataClientLatestVersion_(
    _eoddata1__DataClientLatestVersion* eoddata1__DataClientLatestVersion,	///< Input parameter
    _eoddata1__DataClientLatestVersionResponse&eoddata1__DataClientLatestVersionResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__DataFormats_                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__DataFormats_" of service binding "DataSoap".
Returns the list of data formats.<br/>INPUT: Token (Login Token)<br/>OUTPUT: List
of DataFormats

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/DataFormats"

  - Addressing input action: "http://ws.eoddata.com/Data/DataFormats"

  - Addressing output action: "http://ws.eoddata.com/Data/DataFormatsResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__DataFormats_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__DataFormats*             eoddata1__DataFormats,
    // output parameters:
    _eoddata1__DataFormatsResponse     &eoddata1__DataFormatsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__DataFormats_(
    struct soap *soap,
    // input parameters:
    _eoddata1__DataFormats*             eoddata1__DataFormats,
    // output parameters:
    _eoddata1__DataFormatsResponse     &eoddata1__DataFormatsResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	DataFormats_ SOAP
//gsoap eoddata1 service method-style:	DataFormats_ document
//gsoap eoddata1 service method-encoding:	DataFormats_ literal
//gsoap eoddata1 service method-input-action:	DataFormats_ http://ws.eoddata.com/Data/DataFormats
//gsoap eoddata1 service method-output-action:	DataFormats_ http://ws.eoddata.com/Data/DataFormatsResponse
int __eoddata1__DataFormats_(
    _eoddata1__DataFormats*             eoddata1__DataFormats,	///< Input parameter
    _eoddata1__DataFormatsResponse     &eoddata1__DataFormatsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__UpdateDataFormat_                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__UpdateDataFormat_" of service binding "DataSoap".
Update preferred Data Format<br/>INPUT: Token (Login Token), IncludeHeader, IncludeSuffix<br/>OUTPUT:
List of DataFormats

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/UpdateDataFormat"

  - Addressing input action: "http://ws.eoddata.com/Data/UpdateDataFormat"

  - Addressing output action: "http://ws.eoddata.com/Data/UpdateDataFormatResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__UpdateDataFormat_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__UpdateDataFormat*        eoddata1__UpdateDataFormat,
    // output parameters:
    _eoddata1__UpdateDataFormatResponse&eoddata1__UpdateDataFormatResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__UpdateDataFormat_(
    struct soap *soap,
    // input parameters:
    _eoddata1__UpdateDataFormat*        eoddata1__UpdateDataFormat,
    // output parameters:
    _eoddata1__UpdateDataFormatResponse&eoddata1__UpdateDataFormatResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	UpdateDataFormat_ SOAP
//gsoap eoddata1 service method-style:	UpdateDataFormat_ document
//gsoap eoddata1 service method-encoding:	UpdateDataFormat_ literal
//gsoap eoddata1 service method-input-action:	UpdateDataFormat_ http://ws.eoddata.com/Data/UpdateDataFormat
//gsoap eoddata1 service method-output-action:	UpdateDataFormat_ http://ws.eoddata.com/Data/UpdateDataFormatResponse
int __eoddata1__UpdateDataFormat_(
    _eoddata1__UpdateDataFormat*        eoddata1__UpdateDataFormat,	///< Input parameter
    _eoddata1__UpdateDataFormatResponse&eoddata1__UpdateDataFormatResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __eoddata1__ValidateAccess_                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__eoddata1__ValidateAccess_" of service binding "DataSoap".
Validate access for an entire exchange, specific date, and specific period.<br/>INPUT:
Token (Login Token), Exchange (eg: NASDAQ), QuoteDate (format:yyyyMMdd eg:20080225),
Period (1, 5, 10, 15, 30, h, d, w, m)<br/>OUTPUT: RESPONSE

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/ValidateAccess"

  - Addressing input action: "http://ws.eoddata.com/Data/ValidateAccess"

  - Addressing output action: "http://ws.eoddata.com/Data/ValidateAccessResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___eoddata1__ValidateAccess_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _eoddata1__ValidateAccess*          eoddata1__ValidateAccess,
    // output parameters:
    _eoddata1__ValidateAccessResponse  &eoddata1__ValidateAccessResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __eoddata1__ValidateAccess_(
    struct soap *soap,
    // input parameters:
    _eoddata1__ValidateAccess*          eoddata1__ValidateAccess,
    // output parameters:
    _eoddata1__ValidateAccessResponse  &eoddata1__ValidateAccessResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap eoddata1 service method-protocol:	ValidateAccess_ SOAP
//gsoap eoddata1 service method-style:	ValidateAccess_ document
//gsoap eoddata1 service method-encoding:	ValidateAccess_ literal
//gsoap eoddata1 service method-input-action:	ValidateAccess_ http://ws.eoddata.com/Data/ValidateAccess
//gsoap eoddata1 service method-output-action:	ValidateAccess_ http://ws.eoddata.com/Data/ValidateAccessResponse
int __eoddata1__ValidateAccess_(
    _eoddata1__ValidateAccess*          eoddata1__ValidateAccess,	///< Input parameter
    _eoddata1__ValidateAccessResponse  &eoddata1__ValidateAccessResponse	///< Output parameter
);

/**

@page DataSoap Binding "DataSoap"

@section DataSoap_policy_enablers Policy Enablers of Binding "DataSoap"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section eoddata1 Top-level root elements of schema "http://ws.eoddata.com/Data"

  - <eoddata1:Login> @ref _eoddata1__Login
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__Login(struct soap*, _eoddata1__Login*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__Login(struct soap*, _eoddata1__Login*);
    @endcode

  - <eoddata1:LoginResponse> @ref _eoddata1__LoginResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__LoginResponse(struct soap*, _eoddata1__LoginResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__LoginResponse(struct soap*, _eoddata1__LoginResponse*);
    @endcode

  - <eoddata1:Login2> @ref _eoddata1__Login2
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__Login2(struct soap*, _eoddata1__Login2*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__Login2(struct soap*, _eoddata1__Login2*);
    @endcode

  - <eoddata1:Login2Response> @ref _eoddata1__Login2Response
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__Login2Response(struct soap*, _eoddata1__Login2Response*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__Login2Response(struct soap*, _eoddata1__Login2Response*);
    @endcode

  - <eoddata1:Membership> @ref _eoddata1__Membership
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__Membership(struct soap*, _eoddata1__Membership*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__Membership(struct soap*, _eoddata1__Membership*);
    @endcode

  - <eoddata1:MembershipResponse> @ref _eoddata1__MembershipResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__MembershipResponse(struct soap*, _eoddata1__MembershipResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__MembershipResponse(struct soap*, _eoddata1__MembershipResponse*);
    @endcode

  - <eoddata1:ExchangeList> @ref _eoddata1__ExchangeList
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__ExchangeList(struct soap*, _eoddata1__ExchangeList*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__ExchangeList(struct soap*, _eoddata1__ExchangeList*);
    @endcode

  - <eoddata1:ExchangeListResponse> @ref _eoddata1__ExchangeListResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__ExchangeListResponse(struct soap*, _eoddata1__ExchangeListResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__ExchangeListResponse(struct soap*, _eoddata1__ExchangeListResponse*);
    @endcode

  - <eoddata1:ExchangeGet> @ref _eoddata1__ExchangeGet
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__ExchangeGet(struct soap*, _eoddata1__ExchangeGet*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__ExchangeGet(struct soap*, _eoddata1__ExchangeGet*);
    @endcode

  - <eoddata1:ExchangeGetResponse> @ref _eoddata1__ExchangeGetResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__ExchangeGetResponse(struct soap*, _eoddata1__ExchangeGetResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__ExchangeGetResponse(struct soap*, _eoddata1__ExchangeGetResponse*);
    @endcode

  - <eoddata1:SymbolList> @ref _eoddata1__SymbolList
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__SymbolList(struct soap*, _eoddata1__SymbolList*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__SymbolList(struct soap*, _eoddata1__SymbolList*);
    @endcode

  - <eoddata1:SymbolListResponse> @ref _eoddata1__SymbolListResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__SymbolListResponse(struct soap*, _eoddata1__SymbolListResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__SymbolListResponse(struct soap*, _eoddata1__SymbolListResponse*);
    @endcode

  - <eoddata1:SymbolList2> @ref _eoddata1__SymbolList2
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__SymbolList2(struct soap*, _eoddata1__SymbolList2*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__SymbolList2(struct soap*, _eoddata1__SymbolList2*);
    @endcode

  - <eoddata1:SymbolList2Response> @ref _eoddata1__SymbolList2Response
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__SymbolList2Response(struct soap*, _eoddata1__SymbolList2Response*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__SymbolList2Response(struct soap*, _eoddata1__SymbolList2Response*);
    @endcode

  - <eoddata1:QuoteGet> @ref _eoddata1__QuoteGet
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__QuoteGet(struct soap*, _eoddata1__QuoteGet*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__QuoteGet(struct soap*, _eoddata1__QuoteGet*);
    @endcode

  - <eoddata1:QuoteGetResponse> @ref _eoddata1__QuoteGetResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__QuoteGetResponse(struct soap*, _eoddata1__QuoteGetResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__QuoteGetResponse(struct soap*, _eoddata1__QuoteGetResponse*);
    @endcode

  - <eoddata1:QuoteList2> @ref _eoddata1__QuoteList2
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__QuoteList2(struct soap*, _eoddata1__QuoteList2*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__QuoteList2(struct soap*, _eoddata1__QuoteList2*);
    @endcode

  - <eoddata1:QuoteList2Response> @ref _eoddata1__QuoteList2Response
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__QuoteList2Response(struct soap*, _eoddata1__QuoteList2Response*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__QuoteList2Response(struct soap*, _eoddata1__QuoteList2Response*);
    @endcode

  - <eoddata1:SymbolGet> @ref _eoddata1__SymbolGet
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__SymbolGet(struct soap*, _eoddata1__SymbolGet*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__SymbolGet(struct soap*, _eoddata1__SymbolGet*);
    @endcode

  - <eoddata1:SymbolGetResponse> @ref _eoddata1__SymbolGetResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__SymbolGetResponse(struct soap*, _eoddata1__SymbolGetResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__SymbolGetResponse(struct soap*, _eoddata1__SymbolGetResponse*);
    @endcode

  - <eoddata1:QuoteList> @ref _eoddata1__QuoteList
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__QuoteList(struct soap*, _eoddata1__QuoteList*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__QuoteList(struct soap*, _eoddata1__QuoteList*);
    @endcode

  - <eoddata1:QuoteListResponse> @ref _eoddata1__QuoteListResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__QuoteListResponse(struct soap*, _eoddata1__QuoteListResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__QuoteListResponse(struct soap*, _eoddata1__QuoteListResponse*);
    @endcode

  - <eoddata1:NewsList> @ref _eoddata1__NewsList
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__NewsList(struct soap*, _eoddata1__NewsList*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__NewsList(struct soap*, _eoddata1__NewsList*);
    @endcode

  - <eoddata1:NewsListResponse> @ref _eoddata1__NewsListResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__NewsListResponse(struct soap*, _eoddata1__NewsListResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__NewsListResponse(struct soap*, _eoddata1__NewsListResponse*);
    @endcode

  - <eoddata1:NewsListBySymbol> @ref _eoddata1__NewsListBySymbol
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__NewsListBySymbol(struct soap*, _eoddata1__NewsListBySymbol*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__NewsListBySymbol(struct soap*, _eoddata1__NewsListBySymbol*);
    @endcode

  - <eoddata1:NewsListBySymbolResponse> @ref _eoddata1__NewsListBySymbolResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__NewsListBySymbolResponse(struct soap*, _eoddata1__NewsListBySymbolResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__NewsListBySymbolResponse(struct soap*, _eoddata1__NewsListBySymbolResponse*);
    @endcode

  - <eoddata1:FundamentalList> @ref _eoddata1__FundamentalList
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__FundamentalList(struct soap*, _eoddata1__FundamentalList*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__FundamentalList(struct soap*, _eoddata1__FundamentalList*);
    @endcode

  - <eoddata1:FundamentalListResponse> @ref _eoddata1__FundamentalListResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__FundamentalListResponse(struct soap*, _eoddata1__FundamentalListResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__FundamentalListResponse(struct soap*, _eoddata1__FundamentalListResponse*);
    @endcode

  - <eoddata1:TechnicalList> @ref _eoddata1__TechnicalList
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__TechnicalList(struct soap*, _eoddata1__TechnicalList*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__TechnicalList(struct soap*, _eoddata1__TechnicalList*);
    @endcode

  - <eoddata1:TechnicalListResponse> @ref _eoddata1__TechnicalListResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__TechnicalListResponse(struct soap*, _eoddata1__TechnicalListResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__TechnicalListResponse(struct soap*, _eoddata1__TechnicalListResponse*);
    @endcode

  - <eoddata1:QuoteListByDate> @ref _eoddata1__QuoteListByDate
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__QuoteListByDate(struct soap*, _eoddata1__QuoteListByDate*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__QuoteListByDate(struct soap*, _eoddata1__QuoteListByDate*);
    @endcode

  - <eoddata1:QuoteListByDateResponse> @ref _eoddata1__QuoteListByDateResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__QuoteListByDateResponse(struct soap*, _eoddata1__QuoteListByDateResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__QuoteListByDateResponse(struct soap*, _eoddata1__QuoteListByDateResponse*);
    @endcode

  - <eoddata1:QuoteListByDate2> @ref _eoddata1__QuoteListByDate2
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__QuoteListByDate2(struct soap*, _eoddata1__QuoteListByDate2*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__QuoteListByDate2(struct soap*, _eoddata1__QuoteListByDate2*);
    @endcode

  - <eoddata1:QuoteListByDate2Response> @ref _eoddata1__QuoteListByDate2Response
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__QuoteListByDate2Response(struct soap*, _eoddata1__QuoteListByDate2Response*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__QuoteListByDate2Response(struct soap*, _eoddata1__QuoteListByDate2Response*);
    @endcode

  - <eoddata1:SymbolHistory> @ref _eoddata1__SymbolHistory
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__SymbolHistory(struct soap*, _eoddata1__SymbolHistory*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__SymbolHistory(struct soap*, _eoddata1__SymbolHistory*);
    @endcode

  - <eoddata1:SymbolHistoryResponse> @ref _eoddata1__SymbolHistoryResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__SymbolHistoryResponse(struct soap*, _eoddata1__SymbolHistoryResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__SymbolHistoryResponse(struct soap*, _eoddata1__SymbolHistoryResponse*);
    @endcode

  - <eoddata1:Top10Gains> @ref _eoddata1__Top10Gains
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__Top10Gains(struct soap*, _eoddata1__Top10Gains*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__Top10Gains(struct soap*, _eoddata1__Top10Gains*);
    @endcode

  - <eoddata1:Top10GainsResponse> @ref _eoddata1__Top10GainsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__Top10GainsResponse(struct soap*, _eoddata1__Top10GainsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__Top10GainsResponse(struct soap*, _eoddata1__Top10GainsResponse*);
    @endcode

  - <eoddata1:Top10Losses> @ref _eoddata1__Top10Losses
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__Top10Losses(struct soap*, _eoddata1__Top10Losses*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__Top10Losses(struct soap*, _eoddata1__Top10Losses*);
    @endcode

  - <eoddata1:Top10LossesResponse> @ref _eoddata1__Top10LossesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__Top10LossesResponse(struct soap*, _eoddata1__Top10LossesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__Top10LossesResponse(struct soap*, _eoddata1__Top10LossesResponse*);
    @endcode

  - <eoddata1:SymbolChart> @ref _eoddata1__SymbolChart
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__SymbolChart(struct soap*, _eoddata1__SymbolChart*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__SymbolChart(struct soap*, _eoddata1__SymbolChart*);
    @endcode

  - <eoddata1:SymbolChartResponse> @ref _eoddata1__SymbolChartResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__SymbolChartResponse(struct soap*, _eoddata1__SymbolChartResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__SymbolChartResponse(struct soap*, _eoddata1__SymbolChartResponse*);
    @endcode

  - <eoddata1:ExchangeMonths> @ref _eoddata1__ExchangeMonths
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__ExchangeMonths(struct soap*, _eoddata1__ExchangeMonths*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__ExchangeMonths(struct soap*, _eoddata1__ExchangeMonths*);
    @endcode

  - <eoddata1:ExchangeMonthsResponse> @ref _eoddata1__ExchangeMonthsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__ExchangeMonthsResponse(struct soap*, _eoddata1__ExchangeMonthsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__ExchangeMonthsResponse(struct soap*, _eoddata1__ExchangeMonthsResponse*);
    @endcode

  - <eoddata1:SplitListByExchange> @ref _eoddata1__SplitListByExchange
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__SplitListByExchange(struct soap*, _eoddata1__SplitListByExchange*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__SplitListByExchange(struct soap*, _eoddata1__SplitListByExchange*);
    @endcode

  - <eoddata1:SplitListByExchangeResponse> @ref _eoddata1__SplitListByExchangeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__SplitListByExchangeResponse(struct soap*, _eoddata1__SplitListByExchangeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__SplitListByExchangeResponse(struct soap*, _eoddata1__SplitListByExchangeResponse*);
    @endcode

  - <eoddata1:SplitListBySymbol> @ref _eoddata1__SplitListBySymbol
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__SplitListBySymbol(struct soap*, _eoddata1__SplitListBySymbol*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__SplitListBySymbol(struct soap*, _eoddata1__SplitListBySymbol*);
    @endcode

  - <eoddata1:SplitListBySymbolResponse> @ref _eoddata1__SplitListBySymbolResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__SplitListBySymbolResponse(struct soap*, _eoddata1__SplitListBySymbolResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__SplitListBySymbolResponse(struct soap*, _eoddata1__SplitListBySymbolResponse*);
    @endcode

  - <eoddata1:CountryList> @ref _eoddata1__CountryList
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__CountryList(struct soap*, _eoddata1__CountryList*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__CountryList(struct soap*, _eoddata1__CountryList*);
    @endcode

  - <eoddata1:CountryListResponse> @ref _eoddata1__CountryListResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__CountryListResponse(struct soap*, _eoddata1__CountryListResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__CountryListResponse(struct soap*, _eoddata1__CountryListResponse*);
    @endcode

  - <eoddata1:SymbolHistoryPeriod> @ref _eoddata1__SymbolHistoryPeriod
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__SymbolHistoryPeriod(struct soap*, _eoddata1__SymbolHistoryPeriod*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__SymbolHistoryPeriod(struct soap*, _eoddata1__SymbolHistoryPeriod*);
    @endcode

  - <eoddata1:SymbolHistoryPeriodResponse> @ref _eoddata1__SymbolHistoryPeriodResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__SymbolHistoryPeriodResponse(struct soap*, _eoddata1__SymbolHistoryPeriodResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__SymbolHistoryPeriodResponse(struct soap*, _eoddata1__SymbolHistoryPeriodResponse*);
    @endcode

  - <eoddata1:SymbolHistoryPeriodByDateRange> @ref _eoddata1__SymbolHistoryPeriodByDateRange
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__SymbolHistoryPeriodByDateRange(struct soap*, _eoddata1__SymbolHistoryPeriodByDateRange*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__SymbolHistoryPeriodByDateRange(struct soap*, _eoddata1__SymbolHistoryPeriodByDateRange*);
    @endcode

  - <eoddata1:SymbolHistoryPeriodByDateRangeResponse> @ref _eoddata1__SymbolHistoryPeriodByDateRangeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__SymbolHistoryPeriodByDateRangeResponse(struct soap*, _eoddata1__SymbolHistoryPeriodByDateRangeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__SymbolHistoryPeriodByDateRangeResponse(struct soap*, _eoddata1__SymbolHistoryPeriodByDateRangeResponse*);
    @endcode

  - <eoddata1:QuoteListByDatePeriod> @ref _eoddata1__QuoteListByDatePeriod
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__QuoteListByDatePeriod(struct soap*, _eoddata1__QuoteListByDatePeriod*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__QuoteListByDatePeriod(struct soap*, _eoddata1__QuoteListByDatePeriod*);
    @endcode

  - <eoddata1:QuoteListByDatePeriodResponse> @ref _eoddata1__QuoteListByDatePeriodResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__QuoteListByDatePeriodResponse(struct soap*, _eoddata1__QuoteListByDatePeriodResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__QuoteListByDatePeriodResponse(struct soap*, _eoddata1__QuoteListByDatePeriodResponse*);
    @endcode

  - <eoddata1:QuoteListByDatePeriod2> @ref _eoddata1__QuoteListByDatePeriod2
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__QuoteListByDatePeriod2(struct soap*, _eoddata1__QuoteListByDatePeriod2*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__QuoteListByDatePeriod2(struct soap*, _eoddata1__QuoteListByDatePeriod2*);
    @endcode

  - <eoddata1:QuoteListByDatePeriod2Response> @ref _eoddata1__QuoteListByDatePeriod2Response
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__QuoteListByDatePeriod2Response(struct soap*, _eoddata1__QuoteListByDatePeriod2Response*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__QuoteListByDatePeriod2Response(struct soap*, _eoddata1__QuoteListByDatePeriod2Response*);
    @endcode

  - <eoddata1:SymbolChangesByExchange> @ref _eoddata1__SymbolChangesByExchange
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__SymbolChangesByExchange(struct soap*, _eoddata1__SymbolChangesByExchange*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__SymbolChangesByExchange(struct soap*, _eoddata1__SymbolChangesByExchange*);
    @endcode

  - <eoddata1:SymbolChangesByExchangeResponse> @ref _eoddata1__SymbolChangesByExchangeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__SymbolChangesByExchangeResponse(struct soap*, _eoddata1__SymbolChangesByExchangeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__SymbolChangesByExchangeResponse(struct soap*, _eoddata1__SymbolChangesByExchangeResponse*);
    @endcode

  - <eoddata1:DataClientLatestVersion> @ref _eoddata1__DataClientLatestVersion
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__DataClientLatestVersion(struct soap*, _eoddata1__DataClientLatestVersion*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__DataClientLatestVersion(struct soap*, _eoddata1__DataClientLatestVersion*);
    @endcode

  - <eoddata1:DataClientLatestVersionResponse> @ref _eoddata1__DataClientLatestVersionResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__DataClientLatestVersionResponse(struct soap*, _eoddata1__DataClientLatestVersionResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__DataClientLatestVersionResponse(struct soap*, _eoddata1__DataClientLatestVersionResponse*);
    @endcode

  - <eoddata1:DataFormats> @ref _eoddata1__DataFormats
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__DataFormats(struct soap*, _eoddata1__DataFormats*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__DataFormats(struct soap*, _eoddata1__DataFormats*);
    @endcode

  - <eoddata1:DataFormatsResponse> @ref _eoddata1__DataFormatsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__DataFormatsResponse(struct soap*, _eoddata1__DataFormatsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__DataFormatsResponse(struct soap*, _eoddata1__DataFormatsResponse*);
    @endcode

  - <eoddata1:UpdateDataFormat> @ref _eoddata1__UpdateDataFormat
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__UpdateDataFormat(struct soap*, _eoddata1__UpdateDataFormat*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__UpdateDataFormat(struct soap*, _eoddata1__UpdateDataFormat*);
    @endcode

  - <eoddata1:UpdateDataFormatResponse> @ref _eoddata1__UpdateDataFormatResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__UpdateDataFormatResponse(struct soap*, _eoddata1__UpdateDataFormatResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__UpdateDataFormatResponse(struct soap*, _eoddata1__UpdateDataFormatResponse*);
    @endcode

  - <eoddata1:ValidateAccess> @ref _eoddata1__ValidateAccess
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__ValidateAccess(struct soap*, _eoddata1__ValidateAccess*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__ValidateAccess(struct soap*, _eoddata1__ValidateAccess*);
    @endcode

  - <eoddata1:ValidateAccessResponse> @ref _eoddata1__ValidateAccessResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__eoddata1__ValidateAccessResponse(struct soap*, _eoddata1__ValidateAccessResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__eoddata1__ValidateAccessResponse(struct soap*, _eoddata1__ValidateAccessResponse*);
    @endcode

  - <eoddata1:LOGINRESPONSE> (use wsdl2h option -g to auto-generate type _eoddata1__LOGINRESPONSE)

  - <eoddata1:RESPONSE> (use wsdl2h option -g to auto-generate type _eoddata1__RESPONSE)

*/

} // namespace eoddata

/* End of eoddata.h */
