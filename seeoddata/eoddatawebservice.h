namespace ns {
// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* eoddatawebservice.h
   Generated by wsdl2h 2.8.28 from http://ws.eoddata.com/data.asmx?WSDL and typemap.dat
   2016-06-13 10:47:56 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/** @page page_notes Notes

@note HINTS:
 - Run soapcpp2 on eoddatawebservice.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 -j to generate improved proxy and server classes.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c++,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://ws.eoddata.com/Data                                               *
 *                                                                            *
\******************************************************************************/

/* WSDL Documentation:

EODData Financial Information Web Service
*/


/******************************************************************************\
 *                                                                            *
 * $CONTAINER                                                                 *
 *   std::vector                                                              *
 *                                                                            *
\******************************************************************************/

template <class T> class std::vector;

/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/

#import "stl.h"	// enable STL containers when used (option -s removes STL dependency)

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://ws.eoddata.com/Data"

*/

#define SOAP_NAMESPACE_OF_ns1	"http://ws.eoddata.com/Data"
//gsoap ns1   schema namespace:	http://ws.eoddata.com/Data
//gsoap ns1   schema elementForm:	qualified
//gsoap ns1   schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


//  Forward declaration of class ns1__LOGINRESPONSE.
class ns1__LOGINRESPONSE;

//  Forward declaration of class ns1__RESPONSE.
class ns1__RESPONSE;

//  Forward declaration of class ns1__EXCHANGE.
class ns1__EXCHANGE;

//  Forward declaration of class ns1__ArrayOfEXCHANGE.
class ns1__ArrayOfEXCHANGE;

//  Forward declaration of class ns1__SYMBOL.
class ns1__SYMBOL;

//  Forward declaration of class ns1__ArrayOfSYMBOL.
class ns1__ArrayOfSYMBOL;

//  Forward declaration of class ns1__ArrayOfSYMBOL2.
class ns1__ArrayOfSYMBOL2;

//  Forward declaration of class ns1__SYMBOL2.
class ns1__SYMBOL2;

//  Forward declaration of class ns1__QUOTE.
class ns1__QUOTE;

//  Forward declaration of class ns1__ArrayOfQUOTE.
class ns1__ArrayOfQUOTE;

//  Forward declaration of class ns1__ArrayOfQUOTE2.
class ns1__ArrayOfQUOTE2;

//  Forward declaration of class ns1__QUOTE2.
class ns1__QUOTE2;

//  Forward declaration of class ns1__ArrayOfSPLIT.
class ns1__ArrayOfSPLIT;

//  Forward declaration of class ns1__SPLIT.
class ns1__SPLIT;

//  Forward declaration of class ns1__ArrayOfCountryBase.
class ns1__ArrayOfCountryBase;

//  Forward declaration of class ns1__CountryBase.
class ns1__CountryBase;

//  Forward declaration of class ns1__ArrayOfFUNDAMENTAL.
class ns1__ArrayOfFUNDAMENTAL;

//  Forward declaration of class ns1__FUNDAMENTAL.
class ns1__FUNDAMENTAL;

//  Forward declaration of class ns1__ArrayOfTECHNICAL.
class ns1__ArrayOfTECHNICAL;

//  Forward declaration of class ns1__TECHNICAL.
class ns1__TECHNICAL;

//  Forward declaration of class ns1__ArrayOfSYMBOLCHANGE.
class ns1__ArrayOfSYMBOLCHANGE;

//  Forward declaration of class ns1__SYMBOLCHANGE.
class ns1__SYMBOLCHANGE;

//  Forward declaration of class ns1__ArrayOfNEWS.
class ns1__ArrayOfNEWS;

//  Forward declaration of class ns1__NEWS.
class ns1__NEWS;

//  Forward declaration of class ns1__ArrayOfDATAFORMAT.
class ns1__ArrayOfDATAFORMAT;

//  Forward declaration of class ns1__DATAFORMAT.
class ns1__DATAFORMAT;

//  Forward declaration of class ns1__ArrayOfDATAFORMAT_USCORECOLUMN.
class ns1__ArrayOfDATAFORMAT_USCORECOLUMN;

//  Forward declaration of class ns1__DATAFORMAT_USCORECOLUMN.
class ns1__DATAFORMAT_USCORECOLUMN;

//  Forward declaration of class _ns1__Login.
class _ns1__Login;

//  Forward declaration of class _ns1__LoginResponse.
class _ns1__LoginResponse;

//  Forward declaration of class _ns1__Login2.
class _ns1__Login2;

//  Forward declaration of class _ns1__Login2Response.
class _ns1__Login2Response;

//  Forward declaration of class _ns1__Membership.
class _ns1__Membership;

//  Forward declaration of class _ns1__MembershipResponse.
class _ns1__MembershipResponse;

//  Forward declaration of class _ns1__ExchangeList.
class _ns1__ExchangeList;

//  Forward declaration of class _ns1__ExchangeListResponse.
class _ns1__ExchangeListResponse;

//  Forward declaration of class _ns1__ExchangeGet.
class _ns1__ExchangeGet;

//  Forward declaration of class _ns1__ExchangeGetResponse.
class _ns1__ExchangeGetResponse;

//  Forward declaration of class _ns1__SymbolList.
class _ns1__SymbolList;

//  Forward declaration of class _ns1__SymbolListResponse.
class _ns1__SymbolListResponse;

//  Forward declaration of class _ns1__SymbolList2.
class _ns1__SymbolList2;

//  Forward declaration of class _ns1__SymbolList2Response.
class _ns1__SymbolList2Response;

//  Forward declaration of class _ns1__QuoteGet.
class _ns1__QuoteGet;

//  Forward declaration of class _ns1__QuoteGetResponse.
class _ns1__QuoteGetResponse;

//  Forward declaration of class _ns1__QuoteList2.
class _ns1__QuoteList2;

//  Forward declaration of class _ns1__QuoteList2Response.
class _ns1__QuoteList2Response;

//  Forward declaration of class _ns1__SymbolGet.
class _ns1__SymbolGet;

//  Forward declaration of class _ns1__SymbolGetResponse.
class _ns1__SymbolGetResponse;

//  Forward declaration of class _ns1__QuoteList.
class _ns1__QuoteList;

//  Forward declaration of class _ns1__QuoteListResponse.
class _ns1__QuoteListResponse;

//  Forward declaration of class _ns1__NewsList.
class _ns1__NewsList;

//  Forward declaration of class _ns1__NewsListResponse.
class _ns1__NewsListResponse;

//  Forward declaration of class _ns1__NewsListBySymbol.
class _ns1__NewsListBySymbol;

//  Forward declaration of class _ns1__NewsListBySymbolResponse.
class _ns1__NewsListBySymbolResponse;

//  Forward declaration of class _ns1__FundamentalList.
class _ns1__FundamentalList;

//  Forward declaration of class _ns1__FundamentalListResponse.
class _ns1__FundamentalListResponse;

//  Forward declaration of class _ns1__TechnicalList.
class _ns1__TechnicalList;

//  Forward declaration of class _ns1__TechnicalListResponse.
class _ns1__TechnicalListResponse;

//  Forward declaration of class _ns1__QuoteListByDate.
class _ns1__QuoteListByDate;

//  Forward declaration of class _ns1__QuoteListByDateResponse.
class _ns1__QuoteListByDateResponse;

//  Forward declaration of class _ns1__QuoteListByDate2.
class _ns1__QuoteListByDate2;

//  Forward declaration of class _ns1__QuoteListByDate2Response.
class _ns1__QuoteListByDate2Response;

//  Forward declaration of class _ns1__SymbolHistory.
class _ns1__SymbolHistory;

//  Forward declaration of class _ns1__SymbolHistoryResponse.
class _ns1__SymbolHistoryResponse;

//  Forward declaration of class _ns1__Top10Gains.
class _ns1__Top10Gains;

//  Forward declaration of class _ns1__Top10GainsResponse.
class _ns1__Top10GainsResponse;

//  Forward declaration of class _ns1__Top10Losses.
class _ns1__Top10Losses;

//  Forward declaration of class _ns1__Top10LossesResponse.
class _ns1__Top10LossesResponse;

//  Forward declaration of class _ns1__SymbolChart.
class _ns1__SymbolChart;

//  Forward declaration of class _ns1__SymbolChartResponse.
class _ns1__SymbolChartResponse;

//  Forward declaration of class _ns1__ExchangeMonths.
class _ns1__ExchangeMonths;

//  Forward declaration of class _ns1__ExchangeMonthsResponse.
class _ns1__ExchangeMonthsResponse;

//  Forward declaration of class _ns1__SplitListByExchange.
class _ns1__SplitListByExchange;

//  Forward declaration of class _ns1__SplitListByExchangeResponse.
class _ns1__SplitListByExchangeResponse;

//  Forward declaration of class _ns1__SplitListBySymbol.
class _ns1__SplitListBySymbol;

//  Forward declaration of class _ns1__SplitListBySymbolResponse.
class _ns1__SplitListBySymbolResponse;

//  Forward declaration of class _ns1__CountryList.
class _ns1__CountryList;

//  Forward declaration of class _ns1__CountryListResponse.
class _ns1__CountryListResponse;

//  Forward declaration of class _ns1__SymbolHistoryPeriod.
class _ns1__SymbolHistoryPeriod;

//  Forward declaration of class _ns1__SymbolHistoryPeriodResponse.
class _ns1__SymbolHistoryPeriodResponse;

//  Forward declaration of class _ns1__SymbolHistoryPeriodByDateRange.
class _ns1__SymbolHistoryPeriodByDateRange;

//  Forward declaration of class _ns1__SymbolHistoryPeriodByDateRangeResponse.
class _ns1__SymbolHistoryPeriodByDateRangeResponse;

//  Forward declaration of class _ns1__QuoteListByDatePeriod.
class _ns1__QuoteListByDatePeriod;

//  Forward declaration of class _ns1__QuoteListByDatePeriodResponse.
class _ns1__QuoteListByDatePeriodResponse;

//  Forward declaration of class _ns1__QuoteListByDatePeriod2.
class _ns1__QuoteListByDatePeriod2;

//  Forward declaration of class _ns1__QuoteListByDatePeriod2Response.
class _ns1__QuoteListByDatePeriod2Response;

//  Forward declaration of class _ns1__SymbolChangesByExchange.
class _ns1__SymbolChangesByExchange;

//  Forward declaration of class _ns1__SymbolChangesByExchangeResponse.
class _ns1__SymbolChangesByExchangeResponse;

//  Forward declaration of class _ns1__DataClientLatestVersion.
class _ns1__DataClientLatestVersion;

//  Forward declaration of class _ns1__DataClientLatestVersionResponse.
class _ns1__DataClientLatestVersionResponse;

//  Forward declaration of class _ns1__DataFormats.
class _ns1__DataFormats;

//  Forward declaration of class _ns1__DataFormatsResponse.
class _ns1__DataFormatsResponse;

//  Forward declaration of class _ns1__UpdateDataFormat.
class _ns1__UpdateDataFormat;

//  Forward declaration of class _ns1__UpdateDataFormatResponse.
class _ns1__UpdateDataFormatResponse;

//  Forward declaration of class _ns1__ValidateAccess.
class _ns1__ValidateAccess;

//  Forward declaration of class _ns1__ValidateAccessResponse.
class _ns1__ValidateAccessResponse;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://ws.eoddata.com/Data                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://ws.eoddata.com/Data                                               *
 *                                                                            *
\******************************************************************************/

/// @brief "http://ws.eoddata.com/Data":LOGINRESPONSE is a complexType.
///
/// class ns1__LOGINRESPONSE operations:
/// - ns1__LOGINRESPONSE* soap_new_ns1__LOGINRESPONSE(soap*) allocate
/// - ns1__LOGINRESPONSE* soap_new_ns1__LOGINRESPONSE(soap*, int num) allocate array
/// - ns1__LOGINRESPONSE* soap_new_req_ns1__LOGINRESPONSE(soap*, ...) allocate, set required members
/// - ns1__LOGINRESPONSE* soap_new_set_ns1__LOGINRESPONSE(soap*, ...) allocate, set all public members
/// - ns1__LOGINRESPONSE::soap_default(soap*) reset members to default
/// - int soap_read_ns1__LOGINRESPONSE(soap*, ns1__LOGINRESPONSE*) deserialize from a stream
/// - int soap_write_ns1__LOGINRESPONSE(soap*, ns1__LOGINRESPONSE*) serialize to a stream
/// - ns1__LOGINRESPONSE* ns1__LOGINRESPONSE::soap_dup(soap*) returns deep copy of ns1__LOGINRESPONSE, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__LOGINRESPONSE::soap_del() deep deletes ns1__LOGINRESPONSE data members, use only after ns1__LOGINRESPONSE::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__LOGINRESPONSE
{ public:
/// Attribute "Message" of XSD type xs:string.
   @std::string*                         Message                        0;	///< Optional attribute.
/// Attribute "Token" of XSD type xs:string.
   @std::string*                         Token                          0;	///< Optional attribute.
/// Attribute "DataFormat" of XSD type xs:string.
   @std::string*                         DataFormat                     0;	///< Optional attribute.
/// Attribute "Header" of XSD type xs:boolean.
   @bool                                 Header                         1;	///< Required attribute.
/// Attribute "Suffix" of XSD type xs:boolean.
   @bool                                 Suffix                         1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://ws.eoddata.com/Data":RESPONSE is a complexType.
///
/// class ns1__RESPONSE operations:
/// - ns1__RESPONSE* soap_new_ns1__RESPONSE(soap*) allocate
/// - ns1__RESPONSE* soap_new_ns1__RESPONSE(soap*, int num) allocate array
/// - ns1__RESPONSE* soap_new_req_ns1__RESPONSE(soap*, ...) allocate, set required members
/// - ns1__RESPONSE* soap_new_set_ns1__RESPONSE(soap*, ...) allocate, set all public members
/// - ns1__RESPONSE::soap_default(soap*) reset members to default
/// - int soap_read_ns1__RESPONSE(soap*, ns1__RESPONSE*) deserialize from a stream
/// - int soap_write_ns1__RESPONSE(soap*, ns1__RESPONSE*) serialize to a stream
/// - ns1__RESPONSE* ns1__RESPONSE::soap_dup(soap*) returns deep copy of ns1__RESPONSE, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__RESPONSE::soap_del() deep deletes ns1__RESPONSE data members, use only after ns1__RESPONSE::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__RESPONSE
{ public:
/// Element "EXCHANGE" of XSD type "http://ws.eoddata.com/Data":EXCHANGE.
    ns1__EXCHANGE*                       EXCHANGE                       0;	///< Optional element.
/// Element "EXCHANGES" of XSD type "http://ws.eoddata.com/Data":ArrayOfEXCHANGE.
    ns1__ArrayOfEXCHANGE*                EXCHANGES                      0;	///< Optional element.
/// Element "SYMBOL" of XSD type "http://ws.eoddata.com/Data":SYMBOL.
    ns1__SYMBOL*                         SYMBOL                         0;	///< Optional element.
/// Element "SYMBOLS" of XSD type "http://ws.eoddata.com/Data":ArrayOfSYMBOL.
    ns1__ArrayOfSYMBOL*                  SYMBOLS                        0;	///< Optional element.
/// Element "SYMBOLS2" of XSD type "http://ws.eoddata.com/Data":ArrayOfSYMBOL2.
    ns1__ArrayOfSYMBOL2*                 SYMBOLS2                       0;	///< Optional element.
/// Element "QUOTE" of XSD type "http://ws.eoddata.com/Data":QUOTE.
    ns1__QUOTE*                          QUOTE                          0;	///< Optional element.
/// Element "QUOTES" of XSD type "http://ws.eoddata.com/Data":ArrayOfQUOTE.
    ns1__ArrayOfQUOTE*                   QUOTES                         0;	///< Optional element.
/// Element "QUOTES2" of XSD type "http://ws.eoddata.com/Data":ArrayOfQUOTE2.
    ns1__ArrayOfQUOTE2*                  QUOTES2                        0;	///< Optional element.
/// Element "SPLITS" of XSD type "http://ws.eoddata.com/Data":ArrayOfSPLIT.
    ns1__ArrayOfSPLIT*                   SPLITS                         0;	///< Optional element.
/// Element "COUNTRIES" of XSD type "http://ws.eoddata.com/Data":ArrayOfCountryBase.
    ns1__ArrayOfCountryBase*             COUNTRIES                      0;	///< Optional element.
/// Element "FUNDAMENTALS" of XSD type "http://ws.eoddata.com/Data":ArrayOfFUNDAMENTAL.
    ns1__ArrayOfFUNDAMENTAL*             FUNDAMENTALS                   0;	///< Optional element.
/// Element "TECHNICALS" of XSD type "http://ws.eoddata.com/Data":ArrayOfTECHNICAL.
    ns1__ArrayOfTECHNICAL*               TECHNICALS                     0;	///< Optional element.
/// Element "SYMBOLCHANGES" of XSD type "http://ws.eoddata.com/Data":ArrayOfSYMBOLCHANGE.
    ns1__ArrayOfSYMBOLCHANGE*            SYMBOLCHANGES                  0;	///< Optional element.
/// Element "NEWSLIST" of XSD type "http://ws.eoddata.com/Data":ArrayOfNEWS.
    ns1__ArrayOfNEWS*                    NEWSLIST                       0;	///< Optional element.
/// Element "CHART" of XSD type xs:string.
    std::string*                         CHART                          0;	///< Optional element.
/// Element "MEMBERSHIP" of XSD type xs:string.
    std::string*                         MEMBERSHIP                     0;	///< Optional element.
/// Element "VERSION" of XSD type xs:string.
    std::string*                         VERSION                        0;	///< Optional element.
/// Element "MONTHS" of XSD type xs:string.
    std::string*                         MONTHS                         0;	///< Optional element.
/// Element "DATAFORMATS" of XSD type "http://ws.eoddata.com/Data":ArrayOfDATAFORMAT.
    ns1__ArrayOfDATAFORMAT*              DATAFORMATS                    0;	///< Optional element.
/// Attribute "Source" of XSD type xs:string.
   @std::string*                         Source                         0;	///< Optional attribute.
/// Attribute "Message" of XSD type xs:string.
   @std::string*                         Message                        0;	///< Optional attribute.
/// Attribute "Date" of XSD type xs:dateTime.
   @time_t                               Date                           1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://ws.eoddata.com/Data":EXCHANGE is a complexType.
///
/// class ns1__EXCHANGE operations:
/// - ns1__EXCHANGE* soap_new_ns1__EXCHANGE(soap*) allocate
/// - ns1__EXCHANGE* soap_new_ns1__EXCHANGE(soap*, int num) allocate array
/// - ns1__EXCHANGE* soap_new_req_ns1__EXCHANGE(soap*, ...) allocate, set required members
/// - ns1__EXCHANGE* soap_new_set_ns1__EXCHANGE(soap*, ...) allocate, set all public members
/// - ns1__EXCHANGE::soap_default(soap*) reset members to default
/// - int soap_read_ns1__EXCHANGE(soap*, ns1__EXCHANGE*) deserialize from a stream
/// - int soap_write_ns1__EXCHANGE(soap*, ns1__EXCHANGE*) serialize to a stream
/// - ns1__EXCHANGE* ns1__EXCHANGE::soap_dup(soap*) returns deep copy of ns1__EXCHANGE, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__EXCHANGE::soap_del() deep deletes ns1__EXCHANGE data members, use only after ns1__EXCHANGE::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__EXCHANGE
{ public:
/// Attribute "Code" of XSD type xs:string.
   @std::string*                         Code                           0;	///< Optional attribute.
/// Attribute "Name" of XSD type xs:string.
   @std::string*                         Name                           0;	///< Optional attribute.
/// Attribute "LastTradeDateTime" of XSD type xs:dateTime.
   @time_t                               LastTradeDateTime              1;	///< Required attribute.
/// Attribute "Country" of XSD type xs:string.
   @std::string*                         Country                        0;	///< Optional attribute.
/// Attribute "Currency" of XSD type xs:string.
   @std::string*                         Currency                       0;	///< Optional attribute.
/// Attribute "Advances" of XSD type xs:int.
   @int                                  Advances                       1;	///< Required attribute.
/// Attribute "Declines" of XSD type xs:int.
   @int                                  Declines                       1;	///< Required attribute.
/// Attribute "Suffix" of XSD type xs:string.
   @std::string*                         Suffix                         0;	///< Optional attribute.
/// Attribute "TimeZone" of XSD type xs:string.
   @std::string*                         TimeZone                       0;	///< Optional attribute.
/// Attribute "IsIntraday" of XSD type xs:boolean.
   @bool                                 IsIntraday                     1;	///< Required attribute.
/// Attribute "IntradayStartDate" of XSD type xs:dateTime.
   @time_t                               IntradayStartDate              1;	///< Required attribute.
/// Attribute "HasIntradayProduct" of XSD type xs:boolean.
   @bool                                 HasIntradayProduct             1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://ws.eoddata.com/Data":ArrayOfEXCHANGE is a complexType.
///
/// class ns1__ArrayOfEXCHANGE operations:
/// - ns1__ArrayOfEXCHANGE* soap_new_ns1__ArrayOfEXCHANGE(soap*) allocate
/// - ns1__ArrayOfEXCHANGE* soap_new_ns1__ArrayOfEXCHANGE(soap*, int num) allocate array
/// - ns1__ArrayOfEXCHANGE* soap_new_req_ns1__ArrayOfEXCHANGE(soap*, ...) allocate, set required members
/// - ns1__ArrayOfEXCHANGE* soap_new_set_ns1__ArrayOfEXCHANGE(soap*, ...) allocate, set all public members
/// - ns1__ArrayOfEXCHANGE::soap_default(soap*) reset members to default
/// - int soap_read_ns1__ArrayOfEXCHANGE(soap*, ns1__ArrayOfEXCHANGE*) deserialize from a stream
/// - int soap_write_ns1__ArrayOfEXCHANGE(soap*, ns1__ArrayOfEXCHANGE*) serialize to a stream
/// - ns1__ArrayOfEXCHANGE* ns1__ArrayOfEXCHANGE::soap_dup(soap*) returns deep copy of ns1__ArrayOfEXCHANGE, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ArrayOfEXCHANGE::soap_del() deep deletes ns1__ArrayOfEXCHANGE data members, use only after ns1__ArrayOfEXCHANGE::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__ArrayOfEXCHANGE
{ public:
/// Vector of ns1__EXCHANGE* of length 0..unbounded.
    std::vector<ns1__EXCHANGE*         > EXCHANGE                       0;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://ws.eoddata.com/Data":SYMBOL is a complexType.
///
/// class ns1__SYMBOL operations:
/// - ns1__SYMBOL* soap_new_ns1__SYMBOL(soap*) allocate
/// - ns1__SYMBOL* soap_new_ns1__SYMBOL(soap*, int num) allocate array
/// - ns1__SYMBOL* soap_new_req_ns1__SYMBOL(soap*, ...) allocate, set required members
/// - ns1__SYMBOL* soap_new_set_ns1__SYMBOL(soap*, ...) allocate, set all public members
/// - ns1__SYMBOL::soap_default(soap*) reset members to default
/// - int soap_read_ns1__SYMBOL(soap*, ns1__SYMBOL*) deserialize from a stream
/// - int soap_write_ns1__SYMBOL(soap*, ns1__SYMBOL*) serialize to a stream
/// - ns1__SYMBOL* ns1__SYMBOL::soap_dup(soap*) returns deep copy of ns1__SYMBOL, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__SYMBOL::soap_del() deep deletes ns1__SYMBOL data members, use only after ns1__SYMBOL::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__SYMBOL
{ public:
/// Attribute "Code" of XSD type xs:string.
   @std::string*                         Code                           0;	///< Optional attribute.
/// Attribute "Name" of XSD type xs:string.
   @std::string*                         Name                           0;	///< Optional attribute.
/// Attribute "LongName" of XSD type xs:string.
   @std::string*                         LongName                       0;	///< Optional attribute.
/// Attribute "DateTime" of XSD type xs:dateTime.
   @time_t                               DateTime                       1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://ws.eoddata.com/Data":ArrayOfSYMBOL is a complexType.
///
/// class ns1__ArrayOfSYMBOL operations:
/// - ns1__ArrayOfSYMBOL* soap_new_ns1__ArrayOfSYMBOL(soap*) allocate
/// - ns1__ArrayOfSYMBOL* soap_new_ns1__ArrayOfSYMBOL(soap*, int num) allocate array
/// - ns1__ArrayOfSYMBOL* soap_new_req_ns1__ArrayOfSYMBOL(soap*, ...) allocate, set required members
/// - ns1__ArrayOfSYMBOL* soap_new_set_ns1__ArrayOfSYMBOL(soap*, ...) allocate, set all public members
/// - ns1__ArrayOfSYMBOL::soap_default(soap*) reset members to default
/// - int soap_read_ns1__ArrayOfSYMBOL(soap*, ns1__ArrayOfSYMBOL*) deserialize from a stream
/// - int soap_write_ns1__ArrayOfSYMBOL(soap*, ns1__ArrayOfSYMBOL*) serialize to a stream
/// - ns1__ArrayOfSYMBOL* ns1__ArrayOfSYMBOL::soap_dup(soap*) returns deep copy of ns1__ArrayOfSYMBOL, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ArrayOfSYMBOL::soap_del() deep deletes ns1__ArrayOfSYMBOL data members, use only after ns1__ArrayOfSYMBOL::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__ArrayOfSYMBOL
{ public:
/// Vector of ns1__SYMBOL* of length 0..unbounded.
    std::vector<ns1__SYMBOL*           > SYMBOL                         0;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://ws.eoddata.com/Data":ArrayOfSYMBOL2 is a complexType.
///
/// class ns1__ArrayOfSYMBOL2 operations:
/// - ns1__ArrayOfSYMBOL2* soap_new_ns1__ArrayOfSYMBOL2(soap*) allocate
/// - ns1__ArrayOfSYMBOL2* soap_new_ns1__ArrayOfSYMBOL2(soap*, int num) allocate array
/// - ns1__ArrayOfSYMBOL2* soap_new_req_ns1__ArrayOfSYMBOL2(soap*, ...) allocate, set required members
/// - ns1__ArrayOfSYMBOL2* soap_new_set_ns1__ArrayOfSYMBOL2(soap*, ...) allocate, set all public members
/// - ns1__ArrayOfSYMBOL2::soap_default(soap*) reset members to default
/// - int soap_read_ns1__ArrayOfSYMBOL2(soap*, ns1__ArrayOfSYMBOL2*) deserialize from a stream
/// - int soap_write_ns1__ArrayOfSYMBOL2(soap*, ns1__ArrayOfSYMBOL2*) serialize to a stream
/// - ns1__ArrayOfSYMBOL2* ns1__ArrayOfSYMBOL2::soap_dup(soap*) returns deep copy of ns1__ArrayOfSYMBOL2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ArrayOfSYMBOL2::soap_del() deep deletes ns1__ArrayOfSYMBOL2 data members, use only after ns1__ArrayOfSYMBOL2::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__ArrayOfSYMBOL2
{ public:
/// Vector of ns1__SYMBOL2* of length 0..unbounded.
    std::vector<ns1__SYMBOL2*          > SYMBOL2                        0;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://ws.eoddata.com/Data":SYMBOL2 is a complexType.
///
/// class ns1__SYMBOL2 operations:
/// - ns1__SYMBOL2* soap_new_ns1__SYMBOL2(soap*) allocate
/// - ns1__SYMBOL2* soap_new_ns1__SYMBOL2(soap*, int num) allocate array
/// - ns1__SYMBOL2* soap_new_req_ns1__SYMBOL2(soap*, ...) allocate, set required members
/// - ns1__SYMBOL2* soap_new_set_ns1__SYMBOL2(soap*, ...) allocate, set all public members
/// - ns1__SYMBOL2::soap_default(soap*) reset members to default
/// - int soap_read_ns1__SYMBOL2(soap*, ns1__SYMBOL2*) deserialize from a stream
/// - int soap_write_ns1__SYMBOL2(soap*, ns1__SYMBOL2*) serialize to a stream
/// - ns1__SYMBOL2* ns1__SYMBOL2::soap_dup(soap*) returns deep copy of ns1__SYMBOL2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__SYMBOL2::soap_del() deep deletes ns1__SYMBOL2 data members, use only after ns1__SYMBOL2::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__SYMBOL2
{ public:
/// Attribute "c" of XSD type xs:string.
   @std::string*                         c                              0;	///< Optional attribute.
/// Attribute "n" of XSD type xs:string.
   @std::string*                         n                              0;	///< Optional attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://ws.eoddata.com/Data":QUOTE is a complexType.
///
/// class ns1__QUOTE operations:
/// - ns1__QUOTE* soap_new_ns1__QUOTE(soap*) allocate
/// - ns1__QUOTE* soap_new_ns1__QUOTE(soap*, int num) allocate array
/// - ns1__QUOTE* soap_new_req_ns1__QUOTE(soap*, ...) allocate, set required members
/// - ns1__QUOTE* soap_new_set_ns1__QUOTE(soap*, ...) allocate, set all public members
/// - ns1__QUOTE::soap_default(soap*) reset members to default
/// - int soap_read_ns1__QUOTE(soap*, ns1__QUOTE*) deserialize from a stream
/// - int soap_write_ns1__QUOTE(soap*, ns1__QUOTE*) serialize to a stream
/// - ns1__QUOTE* ns1__QUOTE::soap_dup(soap*) returns deep copy of ns1__QUOTE, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__QUOTE::soap_del() deep deletes ns1__QUOTE data members, use only after ns1__QUOTE::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__QUOTE
{ public:
/// Attribute "Symbol" of XSD type xs:string.
   @std::string*                         Symbol                         0;	///< Optional attribute.
/// Attribute "Description" of XSD type xs:string.
   @std::string*                         Description                    0;	///< Optional attribute.
/// Attribute "Name" of XSD type xs:string.
   @std::string*                         Name                           0;	///< Optional attribute.
/// Attribute "DateTime" of XSD type xs:dateTime.
   @time_t                               DateTime                       1;	///< Required attribute.
/// Attribute "Open" of XSD type xs:double.
   @double                               Open                           1;	///< Required attribute.
/// Attribute "High" of XSD type xs:double.
   @double                               High                           1;	///< Required attribute.
/// Attribute "Low" of XSD type xs:double.
   @double                               Low                            1;	///< Required attribute.
/// Attribute "Close" of XSD type xs:double.
   @double                               Close                          1;	///< Required attribute.
/// Attribute "Volume" of XSD type xs:long.
   @LONG64                               Volume                         1;	///< Required attribute.
/// Attribute "OpenInterest" of XSD type xs:long.
   @LONG64                               OpenInterest                   1;	///< Required attribute.
/// Attribute "Previous" of XSD type xs:double.
   @double                               Previous                       1;	///< Required attribute.
/// Attribute "Change" of XSD type xs:double.
   @double                               Change                         1;	///< Required attribute.
/// Attribute "Bid" of XSD type xs:double.
   @double                               Bid                            1;	///< Required attribute.
/// Attribute "Ask" of XSD type xs:double.
   @double                               Ask                            1;	///< Required attribute.
/// Attribute "PreviousClose" of XSD type xs:double.
   @double                               PreviousClose                  1;	///< Required attribute.
/// Attribute "NextOpen" of XSD type xs:double.
   @double                               NextOpen                       1;	///< Required attribute.
/// Attribute "Modified" of XSD type xs:dateTime.
   @time_t                               Modified                       1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://ws.eoddata.com/Data":ArrayOfQUOTE is a complexType.
///
/// class ns1__ArrayOfQUOTE operations:
/// - ns1__ArrayOfQUOTE* soap_new_ns1__ArrayOfQUOTE(soap*) allocate
/// - ns1__ArrayOfQUOTE* soap_new_ns1__ArrayOfQUOTE(soap*, int num) allocate array
/// - ns1__ArrayOfQUOTE* soap_new_req_ns1__ArrayOfQUOTE(soap*, ...) allocate, set required members
/// - ns1__ArrayOfQUOTE* soap_new_set_ns1__ArrayOfQUOTE(soap*, ...) allocate, set all public members
/// - ns1__ArrayOfQUOTE::soap_default(soap*) reset members to default
/// - int soap_read_ns1__ArrayOfQUOTE(soap*, ns1__ArrayOfQUOTE*) deserialize from a stream
/// - int soap_write_ns1__ArrayOfQUOTE(soap*, ns1__ArrayOfQUOTE*) serialize to a stream
/// - ns1__ArrayOfQUOTE* ns1__ArrayOfQUOTE::soap_dup(soap*) returns deep copy of ns1__ArrayOfQUOTE, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ArrayOfQUOTE::soap_del() deep deletes ns1__ArrayOfQUOTE data members, use only after ns1__ArrayOfQUOTE::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__ArrayOfQUOTE
{ public:
/// Vector of ns1__QUOTE* of length 0..unbounded.
    std::vector<ns1__QUOTE*            > QUOTE                          0;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://ws.eoddata.com/Data":ArrayOfQUOTE2 is a complexType.
///
/// class ns1__ArrayOfQUOTE2 operations:
/// - ns1__ArrayOfQUOTE2* soap_new_ns1__ArrayOfQUOTE2(soap*) allocate
/// - ns1__ArrayOfQUOTE2* soap_new_ns1__ArrayOfQUOTE2(soap*, int num) allocate array
/// - ns1__ArrayOfQUOTE2* soap_new_req_ns1__ArrayOfQUOTE2(soap*, ...) allocate, set required members
/// - ns1__ArrayOfQUOTE2* soap_new_set_ns1__ArrayOfQUOTE2(soap*, ...) allocate, set all public members
/// - ns1__ArrayOfQUOTE2::soap_default(soap*) reset members to default
/// - int soap_read_ns1__ArrayOfQUOTE2(soap*, ns1__ArrayOfQUOTE2*) deserialize from a stream
/// - int soap_write_ns1__ArrayOfQUOTE2(soap*, ns1__ArrayOfQUOTE2*) serialize to a stream
/// - ns1__ArrayOfQUOTE2* ns1__ArrayOfQUOTE2::soap_dup(soap*) returns deep copy of ns1__ArrayOfQUOTE2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ArrayOfQUOTE2::soap_del() deep deletes ns1__ArrayOfQUOTE2 data members, use only after ns1__ArrayOfQUOTE2::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__ArrayOfQUOTE2
{ public:
/// Vector of ns1__QUOTE2* of length 0..unbounded.
    std::vector<ns1__QUOTE2*           > QUOTE2                         0;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://ws.eoddata.com/Data":QUOTE2 is a complexType.
///
/// class ns1__QUOTE2 operations:
/// - ns1__QUOTE2* soap_new_ns1__QUOTE2(soap*) allocate
/// - ns1__QUOTE2* soap_new_ns1__QUOTE2(soap*, int num) allocate array
/// - ns1__QUOTE2* soap_new_req_ns1__QUOTE2(soap*, ...) allocate, set required members
/// - ns1__QUOTE2* soap_new_set_ns1__QUOTE2(soap*, ...) allocate, set all public members
/// - ns1__QUOTE2::soap_default(soap*) reset members to default
/// - int soap_read_ns1__QUOTE2(soap*, ns1__QUOTE2*) deserialize from a stream
/// - int soap_write_ns1__QUOTE2(soap*, ns1__QUOTE2*) serialize to a stream
/// - ns1__QUOTE2* ns1__QUOTE2::soap_dup(soap*) returns deep copy of ns1__QUOTE2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__QUOTE2::soap_del() deep deletes ns1__QUOTE2 data members, use only after ns1__QUOTE2::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__QUOTE2
{ public:
/// Attribute "s" of XSD type xs:string.
   @std::string*                         s                              0;	///< Optional attribute.
/// Attribute "d" of XSD type xs:dateTime.
   @time_t                               d                              1;	///< Required attribute.
/// Attribute "o" of XSD type xs:double.
   @double                               o                              1;	///< Required attribute.
/// Attribute "h" of XSD type xs:double.
   @double                               h                              1;	///< Required attribute.
/// Attribute "l" of XSD type xs:double.
   @double                               l                              1;	///< Required attribute.
/// Attribute "c" of XSD type xs:double.
   @double                               c                              1;	///< Required attribute.
/// Attribute "v" of XSD type xs:long.
   @LONG64                               v                              1;	///< Required attribute.
/// Attribute "i" of XSD type xs:long.
   @LONG64                               i                              1;	///< Required attribute.
/// Attribute "b" of XSD type xs:double.
   @double                               b                              1;	///< Required attribute.
/// Attribute "a" of XSD type xs:double.
   @double                               a                              1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://ws.eoddata.com/Data":ArrayOfSPLIT is a complexType.
///
/// class ns1__ArrayOfSPLIT operations:
/// - ns1__ArrayOfSPLIT* soap_new_ns1__ArrayOfSPLIT(soap*) allocate
/// - ns1__ArrayOfSPLIT* soap_new_ns1__ArrayOfSPLIT(soap*, int num) allocate array
/// - ns1__ArrayOfSPLIT* soap_new_req_ns1__ArrayOfSPLIT(soap*, ...) allocate, set required members
/// - ns1__ArrayOfSPLIT* soap_new_set_ns1__ArrayOfSPLIT(soap*, ...) allocate, set all public members
/// - ns1__ArrayOfSPLIT::soap_default(soap*) reset members to default
/// - int soap_read_ns1__ArrayOfSPLIT(soap*, ns1__ArrayOfSPLIT*) deserialize from a stream
/// - int soap_write_ns1__ArrayOfSPLIT(soap*, ns1__ArrayOfSPLIT*) serialize to a stream
/// - ns1__ArrayOfSPLIT* ns1__ArrayOfSPLIT::soap_dup(soap*) returns deep copy of ns1__ArrayOfSPLIT, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ArrayOfSPLIT::soap_del() deep deletes ns1__ArrayOfSPLIT data members, use only after ns1__ArrayOfSPLIT::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__ArrayOfSPLIT
{ public:
/// Vector of ns1__SPLIT* of length 0..unbounded.
    std::vector<ns1__SPLIT*            > SPLIT                          0;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://ws.eoddata.com/Data":SPLIT is a complexType.
///
/// class ns1__SPLIT operations:
/// - ns1__SPLIT* soap_new_ns1__SPLIT(soap*) allocate
/// - ns1__SPLIT* soap_new_ns1__SPLIT(soap*, int num) allocate array
/// - ns1__SPLIT* soap_new_req_ns1__SPLIT(soap*, ...) allocate, set required members
/// - ns1__SPLIT* soap_new_set_ns1__SPLIT(soap*, ...) allocate, set all public members
/// - ns1__SPLIT::soap_default(soap*) reset members to default
/// - int soap_read_ns1__SPLIT(soap*, ns1__SPLIT*) deserialize from a stream
/// - int soap_write_ns1__SPLIT(soap*, ns1__SPLIT*) serialize to a stream
/// - ns1__SPLIT* ns1__SPLIT::soap_dup(soap*) returns deep copy of ns1__SPLIT, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__SPLIT::soap_del() deep deletes ns1__SPLIT data members, use only after ns1__SPLIT::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__SPLIT
{ public:
/// Attribute "Exchange" of XSD type xs:string.
   @std::string*                         Exchange                       0;	///< Optional attribute.
/// Attribute "Symbol" of XSD type xs:string.
   @std::string*                         Symbol                         0;	///< Optional attribute.
/// Attribute "DateTime" of XSD type xs:dateTime.
   @time_t                               DateTime                       1;	///< Required attribute.
/// Attribute "Ratio" of XSD type xs:string.
   @std::string*                         Ratio                          0;	///< Optional attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://ws.eoddata.com/Data":ArrayOfCountryBase is a complexType.
///
/// class ns1__ArrayOfCountryBase operations:
/// - ns1__ArrayOfCountryBase* soap_new_ns1__ArrayOfCountryBase(soap*) allocate
/// - ns1__ArrayOfCountryBase* soap_new_ns1__ArrayOfCountryBase(soap*, int num) allocate array
/// - ns1__ArrayOfCountryBase* soap_new_req_ns1__ArrayOfCountryBase(soap*, ...) allocate, set required members
/// - ns1__ArrayOfCountryBase* soap_new_set_ns1__ArrayOfCountryBase(soap*, ...) allocate, set all public members
/// - ns1__ArrayOfCountryBase::soap_default(soap*) reset members to default
/// - int soap_read_ns1__ArrayOfCountryBase(soap*, ns1__ArrayOfCountryBase*) deserialize from a stream
/// - int soap_write_ns1__ArrayOfCountryBase(soap*, ns1__ArrayOfCountryBase*) serialize to a stream
/// - ns1__ArrayOfCountryBase* ns1__ArrayOfCountryBase::soap_dup(soap*) returns deep copy of ns1__ArrayOfCountryBase, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ArrayOfCountryBase::soap_del() deep deletes ns1__ArrayOfCountryBase data members, use only after ns1__ArrayOfCountryBase::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__ArrayOfCountryBase
{ public:
/// Vector of ns1__CountryBase* of length 0..unbounded.
    std::vector<ns1__CountryBase*      > CountryBase                    0;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://ws.eoddata.com/Data":CountryBase is a complexType.
///
/// class ns1__CountryBase operations:
/// - ns1__CountryBase* soap_new_ns1__CountryBase(soap*) allocate
/// - ns1__CountryBase* soap_new_ns1__CountryBase(soap*, int num) allocate array
/// - ns1__CountryBase* soap_new_req_ns1__CountryBase(soap*, ...) allocate, set required members
/// - ns1__CountryBase* soap_new_set_ns1__CountryBase(soap*, ...) allocate, set all public members
/// - ns1__CountryBase::soap_default(soap*) reset members to default
/// - int soap_read_ns1__CountryBase(soap*, ns1__CountryBase*) deserialize from a stream
/// - int soap_write_ns1__CountryBase(soap*, ns1__CountryBase*) serialize to a stream
/// - ns1__CountryBase* ns1__CountryBase::soap_dup(soap*) returns deep copy of ns1__CountryBase, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__CountryBase::soap_del() deep deletes ns1__CountryBase data members, use only after ns1__CountryBase::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__CountryBase
{ public:
/// Attribute "Code" of XSD type xs:string.
   @std::string*                         Code                           0;	///< Optional attribute.
/// Attribute "Name" of XSD type xs:string.
   @std::string*                         Name                           0;	///< Optional attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://ws.eoddata.com/Data":ArrayOfFUNDAMENTAL is a complexType.
///
/// class ns1__ArrayOfFUNDAMENTAL operations:
/// - ns1__ArrayOfFUNDAMENTAL* soap_new_ns1__ArrayOfFUNDAMENTAL(soap*) allocate
/// - ns1__ArrayOfFUNDAMENTAL* soap_new_ns1__ArrayOfFUNDAMENTAL(soap*, int num) allocate array
/// - ns1__ArrayOfFUNDAMENTAL* soap_new_req_ns1__ArrayOfFUNDAMENTAL(soap*, ...) allocate, set required members
/// - ns1__ArrayOfFUNDAMENTAL* soap_new_set_ns1__ArrayOfFUNDAMENTAL(soap*, ...) allocate, set all public members
/// - ns1__ArrayOfFUNDAMENTAL::soap_default(soap*) reset members to default
/// - int soap_read_ns1__ArrayOfFUNDAMENTAL(soap*, ns1__ArrayOfFUNDAMENTAL*) deserialize from a stream
/// - int soap_write_ns1__ArrayOfFUNDAMENTAL(soap*, ns1__ArrayOfFUNDAMENTAL*) serialize to a stream
/// - ns1__ArrayOfFUNDAMENTAL* ns1__ArrayOfFUNDAMENTAL::soap_dup(soap*) returns deep copy of ns1__ArrayOfFUNDAMENTAL, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ArrayOfFUNDAMENTAL::soap_del() deep deletes ns1__ArrayOfFUNDAMENTAL data members, use only after ns1__ArrayOfFUNDAMENTAL::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__ArrayOfFUNDAMENTAL
{ public:
/// Vector of ns1__FUNDAMENTAL* of length 0..unbounded.
    std::vector<ns1__FUNDAMENTAL*      > FUNDAMENTAL                    0;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://ws.eoddata.com/Data":FUNDAMENTAL is a complexType.
///
/// class ns1__FUNDAMENTAL operations:
/// - ns1__FUNDAMENTAL* soap_new_ns1__FUNDAMENTAL(soap*) allocate
/// - ns1__FUNDAMENTAL* soap_new_ns1__FUNDAMENTAL(soap*, int num) allocate array
/// - ns1__FUNDAMENTAL* soap_new_req_ns1__FUNDAMENTAL(soap*, ...) allocate, set required members
/// - ns1__FUNDAMENTAL* soap_new_set_ns1__FUNDAMENTAL(soap*, ...) allocate, set all public members
/// - ns1__FUNDAMENTAL::soap_default(soap*) reset members to default
/// - int soap_read_ns1__FUNDAMENTAL(soap*, ns1__FUNDAMENTAL*) deserialize from a stream
/// - int soap_write_ns1__FUNDAMENTAL(soap*, ns1__FUNDAMENTAL*) serialize to a stream
/// - ns1__FUNDAMENTAL* ns1__FUNDAMENTAL::soap_dup(soap*) returns deep copy of ns1__FUNDAMENTAL, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__FUNDAMENTAL::soap_del() deep deletes ns1__FUNDAMENTAL data members, use only after ns1__FUNDAMENTAL::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__FUNDAMENTAL
{ public:
/// Attribute "Symbol" of XSD type xs:string.
   @std::string*                         Symbol                         0;	///< Optional attribute.
/// Attribute "Name" of XSD type xs:string.
   @std::string*                         Name                           0;	///< Optional attribute.
/// Attribute "Description" of XSD type xs:string.
   @std::string*                         Description                    0;	///< Optional attribute.
/// Attribute "DateTime" of XSD type xs:dateTime.
   @time_t                               DateTime                       1;	///< Required attribute.
/// Attribute "Industry" of XSD type xs:string.
   @std::string*                         Industry                       0;	///< Optional attribute.
/// Attribute "Sector" of XSD type xs:string.
   @std::string*                         Sector                         0;	///< Optional attribute.
/// Attribute "Shares" of XSD type xs:long.
   @LONG64                               Shares                         1;	///< Required attribute.
/// Attribute "MarketCap" of XSD type xs:long.
   @LONG64                               MarketCap                      1;	///< Required attribute.
/// Attribute "PE" of XSD type xs:double.
   @double                               PE                             1;	///< Required attribute.
/// Attribute "EPS" of XSD type xs:double.
   @double                               EPS                            1;	///< Required attribute.
/// Attribute "NTA" of XSD type xs:double.
   @double                               NTA                            1;	///< Required attribute.
/// Attribute "DivYield" of XSD type xs:double.
   @double                               DivYield                       1;	///< Required attribute.
/// Attribute "Dividend" of XSD type xs:double.
   @double                               Dividend                       1;	///< Required attribute.
/// Attribute "DividendDate" of XSD type xs:dateTime.
   @time_t                               DividendDate                   1;	///< Required attribute.
/// Attribute "DPS" of XSD type xs:double.
   @double                               DPS                            1;	///< Required attribute.
/// Attribute "ImputationCredits" of XSD type xs:double.
   @double                               ImputationCredits              1;	///< Required attribute.
/// Attribute "EBITDA" of XSD type xs:double.
   @double                               EBITDA                         1;	///< Required attribute.
/// Attribute "PEG" of XSD type xs:double.
   @double                               PEG                            1;	///< Required attribute.
/// Attribute "PtS" of XSD type xs:double.
   @double                               PtS                            1;	///< Required attribute.
/// Attribute "PtB" of XSD type xs:double.
   @double                               PtB                            1;	///< Required attribute.
/// Attribute "Yield" of XSD type xs:double.
   @double                               Yield                          1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://ws.eoddata.com/Data":ArrayOfTECHNICAL is a complexType.
///
/// class ns1__ArrayOfTECHNICAL operations:
/// - ns1__ArrayOfTECHNICAL* soap_new_ns1__ArrayOfTECHNICAL(soap*) allocate
/// - ns1__ArrayOfTECHNICAL* soap_new_ns1__ArrayOfTECHNICAL(soap*, int num) allocate array
/// - ns1__ArrayOfTECHNICAL* soap_new_req_ns1__ArrayOfTECHNICAL(soap*, ...) allocate, set required members
/// - ns1__ArrayOfTECHNICAL* soap_new_set_ns1__ArrayOfTECHNICAL(soap*, ...) allocate, set all public members
/// - ns1__ArrayOfTECHNICAL::soap_default(soap*) reset members to default
/// - int soap_read_ns1__ArrayOfTECHNICAL(soap*, ns1__ArrayOfTECHNICAL*) deserialize from a stream
/// - int soap_write_ns1__ArrayOfTECHNICAL(soap*, ns1__ArrayOfTECHNICAL*) serialize to a stream
/// - ns1__ArrayOfTECHNICAL* ns1__ArrayOfTECHNICAL::soap_dup(soap*) returns deep copy of ns1__ArrayOfTECHNICAL, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ArrayOfTECHNICAL::soap_del() deep deletes ns1__ArrayOfTECHNICAL data members, use only after ns1__ArrayOfTECHNICAL::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__ArrayOfTECHNICAL
{ public:
/// Vector of ns1__TECHNICAL* of length 0..unbounded.
    std::vector<ns1__TECHNICAL*        > TECHNICAL                      0;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://ws.eoddata.com/Data":TECHNICAL is a complexType.
///
/// class ns1__TECHNICAL operations:
/// - ns1__TECHNICAL* soap_new_ns1__TECHNICAL(soap*) allocate
/// - ns1__TECHNICAL* soap_new_ns1__TECHNICAL(soap*, int num) allocate array
/// - ns1__TECHNICAL* soap_new_req_ns1__TECHNICAL(soap*, ...) allocate, set required members
/// - ns1__TECHNICAL* soap_new_set_ns1__TECHNICAL(soap*, ...) allocate, set all public members
/// - ns1__TECHNICAL::soap_default(soap*) reset members to default
/// - int soap_read_ns1__TECHNICAL(soap*, ns1__TECHNICAL*) deserialize from a stream
/// - int soap_write_ns1__TECHNICAL(soap*, ns1__TECHNICAL*) serialize to a stream
/// - ns1__TECHNICAL* ns1__TECHNICAL::soap_dup(soap*) returns deep copy of ns1__TECHNICAL, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__TECHNICAL::soap_del() deep deletes ns1__TECHNICAL data members, use only after ns1__TECHNICAL::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__TECHNICAL
{ public:
/// Attribute "Symbol" of XSD type xs:string.
   @std::string*                         Symbol                         0;	///< Optional attribute.
/// Attribute "Name" of XSD type xs:string.
   @std::string*                         Name                           0;	///< Optional attribute.
/// Attribute "Description" of XSD type xs:string.
   @std::string*                         Description                    0;	///< Optional attribute.
/// Attribute "DateTime" of XSD type xs:dateTime.
   @time_t                               DateTime                       1;	///< Required attribute.
/// Attribute "Previous" of XSD type xs:double.
   @double                               Previous                       1;	///< Required attribute.
/// Attribute "Change" of XSD type xs:double.
   @double                               Change                         1;	///< Required attribute.
/// Attribute "MA1" of XSD type xs:int.
   @int                                  MA1                            1;	///< Required attribute.
/// Attribute "MA2" of XSD type xs:int.
   @int                                  MA2                            1;	///< Required attribute.
/// Attribute "MA5" of XSD type xs:int.
   @int                                  MA5                            1;	///< Required attribute.
/// Attribute "MA20" of XSD type xs:int.
   @int                                  MA20                           1;	///< Required attribute.
/// Attribute "MA50" of XSD type xs:int.
   @int                                  MA50                           1;	///< Required attribute.
/// Attribute "MA100" of XSD type xs:int.
   @int                                  MA100                          1;	///< Required attribute.
/// Attribute "MA200" of XSD type xs:int.
   @int                                  MA200                          1;	///< Required attribute.
/// Attribute "MAPercent" of XSD type xs:double.
   @double                               MAPercent                      1;	///< Required attribute.
/// Attribute "MAReturn" of XSD type xs:double.
   @double                               MAReturn                       1;	///< Required attribute.
/// Attribute "VolumeChange" of XSD type xs:long.
   @LONG64                               VolumeChange                   1;	///< Required attribute.
/// Attribute "ThreeMonthChange" of XSD type xs:double.
   @double                               ThreeMonthChange               1;	///< Required attribute.
/// Attribute "SixMonthChange" of XSD type xs:double.
   @double                               SixMonthChange                 1;	///< Required attribute.
/// Attribute "WeekHigh" of XSD type xs:double.
   @double                               WeekHigh                       1;	///< Required attribute.
/// Attribute "WeekLow" of XSD type xs:double.
   @double                               WeekLow                        1;	///< Required attribute.
/// Attribute "WeekChange" of XSD type xs:double.
   @double                               WeekChange                     1;	///< Required attribute.
/// Attribute "AvgWeekChange" of XSD type xs:double.
   @double                               AvgWeekChange                  1;	///< Required attribute.
/// Attribute "AvgWeekVolume" of XSD type xs:double.
   @double                               AvgWeekVolume                  1;	///< Required attribute.
/// Attribute "WeekVolume" of XSD type xs:double.
   @double                               WeekVolume                     1;	///< Required attribute.
/// Attribute "MonthHigh" of XSD type xs:double.
   @double                               MonthHigh                      1;	///< Required attribute.
/// Attribute "MonthLow" of XSD type xs:double.
   @double                               MonthLow                       1;	///< Required attribute.
/// Attribute "MonthChange" of XSD type xs:double.
   @double                               MonthChange                    1;	///< Required attribute.
/// Attribute "AvgMonthChange" of XSD type xs:double.
   @double                               AvgMonthChange                 1;	///< Required attribute.
/// Attribute "AvgMonthVolume" of XSD type xs:double.
   @double                               AvgMonthVolume                 1;	///< Required attribute.
/// Attribute "MonthVolume" of XSD type xs:double.
   @double                               MonthVolume                    1;	///< Required attribute.
/// Attribute "YearHigh" of XSD type xs:double.
   @double                               YearHigh                       1;	///< Required attribute.
/// Attribute "YearLow" of XSD type xs:double.
   @double                               YearLow                        1;	///< Required attribute.
/// Attribute "YearChange" of XSD type xs:double.
   @double                               YearChange                     1;	///< Required attribute.
/// Attribute "AvgYearChange" of XSD type xs:double.
   @double                               AvgYearChange                  1;	///< Required attribute.
/// Attribute "AvgYearVolume" of XSD type xs:double.
   @double                               AvgYearVolume                  1;	///< Required attribute.
/// Attribute "YTDChange" of XSD type xs:double.
   @double                               YTDChange                      1;	///< Required attribute.
/// Attribute "RSI14" of XSD type xs:double.
   @double                               RSI14                          1;	///< Required attribute.
/// Attribute "STO9" of XSD type xs:double.
   @double                               STO9                           1;	///< Required attribute.
/// Attribute "WPR14" of XSD type xs:double.
   @double                               WPR14                          1;	///< Required attribute.
/// Attribute "MTM14" of XSD type xs:double.
   @double                               MTM14                          1;	///< Required attribute.
/// Attribute "ROC14" of XSD type xs:double.
   @double                               ROC14                          1;	///< Required attribute.
/// Attribute "PTC" of XSD type xs:long.
   @LONG64                               PTC                            1;	///< Required attribute.
/// Attribute "SAR" of XSD type xs:double.
   @double                               SAR                            1;	///< Required attribute.
/// Attribute "Volatility" of XSD type xs:double.
   @double                               Volatility                     1;	///< Required attribute.
/// Attribute "Liquidity" of XSD type xs:double.
   @double                               Liquidity                      1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://ws.eoddata.com/Data":ArrayOfSYMBOLCHANGE is a complexType.
///
/// class ns1__ArrayOfSYMBOLCHANGE operations:
/// - ns1__ArrayOfSYMBOLCHANGE* soap_new_ns1__ArrayOfSYMBOLCHANGE(soap*) allocate
/// - ns1__ArrayOfSYMBOLCHANGE* soap_new_ns1__ArrayOfSYMBOLCHANGE(soap*, int num) allocate array
/// - ns1__ArrayOfSYMBOLCHANGE* soap_new_req_ns1__ArrayOfSYMBOLCHANGE(soap*, ...) allocate, set required members
/// - ns1__ArrayOfSYMBOLCHANGE* soap_new_set_ns1__ArrayOfSYMBOLCHANGE(soap*, ...) allocate, set all public members
/// - ns1__ArrayOfSYMBOLCHANGE::soap_default(soap*) reset members to default
/// - int soap_read_ns1__ArrayOfSYMBOLCHANGE(soap*, ns1__ArrayOfSYMBOLCHANGE*) deserialize from a stream
/// - int soap_write_ns1__ArrayOfSYMBOLCHANGE(soap*, ns1__ArrayOfSYMBOLCHANGE*) serialize to a stream
/// - ns1__ArrayOfSYMBOLCHANGE* ns1__ArrayOfSYMBOLCHANGE::soap_dup(soap*) returns deep copy of ns1__ArrayOfSYMBOLCHANGE, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ArrayOfSYMBOLCHANGE::soap_del() deep deletes ns1__ArrayOfSYMBOLCHANGE data members, use only after ns1__ArrayOfSYMBOLCHANGE::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__ArrayOfSYMBOLCHANGE
{ public:
/// Vector of ns1__SYMBOLCHANGE* of length 0..unbounded.
    std::vector<ns1__SYMBOLCHANGE*     > SYMBOLCHANGE                   0;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://ws.eoddata.com/Data":SYMBOLCHANGE is a complexType.
///
/// class ns1__SYMBOLCHANGE operations:
/// - ns1__SYMBOLCHANGE* soap_new_ns1__SYMBOLCHANGE(soap*) allocate
/// - ns1__SYMBOLCHANGE* soap_new_ns1__SYMBOLCHANGE(soap*, int num) allocate array
/// - ns1__SYMBOLCHANGE* soap_new_req_ns1__SYMBOLCHANGE(soap*, ...) allocate, set required members
/// - ns1__SYMBOLCHANGE* soap_new_set_ns1__SYMBOLCHANGE(soap*, ...) allocate, set all public members
/// - ns1__SYMBOLCHANGE::soap_default(soap*) reset members to default
/// - int soap_read_ns1__SYMBOLCHANGE(soap*, ns1__SYMBOLCHANGE*) deserialize from a stream
/// - int soap_write_ns1__SYMBOLCHANGE(soap*, ns1__SYMBOLCHANGE*) serialize to a stream
/// - ns1__SYMBOLCHANGE* ns1__SYMBOLCHANGE::soap_dup(soap*) returns deep copy of ns1__SYMBOLCHANGE, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__SYMBOLCHANGE::soap_del() deep deletes ns1__SYMBOLCHANGE data members, use only after ns1__SYMBOLCHANGE::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__SYMBOLCHANGE
{ public:
/// Attribute "DateTime" of XSD type xs:dateTime.
   @time_t                               DateTime                       1;	///< Required attribute.
/// Attribute "OldSymbol" of XSD type xs:string.
   @std::string*                         OldSymbol                      0;	///< Optional attribute.
/// Attribute "NewSymbol" of XSD type xs:string.
   @std::string*                         NewSymbol                      0;	///< Optional attribute.
/// Attribute "ExchangeCode" of XSD type xs:string.
   @std::string*                         ExchangeCode                   0;	///< Optional attribute.
/// Attribute "NewExchangeCode" of XSD type xs:string.
   @std::string*                         NewExchangeCode                0;	///< Optional attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://ws.eoddata.com/Data":ArrayOfNEWS is a complexType.
///
/// class ns1__ArrayOfNEWS operations:
/// - ns1__ArrayOfNEWS* soap_new_ns1__ArrayOfNEWS(soap*) allocate
/// - ns1__ArrayOfNEWS* soap_new_ns1__ArrayOfNEWS(soap*, int num) allocate array
/// - ns1__ArrayOfNEWS* soap_new_req_ns1__ArrayOfNEWS(soap*, ...) allocate, set required members
/// - ns1__ArrayOfNEWS* soap_new_set_ns1__ArrayOfNEWS(soap*, ...) allocate, set all public members
/// - ns1__ArrayOfNEWS::soap_default(soap*) reset members to default
/// - int soap_read_ns1__ArrayOfNEWS(soap*, ns1__ArrayOfNEWS*) deserialize from a stream
/// - int soap_write_ns1__ArrayOfNEWS(soap*, ns1__ArrayOfNEWS*) serialize to a stream
/// - ns1__ArrayOfNEWS* ns1__ArrayOfNEWS::soap_dup(soap*) returns deep copy of ns1__ArrayOfNEWS, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ArrayOfNEWS::soap_del() deep deletes ns1__ArrayOfNEWS data members, use only after ns1__ArrayOfNEWS::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__ArrayOfNEWS
{ public:
/// Vector of ns1__NEWS* of length 0..unbounded.
    std::vector<ns1__NEWS*             > NEWS                           0;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://ws.eoddata.com/Data":NEWS is a complexType.
///
/// class ns1__NEWS operations:
/// - ns1__NEWS* soap_new_ns1__NEWS(soap*) allocate
/// - ns1__NEWS* soap_new_ns1__NEWS(soap*, int num) allocate array
/// - ns1__NEWS* soap_new_req_ns1__NEWS(soap*, ...) allocate, set required members
/// - ns1__NEWS* soap_new_set_ns1__NEWS(soap*, ...) allocate, set all public members
/// - ns1__NEWS::soap_default(soap*) reset members to default
/// - int soap_read_ns1__NEWS(soap*, ns1__NEWS*) deserialize from a stream
/// - int soap_write_ns1__NEWS(soap*, ns1__NEWS*) serialize to a stream
/// - ns1__NEWS* ns1__NEWS::soap_dup(soap*) returns deep copy of ns1__NEWS, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__NEWS::soap_del() deep deletes ns1__NEWS data members, use only after ns1__NEWS::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__NEWS
{ public:
/// Attribute "Exchange" of XSD type xs:string.
   @std::string*                         Exchange                       0;	///< Optional attribute.
/// Attribute "Symbol" of XSD type xs:string.
   @std::string*                         Symbol                         0;	///< Optional attribute.
/// Attribute "Id" of XSD type xs:long.
   @LONG64                               Id                             1;	///< Required attribute.
/// Attribute "SourceKey" of XSD type xs:string.
   @std::string*                         SourceKey                      0;	///< Optional attribute.
/// Attribute "DateTime" of XSD type xs:dateTime.
   @time_t                               DateTime                       1;	///< Required attribute.
/// Attribute "Headline" of XSD type xs:string.
   @std::string*                         Headline                       0;	///< Optional attribute.
/// Attribute "Introduction" of XSD type xs:string.
   @std::string*                         Introduction                   0;	///< Optional attribute.
/// Attribute "Story" of XSD type xs:string.
   @std::string*                         Story                          0;	///< Optional attribute.
/// Attribute "Caption" of XSD type xs:string.
   @std::string*                         Caption                        0;	///< Optional attribute.
/// Attribute "Views" of XSD type xs:int.
   @int                                  Views                          1;	///< Required attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://ws.eoddata.com/Data":ArrayOfDATAFORMAT is a complexType.
///
/// class ns1__ArrayOfDATAFORMAT operations:
/// - ns1__ArrayOfDATAFORMAT* soap_new_ns1__ArrayOfDATAFORMAT(soap*) allocate
/// - ns1__ArrayOfDATAFORMAT* soap_new_ns1__ArrayOfDATAFORMAT(soap*, int num) allocate array
/// - ns1__ArrayOfDATAFORMAT* soap_new_req_ns1__ArrayOfDATAFORMAT(soap*, ...) allocate, set required members
/// - ns1__ArrayOfDATAFORMAT* soap_new_set_ns1__ArrayOfDATAFORMAT(soap*, ...) allocate, set all public members
/// - ns1__ArrayOfDATAFORMAT::soap_default(soap*) reset members to default
/// - int soap_read_ns1__ArrayOfDATAFORMAT(soap*, ns1__ArrayOfDATAFORMAT*) deserialize from a stream
/// - int soap_write_ns1__ArrayOfDATAFORMAT(soap*, ns1__ArrayOfDATAFORMAT*) serialize to a stream
/// - ns1__ArrayOfDATAFORMAT* ns1__ArrayOfDATAFORMAT::soap_dup(soap*) returns deep copy of ns1__ArrayOfDATAFORMAT, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ArrayOfDATAFORMAT::soap_del() deep deletes ns1__ArrayOfDATAFORMAT data members, use only after ns1__ArrayOfDATAFORMAT::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__ArrayOfDATAFORMAT
{ public:
/// Vector of ns1__DATAFORMAT* of length 0..unbounded.
    std::vector<ns1__DATAFORMAT*       > DATAFORMAT                     0;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://ws.eoddata.com/Data":DATAFORMAT is a complexType.
///
/// class ns1__DATAFORMAT operations:
/// - ns1__DATAFORMAT* soap_new_ns1__DATAFORMAT(soap*) allocate
/// - ns1__DATAFORMAT* soap_new_ns1__DATAFORMAT(soap*, int num) allocate array
/// - ns1__DATAFORMAT* soap_new_req_ns1__DATAFORMAT(soap*, ...) allocate, set required members
/// - ns1__DATAFORMAT* soap_new_set_ns1__DATAFORMAT(soap*, ...) allocate, set all public members
/// - ns1__DATAFORMAT::soap_default(soap*) reset members to default
/// - int soap_read_ns1__DATAFORMAT(soap*, ns1__DATAFORMAT*) deserialize from a stream
/// - int soap_write_ns1__DATAFORMAT(soap*, ns1__DATAFORMAT*) serialize to a stream
/// - ns1__DATAFORMAT* ns1__DATAFORMAT::soap_dup(soap*) returns deep copy of ns1__DATAFORMAT, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__DATAFORMAT::soap_del() deep deletes ns1__DATAFORMAT data members, use only after ns1__DATAFORMAT::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__DATAFORMAT
{ public:
/// Element "COLUMNS" of XSD type "http://ws.eoddata.com/Data":ArrayOfDATAFORMAT_COLUMN.
    ns1__ArrayOfDATAFORMAT_USCORECOLUMN*  COLUMNS                        0;	///< Optional element.
/// Attribute "Code" of XSD type xs:string.
   @std::string*                         Code                           0;	///< Optional attribute.
/// Attribute "Name" of XSD type xs:string.
   @std::string*                         Name                           0;	///< Optional attribute.
/// Attribute "Header" of XSD type xs:string.
   @std::string*                         Header                         0;	///< Optional attribute.
/// Attribute "DateFormat" of XSD type xs:string.
   @std::string*                         DateFormat                     0;	///< Optional attribute.
/// Attribute "Extension" of XSD type xs:string.
   @std::string*                         Extension                      0;	///< Optional attribute.
/// Attribute "IncludeSuffix" of XSD type xs:boolean.
   @bool                                 IncludeSuffix                  1;	///< Required attribute.
/// Attribute "TabColumnSeperator" of XSD type xs:boolean.
   @bool                                 TabColumnSeperator             1;	///< Required attribute.
/// Attribute "ColumnSeperator" of XSD type xs:string.
   @std::string*                         ColumnSeperator                0;	///< Optional attribute.
/// Attribute "TextQualifier" of XSD type xs:string.
   @std::string*                         TextQualifier                  0;	///< Optional attribute.
/// Attribute "FilenamePrefix" of XSD type xs:string.
   @std::string*                         FilenamePrefix                 0;	///< Optional attribute.
/// Attribute "FilenameExchangeCode" of XSD type xs:boolean.
   @bool                                 FilenameExchangeCode           1;	///< Required attribute.
/// Attribute "FilenameDate" of XSD type xs:boolean.
   @bool                                 FilenameDate                   1;	///< Required attribute.
/// Attribute "IncludeHeaderRow" of XSD type xs:boolean.
   @bool                                 IncludeHeaderRow               1;	///< Required attribute.
/// Attribute "HourFormat" of XSD type xs:string.
   @std::string*                         HourFormat                     0;	///< Optional attribute.
/// Attribute "DateTimeSeperator" of XSD type xs:string.
   @std::string*                         DateTimeSeperator              0;	///< Optional attribute.
/// Attribute "ExchangeFilenameFormatDate" of XSD type xs:string.
   @std::string*                         ExchangeFilenameFormatDate     0;	///< Optional attribute.
/// Attribute "ExchangeFilenameFormatDateRange" of XSD type xs:string.
   @std::string*                         ExchangeFilenameFormatDateRange 0;	///< Optional attribute.
/// Attribute "SymbolFilenameFormatDate" of XSD type xs:string.
   @std::string*                         SymbolFilenameFormatDate       0;	///< Optional attribute.
/// Attribute "SymbolFilenameFormatDateRange" of XSD type xs:string.
   @std::string*                         SymbolFilenameFormatDateRange  0;	///< Optional attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://ws.eoddata.com/Data":ArrayOfDATAFORMAT_COLUMN is a complexType.
///
/// class ns1__ArrayOfDATAFORMAT_USCORECOLUMN operations:
/// - ns1__ArrayOfDATAFORMAT_USCORECOLUMN* soap_new_ns1__ArrayOfDATAFORMAT_USCORECOLUMN(soap*) allocate
/// - ns1__ArrayOfDATAFORMAT_USCORECOLUMN* soap_new_ns1__ArrayOfDATAFORMAT_USCORECOLUMN(soap*, int num) allocate array
/// - ns1__ArrayOfDATAFORMAT_USCORECOLUMN* soap_new_req_ns1__ArrayOfDATAFORMAT_USCORECOLUMN(soap*, ...) allocate, set required members
/// - ns1__ArrayOfDATAFORMAT_USCORECOLUMN* soap_new_set_ns1__ArrayOfDATAFORMAT_USCORECOLUMN(soap*, ...) allocate, set all public members
/// - ns1__ArrayOfDATAFORMAT_USCORECOLUMN::soap_default(soap*) reset members to default
/// - int soap_read_ns1__ArrayOfDATAFORMAT_USCORECOLUMN(soap*, ns1__ArrayOfDATAFORMAT_USCORECOLUMN*) deserialize from a stream
/// - int soap_write_ns1__ArrayOfDATAFORMAT_USCORECOLUMN(soap*, ns1__ArrayOfDATAFORMAT_USCORECOLUMN*) serialize to a stream
/// - ns1__ArrayOfDATAFORMAT_USCORECOLUMN* ns1__ArrayOfDATAFORMAT_USCORECOLUMN::soap_dup(soap*) returns deep copy of ns1__ArrayOfDATAFORMAT_USCORECOLUMN, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ArrayOfDATAFORMAT_USCORECOLUMN::soap_del() deep deletes ns1__ArrayOfDATAFORMAT_USCORECOLUMN data members, use only after ns1__ArrayOfDATAFORMAT_USCORECOLUMN::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__ArrayOfDATAFORMAT_USCORECOLUMN
{ public:
/// Vector of ns1__DATAFORMAT_USCORECOLUMN* of length 0..unbounded.
    std::vector<ns1__DATAFORMAT_USCORECOLUMN*> DATAFORMAT_USCORECOLUMN        0;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://ws.eoddata.com/Data":DATAFORMAT_COLUMN is a complexType.
///
/// class ns1__DATAFORMAT_USCORECOLUMN operations:
/// - ns1__DATAFORMAT_USCORECOLUMN* soap_new_ns1__DATAFORMAT_USCORECOLUMN(soap*) allocate
/// - ns1__DATAFORMAT_USCORECOLUMN* soap_new_ns1__DATAFORMAT_USCORECOLUMN(soap*, int num) allocate array
/// - ns1__DATAFORMAT_USCORECOLUMN* soap_new_req_ns1__DATAFORMAT_USCORECOLUMN(soap*, ...) allocate, set required members
/// - ns1__DATAFORMAT_USCORECOLUMN* soap_new_set_ns1__DATAFORMAT_USCORECOLUMN(soap*, ...) allocate, set all public members
/// - ns1__DATAFORMAT_USCORECOLUMN::soap_default(soap*) reset members to default
/// - int soap_read_ns1__DATAFORMAT_USCORECOLUMN(soap*, ns1__DATAFORMAT_USCORECOLUMN*) deserialize from a stream
/// - int soap_write_ns1__DATAFORMAT_USCORECOLUMN(soap*, ns1__DATAFORMAT_USCORECOLUMN*) serialize to a stream
/// - ns1__DATAFORMAT_USCORECOLUMN* ns1__DATAFORMAT_USCORECOLUMN::soap_dup(soap*) returns deep copy of ns1__DATAFORMAT_USCORECOLUMN, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__DATAFORMAT_USCORECOLUMN::soap_del() deep deletes ns1__DATAFORMAT_USCORECOLUMN data members, use only after ns1__DATAFORMAT_USCORECOLUMN::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__DATAFORMAT_USCORECOLUMN
{ public:
/// Attribute "SortOrder" of XSD type xs:int.
   @int                                  SortOrder                      1;	///< Required attribute.
/// Attribute "Code" of XSD type xs:string.
   @std::string*                         Code                           0;	///< Optional attribute.
/// Attribute "DataFormat" of XSD type xs:string.
   @std::string*                         DataFormat                     0;	///< Optional attribute.
/// Attribute "ColumnCode" of XSD type xs:string.
   @std::string*                         ColumnCode                     0;	///< Optional attribute.
/// Attribute "ColumnName" of XSD type xs:string.
   @std::string*                         ColumnName                     0;	///< Optional attribute.
/// Attribute "ColumnTypeId" of XSD type xs:int.
   @int                                  ColumnTypeId                   1;	///< Required attribute.
/// Attribute "ColumnType" of XSD type xs:string.
   @std::string*                         ColumnType                     0;	///< Optional attribute.
/// Attribute "Header" of XSD type xs:string.
   @std::string*                         Header                         0;	///< Optional attribute.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":Login
/// @brief "http://ws.eoddata.com/Data":Login is a complexType.
///
/// class _ns1__Login operations:
/// - _ns1__Login* soap_new__ns1__Login(soap*) allocate
/// - _ns1__Login* soap_new__ns1__Login(soap*, int num) allocate array
/// - _ns1__Login* soap_new_req__ns1__Login(soap*, ...) allocate, set required members
/// - _ns1__Login* soap_new_set__ns1__Login(soap*, ...) allocate, set all public members
/// - _ns1__Login::soap_default(soap*) reset members to default
/// - int soap_read__ns1__Login(soap*, _ns1__Login*) deserialize from a stream
/// - int soap_write__ns1__Login(soap*, _ns1__Login*) serialize to a stream
/// - _ns1__Login* _ns1__Login::soap_dup(soap*) returns deep copy of _ns1__Login, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__Login::soap_del() deep deletes _ns1__Login data members, use only after _ns1__Login::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__Login
{ public:
/// Element "Username" of XSD type xs:string.
    std::string*                         Username                       0;	///< Optional element.
/// Element "Password" of XSD type xs:string.
    std::string*                         Password                       0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":LoginResponse
/// @brief "http://ws.eoddata.com/Data":LoginResponse is a complexType.
///
/// class _ns1__LoginResponse operations:
/// - _ns1__LoginResponse* soap_new__ns1__LoginResponse(soap*) allocate
/// - _ns1__LoginResponse* soap_new__ns1__LoginResponse(soap*, int num) allocate array
/// - _ns1__LoginResponse* soap_new_req__ns1__LoginResponse(soap*, ...) allocate, set required members
/// - _ns1__LoginResponse* soap_new_set__ns1__LoginResponse(soap*, ...) allocate, set all public members
/// - _ns1__LoginResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__LoginResponse(soap*, _ns1__LoginResponse*) deserialize from a stream
/// - int soap_write__ns1__LoginResponse(soap*, _ns1__LoginResponse*) serialize to a stream
/// - _ns1__LoginResponse* _ns1__LoginResponse::soap_dup(soap*) returns deep copy of _ns1__LoginResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__LoginResponse::soap_del() deep deletes _ns1__LoginResponse data members, use only after _ns1__LoginResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__LoginResponse
{ public:
/// Element "LoginResult" of XSD type "http://ws.eoddata.com/Data":LOGINRESPONSE.
    ns1__LOGINRESPONSE*                  LoginResult                    0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":Login2
/// @brief "http://ws.eoddata.com/Data":Login2 is a complexType.
///
/// class _ns1__Login2 operations:
/// - _ns1__Login2* soap_new__ns1__Login2(soap*) allocate
/// - _ns1__Login2* soap_new__ns1__Login2(soap*, int num) allocate array
/// - _ns1__Login2* soap_new_req__ns1__Login2(soap*, ...) allocate, set required members
/// - _ns1__Login2* soap_new_set__ns1__Login2(soap*, ...) allocate, set all public members
/// - _ns1__Login2::soap_default(soap*) reset members to default
/// - int soap_read__ns1__Login2(soap*, _ns1__Login2*) deserialize from a stream
/// - int soap_write__ns1__Login2(soap*, _ns1__Login2*) serialize to a stream
/// - _ns1__Login2* _ns1__Login2::soap_dup(soap*) returns deep copy of _ns1__Login2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__Login2::soap_del() deep deletes _ns1__Login2 data members, use only after _ns1__Login2::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__Login2
{ public:
/// Element "Username" of XSD type xs:string.
    std::string*                         Username                       0;	///< Optional element.
/// Element "Password" of XSD type xs:string.
    std::string*                         Password                       0;	///< Optional element.
/// Element "Version" of XSD type xs:string.
    std::string*                         Version                        0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":Login2Response
/// @brief "http://ws.eoddata.com/Data":Login2Response is a complexType.
///
/// class _ns1__Login2Response operations:
/// - _ns1__Login2Response* soap_new__ns1__Login2Response(soap*) allocate
/// - _ns1__Login2Response* soap_new__ns1__Login2Response(soap*, int num) allocate array
/// - _ns1__Login2Response* soap_new_req__ns1__Login2Response(soap*, ...) allocate, set required members
/// - _ns1__Login2Response* soap_new_set__ns1__Login2Response(soap*, ...) allocate, set all public members
/// - _ns1__Login2Response::soap_default(soap*) reset members to default
/// - int soap_read__ns1__Login2Response(soap*, _ns1__Login2Response*) deserialize from a stream
/// - int soap_write__ns1__Login2Response(soap*, _ns1__Login2Response*) serialize to a stream
/// - _ns1__Login2Response* _ns1__Login2Response::soap_dup(soap*) returns deep copy of _ns1__Login2Response, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__Login2Response::soap_del() deep deletes _ns1__Login2Response data members, use only after _ns1__Login2Response::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__Login2Response
{ public:
/// Element "Login2Result" of XSD type "http://ws.eoddata.com/Data":LOGINRESPONSE.
    ns1__LOGINRESPONSE*                  Login2Result                   0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":Membership
/// @brief "http://ws.eoddata.com/Data":Membership is a complexType.
///
/// class _ns1__Membership operations:
/// - _ns1__Membership* soap_new__ns1__Membership(soap*) allocate
/// - _ns1__Membership* soap_new__ns1__Membership(soap*, int num) allocate array
/// - _ns1__Membership* soap_new_req__ns1__Membership(soap*, ...) allocate, set required members
/// - _ns1__Membership* soap_new_set__ns1__Membership(soap*, ...) allocate, set all public members
/// - _ns1__Membership::soap_default(soap*) reset members to default
/// - int soap_read__ns1__Membership(soap*, _ns1__Membership*) deserialize from a stream
/// - int soap_write__ns1__Membership(soap*, _ns1__Membership*) serialize to a stream
/// - _ns1__Membership* _ns1__Membership::soap_dup(soap*) returns deep copy of _ns1__Membership, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__Membership::soap_del() deep deletes _ns1__Membership data members, use only after _ns1__Membership::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__Membership
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":MembershipResponse
/// @brief "http://ws.eoddata.com/Data":MembershipResponse is a complexType.
///
/// class _ns1__MembershipResponse operations:
/// - _ns1__MembershipResponse* soap_new__ns1__MembershipResponse(soap*) allocate
/// - _ns1__MembershipResponse* soap_new__ns1__MembershipResponse(soap*, int num) allocate array
/// - _ns1__MembershipResponse* soap_new_req__ns1__MembershipResponse(soap*, ...) allocate, set required members
/// - _ns1__MembershipResponse* soap_new_set__ns1__MembershipResponse(soap*, ...) allocate, set all public members
/// - _ns1__MembershipResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__MembershipResponse(soap*, _ns1__MembershipResponse*) deserialize from a stream
/// - int soap_write__ns1__MembershipResponse(soap*, _ns1__MembershipResponse*) serialize to a stream
/// - _ns1__MembershipResponse* _ns1__MembershipResponse::soap_dup(soap*) returns deep copy of _ns1__MembershipResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__MembershipResponse::soap_del() deep deletes _ns1__MembershipResponse data members, use only after _ns1__MembershipResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__MembershipResponse
{ public:
/// Element "MembershipResult" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    ns1__RESPONSE*                       MembershipResult               0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":ExchangeList
/// @brief "http://ws.eoddata.com/Data":ExchangeList is a complexType.
///
/// class _ns1__ExchangeList operations:
/// - _ns1__ExchangeList* soap_new__ns1__ExchangeList(soap*) allocate
/// - _ns1__ExchangeList* soap_new__ns1__ExchangeList(soap*, int num) allocate array
/// - _ns1__ExchangeList* soap_new_req__ns1__ExchangeList(soap*, ...) allocate, set required members
/// - _ns1__ExchangeList* soap_new_set__ns1__ExchangeList(soap*, ...) allocate, set all public members
/// - _ns1__ExchangeList::soap_default(soap*) reset members to default
/// - int soap_read__ns1__ExchangeList(soap*, _ns1__ExchangeList*) deserialize from a stream
/// - int soap_write__ns1__ExchangeList(soap*, _ns1__ExchangeList*) serialize to a stream
/// - _ns1__ExchangeList* _ns1__ExchangeList::soap_dup(soap*) returns deep copy of _ns1__ExchangeList, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__ExchangeList::soap_del() deep deletes _ns1__ExchangeList data members, use only after _ns1__ExchangeList::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__ExchangeList
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":ExchangeListResponse
/// @brief "http://ws.eoddata.com/Data":ExchangeListResponse is a complexType.
///
/// class _ns1__ExchangeListResponse operations:
/// - _ns1__ExchangeListResponse* soap_new__ns1__ExchangeListResponse(soap*) allocate
/// - _ns1__ExchangeListResponse* soap_new__ns1__ExchangeListResponse(soap*, int num) allocate array
/// - _ns1__ExchangeListResponse* soap_new_req__ns1__ExchangeListResponse(soap*, ...) allocate, set required members
/// - _ns1__ExchangeListResponse* soap_new_set__ns1__ExchangeListResponse(soap*, ...) allocate, set all public members
/// - _ns1__ExchangeListResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__ExchangeListResponse(soap*, _ns1__ExchangeListResponse*) deserialize from a stream
/// - int soap_write__ns1__ExchangeListResponse(soap*, _ns1__ExchangeListResponse*) serialize to a stream
/// - _ns1__ExchangeListResponse* _ns1__ExchangeListResponse::soap_dup(soap*) returns deep copy of _ns1__ExchangeListResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__ExchangeListResponse::soap_del() deep deletes _ns1__ExchangeListResponse data members, use only after _ns1__ExchangeListResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__ExchangeListResponse
{ public:
/// Element "ExchangeListResult" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    ns1__RESPONSE*                       ExchangeListResult             0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":ExchangeGet
/// @brief "http://ws.eoddata.com/Data":ExchangeGet is a complexType.
///
/// class _ns1__ExchangeGet operations:
/// - _ns1__ExchangeGet* soap_new__ns1__ExchangeGet(soap*) allocate
/// - _ns1__ExchangeGet* soap_new__ns1__ExchangeGet(soap*, int num) allocate array
/// - _ns1__ExchangeGet* soap_new_req__ns1__ExchangeGet(soap*, ...) allocate, set required members
/// - _ns1__ExchangeGet* soap_new_set__ns1__ExchangeGet(soap*, ...) allocate, set all public members
/// - _ns1__ExchangeGet::soap_default(soap*) reset members to default
/// - int soap_read__ns1__ExchangeGet(soap*, _ns1__ExchangeGet*) deserialize from a stream
/// - int soap_write__ns1__ExchangeGet(soap*, _ns1__ExchangeGet*) serialize to a stream
/// - _ns1__ExchangeGet* _ns1__ExchangeGet::soap_dup(soap*) returns deep copy of _ns1__ExchangeGet, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__ExchangeGet::soap_del() deep deletes _ns1__ExchangeGet data members, use only after _ns1__ExchangeGet::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__ExchangeGet
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// Element "Exchange" of XSD type xs:string.
    std::string*                         Exchange                       0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":ExchangeGetResponse
/// @brief "http://ws.eoddata.com/Data":ExchangeGetResponse is a complexType.
///
/// class _ns1__ExchangeGetResponse operations:
/// - _ns1__ExchangeGetResponse* soap_new__ns1__ExchangeGetResponse(soap*) allocate
/// - _ns1__ExchangeGetResponse* soap_new__ns1__ExchangeGetResponse(soap*, int num) allocate array
/// - _ns1__ExchangeGetResponse* soap_new_req__ns1__ExchangeGetResponse(soap*, ...) allocate, set required members
/// - _ns1__ExchangeGetResponse* soap_new_set__ns1__ExchangeGetResponse(soap*, ...) allocate, set all public members
/// - _ns1__ExchangeGetResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__ExchangeGetResponse(soap*, _ns1__ExchangeGetResponse*) deserialize from a stream
/// - int soap_write__ns1__ExchangeGetResponse(soap*, _ns1__ExchangeGetResponse*) serialize to a stream
/// - _ns1__ExchangeGetResponse* _ns1__ExchangeGetResponse::soap_dup(soap*) returns deep copy of _ns1__ExchangeGetResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__ExchangeGetResponse::soap_del() deep deletes _ns1__ExchangeGetResponse data members, use only after _ns1__ExchangeGetResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__ExchangeGetResponse
{ public:
/// Element "ExchangeGetResult" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    ns1__RESPONSE*                       ExchangeGetResult              0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":SymbolList
/// @brief "http://ws.eoddata.com/Data":SymbolList is a complexType.
///
/// class _ns1__SymbolList operations:
/// - _ns1__SymbolList* soap_new__ns1__SymbolList(soap*) allocate
/// - _ns1__SymbolList* soap_new__ns1__SymbolList(soap*, int num) allocate array
/// - _ns1__SymbolList* soap_new_req__ns1__SymbolList(soap*, ...) allocate, set required members
/// - _ns1__SymbolList* soap_new_set__ns1__SymbolList(soap*, ...) allocate, set all public members
/// - _ns1__SymbolList::soap_default(soap*) reset members to default
/// - int soap_read__ns1__SymbolList(soap*, _ns1__SymbolList*) deserialize from a stream
/// - int soap_write__ns1__SymbolList(soap*, _ns1__SymbolList*) serialize to a stream
/// - _ns1__SymbolList* _ns1__SymbolList::soap_dup(soap*) returns deep copy of _ns1__SymbolList, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SymbolList::soap_del() deep deletes _ns1__SymbolList data members, use only after _ns1__SymbolList::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SymbolList
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// Element "Exchange" of XSD type xs:string.
    std::string*                         Exchange                       0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":SymbolListResponse
/// @brief "http://ws.eoddata.com/Data":SymbolListResponse is a complexType.
///
/// class _ns1__SymbolListResponse operations:
/// - _ns1__SymbolListResponse* soap_new__ns1__SymbolListResponse(soap*) allocate
/// - _ns1__SymbolListResponse* soap_new__ns1__SymbolListResponse(soap*, int num) allocate array
/// - _ns1__SymbolListResponse* soap_new_req__ns1__SymbolListResponse(soap*, ...) allocate, set required members
/// - _ns1__SymbolListResponse* soap_new_set__ns1__SymbolListResponse(soap*, ...) allocate, set all public members
/// - _ns1__SymbolListResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__SymbolListResponse(soap*, _ns1__SymbolListResponse*) deserialize from a stream
/// - int soap_write__ns1__SymbolListResponse(soap*, _ns1__SymbolListResponse*) serialize to a stream
/// - _ns1__SymbolListResponse* _ns1__SymbolListResponse::soap_dup(soap*) returns deep copy of _ns1__SymbolListResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SymbolListResponse::soap_del() deep deletes _ns1__SymbolListResponse data members, use only after _ns1__SymbolListResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SymbolListResponse
{ public:
/// Element "SymbolListResult" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    ns1__RESPONSE*                       SymbolListResult               0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":SymbolList2
/// @brief "http://ws.eoddata.com/Data":SymbolList2 is a complexType.
///
/// class _ns1__SymbolList2 operations:
/// - _ns1__SymbolList2* soap_new__ns1__SymbolList2(soap*) allocate
/// - _ns1__SymbolList2* soap_new__ns1__SymbolList2(soap*, int num) allocate array
/// - _ns1__SymbolList2* soap_new_req__ns1__SymbolList2(soap*, ...) allocate, set required members
/// - _ns1__SymbolList2* soap_new_set__ns1__SymbolList2(soap*, ...) allocate, set all public members
/// - _ns1__SymbolList2::soap_default(soap*) reset members to default
/// - int soap_read__ns1__SymbolList2(soap*, _ns1__SymbolList2*) deserialize from a stream
/// - int soap_write__ns1__SymbolList2(soap*, _ns1__SymbolList2*) serialize to a stream
/// - _ns1__SymbolList2* _ns1__SymbolList2::soap_dup(soap*) returns deep copy of _ns1__SymbolList2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SymbolList2::soap_del() deep deletes _ns1__SymbolList2 data members, use only after _ns1__SymbolList2::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SymbolList2
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// Element "Exchange" of XSD type xs:string.
    std::string*                         Exchange                       0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":SymbolList2Response
/// @brief "http://ws.eoddata.com/Data":SymbolList2Response is a complexType.
///
/// class _ns1__SymbolList2Response operations:
/// - _ns1__SymbolList2Response* soap_new__ns1__SymbolList2Response(soap*) allocate
/// - _ns1__SymbolList2Response* soap_new__ns1__SymbolList2Response(soap*, int num) allocate array
/// - _ns1__SymbolList2Response* soap_new_req__ns1__SymbolList2Response(soap*, ...) allocate, set required members
/// - _ns1__SymbolList2Response* soap_new_set__ns1__SymbolList2Response(soap*, ...) allocate, set all public members
/// - _ns1__SymbolList2Response::soap_default(soap*) reset members to default
/// - int soap_read__ns1__SymbolList2Response(soap*, _ns1__SymbolList2Response*) deserialize from a stream
/// - int soap_write__ns1__SymbolList2Response(soap*, _ns1__SymbolList2Response*) serialize to a stream
/// - _ns1__SymbolList2Response* _ns1__SymbolList2Response::soap_dup(soap*) returns deep copy of _ns1__SymbolList2Response, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SymbolList2Response::soap_del() deep deletes _ns1__SymbolList2Response data members, use only after _ns1__SymbolList2Response::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SymbolList2Response
{ public:
/// Element "SymbolList2Result" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    ns1__RESPONSE*                       SymbolList2Result              0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":QuoteGet
/// @brief "http://ws.eoddata.com/Data":QuoteGet is a complexType.
///
/// class _ns1__QuoteGet operations:
/// - _ns1__QuoteGet* soap_new__ns1__QuoteGet(soap*) allocate
/// - _ns1__QuoteGet* soap_new__ns1__QuoteGet(soap*, int num) allocate array
/// - _ns1__QuoteGet* soap_new_req__ns1__QuoteGet(soap*, ...) allocate, set required members
/// - _ns1__QuoteGet* soap_new_set__ns1__QuoteGet(soap*, ...) allocate, set all public members
/// - _ns1__QuoteGet::soap_default(soap*) reset members to default
/// - int soap_read__ns1__QuoteGet(soap*, _ns1__QuoteGet*) deserialize from a stream
/// - int soap_write__ns1__QuoteGet(soap*, _ns1__QuoteGet*) serialize to a stream
/// - _ns1__QuoteGet* _ns1__QuoteGet::soap_dup(soap*) returns deep copy of _ns1__QuoteGet, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__QuoteGet::soap_del() deep deletes _ns1__QuoteGet data members, use only after _ns1__QuoteGet::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__QuoteGet
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// Element "Exchange" of XSD type xs:string.
    std::string*                         Exchange                       0;	///< Optional element.
/// Element "Symbol" of XSD type xs:string.
    std::string*                         Symbol                         0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":QuoteGetResponse
/// @brief "http://ws.eoddata.com/Data":QuoteGetResponse is a complexType.
///
/// class _ns1__QuoteGetResponse operations:
/// - _ns1__QuoteGetResponse* soap_new__ns1__QuoteGetResponse(soap*) allocate
/// - _ns1__QuoteGetResponse* soap_new__ns1__QuoteGetResponse(soap*, int num) allocate array
/// - _ns1__QuoteGetResponse* soap_new_req__ns1__QuoteGetResponse(soap*, ...) allocate, set required members
/// - _ns1__QuoteGetResponse* soap_new_set__ns1__QuoteGetResponse(soap*, ...) allocate, set all public members
/// - _ns1__QuoteGetResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__QuoteGetResponse(soap*, _ns1__QuoteGetResponse*) deserialize from a stream
/// - int soap_write__ns1__QuoteGetResponse(soap*, _ns1__QuoteGetResponse*) serialize to a stream
/// - _ns1__QuoteGetResponse* _ns1__QuoteGetResponse::soap_dup(soap*) returns deep copy of _ns1__QuoteGetResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__QuoteGetResponse::soap_del() deep deletes _ns1__QuoteGetResponse data members, use only after _ns1__QuoteGetResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__QuoteGetResponse
{ public:
/// Element "QuoteGetResult" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    ns1__RESPONSE*                       QuoteGetResult                 0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":QuoteList2
/// @brief "http://ws.eoddata.com/Data":QuoteList2 is a complexType.
///
/// class _ns1__QuoteList2 operations:
/// - _ns1__QuoteList2* soap_new__ns1__QuoteList2(soap*) allocate
/// - _ns1__QuoteList2* soap_new__ns1__QuoteList2(soap*, int num) allocate array
/// - _ns1__QuoteList2* soap_new_req__ns1__QuoteList2(soap*, ...) allocate, set required members
/// - _ns1__QuoteList2* soap_new_set__ns1__QuoteList2(soap*, ...) allocate, set all public members
/// - _ns1__QuoteList2::soap_default(soap*) reset members to default
/// - int soap_read__ns1__QuoteList2(soap*, _ns1__QuoteList2*) deserialize from a stream
/// - int soap_write__ns1__QuoteList2(soap*, _ns1__QuoteList2*) serialize to a stream
/// - _ns1__QuoteList2* _ns1__QuoteList2::soap_dup(soap*) returns deep copy of _ns1__QuoteList2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__QuoteList2::soap_del() deep deletes _ns1__QuoteList2 data members, use only after _ns1__QuoteList2::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__QuoteList2
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// Element "Exchange" of XSD type xs:string.
    std::string*                         Exchange                       0;	///< Optional element.
/// Element "Symbols" of XSD type xs:string.
    std::string*                         Symbols                        0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":QuoteList2Response
/// @brief "http://ws.eoddata.com/Data":QuoteList2Response is a complexType.
///
/// class _ns1__QuoteList2Response operations:
/// - _ns1__QuoteList2Response* soap_new__ns1__QuoteList2Response(soap*) allocate
/// - _ns1__QuoteList2Response* soap_new__ns1__QuoteList2Response(soap*, int num) allocate array
/// - _ns1__QuoteList2Response* soap_new_req__ns1__QuoteList2Response(soap*, ...) allocate, set required members
/// - _ns1__QuoteList2Response* soap_new_set__ns1__QuoteList2Response(soap*, ...) allocate, set all public members
/// - _ns1__QuoteList2Response::soap_default(soap*) reset members to default
/// - int soap_read__ns1__QuoteList2Response(soap*, _ns1__QuoteList2Response*) deserialize from a stream
/// - int soap_write__ns1__QuoteList2Response(soap*, _ns1__QuoteList2Response*) serialize to a stream
/// - _ns1__QuoteList2Response* _ns1__QuoteList2Response::soap_dup(soap*) returns deep copy of _ns1__QuoteList2Response, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__QuoteList2Response::soap_del() deep deletes _ns1__QuoteList2Response data members, use only after _ns1__QuoteList2Response::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__QuoteList2Response
{ public:
/// Element "QuoteList2Result" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    ns1__RESPONSE*                       QuoteList2Result               0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":SymbolGet
/// @brief "http://ws.eoddata.com/Data":SymbolGet is a complexType.
///
/// class _ns1__SymbolGet operations:
/// - _ns1__SymbolGet* soap_new__ns1__SymbolGet(soap*) allocate
/// - _ns1__SymbolGet* soap_new__ns1__SymbolGet(soap*, int num) allocate array
/// - _ns1__SymbolGet* soap_new_req__ns1__SymbolGet(soap*, ...) allocate, set required members
/// - _ns1__SymbolGet* soap_new_set__ns1__SymbolGet(soap*, ...) allocate, set all public members
/// - _ns1__SymbolGet::soap_default(soap*) reset members to default
/// - int soap_read__ns1__SymbolGet(soap*, _ns1__SymbolGet*) deserialize from a stream
/// - int soap_write__ns1__SymbolGet(soap*, _ns1__SymbolGet*) serialize to a stream
/// - _ns1__SymbolGet* _ns1__SymbolGet::soap_dup(soap*) returns deep copy of _ns1__SymbolGet, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SymbolGet::soap_del() deep deletes _ns1__SymbolGet data members, use only after _ns1__SymbolGet::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SymbolGet
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// Element "Exchange" of XSD type xs:string.
    std::string*                         Exchange                       0;	///< Optional element.
/// Element "Symbol" of XSD type xs:string.
    std::string*                         Symbol                         0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":SymbolGetResponse
/// @brief "http://ws.eoddata.com/Data":SymbolGetResponse is a complexType.
///
/// class _ns1__SymbolGetResponse operations:
/// - _ns1__SymbolGetResponse* soap_new__ns1__SymbolGetResponse(soap*) allocate
/// - _ns1__SymbolGetResponse* soap_new__ns1__SymbolGetResponse(soap*, int num) allocate array
/// - _ns1__SymbolGetResponse* soap_new_req__ns1__SymbolGetResponse(soap*, ...) allocate, set required members
/// - _ns1__SymbolGetResponse* soap_new_set__ns1__SymbolGetResponse(soap*, ...) allocate, set all public members
/// - _ns1__SymbolGetResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__SymbolGetResponse(soap*, _ns1__SymbolGetResponse*) deserialize from a stream
/// - int soap_write__ns1__SymbolGetResponse(soap*, _ns1__SymbolGetResponse*) serialize to a stream
/// - _ns1__SymbolGetResponse* _ns1__SymbolGetResponse::soap_dup(soap*) returns deep copy of _ns1__SymbolGetResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SymbolGetResponse::soap_del() deep deletes _ns1__SymbolGetResponse data members, use only after _ns1__SymbolGetResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SymbolGetResponse
{ public:
/// Element "SymbolGetResult" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    ns1__RESPONSE*                       SymbolGetResult                0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":QuoteList
/// @brief "http://ws.eoddata.com/Data":QuoteList is a complexType.
///
/// class _ns1__QuoteList operations:
/// - _ns1__QuoteList* soap_new__ns1__QuoteList(soap*) allocate
/// - _ns1__QuoteList* soap_new__ns1__QuoteList(soap*, int num) allocate array
/// - _ns1__QuoteList* soap_new_req__ns1__QuoteList(soap*, ...) allocate, set required members
/// - _ns1__QuoteList* soap_new_set__ns1__QuoteList(soap*, ...) allocate, set all public members
/// - _ns1__QuoteList::soap_default(soap*) reset members to default
/// - int soap_read__ns1__QuoteList(soap*, _ns1__QuoteList*) deserialize from a stream
/// - int soap_write__ns1__QuoteList(soap*, _ns1__QuoteList*) serialize to a stream
/// - _ns1__QuoteList* _ns1__QuoteList::soap_dup(soap*) returns deep copy of _ns1__QuoteList, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__QuoteList::soap_del() deep deletes _ns1__QuoteList data members, use only after _ns1__QuoteList::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__QuoteList
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// Element "Exchange" of XSD type xs:string.
    std::string*                         Exchange                       0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":QuoteListResponse
/// @brief "http://ws.eoddata.com/Data":QuoteListResponse is a complexType.
///
/// class _ns1__QuoteListResponse operations:
/// - _ns1__QuoteListResponse* soap_new__ns1__QuoteListResponse(soap*) allocate
/// - _ns1__QuoteListResponse* soap_new__ns1__QuoteListResponse(soap*, int num) allocate array
/// - _ns1__QuoteListResponse* soap_new_req__ns1__QuoteListResponse(soap*, ...) allocate, set required members
/// - _ns1__QuoteListResponse* soap_new_set__ns1__QuoteListResponse(soap*, ...) allocate, set all public members
/// - _ns1__QuoteListResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__QuoteListResponse(soap*, _ns1__QuoteListResponse*) deserialize from a stream
/// - int soap_write__ns1__QuoteListResponse(soap*, _ns1__QuoteListResponse*) serialize to a stream
/// - _ns1__QuoteListResponse* _ns1__QuoteListResponse::soap_dup(soap*) returns deep copy of _ns1__QuoteListResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__QuoteListResponse::soap_del() deep deletes _ns1__QuoteListResponse data members, use only after _ns1__QuoteListResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__QuoteListResponse
{ public:
/// Element "QuoteListResult" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    ns1__RESPONSE*                       QuoteListResult                0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":NewsList
/// @brief "http://ws.eoddata.com/Data":NewsList is a complexType.
///
/// class _ns1__NewsList operations:
/// - _ns1__NewsList* soap_new__ns1__NewsList(soap*) allocate
/// - _ns1__NewsList* soap_new__ns1__NewsList(soap*, int num) allocate array
/// - _ns1__NewsList* soap_new_req__ns1__NewsList(soap*, ...) allocate, set required members
/// - _ns1__NewsList* soap_new_set__ns1__NewsList(soap*, ...) allocate, set all public members
/// - _ns1__NewsList::soap_default(soap*) reset members to default
/// - int soap_read__ns1__NewsList(soap*, _ns1__NewsList*) deserialize from a stream
/// - int soap_write__ns1__NewsList(soap*, _ns1__NewsList*) serialize to a stream
/// - _ns1__NewsList* _ns1__NewsList::soap_dup(soap*) returns deep copy of _ns1__NewsList, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__NewsList::soap_del() deep deletes _ns1__NewsList data members, use only after _ns1__NewsList::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__NewsList
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// Element "Exchange" of XSD type xs:string.
    std::string*                         Exchange                       0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":NewsListResponse
/// @brief "http://ws.eoddata.com/Data":NewsListResponse is a complexType.
///
/// class _ns1__NewsListResponse operations:
/// - _ns1__NewsListResponse* soap_new__ns1__NewsListResponse(soap*) allocate
/// - _ns1__NewsListResponse* soap_new__ns1__NewsListResponse(soap*, int num) allocate array
/// - _ns1__NewsListResponse* soap_new_req__ns1__NewsListResponse(soap*, ...) allocate, set required members
/// - _ns1__NewsListResponse* soap_new_set__ns1__NewsListResponse(soap*, ...) allocate, set all public members
/// - _ns1__NewsListResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__NewsListResponse(soap*, _ns1__NewsListResponse*) deserialize from a stream
/// - int soap_write__ns1__NewsListResponse(soap*, _ns1__NewsListResponse*) serialize to a stream
/// - _ns1__NewsListResponse* _ns1__NewsListResponse::soap_dup(soap*) returns deep copy of _ns1__NewsListResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__NewsListResponse::soap_del() deep deletes _ns1__NewsListResponse data members, use only after _ns1__NewsListResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__NewsListResponse
{ public:
/// Element "NewsListResult" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    ns1__RESPONSE*                       NewsListResult                 0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":NewsListBySymbol
/// @brief "http://ws.eoddata.com/Data":NewsListBySymbol is a complexType.
///
/// class _ns1__NewsListBySymbol operations:
/// - _ns1__NewsListBySymbol* soap_new__ns1__NewsListBySymbol(soap*) allocate
/// - _ns1__NewsListBySymbol* soap_new__ns1__NewsListBySymbol(soap*, int num) allocate array
/// - _ns1__NewsListBySymbol* soap_new_req__ns1__NewsListBySymbol(soap*, ...) allocate, set required members
/// - _ns1__NewsListBySymbol* soap_new_set__ns1__NewsListBySymbol(soap*, ...) allocate, set all public members
/// - _ns1__NewsListBySymbol::soap_default(soap*) reset members to default
/// - int soap_read__ns1__NewsListBySymbol(soap*, _ns1__NewsListBySymbol*) deserialize from a stream
/// - int soap_write__ns1__NewsListBySymbol(soap*, _ns1__NewsListBySymbol*) serialize to a stream
/// - _ns1__NewsListBySymbol* _ns1__NewsListBySymbol::soap_dup(soap*) returns deep copy of _ns1__NewsListBySymbol, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__NewsListBySymbol::soap_del() deep deletes _ns1__NewsListBySymbol data members, use only after _ns1__NewsListBySymbol::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__NewsListBySymbol
{ public:
/// Element "token" of XSD type xs:string.
    std::string*                         token                          0;	///< Optional element.
/// Element "Exchange" of XSD type xs:string.
    std::string*                         Exchange                       0;	///< Optional element.
/// Element "symbol" of XSD type xs:string.
    std::string*                         symbol                         0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":NewsListBySymbolResponse
/// @brief "http://ws.eoddata.com/Data":NewsListBySymbolResponse is a complexType.
///
/// class _ns1__NewsListBySymbolResponse operations:
/// - _ns1__NewsListBySymbolResponse* soap_new__ns1__NewsListBySymbolResponse(soap*) allocate
/// - _ns1__NewsListBySymbolResponse* soap_new__ns1__NewsListBySymbolResponse(soap*, int num) allocate array
/// - _ns1__NewsListBySymbolResponse* soap_new_req__ns1__NewsListBySymbolResponse(soap*, ...) allocate, set required members
/// - _ns1__NewsListBySymbolResponse* soap_new_set__ns1__NewsListBySymbolResponse(soap*, ...) allocate, set all public members
/// - _ns1__NewsListBySymbolResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__NewsListBySymbolResponse(soap*, _ns1__NewsListBySymbolResponse*) deserialize from a stream
/// - int soap_write__ns1__NewsListBySymbolResponse(soap*, _ns1__NewsListBySymbolResponse*) serialize to a stream
/// - _ns1__NewsListBySymbolResponse* _ns1__NewsListBySymbolResponse::soap_dup(soap*) returns deep copy of _ns1__NewsListBySymbolResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__NewsListBySymbolResponse::soap_del() deep deletes _ns1__NewsListBySymbolResponse data members, use only after _ns1__NewsListBySymbolResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__NewsListBySymbolResponse
{ public:
/// Element "NewsListBySymbolResult" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    ns1__RESPONSE*                       NewsListBySymbolResult         0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":FundamentalList
/// @brief "http://ws.eoddata.com/Data":FundamentalList is a complexType.
///
/// class _ns1__FundamentalList operations:
/// - _ns1__FundamentalList* soap_new__ns1__FundamentalList(soap*) allocate
/// - _ns1__FundamentalList* soap_new__ns1__FundamentalList(soap*, int num) allocate array
/// - _ns1__FundamentalList* soap_new_req__ns1__FundamentalList(soap*, ...) allocate, set required members
/// - _ns1__FundamentalList* soap_new_set__ns1__FundamentalList(soap*, ...) allocate, set all public members
/// - _ns1__FundamentalList::soap_default(soap*) reset members to default
/// - int soap_read__ns1__FundamentalList(soap*, _ns1__FundamentalList*) deserialize from a stream
/// - int soap_write__ns1__FundamentalList(soap*, _ns1__FundamentalList*) serialize to a stream
/// - _ns1__FundamentalList* _ns1__FundamentalList::soap_dup(soap*) returns deep copy of _ns1__FundamentalList, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__FundamentalList::soap_del() deep deletes _ns1__FundamentalList data members, use only after _ns1__FundamentalList::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__FundamentalList
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// Element "Exchange" of XSD type xs:string.
    std::string*                         Exchange                       0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":FundamentalListResponse
/// @brief "http://ws.eoddata.com/Data":FundamentalListResponse is a complexType.
///
/// class _ns1__FundamentalListResponse operations:
/// - _ns1__FundamentalListResponse* soap_new__ns1__FundamentalListResponse(soap*) allocate
/// - _ns1__FundamentalListResponse* soap_new__ns1__FundamentalListResponse(soap*, int num) allocate array
/// - _ns1__FundamentalListResponse* soap_new_req__ns1__FundamentalListResponse(soap*, ...) allocate, set required members
/// - _ns1__FundamentalListResponse* soap_new_set__ns1__FundamentalListResponse(soap*, ...) allocate, set all public members
/// - _ns1__FundamentalListResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__FundamentalListResponse(soap*, _ns1__FundamentalListResponse*) deserialize from a stream
/// - int soap_write__ns1__FundamentalListResponse(soap*, _ns1__FundamentalListResponse*) serialize to a stream
/// - _ns1__FundamentalListResponse* _ns1__FundamentalListResponse::soap_dup(soap*) returns deep copy of _ns1__FundamentalListResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__FundamentalListResponse::soap_del() deep deletes _ns1__FundamentalListResponse data members, use only after _ns1__FundamentalListResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__FundamentalListResponse
{ public:
/// Element "FundamentalListResult" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    ns1__RESPONSE*                       FundamentalListResult          0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":TechnicalList
/// @brief "http://ws.eoddata.com/Data":TechnicalList is a complexType.
///
/// class _ns1__TechnicalList operations:
/// - _ns1__TechnicalList* soap_new__ns1__TechnicalList(soap*) allocate
/// - _ns1__TechnicalList* soap_new__ns1__TechnicalList(soap*, int num) allocate array
/// - _ns1__TechnicalList* soap_new_req__ns1__TechnicalList(soap*, ...) allocate, set required members
/// - _ns1__TechnicalList* soap_new_set__ns1__TechnicalList(soap*, ...) allocate, set all public members
/// - _ns1__TechnicalList::soap_default(soap*) reset members to default
/// - int soap_read__ns1__TechnicalList(soap*, _ns1__TechnicalList*) deserialize from a stream
/// - int soap_write__ns1__TechnicalList(soap*, _ns1__TechnicalList*) serialize to a stream
/// - _ns1__TechnicalList* _ns1__TechnicalList::soap_dup(soap*) returns deep copy of _ns1__TechnicalList, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__TechnicalList::soap_del() deep deletes _ns1__TechnicalList data members, use only after _ns1__TechnicalList::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__TechnicalList
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// Element "Exchange" of XSD type xs:string.
    std::string*                         Exchange                       0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":TechnicalListResponse
/// @brief "http://ws.eoddata.com/Data":TechnicalListResponse is a complexType.
///
/// class _ns1__TechnicalListResponse operations:
/// - _ns1__TechnicalListResponse* soap_new__ns1__TechnicalListResponse(soap*) allocate
/// - _ns1__TechnicalListResponse* soap_new__ns1__TechnicalListResponse(soap*, int num) allocate array
/// - _ns1__TechnicalListResponse* soap_new_req__ns1__TechnicalListResponse(soap*, ...) allocate, set required members
/// - _ns1__TechnicalListResponse* soap_new_set__ns1__TechnicalListResponse(soap*, ...) allocate, set all public members
/// - _ns1__TechnicalListResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__TechnicalListResponse(soap*, _ns1__TechnicalListResponse*) deserialize from a stream
/// - int soap_write__ns1__TechnicalListResponse(soap*, _ns1__TechnicalListResponse*) serialize to a stream
/// - _ns1__TechnicalListResponse* _ns1__TechnicalListResponse::soap_dup(soap*) returns deep copy of _ns1__TechnicalListResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__TechnicalListResponse::soap_del() deep deletes _ns1__TechnicalListResponse data members, use only after _ns1__TechnicalListResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__TechnicalListResponse
{ public:
/// Element "TechnicalListResult" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    ns1__RESPONSE*                       TechnicalListResult            0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":QuoteListByDate
/// @brief "http://ws.eoddata.com/Data":QuoteListByDate is a complexType.
///
/// class _ns1__QuoteListByDate operations:
/// - _ns1__QuoteListByDate* soap_new__ns1__QuoteListByDate(soap*) allocate
/// - _ns1__QuoteListByDate* soap_new__ns1__QuoteListByDate(soap*, int num) allocate array
/// - _ns1__QuoteListByDate* soap_new_req__ns1__QuoteListByDate(soap*, ...) allocate, set required members
/// - _ns1__QuoteListByDate* soap_new_set__ns1__QuoteListByDate(soap*, ...) allocate, set all public members
/// - _ns1__QuoteListByDate::soap_default(soap*) reset members to default
/// - int soap_read__ns1__QuoteListByDate(soap*, _ns1__QuoteListByDate*) deserialize from a stream
/// - int soap_write__ns1__QuoteListByDate(soap*, _ns1__QuoteListByDate*) serialize to a stream
/// - _ns1__QuoteListByDate* _ns1__QuoteListByDate::soap_dup(soap*) returns deep copy of _ns1__QuoteListByDate, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__QuoteListByDate::soap_del() deep deletes _ns1__QuoteListByDate data members, use only after _ns1__QuoteListByDate::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__QuoteListByDate
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// Element "Exchange" of XSD type xs:string.
    std::string*                         Exchange                       0;	///< Optional element.
/// Element "QuoteDate" of XSD type xs:string.
    std::string*                         QuoteDate                      0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":QuoteListByDateResponse
/// @brief "http://ws.eoddata.com/Data":QuoteListByDateResponse is a complexType.
///
/// class _ns1__QuoteListByDateResponse operations:
/// - _ns1__QuoteListByDateResponse* soap_new__ns1__QuoteListByDateResponse(soap*) allocate
/// - _ns1__QuoteListByDateResponse* soap_new__ns1__QuoteListByDateResponse(soap*, int num) allocate array
/// - _ns1__QuoteListByDateResponse* soap_new_req__ns1__QuoteListByDateResponse(soap*, ...) allocate, set required members
/// - _ns1__QuoteListByDateResponse* soap_new_set__ns1__QuoteListByDateResponse(soap*, ...) allocate, set all public members
/// - _ns1__QuoteListByDateResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__QuoteListByDateResponse(soap*, _ns1__QuoteListByDateResponse*) deserialize from a stream
/// - int soap_write__ns1__QuoteListByDateResponse(soap*, _ns1__QuoteListByDateResponse*) serialize to a stream
/// - _ns1__QuoteListByDateResponse* _ns1__QuoteListByDateResponse::soap_dup(soap*) returns deep copy of _ns1__QuoteListByDateResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__QuoteListByDateResponse::soap_del() deep deletes _ns1__QuoteListByDateResponse data members, use only after _ns1__QuoteListByDateResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__QuoteListByDateResponse
{ public:
/// Element "QuoteListByDateResult" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    ns1__RESPONSE*                       QuoteListByDateResult          0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":QuoteListByDate2
/// @brief "http://ws.eoddata.com/Data":QuoteListByDate2 is a complexType.
///
/// class _ns1__QuoteListByDate2 operations:
/// - _ns1__QuoteListByDate2* soap_new__ns1__QuoteListByDate2(soap*) allocate
/// - _ns1__QuoteListByDate2* soap_new__ns1__QuoteListByDate2(soap*, int num) allocate array
/// - _ns1__QuoteListByDate2* soap_new_req__ns1__QuoteListByDate2(soap*, ...) allocate, set required members
/// - _ns1__QuoteListByDate2* soap_new_set__ns1__QuoteListByDate2(soap*, ...) allocate, set all public members
/// - _ns1__QuoteListByDate2::soap_default(soap*) reset members to default
/// - int soap_read__ns1__QuoteListByDate2(soap*, _ns1__QuoteListByDate2*) deserialize from a stream
/// - int soap_write__ns1__QuoteListByDate2(soap*, _ns1__QuoteListByDate2*) serialize to a stream
/// - _ns1__QuoteListByDate2* _ns1__QuoteListByDate2::soap_dup(soap*) returns deep copy of _ns1__QuoteListByDate2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__QuoteListByDate2::soap_del() deep deletes _ns1__QuoteListByDate2 data members, use only after _ns1__QuoteListByDate2::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__QuoteListByDate2
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// Element "Exchange" of XSD type xs:string.
    std::string*                         Exchange                       0;	///< Optional element.
/// Element "QuoteDate" of XSD type xs:string.
    std::string*                         QuoteDate                      0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":QuoteListByDate2Response
/// @brief "http://ws.eoddata.com/Data":QuoteListByDate2Response is a complexType.
///
/// class _ns1__QuoteListByDate2Response operations:
/// - _ns1__QuoteListByDate2Response* soap_new__ns1__QuoteListByDate2Response(soap*) allocate
/// - _ns1__QuoteListByDate2Response* soap_new__ns1__QuoteListByDate2Response(soap*, int num) allocate array
/// - _ns1__QuoteListByDate2Response* soap_new_req__ns1__QuoteListByDate2Response(soap*, ...) allocate, set required members
/// - _ns1__QuoteListByDate2Response* soap_new_set__ns1__QuoteListByDate2Response(soap*, ...) allocate, set all public members
/// - _ns1__QuoteListByDate2Response::soap_default(soap*) reset members to default
/// - int soap_read__ns1__QuoteListByDate2Response(soap*, _ns1__QuoteListByDate2Response*) deserialize from a stream
/// - int soap_write__ns1__QuoteListByDate2Response(soap*, _ns1__QuoteListByDate2Response*) serialize to a stream
/// - _ns1__QuoteListByDate2Response* _ns1__QuoteListByDate2Response::soap_dup(soap*) returns deep copy of _ns1__QuoteListByDate2Response, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__QuoteListByDate2Response::soap_del() deep deletes _ns1__QuoteListByDate2Response data members, use only after _ns1__QuoteListByDate2Response::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__QuoteListByDate2Response
{ public:
/// Element "QuoteListByDate2Result" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    ns1__RESPONSE*                       QuoteListByDate2Result         0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":SymbolHistory
/// @brief "http://ws.eoddata.com/Data":SymbolHistory is a complexType.
///
/// class _ns1__SymbolHistory operations:
/// - _ns1__SymbolHistory* soap_new__ns1__SymbolHistory(soap*) allocate
/// - _ns1__SymbolHistory* soap_new__ns1__SymbolHistory(soap*, int num) allocate array
/// - _ns1__SymbolHistory* soap_new_req__ns1__SymbolHistory(soap*, ...) allocate, set required members
/// - _ns1__SymbolHistory* soap_new_set__ns1__SymbolHistory(soap*, ...) allocate, set all public members
/// - _ns1__SymbolHistory::soap_default(soap*) reset members to default
/// - int soap_read__ns1__SymbolHistory(soap*, _ns1__SymbolHistory*) deserialize from a stream
/// - int soap_write__ns1__SymbolHistory(soap*, _ns1__SymbolHistory*) serialize to a stream
/// - _ns1__SymbolHistory* _ns1__SymbolHistory::soap_dup(soap*) returns deep copy of _ns1__SymbolHistory, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SymbolHistory::soap_del() deep deletes _ns1__SymbolHistory data members, use only after _ns1__SymbolHistory::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SymbolHistory
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// Element "Exchange" of XSD type xs:string.
    std::string*                         Exchange                       0;	///< Optional element.
/// Element "Symbol" of XSD type xs:string.
    std::string*                         Symbol                         0;	///< Optional element.
/// Element "StartDate" of XSD type xs:string.
    std::string*                         StartDate                      0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":SymbolHistoryResponse
/// @brief "http://ws.eoddata.com/Data":SymbolHistoryResponse is a complexType.
///
/// class _ns1__SymbolHistoryResponse operations:
/// - _ns1__SymbolHistoryResponse* soap_new__ns1__SymbolHistoryResponse(soap*) allocate
/// - _ns1__SymbolHistoryResponse* soap_new__ns1__SymbolHistoryResponse(soap*, int num) allocate array
/// - _ns1__SymbolHistoryResponse* soap_new_req__ns1__SymbolHistoryResponse(soap*, ...) allocate, set required members
/// - _ns1__SymbolHistoryResponse* soap_new_set__ns1__SymbolHistoryResponse(soap*, ...) allocate, set all public members
/// - _ns1__SymbolHistoryResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__SymbolHistoryResponse(soap*, _ns1__SymbolHistoryResponse*) deserialize from a stream
/// - int soap_write__ns1__SymbolHistoryResponse(soap*, _ns1__SymbolHistoryResponse*) serialize to a stream
/// - _ns1__SymbolHistoryResponse* _ns1__SymbolHistoryResponse::soap_dup(soap*) returns deep copy of _ns1__SymbolHistoryResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SymbolHistoryResponse::soap_del() deep deletes _ns1__SymbolHistoryResponse data members, use only after _ns1__SymbolHistoryResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SymbolHistoryResponse
{ public:
/// Element "SymbolHistoryResult" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    ns1__RESPONSE*                       SymbolHistoryResult            0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":Top10Gains
/// @brief "http://ws.eoddata.com/Data":Top10Gains is a complexType.
///
/// class _ns1__Top10Gains operations:
/// - _ns1__Top10Gains* soap_new__ns1__Top10Gains(soap*) allocate
/// - _ns1__Top10Gains* soap_new__ns1__Top10Gains(soap*, int num) allocate array
/// - _ns1__Top10Gains* soap_new_req__ns1__Top10Gains(soap*, ...) allocate, set required members
/// - _ns1__Top10Gains* soap_new_set__ns1__Top10Gains(soap*, ...) allocate, set all public members
/// - _ns1__Top10Gains::soap_default(soap*) reset members to default
/// - int soap_read__ns1__Top10Gains(soap*, _ns1__Top10Gains*) deserialize from a stream
/// - int soap_write__ns1__Top10Gains(soap*, _ns1__Top10Gains*) serialize to a stream
/// - _ns1__Top10Gains* _ns1__Top10Gains::soap_dup(soap*) returns deep copy of _ns1__Top10Gains, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__Top10Gains::soap_del() deep deletes _ns1__Top10Gains data members, use only after _ns1__Top10Gains::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__Top10Gains
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// Element "Exchange" of XSD type xs:string.
    std::string*                         Exchange                       0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":Top10GainsResponse
/// @brief "http://ws.eoddata.com/Data":Top10GainsResponse is a complexType.
///
/// class _ns1__Top10GainsResponse operations:
/// - _ns1__Top10GainsResponse* soap_new__ns1__Top10GainsResponse(soap*) allocate
/// - _ns1__Top10GainsResponse* soap_new__ns1__Top10GainsResponse(soap*, int num) allocate array
/// - _ns1__Top10GainsResponse* soap_new_req__ns1__Top10GainsResponse(soap*, ...) allocate, set required members
/// - _ns1__Top10GainsResponse* soap_new_set__ns1__Top10GainsResponse(soap*, ...) allocate, set all public members
/// - _ns1__Top10GainsResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__Top10GainsResponse(soap*, _ns1__Top10GainsResponse*) deserialize from a stream
/// - int soap_write__ns1__Top10GainsResponse(soap*, _ns1__Top10GainsResponse*) serialize to a stream
/// - _ns1__Top10GainsResponse* _ns1__Top10GainsResponse::soap_dup(soap*) returns deep copy of _ns1__Top10GainsResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__Top10GainsResponse::soap_del() deep deletes _ns1__Top10GainsResponse data members, use only after _ns1__Top10GainsResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__Top10GainsResponse
{ public:
/// Element "Top10GainsResult" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    ns1__RESPONSE*                       Top10GainsResult               0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":Top10Losses
/// @brief "http://ws.eoddata.com/Data":Top10Losses is a complexType.
///
/// class _ns1__Top10Losses operations:
/// - _ns1__Top10Losses* soap_new__ns1__Top10Losses(soap*) allocate
/// - _ns1__Top10Losses* soap_new__ns1__Top10Losses(soap*, int num) allocate array
/// - _ns1__Top10Losses* soap_new_req__ns1__Top10Losses(soap*, ...) allocate, set required members
/// - _ns1__Top10Losses* soap_new_set__ns1__Top10Losses(soap*, ...) allocate, set all public members
/// - _ns1__Top10Losses::soap_default(soap*) reset members to default
/// - int soap_read__ns1__Top10Losses(soap*, _ns1__Top10Losses*) deserialize from a stream
/// - int soap_write__ns1__Top10Losses(soap*, _ns1__Top10Losses*) serialize to a stream
/// - _ns1__Top10Losses* _ns1__Top10Losses::soap_dup(soap*) returns deep copy of _ns1__Top10Losses, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__Top10Losses::soap_del() deep deletes _ns1__Top10Losses data members, use only after _ns1__Top10Losses::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__Top10Losses
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// Element "Exchange" of XSD type xs:string.
    std::string*                         Exchange                       0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":Top10LossesResponse
/// @brief "http://ws.eoddata.com/Data":Top10LossesResponse is a complexType.
///
/// class _ns1__Top10LossesResponse operations:
/// - _ns1__Top10LossesResponse* soap_new__ns1__Top10LossesResponse(soap*) allocate
/// - _ns1__Top10LossesResponse* soap_new__ns1__Top10LossesResponse(soap*, int num) allocate array
/// - _ns1__Top10LossesResponse* soap_new_req__ns1__Top10LossesResponse(soap*, ...) allocate, set required members
/// - _ns1__Top10LossesResponse* soap_new_set__ns1__Top10LossesResponse(soap*, ...) allocate, set all public members
/// - _ns1__Top10LossesResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__Top10LossesResponse(soap*, _ns1__Top10LossesResponse*) deserialize from a stream
/// - int soap_write__ns1__Top10LossesResponse(soap*, _ns1__Top10LossesResponse*) serialize to a stream
/// - _ns1__Top10LossesResponse* _ns1__Top10LossesResponse::soap_dup(soap*) returns deep copy of _ns1__Top10LossesResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__Top10LossesResponse::soap_del() deep deletes _ns1__Top10LossesResponse data members, use only after _ns1__Top10LossesResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__Top10LossesResponse
{ public:
/// Element "Top10LossesResult" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    ns1__RESPONSE*                       Top10LossesResult              0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":SymbolChart
/// @brief "http://ws.eoddata.com/Data":SymbolChart is a complexType.
///
/// class _ns1__SymbolChart operations:
/// - _ns1__SymbolChart* soap_new__ns1__SymbolChart(soap*) allocate
/// - _ns1__SymbolChart* soap_new__ns1__SymbolChart(soap*, int num) allocate array
/// - _ns1__SymbolChart* soap_new_req__ns1__SymbolChart(soap*, ...) allocate, set required members
/// - _ns1__SymbolChart* soap_new_set__ns1__SymbolChart(soap*, ...) allocate, set all public members
/// - _ns1__SymbolChart::soap_default(soap*) reset members to default
/// - int soap_read__ns1__SymbolChart(soap*, _ns1__SymbolChart*) deserialize from a stream
/// - int soap_write__ns1__SymbolChart(soap*, _ns1__SymbolChart*) serialize to a stream
/// - _ns1__SymbolChart* _ns1__SymbolChart::soap_dup(soap*) returns deep copy of _ns1__SymbolChart, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SymbolChart::soap_del() deep deletes _ns1__SymbolChart data members, use only after _ns1__SymbolChart::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SymbolChart
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// Element "Exchange" of XSD type xs:string.
    std::string*                         Exchange                       0;	///< Optional element.
/// Element "Symbol" of XSD type xs:string.
    std::string*                         Symbol                         0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":SymbolChartResponse
/// @brief "http://ws.eoddata.com/Data":SymbolChartResponse is a complexType.
///
/// class _ns1__SymbolChartResponse operations:
/// - _ns1__SymbolChartResponse* soap_new__ns1__SymbolChartResponse(soap*) allocate
/// - _ns1__SymbolChartResponse* soap_new__ns1__SymbolChartResponse(soap*, int num) allocate array
/// - _ns1__SymbolChartResponse* soap_new_req__ns1__SymbolChartResponse(soap*, ...) allocate, set required members
/// - _ns1__SymbolChartResponse* soap_new_set__ns1__SymbolChartResponse(soap*, ...) allocate, set all public members
/// - _ns1__SymbolChartResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__SymbolChartResponse(soap*, _ns1__SymbolChartResponse*) deserialize from a stream
/// - int soap_write__ns1__SymbolChartResponse(soap*, _ns1__SymbolChartResponse*) serialize to a stream
/// - _ns1__SymbolChartResponse* _ns1__SymbolChartResponse::soap_dup(soap*) returns deep copy of _ns1__SymbolChartResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SymbolChartResponse::soap_del() deep deletes _ns1__SymbolChartResponse data members, use only after _ns1__SymbolChartResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SymbolChartResponse
{ public:
/// Element "SymbolChartResult" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    ns1__RESPONSE*                       SymbolChartResult              0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":ExchangeMonths
/// @brief "http://ws.eoddata.com/Data":ExchangeMonths is a complexType.
///
/// class _ns1__ExchangeMonths operations:
/// - _ns1__ExchangeMonths* soap_new__ns1__ExchangeMonths(soap*) allocate
/// - _ns1__ExchangeMonths* soap_new__ns1__ExchangeMonths(soap*, int num) allocate array
/// - _ns1__ExchangeMonths* soap_new_req__ns1__ExchangeMonths(soap*, ...) allocate, set required members
/// - _ns1__ExchangeMonths* soap_new_set__ns1__ExchangeMonths(soap*, ...) allocate, set all public members
/// - _ns1__ExchangeMonths::soap_default(soap*) reset members to default
/// - int soap_read__ns1__ExchangeMonths(soap*, _ns1__ExchangeMonths*) deserialize from a stream
/// - int soap_write__ns1__ExchangeMonths(soap*, _ns1__ExchangeMonths*) serialize to a stream
/// - _ns1__ExchangeMonths* _ns1__ExchangeMonths::soap_dup(soap*) returns deep copy of _ns1__ExchangeMonths, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__ExchangeMonths::soap_del() deep deletes _ns1__ExchangeMonths data members, use only after _ns1__ExchangeMonths::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__ExchangeMonths
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// Element "Exchange" of XSD type xs:string.
    std::string*                         Exchange                       0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":ExchangeMonthsResponse
/// @brief "http://ws.eoddata.com/Data":ExchangeMonthsResponse is a complexType.
///
/// class _ns1__ExchangeMonthsResponse operations:
/// - _ns1__ExchangeMonthsResponse* soap_new__ns1__ExchangeMonthsResponse(soap*) allocate
/// - _ns1__ExchangeMonthsResponse* soap_new__ns1__ExchangeMonthsResponse(soap*, int num) allocate array
/// - _ns1__ExchangeMonthsResponse* soap_new_req__ns1__ExchangeMonthsResponse(soap*, ...) allocate, set required members
/// - _ns1__ExchangeMonthsResponse* soap_new_set__ns1__ExchangeMonthsResponse(soap*, ...) allocate, set all public members
/// - _ns1__ExchangeMonthsResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__ExchangeMonthsResponse(soap*, _ns1__ExchangeMonthsResponse*) deserialize from a stream
/// - int soap_write__ns1__ExchangeMonthsResponse(soap*, _ns1__ExchangeMonthsResponse*) serialize to a stream
/// - _ns1__ExchangeMonthsResponse* _ns1__ExchangeMonthsResponse::soap_dup(soap*) returns deep copy of _ns1__ExchangeMonthsResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__ExchangeMonthsResponse::soap_del() deep deletes _ns1__ExchangeMonthsResponse data members, use only after _ns1__ExchangeMonthsResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__ExchangeMonthsResponse
{ public:
/// Element "ExchangeMonthsResult" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    ns1__RESPONSE*                       ExchangeMonthsResult           0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":SplitListByExchange
/// @brief "http://ws.eoddata.com/Data":SplitListByExchange is a complexType.
///
/// class _ns1__SplitListByExchange operations:
/// - _ns1__SplitListByExchange* soap_new__ns1__SplitListByExchange(soap*) allocate
/// - _ns1__SplitListByExchange* soap_new__ns1__SplitListByExchange(soap*, int num) allocate array
/// - _ns1__SplitListByExchange* soap_new_req__ns1__SplitListByExchange(soap*, ...) allocate, set required members
/// - _ns1__SplitListByExchange* soap_new_set__ns1__SplitListByExchange(soap*, ...) allocate, set all public members
/// - _ns1__SplitListByExchange::soap_default(soap*) reset members to default
/// - int soap_read__ns1__SplitListByExchange(soap*, _ns1__SplitListByExchange*) deserialize from a stream
/// - int soap_write__ns1__SplitListByExchange(soap*, _ns1__SplitListByExchange*) serialize to a stream
/// - _ns1__SplitListByExchange* _ns1__SplitListByExchange::soap_dup(soap*) returns deep copy of _ns1__SplitListByExchange, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SplitListByExchange::soap_del() deep deletes _ns1__SplitListByExchange data members, use only after _ns1__SplitListByExchange::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SplitListByExchange
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// Element "Exchange" of XSD type xs:string.
    std::string*                         Exchange                       0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":SplitListByExchangeResponse
/// @brief "http://ws.eoddata.com/Data":SplitListByExchangeResponse is a complexType.
///
/// class _ns1__SplitListByExchangeResponse operations:
/// - _ns1__SplitListByExchangeResponse* soap_new__ns1__SplitListByExchangeResponse(soap*) allocate
/// - _ns1__SplitListByExchangeResponse* soap_new__ns1__SplitListByExchangeResponse(soap*, int num) allocate array
/// - _ns1__SplitListByExchangeResponse* soap_new_req__ns1__SplitListByExchangeResponse(soap*, ...) allocate, set required members
/// - _ns1__SplitListByExchangeResponse* soap_new_set__ns1__SplitListByExchangeResponse(soap*, ...) allocate, set all public members
/// - _ns1__SplitListByExchangeResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__SplitListByExchangeResponse(soap*, _ns1__SplitListByExchangeResponse*) deserialize from a stream
/// - int soap_write__ns1__SplitListByExchangeResponse(soap*, _ns1__SplitListByExchangeResponse*) serialize to a stream
/// - _ns1__SplitListByExchangeResponse* _ns1__SplitListByExchangeResponse::soap_dup(soap*) returns deep copy of _ns1__SplitListByExchangeResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SplitListByExchangeResponse::soap_del() deep deletes _ns1__SplitListByExchangeResponse data members, use only after _ns1__SplitListByExchangeResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SplitListByExchangeResponse
{ public:
/// Element "SplitListByExchangeResult" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    ns1__RESPONSE*                       SplitListByExchangeResult      0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":SplitListBySymbol
/// @brief "http://ws.eoddata.com/Data":SplitListBySymbol is a complexType.
///
/// class _ns1__SplitListBySymbol operations:
/// - _ns1__SplitListBySymbol* soap_new__ns1__SplitListBySymbol(soap*) allocate
/// - _ns1__SplitListBySymbol* soap_new__ns1__SplitListBySymbol(soap*, int num) allocate array
/// - _ns1__SplitListBySymbol* soap_new_req__ns1__SplitListBySymbol(soap*, ...) allocate, set required members
/// - _ns1__SplitListBySymbol* soap_new_set__ns1__SplitListBySymbol(soap*, ...) allocate, set all public members
/// - _ns1__SplitListBySymbol::soap_default(soap*) reset members to default
/// - int soap_read__ns1__SplitListBySymbol(soap*, _ns1__SplitListBySymbol*) deserialize from a stream
/// - int soap_write__ns1__SplitListBySymbol(soap*, _ns1__SplitListBySymbol*) serialize to a stream
/// - _ns1__SplitListBySymbol* _ns1__SplitListBySymbol::soap_dup(soap*) returns deep copy of _ns1__SplitListBySymbol, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SplitListBySymbol::soap_del() deep deletes _ns1__SplitListBySymbol data members, use only after _ns1__SplitListBySymbol::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SplitListBySymbol
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// Element "Exchange" of XSD type xs:string.
    std::string*                         Exchange                       0;	///< Optional element.
/// Element "Symbol" of XSD type xs:string.
    std::string*                         Symbol                         0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":SplitListBySymbolResponse
/// @brief "http://ws.eoddata.com/Data":SplitListBySymbolResponse is a complexType.
///
/// class _ns1__SplitListBySymbolResponse operations:
/// - _ns1__SplitListBySymbolResponse* soap_new__ns1__SplitListBySymbolResponse(soap*) allocate
/// - _ns1__SplitListBySymbolResponse* soap_new__ns1__SplitListBySymbolResponse(soap*, int num) allocate array
/// - _ns1__SplitListBySymbolResponse* soap_new_req__ns1__SplitListBySymbolResponse(soap*, ...) allocate, set required members
/// - _ns1__SplitListBySymbolResponse* soap_new_set__ns1__SplitListBySymbolResponse(soap*, ...) allocate, set all public members
/// - _ns1__SplitListBySymbolResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__SplitListBySymbolResponse(soap*, _ns1__SplitListBySymbolResponse*) deserialize from a stream
/// - int soap_write__ns1__SplitListBySymbolResponse(soap*, _ns1__SplitListBySymbolResponse*) serialize to a stream
/// - _ns1__SplitListBySymbolResponse* _ns1__SplitListBySymbolResponse::soap_dup(soap*) returns deep copy of _ns1__SplitListBySymbolResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SplitListBySymbolResponse::soap_del() deep deletes _ns1__SplitListBySymbolResponse data members, use only after _ns1__SplitListBySymbolResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SplitListBySymbolResponse
{ public:
/// Element "SplitListBySymbolResult" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    ns1__RESPONSE*                       SplitListBySymbolResult        0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":CountryList
/// @brief "http://ws.eoddata.com/Data":CountryList is a complexType.
///
/// class _ns1__CountryList operations:
/// - _ns1__CountryList* soap_new__ns1__CountryList(soap*) allocate
/// - _ns1__CountryList* soap_new__ns1__CountryList(soap*, int num) allocate array
/// - _ns1__CountryList* soap_new_req__ns1__CountryList(soap*, ...) allocate, set required members
/// - _ns1__CountryList* soap_new_set__ns1__CountryList(soap*, ...) allocate, set all public members
/// - _ns1__CountryList::soap_default(soap*) reset members to default
/// - int soap_read__ns1__CountryList(soap*, _ns1__CountryList*) deserialize from a stream
/// - int soap_write__ns1__CountryList(soap*, _ns1__CountryList*) serialize to a stream
/// - _ns1__CountryList* _ns1__CountryList::soap_dup(soap*) returns deep copy of _ns1__CountryList, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__CountryList::soap_del() deep deletes _ns1__CountryList data members, use only after _ns1__CountryList::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__CountryList
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":CountryListResponse
/// @brief "http://ws.eoddata.com/Data":CountryListResponse is a complexType.
///
/// class _ns1__CountryListResponse operations:
/// - _ns1__CountryListResponse* soap_new__ns1__CountryListResponse(soap*) allocate
/// - _ns1__CountryListResponse* soap_new__ns1__CountryListResponse(soap*, int num) allocate array
/// - _ns1__CountryListResponse* soap_new_req__ns1__CountryListResponse(soap*, ...) allocate, set required members
/// - _ns1__CountryListResponse* soap_new_set__ns1__CountryListResponse(soap*, ...) allocate, set all public members
/// - _ns1__CountryListResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__CountryListResponse(soap*, _ns1__CountryListResponse*) deserialize from a stream
/// - int soap_write__ns1__CountryListResponse(soap*, _ns1__CountryListResponse*) serialize to a stream
/// - _ns1__CountryListResponse* _ns1__CountryListResponse::soap_dup(soap*) returns deep copy of _ns1__CountryListResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__CountryListResponse::soap_del() deep deletes _ns1__CountryListResponse data members, use only after _ns1__CountryListResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__CountryListResponse
{ public:
/// Element "CountryListResult" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    ns1__RESPONSE*                       CountryListResult              0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":SymbolHistoryPeriod
/// @brief "http://ws.eoddata.com/Data":SymbolHistoryPeriod is a complexType.
///
/// class _ns1__SymbolHistoryPeriod operations:
/// - _ns1__SymbolHistoryPeriod* soap_new__ns1__SymbolHistoryPeriod(soap*) allocate
/// - _ns1__SymbolHistoryPeriod* soap_new__ns1__SymbolHistoryPeriod(soap*, int num) allocate array
/// - _ns1__SymbolHistoryPeriod* soap_new_req__ns1__SymbolHistoryPeriod(soap*, ...) allocate, set required members
/// - _ns1__SymbolHistoryPeriod* soap_new_set__ns1__SymbolHistoryPeriod(soap*, ...) allocate, set all public members
/// - _ns1__SymbolHistoryPeriod::soap_default(soap*) reset members to default
/// - int soap_read__ns1__SymbolHistoryPeriod(soap*, _ns1__SymbolHistoryPeriod*) deserialize from a stream
/// - int soap_write__ns1__SymbolHistoryPeriod(soap*, _ns1__SymbolHistoryPeriod*) serialize to a stream
/// - _ns1__SymbolHistoryPeriod* _ns1__SymbolHistoryPeriod::soap_dup(soap*) returns deep copy of _ns1__SymbolHistoryPeriod, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SymbolHistoryPeriod::soap_del() deep deletes _ns1__SymbolHistoryPeriod data members, use only after _ns1__SymbolHistoryPeriod::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SymbolHistoryPeriod
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// Element "Exchange" of XSD type xs:string.
    std::string*                         Exchange                       0;	///< Optional element.
/// Element "Symbol" of XSD type xs:string.
    std::string*                         Symbol                         0;	///< Optional element.
/// Element "Date" of XSD type xs:string.
    std::string*                         Date                           0;	///< Optional element.
/// Element "Period" of XSD type xs:string.
    std::string*                         Period                         0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":SymbolHistoryPeriodResponse
/// @brief "http://ws.eoddata.com/Data":SymbolHistoryPeriodResponse is a complexType.
///
/// class _ns1__SymbolHistoryPeriodResponse operations:
/// - _ns1__SymbolHistoryPeriodResponse* soap_new__ns1__SymbolHistoryPeriodResponse(soap*) allocate
/// - _ns1__SymbolHistoryPeriodResponse* soap_new__ns1__SymbolHistoryPeriodResponse(soap*, int num) allocate array
/// - _ns1__SymbolHistoryPeriodResponse* soap_new_req__ns1__SymbolHistoryPeriodResponse(soap*, ...) allocate, set required members
/// - _ns1__SymbolHistoryPeriodResponse* soap_new_set__ns1__SymbolHistoryPeriodResponse(soap*, ...) allocate, set all public members
/// - _ns1__SymbolHistoryPeriodResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__SymbolHistoryPeriodResponse(soap*, _ns1__SymbolHistoryPeriodResponse*) deserialize from a stream
/// - int soap_write__ns1__SymbolHistoryPeriodResponse(soap*, _ns1__SymbolHistoryPeriodResponse*) serialize to a stream
/// - _ns1__SymbolHistoryPeriodResponse* _ns1__SymbolHistoryPeriodResponse::soap_dup(soap*) returns deep copy of _ns1__SymbolHistoryPeriodResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SymbolHistoryPeriodResponse::soap_del() deep deletes _ns1__SymbolHistoryPeriodResponse data members, use only after _ns1__SymbolHistoryPeriodResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SymbolHistoryPeriodResponse
{ public:
/// Element "SymbolHistoryPeriodResult" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    ns1__RESPONSE*                       SymbolHistoryPeriodResult      0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":SymbolHistoryPeriodByDateRange
/// @brief "http://ws.eoddata.com/Data":SymbolHistoryPeriodByDateRange is a complexType.
///
/// class _ns1__SymbolHistoryPeriodByDateRange operations:
/// - _ns1__SymbolHistoryPeriodByDateRange* soap_new__ns1__SymbolHistoryPeriodByDateRange(soap*) allocate
/// - _ns1__SymbolHistoryPeriodByDateRange* soap_new__ns1__SymbolHistoryPeriodByDateRange(soap*, int num) allocate array
/// - _ns1__SymbolHistoryPeriodByDateRange* soap_new_req__ns1__SymbolHistoryPeriodByDateRange(soap*, ...) allocate, set required members
/// - _ns1__SymbolHistoryPeriodByDateRange* soap_new_set__ns1__SymbolHistoryPeriodByDateRange(soap*, ...) allocate, set all public members
/// - _ns1__SymbolHistoryPeriodByDateRange::soap_default(soap*) reset members to default
/// - int soap_read__ns1__SymbolHistoryPeriodByDateRange(soap*, _ns1__SymbolHistoryPeriodByDateRange*) deserialize from a stream
/// - int soap_write__ns1__SymbolHistoryPeriodByDateRange(soap*, _ns1__SymbolHistoryPeriodByDateRange*) serialize to a stream
/// - _ns1__SymbolHistoryPeriodByDateRange* _ns1__SymbolHistoryPeriodByDateRange::soap_dup(soap*) returns deep copy of _ns1__SymbolHistoryPeriodByDateRange, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SymbolHistoryPeriodByDateRange::soap_del() deep deletes _ns1__SymbolHistoryPeriodByDateRange data members, use only after _ns1__SymbolHistoryPeriodByDateRange::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SymbolHistoryPeriodByDateRange
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// Element "Exchange" of XSD type xs:string.
    std::string*                         Exchange                       0;	///< Optional element.
/// Element "Symbol" of XSD type xs:string.
    std::string*                         Symbol                         0;	///< Optional element.
/// Element "StartDate" of XSD type xs:string.
    std::string*                         StartDate                      0;	///< Optional element.
/// Element "EndDate" of XSD type xs:string.
    std::string*                         EndDate                        0;	///< Optional element.
/// Element "Period" of XSD type xs:string.
    std::string*                         Period                         0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":SymbolHistoryPeriodByDateRangeResponse
/// @brief "http://ws.eoddata.com/Data":SymbolHistoryPeriodByDateRangeResponse is a complexType.
///
/// class _ns1__SymbolHistoryPeriodByDateRangeResponse operations:
/// - _ns1__SymbolHistoryPeriodByDateRangeResponse* soap_new__ns1__SymbolHistoryPeriodByDateRangeResponse(soap*) allocate
/// - _ns1__SymbolHistoryPeriodByDateRangeResponse* soap_new__ns1__SymbolHistoryPeriodByDateRangeResponse(soap*, int num) allocate array
/// - _ns1__SymbolHistoryPeriodByDateRangeResponse* soap_new_req__ns1__SymbolHistoryPeriodByDateRangeResponse(soap*, ...) allocate, set required members
/// - _ns1__SymbolHistoryPeriodByDateRangeResponse* soap_new_set__ns1__SymbolHistoryPeriodByDateRangeResponse(soap*, ...) allocate, set all public members
/// - _ns1__SymbolHistoryPeriodByDateRangeResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__SymbolHistoryPeriodByDateRangeResponse(soap*, _ns1__SymbolHistoryPeriodByDateRangeResponse*) deserialize from a stream
/// - int soap_write__ns1__SymbolHistoryPeriodByDateRangeResponse(soap*, _ns1__SymbolHistoryPeriodByDateRangeResponse*) serialize to a stream
/// - _ns1__SymbolHistoryPeriodByDateRangeResponse* _ns1__SymbolHistoryPeriodByDateRangeResponse::soap_dup(soap*) returns deep copy of _ns1__SymbolHistoryPeriodByDateRangeResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SymbolHistoryPeriodByDateRangeResponse::soap_del() deep deletes _ns1__SymbolHistoryPeriodByDateRangeResponse data members, use only after _ns1__SymbolHistoryPeriodByDateRangeResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SymbolHistoryPeriodByDateRangeResponse
{ public:
/// Element "SymbolHistoryPeriodByDateRangeResult" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    ns1__RESPONSE*                       SymbolHistoryPeriodByDateRangeResult 0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":QuoteListByDatePeriod
/// @brief "http://ws.eoddata.com/Data":QuoteListByDatePeriod is a complexType.
///
/// class _ns1__QuoteListByDatePeriod operations:
/// - _ns1__QuoteListByDatePeriod* soap_new__ns1__QuoteListByDatePeriod(soap*) allocate
/// - _ns1__QuoteListByDatePeriod* soap_new__ns1__QuoteListByDatePeriod(soap*, int num) allocate array
/// - _ns1__QuoteListByDatePeriod* soap_new_req__ns1__QuoteListByDatePeriod(soap*, ...) allocate, set required members
/// - _ns1__QuoteListByDatePeriod* soap_new_set__ns1__QuoteListByDatePeriod(soap*, ...) allocate, set all public members
/// - _ns1__QuoteListByDatePeriod::soap_default(soap*) reset members to default
/// - int soap_read__ns1__QuoteListByDatePeriod(soap*, _ns1__QuoteListByDatePeriod*) deserialize from a stream
/// - int soap_write__ns1__QuoteListByDatePeriod(soap*, _ns1__QuoteListByDatePeriod*) serialize to a stream
/// - _ns1__QuoteListByDatePeriod* _ns1__QuoteListByDatePeriod::soap_dup(soap*) returns deep copy of _ns1__QuoteListByDatePeriod, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__QuoteListByDatePeriod::soap_del() deep deletes _ns1__QuoteListByDatePeriod data members, use only after _ns1__QuoteListByDatePeriod::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__QuoteListByDatePeriod
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// Element "Exchange" of XSD type xs:string.
    std::string*                         Exchange                       0;	///< Optional element.
/// Element "QuoteDate" of XSD type xs:string.
    std::string*                         QuoteDate                      0;	///< Optional element.
/// Element "Period" of XSD type xs:string.
    std::string*                         Period                         0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":QuoteListByDatePeriodResponse
/// @brief "http://ws.eoddata.com/Data":QuoteListByDatePeriodResponse is a complexType.
///
/// class _ns1__QuoteListByDatePeriodResponse operations:
/// - _ns1__QuoteListByDatePeriodResponse* soap_new__ns1__QuoteListByDatePeriodResponse(soap*) allocate
/// - _ns1__QuoteListByDatePeriodResponse* soap_new__ns1__QuoteListByDatePeriodResponse(soap*, int num) allocate array
/// - _ns1__QuoteListByDatePeriodResponse* soap_new_req__ns1__QuoteListByDatePeriodResponse(soap*, ...) allocate, set required members
/// - _ns1__QuoteListByDatePeriodResponse* soap_new_set__ns1__QuoteListByDatePeriodResponse(soap*, ...) allocate, set all public members
/// - _ns1__QuoteListByDatePeriodResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__QuoteListByDatePeriodResponse(soap*, _ns1__QuoteListByDatePeriodResponse*) deserialize from a stream
/// - int soap_write__ns1__QuoteListByDatePeriodResponse(soap*, _ns1__QuoteListByDatePeriodResponse*) serialize to a stream
/// - _ns1__QuoteListByDatePeriodResponse* _ns1__QuoteListByDatePeriodResponse::soap_dup(soap*) returns deep copy of _ns1__QuoteListByDatePeriodResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__QuoteListByDatePeriodResponse::soap_del() deep deletes _ns1__QuoteListByDatePeriodResponse data members, use only after _ns1__QuoteListByDatePeriodResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__QuoteListByDatePeriodResponse
{ public:
/// Element "QuoteListByDatePeriodResult" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    ns1__RESPONSE*                       QuoteListByDatePeriodResult    0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":QuoteListByDatePeriod2
/// @brief "http://ws.eoddata.com/Data":QuoteListByDatePeriod2 is a complexType.
///
/// class _ns1__QuoteListByDatePeriod2 operations:
/// - _ns1__QuoteListByDatePeriod2* soap_new__ns1__QuoteListByDatePeriod2(soap*) allocate
/// - _ns1__QuoteListByDatePeriod2* soap_new__ns1__QuoteListByDatePeriod2(soap*, int num) allocate array
/// - _ns1__QuoteListByDatePeriod2* soap_new_req__ns1__QuoteListByDatePeriod2(soap*, ...) allocate, set required members
/// - _ns1__QuoteListByDatePeriod2* soap_new_set__ns1__QuoteListByDatePeriod2(soap*, ...) allocate, set all public members
/// - _ns1__QuoteListByDatePeriod2::soap_default(soap*) reset members to default
/// - int soap_read__ns1__QuoteListByDatePeriod2(soap*, _ns1__QuoteListByDatePeriod2*) deserialize from a stream
/// - int soap_write__ns1__QuoteListByDatePeriod2(soap*, _ns1__QuoteListByDatePeriod2*) serialize to a stream
/// - _ns1__QuoteListByDatePeriod2* _ns1__QuoteListByDatePeriod2::soap_dup(soap*) returns deep copy of _ns1__QuoteListByDatePeriod2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__QuoteListByDatePeriod2::soap_del() deep deletes _ns1__QuoteListByDatePeriod2 data members, use only after _ns1__QuoteListByDatePeriod2::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__QuoteListByDatePeriod2
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// Element "Exchange" of XSD type xs:string.
    std::string*                         Exchange                       0;	///< Optional element.
/// Element "QuoteDate" of XSD type xs:string.
    std::string*                         QuoteDate                      0;	///< Optional element.
/// Element "Period" of XSD type xs:string.
    std::string*                         Period                         0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":QuoteListByDatePeriod2Response
/// @brief "http://ws.eoddata.com/Data":QuoteListByDatePeriod2Response is a complexType.
///
/// class _ns1__QuoteListByDatePeriod2Response operations:
/// - _ns1__QuoteListByDatePeriod2Response* soap_new__ns1__QuoteListByDatePeriod2Response(soap*) allocate
/// - _ns1__QuoteListByDatePeriod2Response* soap_new__ns1__QuoteListByDatePeriod2Response(soap*, int num) allocate array
/// - _ns1__QuoteListByDatePeriod2Response* soap_new_req__ns1__QuoteListByDatePeriod2Response(soap*, ...) allocate, set required members
/// - _ns1__QuoteListByDatePeriod2Response* soap_new_set__ns1__QuoteListByDatePeriod2Response(soap*, ...) allocate, set all public members
/// - _ns1__QuoteListByDatePeriod2Response::soap_default(soap*) reset members to default
/// - int soap_read__ns1__QuoteListByDatePeriod2Response(soap*, _ns1__QuoteListByDatePeriod2Response*) deserialize from a stream
/// - int soap_write__ns1__QuoteListByDatePeriod2Response(soap*, _ns1__QuoteListByDatePeriod2Response*) serialize to a stream
/// - _ns1__QuoteListByDatePeriod2Response* _ns1__QuoteListByDatePeriod2Response::soap_dup(soap*) returns deep copy of _ns1__QuoteListByDatePeriod2Response, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__QuoteListByDatePeriod2Response::soap_del() deep deletes _ns1__QuoteListByDatePeriod2Response data members, use only after _ns1__QuoteListByDatePeriod2Response::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__QuoteListByDatePeriod2Response
{ public:
/// Element "QuoteListByDatePeriod2Result" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    ns1__RESPONSE*                       QuoteListByDatePeriod2Result   0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":SymbolChangesByExchange
/// @brief "http://ws.eoddata.com/Data":SymbolChangesByExchange is a complexType.
///
/// class _ns1__SymbolChangesByExchange operations:
/// - _ns1__SymbolChangesByExchange* soap_new__ns1__SymbolChangesByExchange(soap*) allocate
/// - _ns1__SymbolChangesByExchange* soap_new__ns1__SymbolChangesByExchange(soap*, int num) allocate array
/// - _ns1__SymbolChangesByExchange* soap_new_req__ns1__SymbolChangesByExchange(soap*, ...) allocate, set required members
/// - _ns1__SymbolChangesByExchange* soap_new_set__ns1__SymbolChangesByExchange(soap*, ...) allocate, set all public members
/// - _ns1__SymbolChangesByExchange::soap_default(soap*) reset members to default
/// - int soap_read__ns1__SymbolChangesByExchange(soap*, _ns1__SymbolChangesByExchange*) deserialize from a stream
/// - int soap_write__ns1__SymbolChangesByExchange(soap*, _ns1__SymbolChangesByExchange*) serialize to a stream
/// - _ns1__SymbolChangesByExchange* _ns1__SymbolChangesByExchange::soap_dup(soap*) returns deep copy of _ns1__SymbolChangesByExchange, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SymbolChangesByExchange::soap_del() deep deletes _ns1__SymbolChangesByExchange data members, use only after _ns1__SymbolChangesByExchange::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SymbolChangesByExchange
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// Element "Exchange" of XSD type xs:string.
    std::string*                         Exchange                       0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":SymbolChangesByExchangeResponse
/// @brief "http://ws.eoddata.com/Data":SymbolChangesByExchangeResponse is a complexType.
///
/// class _ns1__SymbolChangesByExchangeResponse operations:
/// - _ns1__SymbolChangesByExchangeResponse* soap_new__ns1__SymbolChangesByExchangeResponse(soap*) allocate
/// - _ns1__SymbolChangesByExchangeResponse* soap_new__ns1__SymbolChangesByExchangeResponse(soap*, int num) allocate array
/// - _ns1__SymbolChangesByExchangeResponse* soap_new_req__ns1__SymbolChangesByExchangeResponse(soap*, ...) allocate, set required members
/// - _ns1__SymbolChangesByExchangeResponse* soap_new_set__ns1__SymbolChangesByExchangeResponse(soap*, ...) allocate, set all public members
/// - _ns1__SymbolChangesByExchangeResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__SymbolChangesByExchangeResponse(soap*, _ns1__SymbolChangesByExchangeResponse*) deserialize from a stream
/// - int soap_write__ns1__SymbolChangesByExchangeResponse(soap*, _ns1__SymbolChangesByExchangeResponse*) serialize to a stream
/// - _ns1__SymbolChangesByExchangeResponse* _ns1__SymbolChangesByExchangeResponse::soap_dup(soap*) returns deep copy of _ns1__SymbolChangesByExchangeResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SymbolChangesByExchangeResponse::soap_del() deep deletes _ns1__SymbolChangesByExchangeResponse data members, use only after _ns1__SymbolChangesByExchangeResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SymbolChangesByExchangeResponse
{ public:
/// Element "SymbolChangesByExchangeResult" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    ns1__RESPONSE*                       SymbolChangesByExchangeResult  0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":DataClientLatestVersion
/// @brief "http://ws.eoddata.com/Data":DataClientLatestVersion is a complexType.
///
/// class _ns1__DataClientLatestVersion operations:
/// - _ns1__DataClientLatestVersion* soap_new__ns1__DataClientLatestVersion(soap*) allocate
/// - _ns1__DataClientLatestVersion* soap_new__ns1__DataClientLatestVersion(soap*, int num) allocate array
/// - _ns1__DataClientLatestVersion* soap_new_req__ns1__DataClientLatestVersion(soap*, ...) allocate, set required members
/// - _ns1__DataClientLatestVersion* soap_new_set__ns1__DataClientLatestVersion(soap*, ...) allocate, set all public members
/// - _ns1__DataClientLatestVersion::soap_default(soap*) reset members to default
/// - int soap_read__ns1__DataClientLatestVersion(soap*, _ns1__DataClientLatestVersion*) deserialize from a stream
/// - int soap_write__ns1__DataClientLatestVersion(soap*, _ns1__DataClientLatestVersion*) serialize to a stream
/// - _ns1__DataClientLatestVersion* _ns1__DataClientLatestVersion::soap_dup(soap*) returns deep copy of _ns1__DataClientLatestVersion, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__DataClientLatestVersion::soap_del() deep deletes _ns1__DataClientLatestVersion data members, use only after _ns1__DataClientLatestVersion::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__DataClientLatestVersion
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":DataClientLatestVersionResponse
/// @brief "http://ws.eoddata.com/Data":DataClientLatestVersionResponse is a complexType.
///
/// class _ns1__DataClientLatestVersionResponse operations:
/// - _ns1__DataClientLatestVersionResponse* soap_new__ns1__DataClientLatestVersionResponse(soap*) allocate
/// - _ns1__DataClientLatestVersionResponse* soap_new__ns1__DataClientLatestVersionResponse(soap*, int num) allocate array
/// - _ns1__DataClientLatestVersionResponse* soap_new_req__ns1__DataClientLatestVersionResponse(soap*, ...) allocate, set required members
/// - _ns1__DataClientLatestVersionResponse* soap_new_set__ns1__DataClientLatestVersionResponse(soap*, ...) allocate, set all public members
/// - _ns1__DataClientLatestVersionResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__DataClientLatestVersionResponse(soap*, _ns1__DataClientLatestVersionResponse*) deserialize from a stream
/// - int soap_write__ns1__DataClientLatestVersionResponse(soap*, _ns1__DataClientLatestVersionResponse*) serialize to a stream
/// - _ns1__DataClientLatestVersionResponse* _ns1__DataClientLatestVersionResponse::soap_dup(soap*) returns deep copy of _ns1__DataClientLatestVersionResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__DataClientLatestVersionResponse::soap_del() deep deletes _ns1__DataClientLatestVersionResponse data members, use only after _ns1__DataClientLatestVersionResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__DataClientLatestVersionResponse
{ public:
/// Element "DataClientLatestVersionResult" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    ns1__RESPONSE*                       DataClientLatestVersionResult  0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":DataFormats
/// @brief "http://ws.eoddata.com/Data":DataFormats is a complexType.
///
/// class _ns1__DataFormats operations:
/// - _ns1__DataFormats* soap_new__ns1__DataFormats(soap*) allocate
/// - _ns1__DataFormats* soap_new__ns1__DataFormats(soap*, int num) allocate array
/// - _ns1__DataFormats* soap_new_req__ns1__DataFormats(soap*, ...) allocate, set required members
/// - _ns1__DataFormats* soap_new_set__ns1__DataFormats(soap*, ...) allocate, set all public members
/// - _ns1__DataFormats::soap_default(soap*) reset members to default
/// - int soap_read__ns1__DataFormats(soap*, _ns1__DataFormats*) deserialize from a stream
/// - int soap_write__ns1__DataFormats(soap*, _ns1__DataFormats*) serialize to a stream
/// - _ns1__DataFormats* _ns1__DataFormats::soap_dup(soap*) returns deep copy of _ns1__DataFormats, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__DataFormats::soap_del() deep deletes _ns1__DataFormats data members, use only after _ns1__DataFormats::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__DataFormats
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":DataFormatsResponse
/// @brief "http://ws.eoddata.com/Data":DataFormatsResponse is a complexType.
///
/// class _ns1__DataFormatsResponse operations:
/// - _ns1__DataFormatsResponse* soap_new__ns1__DataFormatsResponse(soap*) allocate
/// - _ns1__DataFormatsResponse* soap_new__ns1__DataFormatsResponse(soap*, int num) allocate array
/// - _ns1__DataFormatsResponse* soap_new_req__ns1__DataFormatsResponse(soap*, ...) allocate, set required members
/// - _ns1__DataFormatsResponse* soap_new_set__ns1__DataFormatsResponse(soap*, ...) allocate, set all public members
/// - _ns1__DataFormatsResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__DataFormatsResponse(soap*, _ns1__DataFormatsResponse*) deserialize from a stream
/// - int soap_write__ns1__DataFormatsResponse(soap*, _ns1__DataFormatsResponse*) serialize to a stream
/// - _ns1__DataFormatsResponse* _ns1__DataFormatsResponse::soap_dup(soap*) returns deep copy of _ns1__DataFormatsResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__DataFormatsResponse::soap_del() deep deletes _ns1__DataFormatsResponse data members, use only after _ns1__DataFormatsResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__DataFormatsResponse
{ public:
/// Element "DataFormatsResult" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    ns1__RESPONSE*                       DataFormatsResult              0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":UpdateDataFormat
/// @brief "http://ws.eoddata.com/Data":UpdateDataFormat is a complexType.
///
/// class _ns1__UpdateDataFormat operations:
/// - _ns1__UpdateDataFormat* soap_new__ns1__UpdateDataFormat(soap*) allocate
/// - _ns1__UpdateDataFormat* soap_new__ns1__UpdateDataFormat(soap*, int num) allocate array
/// - _ns1__UpdateDataFormat* soap_new_req__ns1__UpdateDataFormat(soap*, ...) allocate, set required members
/// - _ns1__UpdateDataFormat* soap_new_set__ns1__UpdateDataFormat(soap*, ...) allocate, set all public members
/// - _ns1__UpdateDataFormat::soap_default(soap*) reset members to default
/// - int soap_read__ns1__UpdateDataFormat(soap*, _ns1__UpdateDataFormat*) deserialize from a stream
/// - int soap_write__ns1__UpdateDataFormat(soap*, _ns1__UpdateDataFormat*) serialize to a stream
/// - _ns1__UpdateDataFormat* _ns1__UpdateDataFormat::soap_dup(soap*) returns deep copy of _ns1__UpdateDataFormat, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__UpdateDataFormat::soap_del() deep deletes _ns1__UpdateDataFormat data members, use only after _ns1__UpdateDataFormat::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__UpdateDataFormat
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// Element "DataFormat" of XSD type xs:string.
    std::string*                         DataFormat                     0;	///< Optional element.
/// Element "IncludeHeader" of XSD type xs:boolean.
    bool                                 IncludeHeader                  1;	///< Required element.
/// Element "IncludeSuffix" of XSD type xs:boolean.
    bool                                 IncludeSuffix                  1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":UpdateDataFormatResponse
/// @brief "http://ws.eoddata.com/Data":UpdateDataFormatResponse is a complexType.
///
/// class _ns1__UpdateDataFormatResponse operations:
/// - _ns1__UpdateDataFormatResponse* soap_new__ns1__UpdateDataFormatResponse(soap*) allocate
/// - _ns1__UpdateDataFormatResponse* soap_new__ns1__UpdateDataFormatResponse(soap*, int num) allocate array
/// - _ns1__UpdateDataFormatResponse* soap_new_req__ns1__UpdateDataFormatResponse(soap*, ...) allocate, set required members
/// - _ns1__UpdateDataFormatResponse* soap_new_set__ns1__UpdateDataFormatResponse(soap*, ...) allocate, set all public members
/// - _ns1__UpdateDataFormatResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__UpdateDataFormatResponse(soap*, _ns1__UpdateDataFormatResponse*) deserialize from a stream
/// - int soap_write__ns1__UpdateDataFormatResponse(soap*, _ns1__UpdateDataFormatResponse*) serialize to a stream
/// - _ns1__UpdateDataFormatResponse* _ns1__UpdateDataFormatResponse::soap_dup(soap*) returns deep copy of _ns1__UpdateDataFormatResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__UpdateDataFormatResponse::soap_del() deep deletes _ns1__UpdateDataFormatResponse data members, use only after _ns1__UpdateDataFormatResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__UpdateDataFormatResponse
{ public:
/// Element "UpdateDataFormatResult" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    ns1__RESPONSE*                       UpdateDataFormatResult         0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":ValidateAccess
/// @brief "http://ws.eoddata.com/Data":ValidateAccess is a complexType.
///
/// class _ns1__ValidateAccess operations:
/// - _ns1__ValidateAccess* soap_new__ns1__ValidateAccess(soap*) allocate
/// - _ns1__ValidateAccess* soap_new__ns1__ValidateAccess(soap*, int num) allocate array
/// - _ns1__ValidateAccess* soap_new_req__ns1__ValidateAccess(soap*, ...) allocate, set required members
/// - _ns1__ValidateAccess* soap_new_set__ns1__ValidateAccess(soap*, ...) allocate, set all public members
/// - _ns1__ValidateAccess::soap_default(soap*) reset members to default
/// - int soap_read__ns1__ValidateAccess(soap*, _ns1__ValidateAccess*) deserialize from a stream
/// - int soap_write__ns1__ValidateAccess(soap*, _ns1__ValidateAccess*) serialize to a stream
/// - _ns1__ValidateAccess* _ns1__ValidateAccess::soap_dup(soap*) returns deep copy of _ns1__ValidateAccess, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__ValidateAccess::soap_del() deep deletes _ns1__ValidateAccess data members, use only after _ns1__ValidateAccess::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__ValidateAccess
{ public:
/// Element "Token" of XSD type xs:string.
    std::string*                         Token                          0;	///< Optional element.
/// Element "Exchange" of XSD type xs:string.
    std::string*                         Exchange                       0;	///< Optional element.
/// Element "QuoteDate" of XSD type xs:string.
    std::string*                         QuoteDate                      0;	///< Optional element.
/// Element "Period" of XSD type xs:string.
    std::string*                         Period                         0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://ws.eoddata.com/Data":ValidateAccessResponse
/// @brief "http://ws.eoddata.com/Data":ValidateAccessResponse is a complexType.
///
/// class _ns1__ValidateAccessResponse operations:
/// - _ns1__ValidateAccessResponse* soap_new__ns1__ValidateAccessResponse(soap*) allocate
/// - _ns1__ValidateAccessResponse* soap_new__ns1__ValidateAccessResponse(soap*, int num) allocate array
/// - _ns1__ValidateAccessResponse* soap_new_req__ns1__ValidateAccessResponse(soap*, ...) allocate, set required members
/// - _ns1__ValidateAccessResponse* soap_new_set__ns1__ValidateAccessResponse(soap*, ...) allocate, set all public members
/// - _ns1__ValidateAccessResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__ValidateAccessResponse(soap*, _ns1__ValidateAccessResponse*) deserialize from a stream
/// - int soap_write__ns1__ValidateAccessResponse(soap*, _ns1__ValidateAccessResponse*) serialize to a stream
/// - _ns1__ValidateAccessResponse* _ns1__ValidateAccessResponse::soap_dup(soap*) returns deep copy of _ns1__ValidateAccessResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__ValidateAccessResponse::soap_del() deep deletes _ns1__ValidateAccessResponse data members, use only after _ns1__ValidateAccessResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__ValidateAccessResponse
{ public:
/// Element "ValidateAccessResult" of XSD type "http://ws.eoddata.com/Data":RESPONSE.
    ns1__RESPONSE*                       ValidateAccessResult           0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://ws.eoddata.com/Data                                               *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://ws.eoddata.com/Data":LOGINRESPONSE of XSD type "http://ws.eoddata.com/Data":LOGINRESPONSE.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://ws.eoddata.com/Data":RESPONSE of XSD type "http://ws.eoddata.com/Data":RESPONSE.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://ws.eoddata.com/Data                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/

// This service supports SOAP 1.2 namespaces:
#import "soap12.h"

//gsoap ns1  service name:	DataSoap 
//gsoap ns1  service type:	DataSoap 
//gsoap ns1  service port:	http://ws.eoddata.com/data.asmx 
//gsoap ns1  service namespace:	http://ws.eoddata.com/Data 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_documentation Documentation
EODData Financial Information Web Service

@section Service_bindings Service Bindings

  - @ref DataSoap

@section Service_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page DataSoap Binding "DataSoap"

@section DataSoap_service Service Documentation "DataSoap"
EODData Financial Information Web Service

@section DataSoap_operations Operations of Binding "DataSoap"

  - @ref __ns1__Login

  - @ref __ns1__Login2

  - @ref __ns1__Membership

  - @ref __ns1__ExchangeList

  - @ref __ns1__ExchangeGet

  - @ref __ns1__SymbolList

  - @ref __ns1__SymbolList2

  - @ref __ns1__QuoteGet

  - @ref __ns1__QuoteList2

  - @ref __ns1__SymbolGet

  - @ref __ns1__QuoteList

  - @ref __ns1__NewsList

  - @ref __ns1__NewsListBySymbol

  - @ref __ns1__FundamentalList

  - @ref __ns1__TechnicalList

  - @ref __ns1__QuoteListByDate

  - @ref __ns1__QuoteListByDate2

  - @ref __ns1__SymbolHistory

  - @ref __ns1__Top10Gains

  - @ref __ns1__Top10Losses

  - @ref __ns1__SymbolChart

  - @ref __ns1__ExchangeMonths

  - @ref __ns1__SplitListByExchange

  - @ref __ns1__SplitListBySymbol

  - @ref __ns1__CountryList

  - @ref __ns1__SymbolHistoryPeriod

  - @ref __ns1__SymbolHistoryPeriodByDateRange

  - @ref __ns1__QuoteListByDatePeriod

  - @ref __ns1__QuoteListByDatePeriod2

  - @ref __ns1__SymbolChangesByExchange

  - @ref __ns1__DataClientLatestVersion

  - @ref __ns1__DataFormats

  - @ref __ns1__UpdateDataFormat

  - @ref __ns1__ValidateAccess

  - @ref __ns1__Login_

  - @ref __ns1__Login2_

  - @ref __ns1__Membership_

  - @ref __ns1__ExchangeList_

  - @ref __ns1__ExchangeGet_

  - @ref __ns1__SymbolList_

  - @ref __ns1__SymbolList2_

  - @ref __ns1__QuoteGet_

  - @ref __ns1__QuoteList2_

  - @ref __ns1__SymbolGet_

  - @ref __ns1__QuoteList_

  - @ref __ns1__NewsList_

  - @ref __ns1__NewsListBySymbol_

  - @ref __ns1__FundamentalList_

  - @ref __ns1__TechnicalList_

  - @ref __ns1__QuoteListByDate_

  - @ref __ns1__QuoteListByDate2_

  - @ref __ns1__SymbolHistory_

  - @ref __ns1__Top10Gains_

  - @ref __ns1__Top10Losses_

  - @ref __ns1__SymbolChart_

  - @ref __ns1__ExchangeMonths_

  - @ref __ns1__SplitListByExchange_

  - @ref __ns1__SplitListBySymbol_

  - @ref __ns1__CountryList_

  - @ref __ns1__SymbolHistoryPeriod_

  - @ref __ns1__SymbolHistoryPeriodByDateRange_

  - @ref __ns1__QuoteListByDatePeriod_

  - @ref __ns1__QuoteListByDatePeriod2_

  - @ref __ns1__SymbolChangesByExchange_

  - @ref __ns1__DataClientLatestVersion_

  - @ref __ns1__DataFormats_

  - @ref __ns1__UpdateDataFormat_

  - @ref __ns1__ValidateAccess_

  - @ref __ns1__LoginResponse__

  - @ref __ns1__Login2Response__

  - @ref __ns1__MembershipResponse__

  - @ref __ns1__ExchangeListResponse__

  - @ref __ns1__ExchangeGetResponse__

  - @ref __ns1__SymbolListResponse__

  - @ref __ns1__SymbolList2Response__

  - @ref __ns1__QuoteGetResponse__

  - @ref __ns1__QuoteList2Response__

  - @ref __ns1__SymbolGetResponse__

  - @ref __ns1__QuoteListResponse__

  - @ref __ns1__NewsListResponse__

  - @ref __ns1__NewsListBySymbolResponse__

  - @ref __ns1__FundamentalListResponse__

  - @ref __ns1__TechnicalListResponse__

  - @ref __ns1__QuoteListByDateResponse__

  - @ref __ns1__QuoteListByDate2Response__

  - @ref __ns1__SymbolHistoryResponse__

  - @ref __ns1__Top10GainsResponse__

  - @ref __ns1__Top10LossesResponse__

  - @ref __ns1__SymbolChartResponse__

  - @ref __ns1__ExchangeMonthsResponse__

  - @ref __ns1__SplitListByExchangeResponse__

  - @ref __ns1__SplitListBySymbolResponse__

  - @ref __ns1__CountryListResponse__

  - @ref __ns1__SymbolHistoryPeriodResponse__

  - @ref __ns1__SymbolHistoryPeriodByDateRangeResponse__

  - @ref __ns1__QuoteListByDatePeriodResponse__

  - @ref __ns1__QuoteListByDatePeriod2Response__

  - @ref __ns1__SymbolChangesByExchangeResponse__

  - @ref __ns1__DataClientLatestVersionResponse__

  - @ref __ns1__DataFormatsResponse__

  - @ref __ns1__UpdateDataFormatResponse__

  - @ref __ns1__ValidateAccessResponse__

  - @ref __ns1__Login___

  - @ref __ns1__Login2___

  - @ref __ns1__Membership___

  - @ref __ns1__ExchangeList___

  - @ref __ns1__ExchangeGet___

  - @ref __ns1__SymbolList___

  - @ref __ns1__SymbolList2___

  - @ref __ns1__QuoteGet___

  - @ref __ns1__QuoteList2___

  - @ref __ns1__SymbolGet___

  - @ref __ns1__QuoteList___

  - @ref __ns1__NewsList___

  - @ref __ns1__NewsListBySymbol___

  - @ref __ns1__FundamentalList___

  - @ref __ns1__TechnicalList___

  - @ref __ns1__QuoteListByDate___

  - @ref __ns1__QuoteListByDate2___

  - @ref __ns1__SymbolHistory___

  - @ref __ns1__Top10Gains___

  - @ref __ns1__Top10Losses___

  - @ref __ns1__SymbolChart___

  - @ref __ns1__ExchangeMonths___

  - @ref __ns1__SplitListByExchange___

  - @ref __ns1__SplitListBySymbol___

  - @ref __ns1__CountryList___

  - @ref __ns1__SymbolHistoryPeriod___

  - @ref __ns1__SymbolHistoryPeriodByDateRange___

  - @ref __ns1__QuoteListByDatePeriod___

  - @ref __ns1__QuoteListByDatePeriod2___

  - @ref __ns1__SymbolChangesByExchange___

  - @ref __ns1__DataClientLatestVersion___

  - @ref __ns1__DataFormats___

  - @ref __ns1__UpdateDataFormat___

  - @ref __ns1__ValidateAccess___

@section DataSoap_ports Endpoints of Binding "DataSoap"

  - http://ws.eoddata.com/data.asmx

@note Multiple service bindings collected as one, use wsdl2h option -Nname to produce a separate service for each binding


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   DataSoap                                                                 *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__Login                                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__Login" of service binding "DataSoap".
Login to EODData Financial Information Web Service. Used for Web Authentication.<br/>INPUT:
Username, Password<br/>OUTPUT: Login Token

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/Login"

  - Addressing input action: "http://ws.eoddata.com/Data/Login"

  - Addressing output action: "http://ws.eoddata.com/Data/LoginResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__Login(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__Login*                        ns1__Login,
    // output parameters:
    _ns1__LoginResponse                &ns1__LoginResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__Login(
    struct soap *soap,
    // input parameters:
    _ns1__Login*                        ns1__Login,
    // output parameters:
    _ns1__LoginResponse                &ns1__LoginResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	Login SOAP
//gsoap ns1  service method-style:	Login document
//gsoap ns1  service method-encoding:	Login literal
//gsoap ns1  service method-input-action:	Login http://ws.eoddata.com/Data/Login
//gsoap ns1  service method-output-action:	Login http://ws.eoddata.com/Data/LoginResponse
int __ns1__Login(
    _ns1__Login*                        ns1__Login,	///< Input parameter
    _ns1__LoginResponse                &ns1__LoginResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__Login2                                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__Login2" of service binding "DataSoap".
Login to EODData Financial Information Web Service. Used for Application Authentication.<br/>INPUT:
Username, Password, Version (Application Version)<br/>OUTPUT: Login Token

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/Login2"

  - Addressing input action: "http://ws.eoddata.com/Data/Login2"

  - Addressing output action: "http://ws.eoddata.com/Data/Login2Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__Login2(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__Login2*                       ns1__Login2,
    // output parameters:
    _ns1__Login2Response               &ns1__Login2Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__Login2(
    struct soap *soap,
    // input parameters:
    _ns1__Login2*                       ns1__Login2,
    // output parameters:
    _ns1__Login2Response               &ns1__Login2Response
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	Login2 SOAP
//gsoap ns1  service method-style:	Login2 document
//gsoap ns1  service method-encoding:	Login2 literal
//gsoap ns1  service method-input-action:	Login2 http://ws.eoddata.com/Data/Login2
//gsoap ns1  service method-output-action:	Login2 http://ws.eoddata.com/Data/Login2Response
int __ns1__Login2(
    _ns1__Login2*                       ns1__Login2,	///< Input parameter
    _ns1__Login2Response               &ns1__Login2Response	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__Membership                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__Membership" of service binding "DataSoap".
Returns membership of user.<br/>INPUT: Token (Login Token)<br/>OUTPUT: Membership

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/Membership"

  - Addressing input action: "http://ws.eoddata.com/Data/Membership"

  - Addressing output action: "http://ws.eoddata.com/Data/MembershipResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__Membership(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__Membership*                   ns1__Membership,
    // output parameters:
    _ns1__MembershipResponse           &ns1__MembershipResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__Membership(
    struct soap *soap,
    // input parameters:
    _ns1__Membership*                   ns1__Membership,
    // output parameters:
    _ns1__MembershipResponse           &ns1__MembershipResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	Membership SOAP
//gsoap ns1  service method-style:	Membership document
//gsoap ns1  service method-encoding:	Membership literal
//gsoap ns1  service method-input-action:	Membership http://ws.eoddata.com/Data/Membership
//gsoap ns1  service method-output-action:	Membership http://ws.eoddata.com/Data/MembershipResponse
int __ns1__Membership(
    _ns1__Membership*                   ns1__Membership,	///< Input parameter
    _ns1__MembershipResponse           &ns1__MembershipResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__ExchangeList                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__ExchangeList" of service binding "DataSoap".
Returns a list of available exchanges.<br/>INPUT: Token (Login Token)<br/>OUTPUT:
List of exchanges

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/ExchangeList"

  - Addressing input action: "http://ws.eoddata.com/Data/ExchangeList"

  - Addressing output action: "http://ws.eoddata.com/Data/ExchangeListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__ExchangeList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__ExchangeList*                 ns1__ExchangeList,
    // output parameters:
    _ns1__ExchangeListResponse         &ns1__ExchangeListResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__ExchangeList(
    struct soap *soap,
    // input parameters:
    _ns1__ExchangeList*                 ns1__ExchangeList,
    // output parameters:
    _ns1__ExchangeListResponse         &ns1__ExchangeListResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	ExchangeList SOAP
//gsoap ns1  service method-style:	ExchangeList document
//gsoap ns1  service method-encoding:	ExchangeList literal
//gsoap ns1  service method-input-action:	ExchangeList http://ws.eoddata.com/Data/ExchangeList
//gsoap ns1  service method-output-action:	ExchangeList http://ws.eoddata.com/Data/ExchangeListResponse
int __ns1__ExchangeList(
    _ns1__ExchangeList*                 ns1__ExchangeList,	///< Input parameter
    _ns1__ExchangeListResponse         &ns1__ExchangeListResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__ExchangeGet                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__ExchangeGet" of service binding "DataSoap".
Returns detailed information of a specific exchange.<br/>INPUT: Token (Login Token),
Exchange (eg: NASDAQ)<br/>OUTPUT: Exchange

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/ExchangeGet"

  - Addressing input action: "http://ws.eoddata.com/Data/ExchangeGet"

  - Addressing output action: "http://ws.eoddata.com/Data/ExchangeGetResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__ExchangeGet(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__ExchangeGet*                  ns1__ExchangeGet,
    // output parameters:
    _ns1__ExchangeGetResponse          &ns1__ExchangeGetResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__ExchangeGet(
    struct soap *soap,
    // input parameters:
    _ns1__ExchangeGet*                  ns1__ExchangeGet,
    // output parameters:
    _ns1__ExchangeGetResponse          &ns1__ExchangeGetResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	ExchangeGet SOAP
//gsoap ns1  service method-style:	ExchangeGet document
//gsoap ns1  service method-encoding:	ExchangeGet literal
//gsoap ns1  service method-input-action:	ExchangeGet http://ws.eoddata.com/Data/ExchangeGet
//gsoap ns1  service method-output-action:	ExchangeGet http://ws.eoddata.com/Data/ExchangeGetResponse
int __ns1__ExchangeGet(
    _ns1__ExchangeGet*                  ns1__ExchangeGet,	///< Input parameter
    _ns1__ExchangeGetResponse          &ns1__ExchangeGetResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SymbolList                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SymbolList" of service binding "DataSoap".
Returns a list of symbols of a specified exchange. <br/>INPUT: Token (Login Token),
Exchange (eg: NASDAQ)<br/>OUTPUT: List of symbols

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/SymbolList"

  - Addressing input action: "http://ws.eoddata.com/Data/SymbolList"

  - Addressing output action: "http://ws.eoddata.com/Data/SymbolListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SymbolList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SymbolList*                   ns1__SymbolList,
    // output parameters:
    _ns1__SymbolListResponse           &ns1__SymbolListResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SymbolList(
    struct soap *soap,
    // input parameters:
    _ns1__SymbolList*                   ns1__SymbolList,
    // output parameters:
    _ns1__SymbolListResponse           &ns1__SymbolListResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SymbolList SOAP
//gsoap ns1  service method-style:	SymbolList document
//gsoap ns1  service method-encoding:	SymbolList literal
//gsoap ns1  service method-input-action:	SymbolList http://ws.eoddata.com/Data/SymbolList
//gsoap ns1  service method-output-action:	SymbolList http://ws.eoddata.com/Data/SymbolListResponse
int __ns1__SymbolList(
    _ns1__SymbolList*                   ns1__SymbolList,	///< Input parameter
    _ns1__SymbolListResponse           &ns1__SymbolListResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SymbolList2                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SymbolList2" of service binding "DataSoap".
Returns a list of symbols of a specified exchange (compact format).<br/>INPUT: Token
(Login Token), Exchange (eg: NASDAQ)<br/>OUTPUT: List of symbols

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/SymbolList2"

  - Addressing input action: "http://ws.eoddata.com/Data/SymbolList2"

  - Addressing output action: "http://ws.eoddata.com/Data/SymbolList2Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SymbolList2(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SymbolList2*                  ns1__SymbolList2,
    // output parameters:
    _ns1__SymbolList2Response          &ns1__SymbolList2Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SymbolList2(
    struct soap *soap,
    // input parameters:
    _ns1__SymbolList2*                  ns1__SymbolList2,
    // output parameters:
    _ns1__SymbolList2Response          &ns1__SymbolList2Response
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SymbolList2 SOAP
//gsoap ns1  service method-style:	SymbolList2 document
//gsoap ns1  service method-encoding:	SymbolList2 literal
//gsoap ns1  service method-input-action:	SymbolList2 http://ws.eoddata.com/Data/SymbolList2
//gsoap ns1  service method-output-action:	SymbolList2 http://ws.eoddata.com/Data/SymbolList2Response
int __ns1__SymbolList2(
    _ns1__SymbolList2*                  ns1__SymbolList2,	///< Input parameter
    _ns1__SymbolList2Response          &ns1__SymbolList2Response	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__QuoteGet                                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__QuoteGet" of service binding "DataSoap".
Returns an end of day quote for a specific symbol.<br/>INPUT: Token (Login Token),
Exchange (eg: NASDAQ), Symbol (eg:MSFT)<br/>OUTPUT: End of day quote

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/QuoteGet"

  - Addressing input action: "http://ws.eoddata.com/Data/QuoteGet"

  - Addressing output action: "http://ws.eoddata.com/Data/QuoteGetResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__QuoteGet(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__QuoteGet*                     ns1__QuoteGet,
    // output parameters:
    _ns1__QuoteGetResponse             &ns1__QuoteGetResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__QuoteGet(
    struct soap *soap,
    // input parameters:
    _ns1__QuoteGet*                     ns1__QuoteGet,
    // output parameters:
    _ns1__QuoteGetResponse             &ns1__QuoteGetResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	QuoteGet SOAP
//gsoap ns1  service method-style:	QuoteGet document
//gsoap ns1  service method-encoding:	QuoteGet literal
//gsoap ns1  service method-input-action:	QuoteGet http://ws.eoddata.com/Data/QuoteGet
//gsoap ns1  service method-output-action:	QuoteGet http://ws.eoddata.com/Data/QuoteGetResponse
int __ns1__QuoteGet(
    _ns1__QuoteGet*                     ns1__QuoteGet,	///< Input parameter
    _ns1__QuoteGetResponse             &ns1__QuoteGetResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__QuoteList2                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__QuoteList2" of service binding "DataSoap".
Returns latest end of day quotes for a list of symbols of a specific exchange (compact
format).<br/>INPUT: Token (Login Token), Exchange (eg: NASDAQ), Symbols (eg:MSFT,INTC)<br/>OUTPUT:
List of end of day quotes

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/QuoteList2"

  - Addressing input action: "http://ws.eoddata.com/Data/QuoteList2"

  - Addressing output action: "http://ws.eoddata.com/Data/QuoteList2Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__QuoteList2(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__QuoteList2*                   ns1__QuoteList2,
    // output parameters:
    _ns1__QuoteList2Response           &ns1__QuoteList2Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__QuoteList2(
    struct soap *soap,
    // input parameters:
    _ns1__QuoteList2*                   ns1__QuoteList2,
    // output parameters:
    _ns1__QuoteList2Response           &ns1__QuoteList2Response
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	QuoteList2 SOAP
//gsoap ns1  service method-style:	QuoteList2 document
//gsoap ns1  service method-encoding:	QuoteList2 literal
//gsoap ns1  service method-input-action:	QuoteList2 http://ws.eoddata.com/Data/QuoteList2
//gsoap ns1  service method-output-action:	QuoteList2 http://ws.eoddata.com/Data/QuoteList2Response
int __ns1__QuoteList2(
    _ns1__QuoteList2*                   ns1__QuoteList2,	///< Input parameter
    _ns1__QuoteList2Response           &ns1__QuoteList2Response	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SymbolGet                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SymbolGet" of service binding "DataSoap".
Returns detailed information of a specific symbol.<br/>INPUT: Token (Login Token),
Exchange (eg: NASDAQ), Symbol (eg:MSFT)<br/>OUTPUT: Symbol

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/SymbolGet"

  - Addressing input action: "http://ws.eoddata.com/Data/SymbolGet"

  - Addressing output action: "http://ws.eoddata.com/Data/SymbolGetResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SymbolGet(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SymbolGet*                    ns1__SymbolGet,
    // output parameters:
    _ns1__SymbolGetResponse            &ns1__SymbolGetResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SymbolGet(
    struct soap *soap,
    // input parameters:
    _ns1__SymbolGet*                    ns1__SymbolGet,
    // output parameters:
    _ns1__SymbolGetResponse            &ns1__SymbolGetResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SymbolGet SOAP
//gsoap ns1  service method-style:	SymbolGet document
//gsoap ns1  service method-encoding:	SymbolGet literal
//gsoap ns1  service method-input-action:	SymbolGet http://ws.eoddata.com/Data/SymbolGet
//gsoap ns1  service method-output-action:	SymbolGet http://ws.eoddata.com/Data/SymbolGetResponse
int __ns1__SymbolGet(
    _ns1__SymbolGet*                    ns1__SymbolGet,	///< Input parameter
    _ns1__SymbolGetResponse            &ns1__SymbolGetResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__QuoteList                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__QuoteList" of service binding "DataSoap".
Returns a complete list of end of day quotes for an entire exchange.<br/>INPUT:
Token (Login Token), Exchange (eg: NASDAQ)<br/>OUTPUT: List of end of day quotes

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/QuoteList"

  - Addressing input action: "http://ws.eoddata.com/Data/QuoteList"

  - Addressing output action: "http://ws.eoddata.com/Data/QuoteListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__QuoteList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__QuoteList*                    ns1__QuoteList,
    // output parameters:
    _ns1__QuoteListResponse            &ns1__QuoteListResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__QuoteList(
    struct soap *soap,
    // input parameters:
    _ns1__QuoteList*                    ns1__QuoteList,
    // output parameters:
    _ns1__QuoteListResponse            &ns1__QuoteListResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	QuoteList SOAP
//gsoap ns1  service method-style:	QuoteList document
//gsoap ns1  service method-encoding:	QuoteList literal
//gsoap ns1  service method-input-action:	QuoteList http://ws.eoddata.com/Data/QuoteList
//gsoap ns1  service method-output-action:	QuoteList http://ws.eoddata.com/Data/QuoteListResponse
int __ns1__QuoteList(
    _ns1__QuoteList*                    ns1__QuoteList,	///< Input parameter
    _ns1__QuoteListResponse            &ns1__QuoteListResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__NewsList                                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__NewsList" of service binding "DataSoap".
Returns a list of News articles for an entire exchange.<br/>INPUT: Token (Login
Token), Exchange (eg: NASDAQ)<br/>OUTPUT: List of News articles

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/NewsList"

  - Addressing input action: "http://ws.eoddata.com/Data/NewsList"

  - Addressing output action: "http://ws.eoddata.com/Data/NewsListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__NewsList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__NewsList*                     ns1__NewsList,
    // output parameters:
    _ns1__NewsListResponse             &ns1__NewsListResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__NewsList(
    struct soap *soap,
    // input parameters:
    _ns1__NewsList*                     ns1__NewsList,
    // output parameters:
    _ns1__NewsListResponse             &ns1__NewsListResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	NewsList SOAP
//gsoap ns1  service method-style:	NewsList document
//gsoap ns1  service method-encoding:	NewsList literal
//gsoap ns1  service method-input-action:	NewsList http://ws.eoddata.com/Data/NewsList
//gsoap ns1  service method-output-action:	NewsList http://ws.eoddata.com/Data/NewsListResponse
int __ns1__NewsList(
    _ns1__NewsList*                     ns1__NewsList,	///< Input parameter
    _ns1__NewsListResponse             &ns1__NewsListResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__NewsListBySymbol                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__NewsListBySymbol" of service binding "DataSoap".
Returns a list of News articles for a given Exchange and Symbol.<br/>INPUT: Token
(Login Token), Exchange (eg: NASDAQ), Symbol (eg: AAPL)<br/>OUTPUT: List of News
articles

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/NewsListBySymbol"

  - Addressing input action: "http://ws.eoddata.com/Data/NewsListBySymbol"

  - Addressing output action: "http://ws.eoddata.com/Data/NewsListBySymbolResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__NewsListBySymbol(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__NewsListBySymbol*             ns1__NewsListBySymbol,
    // output parameters:
    _ns1__NewsListBySymbolResponse     &ns1__NewsListBySymbolResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__NewsListBySymbol(
    struct soap *soap,
    // input parameters:
    _ns1__NewsListBySymbol*             ns1__NewsListBySymbol,
    // output parameters:
    _ns1__NewsListBySymbolResponse     &ns1__NewsListBySymbolResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	NewsListBySymbol SOAP
//gsoap ns1  service method-style:	NewsListBySymbol document
//gsoap ns1  service method-encoding:	NewsListBySymbol literal
//gsoap ns1  service method-input-action:	NewsListBySymbol http://ws.eoddata.com/Data/NewsListBySymbol
//gsoap ns1  service method-output-action:	NewsListBySymbol http://ws.eoddata.com/Data/NewsListBySymbolResponse
int __ns1__NewsListBySymbol(
    _ns1__NewsListBySymbol*             ns1__NewsListBySymbol,	///< Input parameter
    _ns1__NewsListBySymbolResponse     &ns1__NewsListBySymbolResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__FundamentalList                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__FundamentalList" of service binding "DataSoap".
Returns a complete list of fundamental data for an entire exchange.<br/>INPUT: Token
(Login Token), Exchange (eg: NASDAQ)<br/>OUTPUT: List of fundamentals

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/FundamentalList"

  - Addressing input action: "http://ws.eoddata.com/Data/FundamentalList"

  - Addressing output action: "http://ws.eoddata.com/Data/FundamentalListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__FundamentalList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__FundamentalList*              ns1__FundamentalList,
    // output parameters:
    _ns1__FundamentalListResponse      &ns1__FundamentalListResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__FundamentalList(
    struct soap *soap,
    // input parameters:
    _ns1__FundamentalList*              ns1__FundamentalList,
    // output parameters:
    _ns1__FundamentalListResponse      &ns1__FundamentalListResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	FundamentalList SOAP
//gsoap ns1  service method-style:	FundamentalList document
//gsoap ns1  service method-encoding:	FundamentalList literal
//gsoap ns1  service method-input-action:	FundamentalList http://ws.eoddata.com/Data/FundamentalList
//gsoap ns1  service method-output-action:	FundamentalList http://ws.eoddata.com/Data/FundamentalListResponse
int __ns1__FundamentalList(
    _ns1__FundamentalList*              ns1__FundamentalList,	///< Input parameter
    _ns1__FundamentalListResponse      &ns1__FundamentalListResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__TechnicalList                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__TechnicalList" of service binding "DataSoap".
Returns a complete list of technical data for an entire exchange. <br/>INPUT: Token
(Login Token), Exchange (eg: NASDAQ)<br/>OUTPUT: List of quotes

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/TechnicalList"

  - Addressing input action: "http://ws.eoddata.com/Data/TechnicalList"

  - Addressing output action: "http://ws.eoddata.com/Data/TechnicalListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__TechnicalList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__TechnicalList*                ns1__TechnicalList,
    // output parameters:
    _ns1__TechnicalListResponse        &ns1__TechnicalListResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__TechnicalList(
    struct soap *soap,
    // input parameters:
    _ns1__TechnicalList*                ns1__TechnicalList,
    // output parameters:
    _ns1__TechnicalListResponse        &ns1__TechnicalListResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	TechnicalList SOAP
//gsoap ns1  service method-style:	TechnicalList document
//gsoap ns1  service method-encoding:	TechnicalList literal
//gsoap ns1  service method-input-action:	TechnicalList http://ws.eoddata.com/Data/TechnicalList
//gsoap ns1  service method-output-action:	TechnicalList http://ws.eoddata.com/Data/TechnicalListResponse
int __ns1__TechnicalList(
    _ns1__TechnicalList*                ns1__TechnicalList,	///< Input parameter
    _ns1__TechnicalListResponse        &ns1__TechnicalListResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__QuoteListByDate                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__QuoteListByDate" of service binding "DataSoap".
Returns a complete list of end of day quotes for an entire exchange and a specific
date.<br/>INPUT: Token (Login Token), Exchange (eg: NASDAQ), QuoteDate (format:yyyyMMdd
eg:20080225)<br/>OUTPUT: List of end of day quotes

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/QuoteListByDate"

  - Addressing input action: "http://ws.eoddata.com/Data/QuoteListByDate"

  - Addressing output action: "http://ws.eoddata.com/Data/QuoteListByDateResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__QuoteListByDate(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__QuoteListByDate*              ns1__QuoteListByDate,
    // output parameters:
    _ns1__QuoteListByDateResponse      &ns1__QuoteListByDateResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__QuoteListByDate(
    struct soap *soap,
    // input parameters:
    _ns1__QuoteListByDate*              ns1__QuoteListByDate,
    // output parameters:
    _ns1__QuoteListByDateResponse      &ns1__QuoteListByDateResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	QuoteListByDate SOAP
//gsoap ns1  service method-style:	QuoteListByDate document
//gsoap ns1  service method-encoding:	QuoteListByDate literal
//gsoap ns1  service method-input-action:	QuoteListByDate http://ws.eoddata.com/Data/QuoteListByDate
//gsoap ns1  service method-output-action:	QuoteListByDate http://ws.eoddata.com/Data/QuoteListByDateResponse
int __ns1__QuoteListByDate(
    _ns1__QuoteListByDate*              ns1__QuoteListByDate,	///< Input parameter
    _ns1__QuoteListByDateResponse      &ns1__QuoteListByDateResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__QuoteListByDate2                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__QuoteListByDate2" of service binding "DataSoap".
Returns a complete list of end of day quotes for an entire exchange and a specific
date (compact format).<br/>INPUT: Token (Login Token), Exchange (eg: NASDAQ), QuoteDate
(format:yyyyMMdd eg:20080225)<br/>OUTPUT: List of end of day quotes

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/QuoteListByDate2"

  - Addressing input action: "http://ws.eoddata.com/Data/QuoteListByDate2"

  - Addressing output action: "http://ws.eoddata.com/Data/QuoteListByDate2Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__QuoteListByDate2(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__QuoteListByDate2*             ns1__QuoteListByDate2,
    // output parameters:
    _ns1__QuoteListByDate2Response     &ns1__QuoteListByDate2Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__QuoteListByDate2(
    struct soap *soap,
    // input parameters:
    _ns1__QuoteListByDate2*             ns1__QuoteListByDate2,
    // output parameters:
    _ns1__QuoteListByDate2Response     &ns1__QuoteListByDate2Response
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	QuoteListByDate2 SOAP
//gsoap ns1  service method-style:	QuoteListByDate2 document
//gsoap ns1  service method-encoding:	QuoteListByDate2 literal
//gsoap ns1  service method-input-action:	QuoteListByDate2 http://ws.eoddata.com/Data/QuoteListByDate2
//gsoap ns1  service method-output-action:	QuoteListByDate2 http://ws.eoddata.com/Data/QuoteListByDate2Response
int __ns1__QuoteListByDate2(
    _ns1__QuoteListByDate2*             ns1__QuoteListByDate2,	///< Input parameter
    _ns1__QuoteListByDate2Response     &ns1__QuoteListByDate2Response	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SymbolHistory                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SymbolHistory" of service binding "DataSoap".
Returns a list of historical end of day data of a specified symbol and specified
start date up to today's date.<br/>INPUT: Token (Login Token), Exchange (eg: NASDAQ),
Symbol (eg:MSFT), StartDate (format:yyyyMMdd eg:20080225)<br/>OUTPUT: List of historical
end of day quotes

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/SymbolHistory"

  - Addressing input action: "http://ws.eoddata.com/Data/SymbolHistory"

  - Addressing output action: "http://ws.eoddata.com/Data/SymbolHistoryResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SymbolHistory(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SymbolHistory*                ns1__SymbolHistory,
    // output parameters:
    _ns1__SymbolHistoryResponse        &ns1__SymbolHistoryResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SymbolHistory(
    struct soap *soap,
    // input parameters:
    _ns1__SymbolHistory*                ns1__SymbolHistory,
    // output parameters:
    _ns1__SymbolHistoryResponse        &ns1__SymbolHistoryResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SymbolHistory SOAP
//gsoap ns1  service method-style:	SymbolHistory document
//gsoap ns1  service method-encoding:	SymbolHistory literal
//gsoap ns1  service method-input-action:	SymbolHistory http://ws.eoddata.com/Data/SymbolHistory
//gsoap ns1  service method-output-action:	SymbolHistory http://ws.eoddata.com/Data/SymbolHistoryResponse
int __ns1__SymbolHistory(
    _ns1__SymbolHistory*                ns1__SymbolHistory,	///< Input parameter
    _ns1__SymbolHistoryResponse        &ns1__SymbolHistoryResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__Top10Gains                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__Top10Gains" of service binding "DataSoap".
Returns a list of the Top 10 Gains of a specified exchange. <br/>INPUT: Token (Login
Token), Exchange (eg: NASDAQ)<br/>OUTPUT: List of quotes

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/Top10Gains"

  - Addressing input action: "http://ws.eoddata.com/Data/Top10Gains"

  - Addressing output action: "http://ws.eoddata.com/Data/Top10GainsResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__Top10Gains(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__Top10Gains*                   ns1__Top10Gains,
    // output parameters:
    _ns1__Top10GainsResponse           &ns1__Top10GainsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__Top10Gains(
    struct soap *soap,
    // input parameters:
    _ns1__Top10Gains*                   ns1__Top10Gains,
    // output parameters:
    _ns1__Top10GainsResponse           &ns1__Top10GainsResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	Top10Gains SOAP
//gsoap ns1  service method-style:	Top10Gains document
//gsoap ns1  service method-encoding:	Top10Gains literal
//gsoap ns1  service method-input-action:	Top10Gains http://ws.eoddata.com/Data/Top10Gains
//gsoap ns1  service method-output-action:	Top10Gains http://ws.eoddata.com/Data/Top10GainsResponse
int __ns1__Top10Gains(
    _ns1__Top10Gains*                   ns1__Top10Gains,	///< Input parameter
    _ns1__Top10GainsResponse           &ns1__Top10GainsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__Top10Losses                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__Top10Losses" of service binding "DataSoap".
Returns a list of the Top 10 Losses of a specified exchange. <br/>INPUT: Token (Login
Token), Exchange (eg: NASDAQ)<br/>OUTPUT: List of quotes

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/Top10Losses"

  - Addressing input action: "http://ws.eoddata.com/Data/Top10Losses"

  - Addressing output action: "http://ws.eoddata.com/Data/Top10LossesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__Top10Losses(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__Top10Losses*                  ns1__Top10Losses,
    // output parameters:
    _ns1__Top10LossesResponse          &ns1__Top10LossesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__Top10Losses(
    struct soap *soap,
    // input parameters:
    _ns1__Top10Losses*                  ns1__Top10Losses,
    // output parameters:
    _ns1__Top10LossesResponse          &ns1__Top10LossesResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	Top10Losses SOAP
//gsoap ns1  service method-style:	Top10Losses document
//gsoap ns1  service method-encoding:	Top10Losses literal
//gsoap ns1  service method-input-action:	Top10Losses http://ws.eoddata.com/Data/Top10Losses
//gsoap ns1  service method-output-action:	Top10Losses http://ws.eoddata.com/Data/Top10LossesResponse
int __ns1__Top10Losses(
    _ns1__Top10Losses*                  ns1__Top10Losses,	///< Input parameter
    _ns1__Top10LossesResponse          &ns1__Top10LossesResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SymbolChart                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SymbolChart" of service binding "DataSoap".
Returns a URL to a chart image of a specific symbol.<br/>INPUT: Token (Login Token),
Exchange (eg: NASDAQ), Symbol (eg:MSFT)<br/>OUTPUT: Chart URL

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/SymbolChart"

  - Addressing input action: "http://ws.eoddata.com/Data/SymbolChart"

  - Addressing output action: "http://ws.eoddata.com/Data/SymbolChartResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SymbolChart(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SymbolChart*                  ns1__SymbolChart,
    // output parameters:
    _ns1__SymbolChartResponse          &ns1__SymbolChartResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SymbolChart(
    struct soap *soap,
    // input parameters:
    _ns1__SymbolChart*                  ns1__SymbolChart,
    // output parameters:
    _ns1__SymbolChartResponse          &ns1__SymbolChartResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SymbolChart SOAP
//gsoap ns1  service method-style:	SymbolChart document
//gsoap ns1  service method-encoding:	SymbolChart literal
//gsoap ns1  service method-input-action:	SymbolChart http://ws.eoddata.com/Data/SymbolChart
//gsoap ns1  service method-output-action:	SymbolChart http://ws.eoddata.com/Data/SymbolChartResponse
int __ns1__SymbolChart(
    _ns1__SymbolChart*                  ns1__SymbolChart,	///< Input parameter
    _ns1__SymbolChartResponse          &ns1__SymbolChartResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__ExchangeMonths                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__ExchangeMonths" of service binding "DataSoap".
Returns the number of Months history a user is allowed to download.<br/>INPUT: Token
(Login Token), Exchange (eg: NASDAQ)<br/>OUTPUT: Number of Months

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/ExchangeMonths"

  - Addressing input action: "http://ws.eoddata.com/Data/ExchangeMonths"

  - Addressing output action: "http://ws.eoddata.com/Data/ExchangeMonthsResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__ExchangeMonths(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__ExchangeMonths*               ns1__ExchangeMonths,
    // output parameters:
    _ns1__ExchangeMonthsResponse       &ns1__ExchangeMonthsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__ExchangeMonths(
    struct soap *soap,
    // input parameters:
    _ns1__ExchangeMonths*               ns1__ExchangeMonths,
    // output parameters:
    _ns1__ExchangeMonthsResponse       &ns1__ExchangeMonthsResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	ExchangeMonths SOAP
//gsoap ns1  service method-style:	ExchangeMonths document
//gsoap ns1  service method-encoding:	ExchangeMonths literal
//gsoap ns1  service method-input-action:	ExchangeMonths http://ws.eoddata.com/Data/ExchangeMonths
//gsoap ns1  service method-output-action:	ExchangeMonths http://ws.eoddata.com/Data/ExchangeMonthsResponse
int __ns1__ExchangeMonths(
    _ns1__ExchangeMonths*               ns1__ExchangeMonths,	///< Input parameter
    _ns1__ExchangeMonthsResponse       &ns1__ExchangeMonthsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SplitListByExchange                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SplitListByExchange" of service binding "DataSoap".
Returns a list of Splits of a specific exchange.<br/>INPUT: Token (Login Token),
Exchange (eg: NASDAQ)<br/>OUTPUT: List of splits

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/SplitListByExchange"

  - Addressing input action: "http://ws.eoddata.com/Data/SplitListByExchange"

  - Addressing output action: "http://ws.eoddata.com/Data/SplitListByExchangeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SplitListByExchange(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SplitListByExchange*          ns1__SplitListByExchange,
    // output parameters:
    _ns1__SplitListByExchangeResponse  &ns1__SplitListByExchangeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SplitListByExchange(
    struct soap *soap,
    // input parameters:
    _ns1__SplitListByExchange*          ns1__SplitListByExchange,
    // output parameters:
    _ns1__SplitListByExchangeResponse  &ns1__SplitListByExchangeResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SplitListByExchange SOAP
//gsoap ns1  service method-style:	SplitListByExchange document
//gsoap ns1  service method-encoding:	SplitListByExchange literal
//gsoap ns1  service method-input-action:	SplitListByExchange http://ws.eoddata.com/Data/SplitListByExchange
//gsoap ns1  service method-output-action:	SplitListByExchange http://ws.eoddata.com/Data/SplitListByExchangeResponse
int __ns1__SplitListByExchange(
    _ns1__SplitListByExchange*          ns1__SplitListByExchange,	///< Input parameter
    _ns1__SplitListByExchangeResponse  &ns1__SplitListByExchangeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SplitListBySymbol                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SplitListBySymbol" of service binding "DataSoap".
Returns a list of Splits of a specific symbol.<br/>INPUT: Token (Login Token), Exchange
(eg: NASDAQ), Symbol (eg:MSFT)<br/>OUTPUT: List of splits

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/SplitListBySymbol"

  - Addressing input action: "http://ws.eoddata.com/Data/SplitListBySymbol"

  - Addressing output action: "http://ws.eoddata.com/Data/SplitListBySymbolResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SplitListBySymbol(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SplitListBySymbol*            ns1__SplitListBySymbol,
    // output parameters:
    _ns1__SplitListBySymbolResponse    &ns1__SplitListBySymbolResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SplitListBySymbol(
    struct soap *soap,
    // input parameters:
    _ns1__SplitListBySymbol*            ns1__SplitListBySymbol,
    // output parameters:
    _ns1__SplitListBySymbolResponse    &ns1__SplitListBySymbolResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SplitListBySymbol SOAP
//gsoap ns1  service method-style:	SplitListBySymbol document
//gsoap ns1  service method-encoding:	SplitListBySymbol literal
//gsoap ns1  service method-input-action:	SplitListBySymbol http://ws.eoddata.com/Data/SplitListBySymbol
//gsoap ns1  service method-output-action:	SplitListBySymbol http://ws.eoddata.com/Data/SplitListBySymbolResponse
int __ns1__SplitListBySymbol(
    _ns1__SplitListBySymbol*            ns1__SplitListBySymbol,	///< Input parameter
    _ns1__SplitListBySymbolResponse    &ns1__SplitListBySymbolResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__CountryList                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__CountryList" of service binding "DataSoap".
Returns a list of available countries.<br/>INPUT: Token (Login Token)<br/>OUTPUT:
List of countries

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/CountryList"

  - Addressing input action: "http://ws.eoddata.com/Data/CountryList"

  - Addressing output action: "http://ws.eoddata.com/Data/CountryListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__CountryList(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__CountryList*                  ns1__CountryList,
    // output parameters:
    _ns1__CountryListResponse          &ns1__CountryListResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__CountryList(
    struct soap *soap,
    // input parameters:
    _ns1__CountryList*                  ns1__CountryList,
    // output parameters:
    _ns1__CountryListResponse          &ns1__CountryListResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	CountryList SOAP
//gsoap ns1  service method-style:	CountryList document
//gsoap ns1  service method-encoding:	CountryList literal
//gsoap ns1  service method-input-action:	CountryList http://ws.eoddata.com/Data/CountryList
//gsoap ns1  service method-output-action:	CountryList http://ws.eoddata.com/Data/CountryListResponse
int __ns1__CountryList(
    _ns1__CountryList*                  ns1__CountryList,	///< Input parameter
    _ns1__CountryListResponse          &ns1__CountryListResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SymbolHistoryPeriod                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SymbolHistoryPeriod" of service binding "DataSoap".
Returns a list of historical data of a specified symbol, specified date and specified
period.<br/>INPUT: Token (Login Token), Exchange (eg: NASDAQ), Symbol (eg:MSFT),
Date (format:yyyyMMdd eg:20080225), Period (1, 5, 10, 15, 30, h, d, w, m)<br/>OUTPUT:
List of historical quotes

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/SymbolHistoryPeriod"

  - Addressing input action: "http://ws.eoddata.com/Data/SymbolHistoryPeriod"

  - Addressing output action: "http://ws.eoddata.com/Data/SymbolHistoryPeriodResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SymbolHistoryPeriod(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SymbolHistoryPeriod*          ns1__SymbolHistoryPeriod,
    // output parameters:
    _ns1__SymbolHistoryPeriodResponse  &ns1__SymbolHistoryPeriodResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SymbolHistoryPeriod(
    struct soap *soap,
    // input parameters:
    _ns1__SymbolHistoryPeriod*          ns1__SymbolHistoryPeriod,
    // output parameters:
    _ns1__SymbolHistoryPeriodResponse  &ns1__SymbolHistoryPeriodResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SymbolHistoryPeriod SOAP
//gsoap ns1  service method-style:	SymbolHistoryPeriod document
//gsoap ns1  service method-encoding:	SymbolHistoryPeriod literal
//gsoap ns1  service method-input-action:	SymbolHistoryPeriod http://ws.eoddata.com/Data/SymbolHistoryPeriod
//gsoap ns1  service method-output-action:	SymbolHistoryPeriod http://ws.eoddata.com/Data/SymbolHistoryPeriodResponse
int __ns1__SymbolHistoryPeriod(
    _ns1__SymbolHistoryPeriod*          ns1__SymbolHistoryPeriod,	///< Input parameter
    _ns1__SymbolHistoryPeriodResponse  &ns1__SymbolHistoryPeriodResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SymbolHistoryPeriodByDateRange                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SymbolHistoryPeriodByDateRange" of service binding "DataSoap".
Returns a list of historical data of a specified symbol, specified date range and
specified period.<br/>INPUT: Token (Login Token), Exchange (eg: NASDAQ), Symbol
(eg:MSFT), StartDate (format:yyyyMMdd eg:20080225), EndDate (format:yyyyMMdd eg:20080225),
Period (1, 5, 10, 15, 30, h, d, w, m)<br/>OUTPUT: List of historical quotes

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/SymbolHistoryPeriodByDateRange"

  - Addressing input action: "http://ws.eoddata.com/Data/SymbolHistoryPeriodByDateRange"

  - Addressing output action: "http://ws.eoddata.com/Data/SymbolHistoryPeriodByDateRangeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SymbolHistoryPeriodByDateRange(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SymbolHistoryPeriodByDateRange* ns1__SymbolHistoryPeriodByDateRange,
    // output parameters:
    _ns1__SymbolHistoryPeriodByDateRangeResponse&ns1__SymbolHistoryPeriodByDateRangeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SymbolHistoryPeriodByDateRange(
    struct soap *soap,
    // input parameters:
    _ns1__SymbolHistoryPeriodByDateRange* ns1__SymbolHistoryPeriodByDateRange,
    // output parameters:
    _ns1__SymbolHistoryPeriodByDateRangeResponse&ns1__SymbolHistoryPeriodByDateRangeResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SymbolHistoryPeriodByDateRange SOAP
//gsoap ns1  service method-style:	SymbolHistoryPeriodByDateRange document
//gsoap ns1  service method-encoding:	SymbolHistoryPeriodByDateRange literal
//gsoap ns1  service method-input-action:	SymbolHistoryPeriodByDateRange http://ws.eoddata.com/Data/SymbolHistoryPeriodByDateRange
//gsoap ns1  service method-output-action:	SymbolHistoryPeriodByDateRange http://ws.eoddata.com/Data/SymbolHistoryPeriodByDateRangeResponse
int __ns1__SymbolHistoryPeriodByDateRange(
    _ns1__SymbolHistoryPeriodByDateRange* ns1__SymbolHistoryPeriodByDateRange,	///< Input parameter
    _ns1__SymbolHistoryPeriodByDateRangeResponse&ns1__SymbolHistoryPeriodByDateRangeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__QuoteListByDatePeriod                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__QuoteListByDatePeriod" of service binding "DataSoap".
Returns a complete list of quotes for an entire exchange, specific date, and specific
period.<br/>INPUT: Token (Login Token), Exchange (eg: NASDAQ), QuoteDate (format:yyyyMMdd
eg:20080225), Period (1, 5, 10, 15, 30, h, d, w, m)<br/>OUTPUT: List of quotes

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/QuoteListByDatePeriod"

  - Addressing input action: "http://ws.eoddata.com/Data/QuoteListByDatePeriod"

  - Addressing output action: "http://ws.eoddata.com/Data/QuoteListByDatePeriodResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__QuoteListByDatePeriod(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__QuoteListByDatePeriod*        ns1__QuoteListByDatePeriod,
    // output parameters:
    _ns1__QuoteListByDatePeriodResponse&ns1__QuoteListByDatePeriodResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__QuoteListByDatePeriod(
    struct soap *soap,
    // input parameters:
    _ns1__QuoteListByDatePeriod*        ns1__QuoteListByDatePeriod,
    // output parameters:
    _ns1__QuoteListByDatePeriodResponse&ns1__QuoteListByDatePeriodResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	QuoteListByDatePeriod SOAP
//gsoap ns1  service method-style:	QuoteListByDatePeriod document
//gsoap ns1  service method-encoding:	QuoteListByDatePeriod literal
//gsoap ns1  service method-input-action:	QuoteListByDatePeriod http://ws.eoddata.com/Data/QuoteListByDatePeriod
//gsoap ns1  service method-output-action:	QuoteListByDatePeriod http://ws.eoddata.com/Data/QuoteListByDatePeriodResponse
int __ns1__QuoteListByDatePeriod(
    _ns1__QuoteListByDatePeriod*        ns1__QuoteListByDatePeriod,	///< Input parameter
    _ns1__QuoteListByDatePeriodResponse&ns1__QuoteListByDatePeriodResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__QuoteListByDatePeriod2                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__QuoteListByDatePeriod2" of service binding "DataSoap".
Returns a complete list of quotes for an entire exchange, specific date, and specific
period (compact format).<br/>INPUT: Token (Login Token), Exchange (eg: NASDAQ),
QuoteDate (format:yyyyMMdd eg:20080225), Period (1, 5, 10, 15, 30, h, d, w, m)<br/>OUTPUT:
List of quotes

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/QuoteListByDatePeriod2"

  - Addressing input action: "http://ws.eoddata.com/Data/QuoteListByDatePeriod2"

  - Addressing output action: "http://ws.eoddata.com/Data/QuoteListByDatePeriod2Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__QuoteListByDatePeriod2(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__QuoteListByDatePeriod2*       ns1__QuoteListByDatePeriod2,
    // output parameters:
    _ns1__QuoteListByDatePeriod2Response&ns1__QuoteListByDatePeriod2Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__QuoteListByDatePeriod2(
    struct soap *soap,
    // input parameters:
    _ns1__QuoteListByDatePeriod2*       ns1__QuoteListByDatePeriod2,
    // output parameters:
    _ns1__QuoteListByDatePeriod2Response&ns1__QuoteListByDatePeriod2Response
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	QuoteListByDatePeriod2 SOAP
//gsoap ns1  service method-style:	QuoteListByDatePeriod2 document
//gsoap ns1  service method-encoding:	QuoteListByDatePeriod2 literal
//gsoap ns1  service method-input-action:	QuoteListByDatePeriod2 http://ws.eoddata.com/Data/QuoteListByDatePeriod2
//gsoap ns1  service method-output-action:	QuoteListByDatePeriod2 http://ws.eoddata.com/Data/QuoteListByDatePeriod2Response
int __ns1__QuoteListByDatePeriod2(
    _ns1__QuoteListByDatePeriod2*       ns1__QuoteListByDatePeriod2,	///< Input parameter
    _ns1__QuoteListByDatePeriod2Response&ns1__QuoteListByDatePeriod2Response	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SymbolChangesByExchange                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SymbolChangesByExchange" of service binding "DataSoap".
Returns a list of symbol changes of a given exchange. <br/>INPUT: Token (Login Token),
Exchange (eg: NASDAQ)<br/>OUTPUT: List of symbol changes

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/SymbolChangesByExchange"

  - Addressing input action: "http://ws.eoddata.com/Data/SymbolChangesByExchange"

  - Addressing output action: "http://ws.eoddata.com/Data/SymbolChangesByExchangeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SymbolChangesByExchange(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SymbolChangesByExchange*      ns1__SymbolChangesByExchange,
    // output parameters:
    _ns1__SymbolChangesByExchangeResponse&ns1__SymbolChangesByExchangeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SymbolChangesByExchange(
    struct soap *soap,
    // input parameters:
    _ns1__SymbolChangesByExchange*      ns1__SymbolChangesByExchange,
    // output parameters:
    _ns1__SymbolChangesByExchangeResponse&ns1__SymbolChangesByExchangeResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SymbolChangesByExchange SOAP
//gsoap ns1  service method-style:	SymbolChangesByExchange document
//gsoap ns1  service method-encoding:	SymbolChangesByExchange literal
//gsoap ns1  service method-input-action:	SymbolChangesByExchange http://ws.eoddata.com/Data/SymbolChangesByExchange
//gsoap ns1  service method-output-action:	SymbolChangesByExchange http://ws.eoddata.com/Data/SymbolChangesByExchangeResponse
int __ns1__SymbolChangesByExchange(
    _ns1__SymbolChangesByExchange*      ns1__SymbolChangesByExchange,	///< Input parameter
    _ns1__SymbolChangesByExchangeResponse&ns1__SymbolChangesByExchangeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__DataClientLatestVersion                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__DataClientLatestVersion" of service binding "DataSoap".
Returns the latest version information of Data Client.<br/>INPUT: Token (Login Token)<br/>OUTPUT:
Date Client Version

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/DataClientLatestVersion"

  - Addressing input action: "http://ws.eoddata.com/Data/DataClientLatestVersion"

  - Addressing output action: "http://ws.eoddata.com/Data/DataClientLatestVersionResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__DataClientLatestVersion(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__DataClientLatestVersion*      ns1__DataClientLatestVersion,
    // output parameters:
    _ns1__DataClientLatestVersionResponse&ns1__DataClientLatestVersionResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__DataClientLatestVersion(
    struct soap *soap,
    // input parameters:
    _ns1__DataClientLatestVersion*      ns1__DataClientLatestVersion,
    // output parameters:
    _ns1__DataClientLatestVersionResponse&ns1__DataClientLatestVersionResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DataClientLatestVersion SOAP
//gsoap ns1  service method-style:	DataClientLatestVersion document
//gsoap ns1  service method-encoding:	DataClientLatestVersion literal
//gsoap ns1  service method-input-action:	DataClientLatestVersion http://ws.eoddata.com/Data/DataClientLatestVersion
//gsoap ns1  service method-output-action:	DataClientLatestVersion http://ws.eoddata.com/Data/DataClientLatestVersionResponse
int __ns1__DataClientLatestVersion(
    _ns1__DataClientLatestVersion*      ns1__DataClientLatestVersion,	///< Input parameter
    _ns1__DataClientLatestVersionResponse&ns1__DataClientLatestVersionResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__DataFormats                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__DataFormats" of service binding "DataSoap".
Returns the list of data formats.<br/>INPUT: Token (Login Token)<br/>OUTPUT: List
of DataFormats

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/DataFormats"

  - Addressing input action: "http://ws.eoddata.com/Data/DataFormats"

  - Addressing output action: "http://ws.eoddata.com/Data/DataFormatsResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__DataFormats(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__DataFormats*                  ns1__DataFormats,
    // output parameters:
    _ns1__DataFormatsResponse          &ns1__DataFormatsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__DataFormats(
    struct soap *soap,
    // input parameters:
    _ns1__DataFormats*                  ns1__DataFormats,
    // output parameters:
    _ns1__DataFormatsResponse          &ns1__DataFormatsResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DataFormats SOAP
//gsoap ns1  service method-style:	DataFormats document
//gsoap ns1  service method-encoding:	DataFormats literal
//gsoap ns1  service method-input-action:	DataFormats http://ws.eoddata.com/Data/DataFormats
//gsoap ns1  service method-output-action:	DataFormats http://ws.eoddata.com/Data/DataFormatsResponse
int __ns1__DataFormats(
    _ns1__DataFormats*                  ns1__DataFormats,	///< Input parameter
    _ns1__DataFormatsResponse          &ns1__DataFormatsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__UpdateDataFormat                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__UpdateDataFormat" of service binding "DataSoap".
Update preferred Data Format<br/>INPUT: Token (Login Token), IncludeHeader, IncludeSuffix<br/>OUTPUT:
List of DataFormats

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/UpdateDataFormat"

  - Addressing input action: "http://ws.eoddata.com/Data/UpdateDataFormat"

  - Addressing output action: "http://ws.eoddata.com/Data/UpdateDataFormatResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__UpdateDataFormat(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__UpdateDataFormat*             ns1__UpdateDataFormat,
    // output parameters:
    _ns1__UpdateDataFormatResponse     &ns1__UpdateDataFormatResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__UpdateDataFormat(
    struct soap *soap,
    // input parameters:
    _ns1__UpdateDataFormat*             ns1__UpdateDataFormat,
    // output parameters:
    _ns1__UpdateDataFormatResponse     &ns1__UpdateDataFormatResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	UpdateDataFormat SOAP
//gsoap ns1  service method-style:	UpdateDataFormat document
//gsoap ns1  service method-encoding:	UpdateDataFormat literal
//gsoap ns1  service method-input-action:	UpdateDataFormat http://ws.eoddata.com/Data/UpdateDataFormat
//gsoap ns1  service method-output-action:	UpdateDataFormat http://ws.eoddata.com/Data/UpdateDataFormatResponse
int __ns1__UpdateDataFormat(
    _ns1__UpdateDataFormat*             ns1__UpdateDataFormat,	///< Input parameter
    _ns1__UpdateDataFormatResponse     &ns1__UpdateDataFormatResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__ValidateAccess                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__ValidateAccess" of service binding "DataSoap".
Validate access for an entire exchange, specific date, and specific period.<br/>INPUT:
Token (Login Token), Exchange (eg: NASDAQ), QuoteDate (format:yyyyMMdd eg:20080225),
Period (1, 5, 10, 15, 30, h, d, w, m)<br/>OUTPUT: RESPONSE

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/ValidateAccess"

  - Addressing input action: "http://ws.eoddata.com/Data/ValidateAccess"

  - Addressing output action: "http://ws.eoddata.com/Data/ValidateAccessResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__ValidateAccess(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__ValidateAccess*               ns1__ValidateAccess,
    // output parameters:
    _ns1__ValidateAccessResponse       &ns1__ValidateAccessResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__ValidateAccess(
    struct soap *soap,
    // input parameters:
    _ns1__ValidateAccess*               ns1__ValidateAccess,
    // output parameters:
    _ns1__ValidateAccessResponse       &ns1__ValidateAccessResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	ValidateAccess SOAP
//gsoap ns1  service method-style:	ValidateAccess document
//gsoap ns1  service method-encoding:	ValidateAccess literal
//gsoap ns1  service method-input-action:	ValidateAccess http://ws.eoddata.com/Data/ValidateAccess
//gsoap ns1  service method-output-action:	ValidateAccess http://ws.eoddata.com/Data/ValidateAccessResponse
int __ns1__ValidateAccess(
    _ns1__ValidateAccess*               ns1__ValidateAccess,	///< Input parameter
    _ns1__ValidateAccessResponse       &ns1__ValidateAccessResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__Login_                                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__Login_" of service binding "DataSoap".
Login to EODData Financial Information Web Service. Used for Web Authentication.<br/>INPUT:
Username, Password<br/>OUTPUT: Login Token

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/Login"

  - Addressing input action: "http://ws.eoddata.com/Data/Login"

  - Addressing output action: "http://ws.eoddata.com/Data/LoginResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__Login_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__Login*                        ns1__Login,
    // output parameters:
    _ns1__LoginResponse                &ns1__LoginResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__Login_(
    struct soap *soap,
    // input parameters:
    _ns1__Login*                        ns1__Login,
    // output parameters:
    _ns1__LoginResponse                &ns1__LoginResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	Login_ SOAP
//gsoap ns1  service method-style:	Login_ document
//gsoap ns1  service method-encoding:	Login_ literal
//gsoap ns1  service method-input-action:	Login_ http://ws.eoddata.com/Data/Login
//gsoap ns1  service method-output-action:	Login_ http://ws.eoddata.com/Data/LoginResponse
int __ns1__Login_(
    _ns1__Login*                        ns1__Login,	///< Input parameter
    _ns1__LoginResponse                &ns1__LoginResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__Login2_                                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__Login2_" of service binding "DataSoap".
Login to EODData Financial Information Web Service. Used for Application Authentication.<br/>INPUT:
Username, Password, Version (Application Version)<br/>OUTPUT: Login Token

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/Login2"

  - Addressing input action: "http://ws.eoddata.com/Data/Login2"

  - Addressing output action: "http://ws.eoddata.com/Data/Login2Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__Login2_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__Login2*                       ns1__Login2,
    // output parameters:
    _ns1__Login2Response               &ns1__Login2Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__Login2_(
    struct soap *soap,
    // input parameters:
    _ns1__Login2*                       ns1__Login2,
    // output parameters:
    _ns1__Login2Response               &ns1__Login2Response
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	Login2_ SOAP
//gsoap ns1  service method-style:	Login2_ document
//gsoap ns1  service method-encoding:	Login2_ literal
//gsoap ns1  service method-input-action:	Login2_ http://ws.eoddata.com/Data/Login2
//gsoap ns1  service method-output-action:	Login2_ http://ws.eoddata.com/Data/Login2Response
int __ns1__Login2_(
    _ns1__Login2*                       ns1__Login2,	///< Input parameter
    _ns1__Login2Response               &ns1__Login2Response	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__Membership_                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__Membership_" of service binding "DataSoap".
Returns membership of user.<br/>INPUT: Token (Login Token)<br/>OUTPUT: Membership

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/Membership"

  - Addressing input action: "http://ws.eoddata.com/Data/Membership"

  - Addressing output action: "http://ws.eoddata.com/Data/MembershipResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__Membership_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__Membership*                   ns1__Membership,
    // output parameters:
    _ns1__MembershipResponse           &ns1__MembershipResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__Membership_(
    struct soap *soap,
    // input parameters:
    _ns1__Membership*                   ns1__Membership,
    // output parameters:
    _ns1__MembershipResponse           &ns1__MembershipResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	Membership_ SOAP
//gsoap ns1  service method-style:	Membership_ document
//gsoap ns1  service method-encoding:	Membership_ literal
//gsoap ns1  service method-input-action:	Membership_ http://ws.eoddata.com/Data/Membership
//gsoap ns1  service method-output-action:	Membership_ http://ws.eoddata.com/Data/MembershipResponse
int __ns1__Membership_(
    _ns1__Membership*                   ns1__Membership,	///< Input parameter
    _ns1__MembershipResponse           &ns1__MembershipResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__ExchangeList_                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__ExchangeList_" of service binding "DataSoap".
Returns a list of available exchanges.<br/>INPUT: Token (Login Token)<br/>OUTPUT:
List of exchanges

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/ExchangeList"

  - Addressing input action: "http://ws.eoddata.com/Data/ExchangeList"

  - Addressing output action: "http://ws.eoddata.com/Data/ExchangeListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__ExchangeList_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__ExchangeList*                 ns1__ExchangeList,
    // output parameters:
    _ns1__ExchangeListResponse         &ns1__ExchangeListResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__ExchangeList_(
    struct soap *soap,
    // input parameters:
    _ns1__ExchangeList*                 ns1__ExchangeList,
    // output parameters:
    _ns1__ExchangeListResponse         &ns1__ExchangeListResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	ExchangeList_ SOAP
//gsoap ns1  service method-style:	ExchangeList_ document
//gsoap ns1  service method-encoding:	ExchangeList_ literal
//gsoap ns1  service method-input-action:	ExchangeList_ http://ws.eoddata.com/Data/ExchangeList
//gsoap ns1  service method-output-action:	ExchangeList_ http://ws.eoddata.com/Data/ExchangeListResponse
int __ns1__ExchangeList_(
    _ns1__ExchangeList*                 ns1__ExchangeList,	///< Input parameter
    _ns1__ExchangeListResponse         &ns1__ExchangeListResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__ExchangeGet_                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__ExchangeGet_" of service binding "DataSoap".
Returns detailed information of a specific exchange.<br/>INPUT: Token (Login Token),
Exchange (eg: NASDAQ)<br/>OUTPUT: Exchange

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/ExchangeGet"

  - Addressing input action: "http://ws.eoddata.com/Data/ExchangeGet"

  - Addressing output action: "http://ws.eoddata.com/Data/ExchangeGetResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__ExchangeGet_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__ExchangeGet*                  ns1__ExchangeGet,
    // output parameters:
    _ns1__ExchangeGetResponse          &ns1__ExchangeGetResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__ExchangeGet_(
    struct soap *soap,
    // input parameters:
    _ns1__ExchangeGet*                  ns1__ExchangeGet,
    // output parameters:
    _ns1__ExchangeGetResponse          &ns1__ExchangeGetResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	ExchangeGet_ SOAP
//gsoap ns1  service method-style:	ExchangeGet_ document
//gsoap ns1  service method-encoding:	ExchangeGet_ literal
//gsoap ns1  service method-input-action:	ExchangeGet_ http://ws.eoddata.com/Data/ExchangeGet
//gsoap ns1  service method-output-action:	ExchangeGet_ http://ws.eoddata.com/Data/ExchangeGetResponse
int __ns1__ExchangeGet_(
    _ns1__ExchangeGet*                  ns1__ExchangeGet,	///< Input parameter
    _ns1__ExchangeGetResponse          &ns1__ExchangeGetResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SymbolList_                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SymbolList_" of service binding "DataSoap".
Returns a list of symbols of a specified exchange. <br/>INPUT: Token (Login Token),
Exchange (eg: NASDAQ)<br/>OUTPUT: List of symbols

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/SymbolList"

  - Addressing input action: "http://ws.eoddata.com/Data/SymbolList"

  - Addressing output action: "http://ws.eoddata.com/Data/SymbolListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SymbolList_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SymbolList*                   ns1__SymbolList,
    // output parameters:
    _ns1__SymbolListResponse           &ns1__SymbolListResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SymbolList_(
    struct soap *soap,
    // input parameters:
    _ns1__SymbolList*                   ns1__SymbolList,
    // output parameters:
    _ns1__SymbolListResponse           &ns1__SymbolListResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SymbolList_ SOAP
//gsoap ns1  service method-style:	SymbolList_ document
//gsoap ns1  service method-encoding:	SymbolList_ literal
//gsoap ns1  service method-input-action:	SymbolList_ http://ws.eoddata.com/Data/SymbolList
//gsoap ns1  service method-output-action:	SymbolList_ http://ws.eoddata.com/Data/SymbolListResponse
int __ns1__SymbolList_(
    _ns1__SymbolList*                   ns1__SymbolList,	///< Input parameter
    _ns1__SymbolListResponse           &ns1__SymbolListResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SymbolList2_                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SymbolList2_" of service binding "DataSoap".
Returns a list of symbols of a specified exchange (compact format).<br/>INPUT: Token
(Login Token), Exchange (eg: NASDAQ)<br/>OUTPUT: List of symbols

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/SymbolList2"

  - Addressing input action: "http://ws.eoddata.com/Data/SymbolList2"

  - Addressing output action: "http://ws.eoddata.com/Data/SymbolList2Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SymbolList2_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SymbolList2*                  ns1__SymbolList2,
    // output parameters:
    _ns1__SymbolList2Response          &ns1__SymbolList2Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SymbolList2_(
    struct soap *soap,
    // input parameters:
    _ns1__SymbolList2*                  ns1__SymbolList2,
    // output parameters:
    _ns1__SymbolList2Response          &ns1__SymbolList2Response
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SymbolList2_ SOAP
//gsoap ns1  service method-style:	SymbolList2_ document
//gsoap ns1  service method-encoding:	SymbolList2_ literal
//gsoap ns1  service method-input-action:	SymbolList2_ http://ws.eoddata.com/Data/SymbolList2
//gsoap ns1  service method-output-action:	SymbolList2_ http://ws.eoddata.com/Data/SymbolList2Response
int __ns1__SymbolList2_(
    _ns1__SymbolList2*                  ns1__SymbolList2,	///< Input parameter
    _ns1__SymbolList2Response          &ns1__SymbolList2Response	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__QuoteGet_                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__QuoteGet_" of service binding "DataSoap".
Returns an end of day quote for a specific symbol.<br/>INPUT: Token (Login Token),
Exchange (eg: NASDAQ), Symbol (eg:MSFT)<br/>OUTPUT: End of day quote

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/QuoteGet"

  - Addressing input action: "http://ws.eoddata.com/Data/QuoteGet"

  - Addressing output action: "http://ws.eoddata.com/Data/QuoteGetResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__QuoteGet_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__QuoteGet*                     ns1__QuoteGet,
    // output parameters:
    _ns1__QuoteGetResponse             &ns1__QuoteGetResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__QuoteGet_(
    struct soap *soap,
    // input parameters:
    _ns1__QuoteGet*                     ns1__QuoteGet,
    // output parameters:
    _ns1__QuoteGetResponse             &ns1__QuoteGetResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	QuoteGet_ SOAP
//gsoap ns1  service method-style:	QuoteGet_ document
//gsoap ns1  service method-encoding:	QuoteGet_ literal
//gsoap ns1  service method-input-action:	QuoteGet_ http://ws.eoddata.com/Data/QuoteGet
//gsoap ns1  service method-output-action:	QuoteGet_ http://ws.eoddata.com/Data/QuoteGetResponse
int __ns1__QuoteGet_(
    _ns1__QuoteGet*                     ns1__QuoteGet,	///< Input parameter
    _ns1__QuoteGetResponse             &ns1__QuoteGetResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__QuoteList2_                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__QuoteList2_" of service binding "DataSoap".
Returns latest end of day quotes for a list of symbols of a specific exchange (compact
format).<br/>INPUT: Token (Login Token), Exchange (eg: NASDAQ), Symbols (eg:MSFT,INTC)<br/>OUTPUT:
List of end of day quotes

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/QuoteList2"

  - Addressing input action: "http://ws.eoddata.com/Data/QuoteList2"

  - Addressing output action: "http://ws.eoddata.com/Data/QuoteList2Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__QuoteList2_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__QuoteList2*                   ns1__QuoteList2,
    // output parameters:
    _ns1__QuoteList2Response           &ns1__QuoteList2Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__QuoteList2_(
    struct soap *soap,
    // input parameters:
    _ns1__QuoteList2*                   ns1__QuoteList2,
    // output parameters:
    _ns1__QuoteList2Response           &ns1__QuoteList2Response
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	QuoteList2_ SOAP
//gsoap ns1  service method-style:	QuoteList2_ document
//gsoap ns1  service method-encoding:	QuoteList2_ literal
//gsoap ns1  service method-input-action:	QuoteList2_ http://ws.eoddata.com/Data/QuoteList2
//gsoap ns1  service method-output-action:	QuoteList2_ http://ws.eoddata.com/Data/QuoteList2Response
int __ns1__QuoteList2_(
    _ns1__QuoteList2*                   ns1__QuoteList2,	///< Input parameter
    _ns1__QuoteList2Response           &ns1__QuoteList2Response	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SymbolGet_                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SymbolGet_" of service binding "DataSoap".
Returns detailed information of a specific symbol.<br/>INPUT: Token (Login Token),
Exchange (eg: NASDAQ), Symbol (eg:MSFT)<br/>OUTPUT: Symbol

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/SymbolGet"

  - Addressing input action: "http://ws.eoddata.com/Data/SymbolGet"

  - Addressing output action: "http://ws.eoddata.com/Data/SymbolGetResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SymbolGet_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SymbolGet*                    ns1__SymbolGet,
    // output parameters:
    _ns1__SymbolGetResponse            &ns1__SymbolGetResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SymbolGet_(
    struct soap *soap,
    // input parameters:
    _ns1__SymbolGet*                    ns1__SymbolGet,
    // output parameters:
    _ns1__SymbolGetResponse            &ns1__SymbolGetResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SymbolGet_ SOAP
//gsoap ns1  service method-style:	SymbolGet_ document
//gsoap ns1  service method-encoding:	SymbolGet_ literal
//gsoap ns1  service method-input-action:	SymbolGet_ http://ws.eoddata.com/Data/SymbolGet
//gsoap ns1  service method-output-action:	SymbolGet_ http://ws.eoddata.com/Data/SymbolGetResponse
int __ns1__SymbolGet_(
    _ns1__SymbolGet*                    ns1__SymbolGet,	///< Input parameter
    _ns1__SymbolGetResponse            &ns1__SymbolGetResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__QuoteList_                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__QuoteList_" of service binding "DataSoap".
Returns a complete list of end of day quotes for an entire exchange.<br/>INPUT:
Token (Login Token), Exchange (eg: NASDAQ)<br/>OUTPUT: List of end of day quotes

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/QuoteList"

  - Addressing input action: "http://ws.eoddata.com/Data/QuoteList"

  - Addressing output action: "http://ws.eoddata.com/Data/QuoteListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__QuoteList_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__QuoteList*                    ns1__QuoteList,
    // output parameters:
    _ns1__QuoteListResponse            &ns1__QuoteListResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__QuoteList_(
    struct soap *soap,
    // input parameters:
    _ns1__QuoteList*                    ns1__QuoteList,
    // output parameters:
    _ns1__QuoteListResponse            &ns1__QuoteListResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	QuoteList_ SOAP
//gsoap ns1  service method-style:	QuoteList_ document
//gsoap ns1  service method-encoding:	QuoteList_ literal
//gsoap ns1  service method-input-action:	QuoteList_ http://ws.eoddata.com/Data/QuoteList
//gsoap ns1  service method-output-action:	QuoteList_ http://ws.eoddata.com/Data/QuoteListResponse
int __ns1__QuoteList_(
    _ns1__QuoteList*                    ns1__QuoteList,	///< Input parameter
    _ns1__QuoteListResponse            &ns1__QuoteListResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__NewsList_                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__NewsList_" of service binding "DataSoap".
Returns a list of News articles for an entire exchange.<br/>INPUT: Token (Login
Token), Exchange (eg: NASDAQ)<br/>OUTPUT: List of News articles

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/NewsList"

  - Addressing input action: "http://ws.eoddata.com/Data/NewsList"

  - Addressing output action: "http://ws.eoddata.com/Data/NewsListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__NewsList_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__NewsList*                     ns1__NewsList,
    // output parameters:
    _ns1__NewsListResponse             &ns1__NewsListResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__NewsList_(
    struct soap *soap,
    // input parameters:
    _ns1__NewsList*                     ns1__NewsList,
    // output parameters:
    _ns1__NewsListResponse             &ns1__NewsListResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	NewsList_ SOAP
//gsoap ns1  service method-style:	NewsList_ document
//gsoap ns1  service method-encoding:	NewsList_ literal
//gsoap ns1  service method-input-action:	NewsList_ http://ws.eoddata.com/Data/NewsList
//gsoap ns1  service method-output-action:	NewsList_ http://ws.eoddata.com/Data/NewsListResponse
int __ns1__NewsList_(
    _ns1__NewsList*                     ns1__NewsList,	///< Input parameter
    _ns1__NewsListResponse             &ns1__NewsListResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__NewsListBySymbol_                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__NewsListBySymbol_" of service binding "DataSoap".
Returns a list of News articles for a given Exchange and Symbol.<br/>INPUT: Token
(Login Token), Exchange (eg: NASDAQ), Symbol (eg: AAPL)<br/>OUTPUT: List of News
articles

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/NewsListBySymbol"

  - Addressing input action: "http://ws.eoddata.com/Data/NewsListBySymbol"

  - Addressing output action: "http://ws.eoddata.com/Data/NewsListBySymbolResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__NewsListBySymbol_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__NewsListBySymbol*             ns1__NewsListBySymbol,
    // output parameters:
    _ns1__NewsListBySymbolResponse     &ns1__NewsListBySymbolResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__NewsListBySymbol_(
    struct soap *soap,
    // input parameters:
    _ns1__NewsListBySymbol*             ns1__NewsListBySymbol,
    // output parameters:
    _ns1__NewsListBySymbolResponse     &ns1__NewsListBySymbolResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	NewsListBySymbol_ SOAP
//gsoap ns1  service method-style:	NewsListBySymbol_ document
//gsoap ns1  service method-encoding:	NewsListBySymbol_ literal
//gsoap ns1  service method-input-action:	NewsListBySymbol_ http://ws.eoddata.com/Data/NewsListBySymbol
//gsoap ns1  service method-output-action:	NewsListBySymbol_ http://ws.eoddata.com/Data/NewsListBySymbolResponse
int __ns1__NewsListBySymbol_(
    _ns1__NewsListBySymbol*             ns1__NewsListBySymbol,	///< Input parameter
    _ns1__NewsListBySymbolResponse     &ns1__NewsListBySymbolResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__FundamentalList_                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__FundamentalList_" of service binding "DataSoap".
Returns a complete list of fundamental data for an entire exchange.<br/>INPUT: Token
(Login Token), Exchange (eg: NASDAQ)<br/>OUTPUT: List of fundamentals

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/FundamentalList"

  - Addressing input action: "http://ws.eoddata.com/Data/FundamentalList"

  - Addressing output action: "http://ws.eoddata.com/Data/FundamentalListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__FundamentalList_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__FundamentalList*              ns1__FundamentalList,
    // output parameters:
    _ns1__FundamentalListResponse      &ns1__FundamentalListResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__FundamentalList_(
    struct soap *soap,
    // input parameters:
    _ns1__FundamentalList*              ns1__FundamentalList,
    // output parameters:
    _ns1__FundamentalListResponse      &ns1__FundamentalListResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	FundamentalList_ SOAP
//gsoap ns1  service method-style:	FundamentalList_ document
//gsoap ns1  service method-encoding:	FundamentalList_ literal
//gsoap ns1  service method-input-action:	FundamentalList_ http://ws.eoddata.com/Data/FundamentalList
//gsoap ns1  service method-output-action:	FundamentalList_ http://ws.eoddata.com/Data/FundamentalListResponse
int __ns1__FundamentalList_(
    _ns1__FundamentalList*              ns1__FundamentalList,	///< Input parameter
    _ns1__FundamentalListResponse      &ns1__FundamentalListResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__TechnicalList_                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__TechnicalList_" of service binding "DataSoap".
Returns a complete list of technical data for an entire exchange. <br/>INPUT: Token
(Login Token), Exchange (eg: NASDAQ)<br/>OUTPUT: List of quotes

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/TechnicalList"

  - Addressing input action: "http://ws.eoddata.com/Data/TechnicalList"

  - Addressing output action: "http://ws.eoddata.com/Data/TechnicalListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__TechnicalList_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__TechnicalList*                ns1__TechnicalList,
    // output parameters:
    _ns1__TechnicalListResponse        &ns1__TechnicalListResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__TechnicalList_(
    struct soap *soap,
    // input parameters:
    _ns1__TechnicalList*                ns1__TechnicalList,
    // output parameters:
    _ns1__TechnicalListResponse        &ns1__TechnicalListResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	TechnicalList_ SOAP
//gsoap ns1  service method-style:	TechnicalList_ document
//gsoap ns1  service method-encoding:	TechnicalList_ literal
//gsoap ns1  service method-input-action:	TechnicalList_ http://ws.eoddata.com/Data/TechnicalList
//gsoap ns1  service method-output-action:	TechnicalList_ http://ws.eoddata.com/Data/TechnicalListResponse
int __ns1__TechnicalList_(
    _ns1__TechnicalList*                ns1__TechnicalList,	///< Input parameter
    _ns1__TechnicalListResponse        &ns1__TechnicalListResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__QuoteListByDate_                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__QuoteListByDate_" of service binding "DataSoap".
Returns a complete list of end of day quotes for an entire exchange and a specific
date.<br/>INPUT: Token (Login Token), Exchange (eg: NASDAQ), QuoteDate (format:yyyyMMdd
eg:20080225)<br/>OUTPUT: List of end of day quotes

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/QuoteListByDate"

  - Addressing input action: "http://ws.eoddata.com/Data/QuoteListByDate"

  - Addressing output action: "http://ws.eoddata.com/Data/QuoteListByDateResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__QuoteListByDate_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__QuoteListByDate*              ns1__QuoteListByDate,
    // output parameters:
    _ns1__QuoteListByDateResponse      &ns1__QuoteListByDateResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__QuoteListByDate_(
    struct soap *soap,
    // input parameters:
    _ns1__QuoteListByDate*              ns1__QuoteListByDate,
    // output parameters:
    _ns1__QuoteListByDateResponse      &ns1__QuoteListByDateResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	QuoteListByDate_ SOAP
//gsoap ns1  service method-style:	QuoteListByDate_ document
//gsoap ns1  service method-encoding:	QuoteListByDate_ literal
//gsoap ns1  service method-input-action:	QuoteListByDate_ http://ws.eoddata.com/Data/QuoteListByDate
//gsoap ns1  service method-output-action:	QuoteListByDate_ http://ws.eoddata.com/Data/QuoteListByDateResponse
int __ns1__QuoteListByDate_(
    _ns1__QuoteListByDate*              ns1__QuoteListByDate,	///< Input parameter
    _ns1__QuoteListByDateResponse      &ns1__QuoteListByDateResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__QuoteListByDate2_                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__QuoteListByDate2_" of service binding "DataSoap".
Returns a complete list of end of day quotes for an entire exchange and a specific
date (compact format).<br/>INPUT: Token (Login Token), Exchange (eg: NASDAQ), QuoteDate
(format:yyyyMMdd eg:20080225)<br/>OUTPUT: List of end of day quotes

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/QuoteListByDate2"

  - Addressing input action: "http://ws.eoddata.com/Data/QuoteListByDate2"

  - Addressing output action: "http://ws.eoddata.com/Data/QuoteListByDate2Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__QuoteListByDate2_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__QuoteListByDate2*             ns1__QuoteListByDate2,
    // output parameters:
    _ns1__QuoteListByDate2Response     &ns1__QuoteListByDate2Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__QuoteListByDate2_(
    struct soap *soap,
    // input parameters:
    _ns1__QuoteListByDate2*             ns1__QuoteListByDate2,
    // output parameters:
    _ns1__QuoteListByDate2Response     &ns1__QuoteListByDate2Response
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	QuoteListByDate2_ SOAP
//gsoap ns1  service method-style:	QuoteListByDate2_ document
//gsoap ns1  service method-encoding:	QuoteListByDate2_ literal
//gsoap ns1  service method-input-action:	QuoteListByDate2_ http://ws.eoddata.com/Data/QuoteListByDate2
//gsoap ns1  service method-output-action:	QuoteListByDate2_ http://ws.eoddata.com/Data/QuoteListByDate2Response
int __ns1__QuoteListByDate2_(
    _ns1__QuoteListByDate2*             ns1__QuoteListByDate2,	///< Input parameter
    _ns1__QuoteListByDate2Response     &ns1__QuoteListByDate2Response	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SymbolHistory_                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SymbolHistory_" of service binding "DataSoap".
Returns a list of historical end of day data of a specified symbol and specified
start date up to today's date.<br/>INPUT: Token (Login Token), Exchange (eg: NASDAQ),
Symbol (eg:MSFT), StartDate (format:yyyyMMdd eg:20080225)<br/>OUTPUT: List of historical
end of day quotes

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/SymbolHistory"

  - Addressing input action: "http://ws.eoddata.com/Data/SymbolHistory"

  - Addressing output action: "http://ws.eoddata.com/Data/SymbolHistoryResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SymbolHistory_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SymbolHistory*                ns1__SymbolHistory,
    // output parameters:
    _ns1__SymbolHistoryResponse        &ns1__SymbolHistoryResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SymbolHistory_(
    struct soap *soap,
    // input parameters:
    _ns1__SymbolHistory*                ns1__SymbolHistory,
    // output parameters:
    _ns1__SymbolHistoryResponse        &ns1__SymbolHistoryResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SymbolHistory_ SOAP
//gsoap ns1  service method-style:	SymbolHistory_ document
//gsoap ns1  service method-encoding:	SymbolHistory_ literal
//gsoap ns1  service method-input-action:	SymbolHistory_ http://ws.eoddata.com/Data/SymbolHistory
//gsoap ns1  service method-output-action:	SymbolHistory_ http://ws.eoddata.com/Data/SymbolHistoryResponse
int __ns1__SymbolHistory_(
    _ns1__SymbolHistory*                ns1__SymbolHistory,	///< Input parameter
    _ns1__SymbolHistoryResponse        &ns1__SymbolHistoryResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__Top10Gains_                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__Top10Gains_" of service binding "DataSoap".
Returns a list of the Top 10 Gains of a specified exchange. <br/>INPUT: Token (Login
Token), Exchange (eg: NASDAQ)<br/>OUTPUT: List of quotes

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/Top10Gains"

  - Addressing input action: "http://ws.eoddata.com/Data/Top10Gains"

  - Addressing output action: "http://ws.eoddata.com/Data/Top10GainsResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__Top10Gains_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__Top10Gains*                   ns1__Top10Gains,
    // output parameters:
    _ns1__Top10GainsResponse           &ns1__Top10GainsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__Top10Gains_(
    struct soap *soap,
    // input parameters:
    _ns1__Top10Gains*                   ns1__Top10Gains,
    // output parameters:
    _ns1__Top10GainsResponse           &ns1__Top10GainsResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	Top10Gains_ SOAP
//gsoap ns1  service method-style:	Top10Gains_ document
//gsoap ns1  service method-encoding:	Top10Gains_ literal
//gsoap ns1  service method-input-action:	Top10Gains_ http://ws.eoddata.com/Data/Top10Gains
//gsoap ns1  service method-output-action:	Top10Gains_ http://ws.eoddata.com/Data/Top10GainsResponse
int __ns1__Top10Gains_(
    _ns1__Top10Gains*                   ns1__Top10Gains,	///< Input parameter
    _ns1__Top10GainsResponse           &ns1__Top10GainsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__Top10Losses_                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__Top10Losses_" of service binding "DataSoap".
Returns a list of the Top 10 Losses of a specified exchange. <br/>INPUT: Token (Login
Token), Exchange (eg: NASDAQ)<br/>OUTPUT: List of quotes

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/Top10Losses"

  - Addressing input action: "http://ws.eoddata.com/Data/Top10Losses"

  - Addressing output action: "http://ws.eoddata.com/Data/Top10LossesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__Top10Losses_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__Top10Losses*                  ns1__Top10Losses,
    // output parameters:
    _ns1__Top10LossesResponse          &ns1__Top10LossesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__Top10Losses_(
    struct soap *soap,
    // input parameters:
    _ns1__Top10Losses*                  ns1__Top10Losses,
    // output parameters:
    _ns1__Top10LossesResponse          &ns1__Top10LossesResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	Top10Losses_ SOAP
//gsoap ns1  service method-style:	Top10Losses_ document
//gsoap ns1  service method-encoding:	Top10Losses_ literal
//gsoap ns1  service method-input-action:	Top10Losses_ http://ws.eoddata.com/Data/Top10Losses
//gsoap ns1  service method-output-action:	Top10Losses_ http://ws.eoddata.com/Data/Top10LossesResponse
int __ns1__Top10Losses_(
    _ns1__Top10Losses*                  ns1__Top10Losses,	///< Input parameter
    _ns1__Top10LossesResponse          &ns1__Top10LossesResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SymbolChart_                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SymbolChart_" of service binding "DataSoap".
Returns a URL to a chart image of a specific symbol.<br/>INPUT: Token (Login Token),
Exchange (eg: NASDAQ), Symbol (eg:MSFT)<br/>OUTPUT: Chart URL

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/SymbolChart"

  - Addressing input action: "http://ws.eoddata.com/Data/SymbolChart"

  - Addressing output action: "http://ws.eoddata.com/Data/SymbolChartResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SymbolChart_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SymbolChart*                  ns1__SymbolChart,
    // output parameters:
    _ns1__SymbolChartResponse          &ns1__SymbolChartResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SymbolChart_(
    struct soap *soap,
    // input parameters:
    _ns1__SymbolChart*                  ns1__SymbolChart,
    // output parameters:
    _ns1__SymbolChartResponse          &ns1__SymbolChartResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SymbolChart_ SOAP
//gsoap ns1  service method-style:	SymbolChart_ document
//gsoap ns1  service method-encoding:	SymbolChart_ literal
//gsoap ns1  service method-input-action:	SymbolChart_ http://ws.eoddata.com/Data/SymbolChart
//gsoap ns1  service method-output-action:	SymbolChart_ http://ws.eoddata.com/Data/SymbolChartResponse
int __ns1__SymbolChart_(
    _ns1__SymbolChart*                  ns1__SymbolChart,	///< Input parameter
    _ns1__SymbolChartResponse          &ns1__SymbolChartResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__ExchangeMonths_                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__ExchangeMonths_" of service binding "DataSoap".
Returns the number of Months history a user is allowed to download.<br/>INPUT: Token
(Login Token), Exchange (eg: NASDAQ)<br/>OUTPUT: Number of Months

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/ExchangeMonths"

  - Addressing input action: "http://ws.eoddata.com/Data/ExchangeMonths"

  - Addressing output action: "http://ws.eoddata.com/Data/ExchangeMonthsResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__ExchangeMonths_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__ExchangeMonths*               ns1__ExchangeMonths,
    // output parameters:
    _ns1__ExchangeMonthsResponse       &ns1__ExchangeMonthsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__ExchangeMonths_(
    struct soap *soap,
    // input parameters:
    _ns1__ExchangeMonths*               ns1__ExchangeMonths,
    // output parameters:
    _ns1__ExchangeMonthsResponse       &ns1__ExchangeMonthsResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	ExchangeMonths_ SOAP
//gsoap ns1  service method-style:	ExchangeMonths_ document
//gsoap ns1  service method-encoding:	ExchangeMonths_ literal
//gsoap ns1  service method-input-action:	ExchangeMonths_ http://ws.eoddata.com/Data/ExchangeMonths
//gsoap ns1  service method-output-action:	ExchangeMonths_ http://ws.eoddata.com/Data/ExchangeMonthsResponse
int __ns1__ExchangeMonths_(
    _ns1__ExchangeMonths*               ns1__ExchangeMonths,	///< Input parameter
    _ns1__ExchangeMonthsResponse       &ns1__ExchangeMonthsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SplitListByExchange_                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SplitListByExchange_" of service binding "DataSoap".
Returns a list of Splits of a specific exchange.<br/>INPUT: Token (Login Token),
Exchange (eg: NASDAQ)<br/>OUTPUT: List of splits

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/SplitListByExchange"

  - Addressing input action: "http://ws.eoddata.com/Data/SplitListByExchange"

  - Addressing output action: "http://ws.eoddata.com/Data/SplitListByExchangeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SplitListByExchange_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SplitListByExchange*          ns1__SplitListByExchange,
    // output parameters:
    _ns1__SplitListByExchangeResponse  &ns1__SplitListByExchangeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SplitListByExchange_(
    struct soap *soap,
    // input parameters:
    _ns1__SplitListByExchange*          ns1__SplitListByExchange,
    // output parameters:
    _ns1__SplitListByExchangeResponse  &ns1__SplitListByExchangeResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SplitListByExchange_ SOAP
//gsoap ns1  service method-style:	SplitListByExchange_ document
//gsoap ns1  service method-encoding:	SplitListByExchange_ literal
//gsoap ns1  service method-input-action:	SplitListByExchange_ http://ws.eoddata.com/Data/SplitListByExchange
//gsoap ns1  service method-output-action:	SplitListByExchange_ http://ws.eoddata.com/Data/SplitListByExchangeResponse
int __ns1__SplitListByExchange_(
    _ns1__SplitListByExchange*          ns1__SplitListByExchange,	///< Input parameter
    _ns1__SplitListByExchangeResponse  &ns1__SplitListByExchangeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SplitListBySymbol_                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SplitListBySymbol_" of service binding "DataSoap".
Returns a list of Splits of a specific symbol.<br/>INPUT: Token (Login Token), Exchange
(eg: NASDAQ), Symbol (eg:MSFT)<br/>OUTPUT: List of splits

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/SplitListBySymbol"

  - Addressing input action: "http://ws.eoddata.com/Data/SplitListBySymbol"

  - Addressing output action: "http://ws.eoddata.com/Data/SplitListBySymbolResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SplitListBySymbol_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SplitListBySymbol*            ns1__SplitListBySymbol,
    // output parameters:
    _ns1__SplitListBySymbolResponse    &ns1__SplitListBySymbolResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SplitListBySymbol_(
    struct soap *soap,
    // input parameters:
    _ns1__SplitListBySymbol*            ns1__SplitListBySymbol,
    // output parameters:
    _ns1__SplitListBySymbolResponse    &ns1__SplitListBySymbolResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SplitListBySymbol_ SOAP
//gsoap ns1  service method-style:	SplitListBySymbol_ document
//gsoap ns1  service method-encoding:	SplitListBySymbol_ literal
//gsoap ns1  service method-input-action:	SplitListBySymbol_ http://ws.eoddata.com/Data/SplitListBySymbol
//gsoap ns1  service method-output-action:	SplitListBySymbol_ http://ws.eoddata.com/Data/SplitListBySymbolResponse
int __ns1__SplitListBySymbol_(
    _ns1__SplitListBySymbol*            ns1__SplitListBySymbol,	///< Input parameter
    _ns1__SplitListBySymbolResponse    &ns1__SplitListBySymbolResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__CountryList_                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__CountryList_" of service binding "DataSoap".
Returns a list of available countries.<br/>INPUT: Token (Login Token)<br/>OUTPUT:
List of countries

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/CountryList"

  - Addressing input action: "http://ws.eoddata.com/Data/CountryList"

  - Addressing output action: "http://ws.eoddata.com/Data/CountryListResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__CountryList_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__CountryList*                  ns1__CountryList,
    // output parameters:
    _ns1__CountryListResponse          &ns1__CountryListResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__CountryList_(
    struct soap *soap,
    // input parameters:
    _ns1__CountryList*                  ns1__CountryList,
    // output parameters:
    _ns1__CountryListResponse          &ns1__CountryListResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	CountryList_ SOAP
//gsoap ns1  service method-style:	CountryList_ document
//gsoap ns1  service method-encoding:	CountryList_ literal
//gsoap ns1  service method-input-action:	CountryList_ http://ws.eoddata.com/Data/CountryList
//gsoap ns1  service method-output-action:	CountryList_ http://ws.eoddata.com/Data/CountryListResponse
int __ns1__CountryList_(
    _ns1__CountryList*                  ns1__CountryList,	///< Input parameter
    _ns1__CountryListResponse          &ns1__CountryListResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SymbolHistoryPeriod_                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SymbolHistoryPeriod_" of service binding "DataSoap".
Returns a list of historical data of a specified symbol, specified date and specified
period.<br/>INPUT: Token (Login Token), Exchange (eg: NASDAQ), Symbol (eg:MSFT),
Date (format:yyyyMMdd eg:20080225), Period (1, 5, 10, 15, 30, h, d, w, m)<br/>OUTPUT:
List of historical quotes

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/SymbolHistoryPeriod"

  - Addressing input action: "http://ws.eoddata.com/Data/SymbolHistoryPeriod"

  - Addressing output action: "http://ws.eoddata.com/Data/SymbolHistoryPeriodResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SymbolHistoryPeriod_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SymbolHistoryPeriod*          ns1__SymbolHistoryPeriod,
    // output parameters:
    _ns1__SymbolHistoryPeriodResponse  &ns1__SymbolHistoryPeriodResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SymbolHistoryPeriod_(
    struct soap *soap,
    // input parameters:
    _ns1__SymbolHistoryPeriod*          ns1__SymbolHistoryPeriod,
    // output parameters:
    _ns1__SymbolHistoryPeriodResponse  &ns1__SymbolHistoryPeriodResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SymbolHistoryPeriod_ SOAP
//gsoap ns1  service method-style:	SymbolHistoryPeriod_ document
//gsoap ns1  service method-encoding:	SymbolHistoryPeriod_ literal
//gsoap ns1  service method-input-action:	SymbolHistoryPeriod_ http://ws.eoddata.com/Data/SymbolHistoryPeriod
//gsoap ns1  service method-output-action:	SymbolHistoryPeriod_ http://ws.eoddata.com/Data/SymbolHistoryPeriodResponse
int __ns1__SymbolHistoryPeriod_(
    _ns1__SymbolHistoryPeriod*          ns1__SymbolHistoryPeriod,	///< Input parameter
    _ns1__SymbolHistoryPeriodResponse  &ns1__SymbolHistoryPeriodResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SymbolHistoryPeriodByDateRange_                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SymbolHistoryPeriodByDateRange_" of service binding "DataSoap".
Returns a list of historical data of a specified symbol, specified date range and
specified period.<br/>INPUT: Token (Login Token), Exchange (eg: NASDAQ), Symbol
(eg:MSFT), StartDate (format:yyyyMMdd eg:20080225), EndDate (format:yyyyMMdd eg:20080225),
Period (1, 5, 10, 15, 30, h, d, w, m)<br/>OUTPUT: List of historical quotes

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/SymbolHistoryPeriodByDateRange"

  - Addressing input action: "http://ws.eoddata.com/Data/SymbolHistoryPeriodByDateRange"

  - Addressing output action: "http://ws.eoddata.com/Data/SymbolHistoryPeriodByDateRangeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SymbolHistoryPeriodByDateRange_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SymbolHistoryPeriodByDateRange* ns1__SymbolHistoryPeriodByDateRange,
    // output parameters:
    _ns1__SymbolHistoryPeriodByDateRangeResponse&ns1__SymbolHistoryPeriodByDateRangeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SymbolHistoryPeriodByDateRange_(
    struct soap *soap,
    // input parameters:
    _ns1__SymbolHistoryPeriodByDateRange* ns1__SymbolHistoryPeriodByDateRange,
    // output parameters:
    _ns1__SymbolHistoryPeriodByDateRangeResponse&ns1__SymbolHistoryPeriodByDateRangeResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SymbolHistoryPeriodByDateRange_ SOAP
//gsoap ns1  service method-style:	SymbolHistoryPeriodByDateRange_ document
//gsoap ns1  service method-encoding:	SymbolHistoryPeriodByDateRange_ literal
//gsoap ns1  service method-input-action:	SymbolHistoryPeriodByDateRange_ http://ws.eoddata.com/Data/SymbolHistoryPeriodByDateRange
//gsoap ns1  service method-output-action:	SymbolHistoryPeriodByDateRange_ http://ws.eoddata.com/Data/SymbolHistoryPeriodByDateRangeResponse
int __ns1__SymbolHistoryPeriodByDateRange_(
    _ns1__SymbolHistoryPeriodByDateRange* ns1__SymbolHistoryPeriodByDateRange,	///< Input parameter
    _ns1__SymbolHistoryPeriodByDateRangeResponse&ns1__SymbolHistoryPeriodByDateRangeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__QuoteListByDatePeriod_                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__QuoteListByDatePeriod_" of service binding "DataSoap".
Returns a complete list of quotes for an entire exchange, specific date, and specific
period.<br/>INPUT: Token (Login Token), Exchange (eg: NASDAQ), QuoteDate (format:yyyyMMdd
eg:20080225), Period (1, 5, 10, 15, 30, h, d, w, m)<br/>OUTPUT: List of quotes

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/QuoteListByDatePeriod"

  - Addressing input action: "http://ws.eoddata.com/Data/QuoteListByDatePeriod"

  - Addressing output action: "http://ws.eoddata.com/Data/QuoteListByDatePeriodResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__QuoteListByDatePeriod_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__QuoteListByDatePeriod*        ns1__QuoteListByDatePeriod,
    // output parameters:
    _ns1__QuoteListByDatePeriodResponse&ns1__QuoteListByDatePeriodResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__QuoteListByDatePeriod_(
    struct soap *soap,
    // input parameters:
    _ns1__QuoteListByDatePeriod*        ns1__QuoteListByDatePeriod,
    // output parameters:
    _ns1__QuoteListByDatePeriodResponse&ns1__QuoteListByDatePeriodResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	QuoteListByDatePeriod_ SOAP
//gsoap ns1  service method-style:	QuoteListByDatePeriod_ document
//gsoap ns1  service method-encoding:	QuoteListByDatePeriod_ literal
//gsoap ns1  service method-input-action:	QuoteListByDatePeriod_ http://ws.eoddata.com/Data/QuoteListByDatePeriod
//gsoap ns1  service method-output-action:	QuoteListByDatePeriod_ http://ws.eoddata.com/Data/QuoteListByDatePeriodResponse
int __ns1__QuoteListByDatePeriod_(
    _ns1__QuoteListByDatePeriod*        ns1__QuoteListByDatePeriod,	///< Input parameter
    _ns1__QuoteListByDatePeriodResponse&ns1__QuoteListByDatePeriodResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__QuoteListByDatePeriod2_                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__QuoteListByDatePeriod2_" of service binding "DataSoap".
Returns a complete list of quotes for an entire exchange, specific date, and specific
period (compact format).<br/>INPUT: Token (Login Token), Exchange (eg: NASDAQ),
QuoteDate (format:yyyyMMdd eg:20080225), Period (1, 5, 10, 15, 30, h, d, w, m)<br/>OUTPUT:
List of quotes

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/QuoteListByDatePeriod2"

  - Addressing input action: "http://ws.eoddata.com/Data/QuoteListByDatePeriod2"

  - Addressing output action: "http://ws.eoddata.com/Data/QuoteListByDatePeriod2Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__QuoteListByDatePeriod2_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__QuoteListByDatePeriod2*       ns1__QuoteListByDatePeriod2,
    // output parameters:
    _ns1__QuoteListByDatePeriod2Response&ns1__QuoteListByDatePeriod2Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__QuoteListByDatePeriod2_(
    struct soap *soap,
    // input parameters:
    _ns1__QuoteListByDatePeriod2*       ns1__QuoteListByDatePeriod2,
    // output parameters:
    _ns1__QuoteListByDatePeriod2Response&ns1__QuoteListByDatePeriod2Response
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	QuoteListByDatePeriod2_ SOAP
//gsoap ns1  service method-style:	QuoteListByDatePeriod2_ document
//gsoap ns1  service method-encoding:	QuoteListByDatePeriod2_ literal
//gsoap ns1  service method-input-action:	QuoteListByDatePeriod2_ http://ws.eoddata.com/Data/QuoteListByDatePeriod2
//gsoap ns1  service method-output-action:	QuoteListByDatePeriod2_ http://ws.eoddata.com/Data/QuoteListByDatePeriod2Response
int __ns1__QuoteListByDatePeriod2_(
    _ns1__QuoteListByDatePeriod2*       ns1__QuoteListByDatePeriod2,	///< Input parameter
    _ns1__QuoteListByDatePeriod2Response&ns1__QuoteListByDatePeriod2Response	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SymbolChangesByExchange_                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SymbolChangesByExchange_" of service binding "DataSoap".
Returns a list of symbol changes of a given exchange. <br/>INPUT: Token (Login Token),
Exchange (eg: NASDAQ)<br/>OUTPUT: List of symbol changes

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/SymbolChangesByExchange"

  - Addressing input action: "http://ws.eoddata.com/Data/SymbolChangesByExchange"

  - Addressing output action: "http://ws.eoddata.com/Data/SymbolChangesByExchangeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SymbolChangesByExchange_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SymbolChangesByExchange*      ns1__SymbolChangesByExchange,
    // output parameters:
    _ns1__SymbolChangesByExchangeResponse&ns1__SymbolChangesByExchangeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SymbolChangesByExchange_(
    struct soap *soap,
    // input parameters:
    _ns1__SymbolChangesByExchange*      ns1__SymbolChangesByExchange,
    // output parameters:
    _ns1__SymbolChangesByExchangeResponse&ns1__SymbolChangesByExchangeResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SymbolChangesByExchange_ SOAP
//gsoap ns1  service method-style:	SymbolChangesByExchange_ document
//gsoap ns1  service method-encoding:	SymbolChangesByExchange_ literal
//gsoap ns1  service method-input-action:	SymbolChangesByExchange_ http://ws.eoddata.com/Data/SymbolChangesByExchange
//gsoap ns1  service method-output-action:	SymbolChangesByExchange_ http://ws.eoddata.com/Data/SymbolChangesByExchangeResponse
int __ns1__SymbolChangesByExchange_(
    _ns1__SymbolChangesByExchange*      ns1__SymbolChangesByExchange,	///< Input parameter
    _ns1__SymbolChangesByExchangeResponse&ns1__SymbolChangesByExchangeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__DataClientLatestVersion_                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__DataClientLatestVersion_" of service binding "DataSoap".
Returns the latest version information of Data Client.<br/>INPUT: Token (Login Token)<br/>OUTPUT:
Date Client Version

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/DataClientLatestVersion"

  - Addressing input action: "http://ws.eoddata.com/Data/DataClientLatestVersion"

  - Addressing output action: "http://ws.eoddata.com/Data/DataClientLatestVersionResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__DataClientLatestVersion_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__DataClientLatestVersion*      ns1__DataClientLatestVersion,
    // output parameters:
    _ns1__DataClientLatestVersionResponse&ns1__DataClientLatestVersionResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__DataClientLatestVersion_(
    struct soap *soap,
    // input parameters:
    _ns1__DataClientLatestVersion*      ns1__DataClientLatestVersion,
    // output parameters:
    _ns1__DataClientLatestVersionResponse&ns1__DataClientLatestVersionResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DataClientLatestVersion_ SOAP
//gsoap ns1  service method-style:	DataClientLatestVersion_ document
//gsoap ns1  service method-encoding:	DataClientLatestVersion_ literal
//gsoap ns1  service method-input-action:	DataClientLatestVersion_ http://ws.eoddata.com/Data/DataClientLatestVersion
//gsoap ns1  service method-output-action:	DataClientLatestVersion_ http://ws.eoddata.com/Data/DataClientLatestVersionResponse
int __ns1__DataClientLatestVersion_(
    _ns1__DataClientLatestVersion*      ns1__DataClientLatestVersion,	///< Input parameter
    _ns1__DataClientLatestVersionResponse&ns1__DataClientLatestVersionResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__DataFormats_                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__DataFormats_" of service binding "DataSoap".
Returns the list of data formats.<br/>INPUT: Token (Login Token)<br/>OUTPUT: List
of DataFormats

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/DataFormats"

  - Addressing input action: "http://ws.eoddata.com/Data/DataFormats"

  - Addressing output action: "http://ws.eoddata.com/Data/DataFormatsResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__DataFormats_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__DataFormats*                  ns1__DataFormats,
    // output parameters:
    _ns1__DataFormatsResponse          &ns1__DataFormatsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__DataFormats_(
    struct soap *soap,
    // input parameters:
    _ns1__DataFormats*                  ns1__DataFormats,
    // output parameters:
    _ns1__DataFormatsResponse          &ns1__DataFormatsResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DataFormats_ SOAP
//gsoap ns1  service method-style:	DataFormats_ document
//gsoap ns1  service method-encoding:	DataFormats_ literal
//gsoap ns1  service method-input-action:	DataFormats_ http://ws.eoddata.com/Data/DataFormats
//gsoap ns1  service method-output-action:	DataFormats_ http://ws.eoddata.com/Data/DataFormatsResponse
int __ns1__DataFormats_(
    _ns1__DataFormats*                  ns1__DataFormats,	///< Input parameter
    _ns1__DataFormatsResponse          &ns1__DataFormatsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__UpdateDataFormat_                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__UpdateDataFormat_" of service binding "DataSoap".
Update preferred Data Format<br/>INPUT: Token (Login Token), IncludeHeader, IncludeSuffix<br/>OUTPUT:
List of DataFormats

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/UpdateDataFormat"

  - Addressing input action: "http://ws.eoddata.com/Data/UpdateDataFormat"

  - Addressing output action: "http://ws.eoddata.com/Data/UpdateDataFormatResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__UpdateDataFormat_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__UpdateDataFormat*             ns1__UpdateDataFormat,
    // output parameters:
    _ns1__UpdateDataFormatResponse     &ns1__UpdateDataFormatResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__UpdateDataFormat_(
    struct soap *soap,
    // input parameters:
    _ns1__UpdateDataFormat*             ns1__UpdateDataFormat,
    // output parameters:
    _ns1__UpdateDataFormatResponse     &ns1__UpdateDataFormatResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	UpdateDataFormat_ SOAP
//gsoap ns1  service method-style:	UpdateDataFormat_ document
//gsoap ns1  service method-encoding:	UpdateDataFormat_ literal
//gsoap ns1  service method-input-action:	UpdateDataFormat_ http://ws.eoddata.com/Data/UpdateDataFormat
//gsoap ns1  service method-output-action:	UpdateDataFormat_ http://ws.eoddata.com/Data/UpdateDataFormatResponse
int __ns1__UpdateDataFormat_(
    _ns1__UpdateDataFormat*             ns1__UpdateDataFormat,	///< Input parameter
    _ns1__UpdateDataFormatResponse     &ns1__UpdateDataFormatResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__ValidateAccess_                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__ValidateAccess_" of service binding "DataSoap".
Validate access for an entire exchange, specific date, and specific period.<br/>INPUT:
Token (Login Token), Exchange (eg: NASDAQ), QuoteDate (format:yyyyMMdd eg:20080225),
Period (1, 5, 10, 15, 30, h, d, w, m)<br/>OUTPUT: RESPONSE

  - SOAP document/literal style messaging

  - Action: "http://ws.eoddata.com/Data/ValidateAccess"

  - Addressing input action: "http://ws.eoddata.com/Data/ValidateAccess"

  - Addressing output action: "http://ws.eoddata.com/Data/ValidateAccessResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__ValidateAccess_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__ValidateAccess*               ns1__ValidateAccess,
    // output parameters:
    _ns1__ValidateAccessResponse       &ns1__ValidateAccessResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__ValidateAccess_(
    struct soap *soap,
    // input parameters:
    _ns1__ValidateAccess*               ns1__ValidateAccess,
    // output parameters:
    _ns1__ValidateAccessResponse       &ns1__ValidateAccessResponse
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	ValidateAccess_ SOAP
//gsoap ns1  service method-style:	ValidateAccess_ document
//gsoap ns1  service method-encoding:	ValidateAccess_ literal
//gsoap ns1  service method-input-action:	ValidateAccess_ http://ws.eoddata.com/Data/ValidateAccess
//gsoap ns1  service method-output-action:	ValidateAccess_ http://ws.eoddata.com/Data/ValidateAccessResponse
int __ns1__ValidateAccess_(
    _ns1__ValidateAccess*               ns1__ValidateAccess,	///< Input parameter
    _ns1__ValidateAccessResponse       &ns1__ValidateAccessResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__LoginResponse__                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__LoginResponse__" of service binding "DataSoap".
Login to EODData Financial Information Web Service. Used for Web Authentication.<br/>INPUT:
Username, Password<br/>OUTPUT: Login Token

  - One-way service response message

  - GET document/literal style messaging

  - Action: "/Login"

  - Addressing output action: "/Login"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__LoginResponse__(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // parameters:
    ns1__LOGINRESPONSE*                 ns1__LOGINRESPONSE_,
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__LoginResponse__(
    struct soap *soap,
    // parameters:
    ns1__LOGINRESPONSE*                 ns1__LOGINRESPONSE_,
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	LoginResponse__ GET
//gsoap ns1  service method-style:	LoginResponse__ document
//gsoap ns1  service method-encoding:	LoginResponse__ literal
//gsoap ns1  service method-action:	LoginResponse__ /Login
int __ns1__LoginResponse__(
    ns1__LOGINRESPONSE                 &ns1__LOGINRESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__Login2Response__                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__Login2Response__" of service binding "DataSoap".
Login to EODData Financial Information Web Service. Used for Application Authentication.<br/>INPUT:
Username, Password, Version (Application Version)<br/>OUTPUT: Login Token

  - One-way service response message

  - GET document/literal style messaging

  - Action: "/Login2"

  - Addressing output action: "/Login2"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__Login2Response__(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // parameters:
    ns1__LOGINRESPONSE*                 ns1__LOGINRESPONSE_,
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__Login2Response__(
    struct soap *soap,
    // parameters:
    ns1__LOGINRESPONSE*                 ns1__LOGINRESPONSE_,
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	Login2Response__ GET
//gsoap ns1  service method-style:	Login2Response__ document
//gsoap ns1  service method-encoding:	Login2Response__ literal
//gsoap ns1  service method-action:	Login2Response__ /Login2
int __ns1__Login2Response__(
    ns1__LOGINRESPONSE                 &ns1__LOGINRESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__MembershipResponse__                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__MembershipResponse__" of service binding "DataSoap".
Returns membership of user.<br/>INPUT: Token (Login Token)<br/>OUTPUT: Membership

  - One-way service response message

  - GET document/literal style messaging

  - Action: "/Membership"

  - Addressing output action: "/Membership"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__MembershipResponse__(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__MembershipResponse__(
    struct soap *soap,
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	MembershipResponse__ GET
//gsoap ns1  service method-style:	MembershipResponse__ document
//gsoap ns1  service method-encoding:	MembershipResponse__ literal
//gsoap ns1  service method-action:	MembershipResponse__ /Membership
int __ns1__MembershipResponse__(
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__ExchangeListResponse__                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__ExchangeListResponse__" of service binding "DataSoap".
Returns a list of available exchanges.<br/>INPUT: Token (Login Token)<br/>OUTPUT:
List of exchanges

  - One-way service response message

  - GET document/literal style messaging

  - Action: "/ExchangeList"

  - Addressing output action: "/ExchangeList"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__ExchangeListResponse__(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__ExchangeListResponse__(
    struct soap *soap,
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	ExchangeListResponse__ GET
//gsoap ns1  service method-style:	ExchangeListResponse__ document
//gsoap ns1  service method-encoding:	ExchangeListResponse__ literal
//gsoap ns1  service method-action:	ExchangeListResponse__ /ExchangeList
int __ns1__ExchangeListResponse__(
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__ExchangeGetResponse__                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__ExchangeGetResponse__" of service binding "DataSoap".
Returns detailed information of a specific exchange.<br/>INPUT: Token (Login Token),
Exchange (eg: NASDAQ)<br/>OUTPUT: Exchange

  - One-way service response message

  - GET document/literal style messaging

  - Action: "/ExchangeGet"

  - Addressing output action: "/ExchangeGet"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__ExchangeGetResponse__(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__ExchangeGetResponse__(
    struct soap *soap,
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	ExchangeGetResponse__ GET
//gsoap ns1  service method-style:	ExchangeGetResponse__ document
//gsoap ns1  service method-encoding:	ExchangeGetResponse__ literal
//gsoap ns1  service method-action:	ExchangeGetResponse__ /ExchangeGet
int __ns1__ExchangeGetResponse__(
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SymbolListResponse__                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SymbolListResponse__" of service binding "DataSoap".
Returns a list of symbols of a specified exchange. <br/>INPUT: Token (Login Token),
Exchange (eg: NASDAQ)<br/>OUTPUT: List of symbols

  - One-way service response message

  - GET document/literal style messaging

  - Action: "/SymbolList"

  - Addressing output action: "/SymbolList"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SymbolListResponse__(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SymbolListResponse__(
    struct soap *soap,
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SymbolListResponse__ GET
//gsoap ns1  service method-style:	SymbolListResponse__ document
//gsoap ns1  service method-encoding:	SymbolListResponse__ literal
//gsoap ns1  service method-action:	SymbolListResponse__ /SymbolList
int __ns1__SymbolListResponse__(
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SymbolList2Response__                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SymbolList2Response__" of service binding "DataSoap".
Returns a list of symbols of a specified exchange (compact format).<br/>INPUT: Token
(Login Token), Exchange (eg: NASDAQ)<br/>OUTPUT: List of symbols

  - One-way service response message

  - GET document/literal style messaging

  - Action: "/SymbolList2"

  - Addressing output action: "/SymbolList2"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SymbolList2Response__(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SymbolList2Response__(
    struct soap *soap,
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SymbolList2Response__ GET
//gsoap ns1  service method-style:	SymbolList2Response__ document
//gsoap ns1  service method-encoding:	SymbolList2Response__ literal
//gsoap ns1  service method-action:	SymbolList2Response__ /SymbolList2
int __ns1__SymbolList2Response__(
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__QuoteGetResponse__                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__QuoteGetResponse__" of service binding "DataSoap".
Returns an end of day quote for a specific symbol.<br/>INPUT: Token (Login Token),
Exchange (eg: NASDAQ), Symbol (eg:MSFT)<br/>OUTPUT: End of day quote

  - One-way service response message

  - GET document/literal style messaging

  - Action: "/QuoteGet"

  - Addressing output action: "/QuoteGet"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__QuoteGetResponse__(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__QuoteGetResponse__(
    struct soap *soap,
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	QuoteGetResponse__ GET
//gsoap ns1  service method-style:	QuoteGetResponse__ document
//gsoap ns1  service method-encoding:	QuoteGetResponse__ literal
//gsoap ns1  service method-action:	QuoteGetResponse__ /QuoteGet
int __ns1__QuoteGetResponse__(
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__QuoteList2Response__                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__QuoteList2Response__" of service binding "DataSoap".
Returns latest end of day quotes for a list of symbols of a specific exchange (compact
format).<br/>INPUT: Token (Login Token), Exchange (eg: NASDAQ), Symbols (eg:MSFT,INTC)<br/>OUTPUT:
List of end of day quotes

  - One-way service response message

  - GET document/literal style messaging

  - Action: "/QuoteList2"

  - Addressing output action: "/QuoteList2"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__QuoteList2Response__(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__QuoteList2Response__(
    struct soap *soap,
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	QuoteList2Response__ GET
//gsoap ns1  service method-style:	QuoteList2Response__ document
//gsoap ns1  service method-encoding:	QuoteList2Response__ literal
//gsoap ns1  service method-action:	QuoteList2Response__ /QuoteList2
int __ns1__QuoteList2Response__(
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SymbolGetResponse__                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SymbolGetResponse__" of service binding "DataSoap".
Returns detailed information of a specific symbol.<br/>INPUT: Token (Login Token),
Exchange (eg: NASDAQ), Symbol (eg:MSFT)<br/>OUTPUT: Symbol

  - One-way service response message

  - GET document/literal style messaging

  - Action: "/SymbolGet"

  - Addressing output action: "/SymbolGet"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SymbolGetResponse__(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SymbolGetResponse__(
    struct soap *soap,
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SymbolGetResponse__ GET
//gsoap ns1  service method-style:	SymbolGetResponse__ document
//gsoap ns1  service method-encoding:	SymbolGetResponse__ literal
//gsoap ns1  service method-action:	SymbolGetResponse__ /SymbolGet
int __ns1__SymbolGetResponse__(
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__QuoteListResponse__                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__QuoteListResponse__" of service binding "DataSoap".
Returns a complete list of end of day quotes for an entire exchange.<br/>INPUT:
Token (Login Token), Exchange (eg: NASDAQ)<br/>OUTPUT: List of end of day quotes

  - One-way service response message

  - GET document/literal style messaging

  - Action: "/QuoteList"

  - Addressing output action: "/QuoteList"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__QuoteListResponse__(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__QuoteListResponse__(
    struct soap *soap,
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	QuoteListResponse__ GET
//gsoap ns1  service method-style:	QuoteListResponse__ document
//gsoap ns1  service method-encoding:	QuoteListResponse__ literal
//gsoap ns1  service method-action:	QuoteListResponse__ /QuoteList
int __ns1__QuoteListResponse__(
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__NewsListResponse__                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__NewsListResponse__" of service binding "DataSoap".
Returns a list of News articles for an entire exchange.<br/>INPUT: Token (Login
Token), Exchange (eg: NASDAQ)<br/>OUTPUT: List of News articles

  - One-way service response message

  - GET document/literal style messaging

  - Action: "/NewsList"

  - Addressing output action: "/NewsList"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__NewsListResponse__(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__NewsListResponse__(
    struct soap *soap,
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	NewsListResponse__ GET
//gsoap ns1  service method-style:	NewsListResponse__ document
//gsoap ns1  service method-encoding:	NewsListResponse__ literal
//gsoap ns1  service method-action:	NewsListResponse__ /NewsList
int __ns1__NewsListResponse__(
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__NewsListBySymbolResponse__                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__NewsListBySymbolResponse__" of service binding "DataSoap".
Returns a list of News articles for a given Exchange and Symbol.<br/>INPUT: Token
(Login Token), Exchange (eg: NASDAQ), Symbol (eg: AAPL)<br/>OUTPUT: List of News
articles

  - One-way service response message

  - GET document/literal style messaging

  - Action: "/NewsListBySymbol"

  - Addressing output action: "/NewsListBySymbol"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__NewsListBySymbolResponse__(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__NewsListBySymbolResponse__(
    struct soap *soap,
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	NewsListBySymbolResponse__ GET
//gsoap ns1  service method-style:	NewsListBySymbolResponse__ document
//gsoap ns1  service method-encoding:	NewsListBySymbolResponse__ literal
//gsoap ns1  service method-action:	NewsListBySymbolResponse__ /NewsListBySymbol
int __ns1__NewsListBySymbolResponse__(
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__FundamentalListResponse__                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__FundamentalListResponse__" of service binding "DataSoap".
Returns a complete list of fundamental data for an entire exchange.<br/>INPUT: Token
(Login Token), Exchange (eg: NASDAQ)<br/>OUTPUT: List of fundamentals

  - One-way service response message

  - GET document/literal style messaging

  - Action: "/FundamentalList"

  - Addressing output action: "/FundamentalList"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__FundamentalListResponse__(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__FundamentalListResponse__(
    struct soap *soap,
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	FundamentalListResponse__ GET
//gsoap ns1  service method-style:	FundamentalListResponse__ document
//gsoap ns1  service method-encoding:	FundamentalListResponse__ literal
//gsoap ns1  service method-action:	FundamentalListResponse__ /FundamentalList
int __ns1__FundamentalListResponse__(
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__TechnicalListResponse__                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__TechnicalListResponse__" of service binding "DataSoap".
Returns a complete list of technical data for an entire exchange. <br/>INPUT: Token
(Login Token), Exchange (eg: NASDAQ)<br/>OUTPUT: List of quotes

  - One-way service response message

  - GET document/literal style messaging

  - Action: "/TechnicalList"

  - Addressing output action: "/TechnicalList"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__TechnicalListResponse__(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__TechnicalListResponse__(
    struct soap *soap,
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	TechnicalListResponse__ GET
//gsoap ns1  service method-style:	TechnicalListResponse__ document
//gsoap ns1  service method-encoding:	TechnicalListResponse__ literal
//gsoap ns1  service method-action:	TechnicalListResponse__ /TechnicalList
int __ns1__TechnicalListResponse__(
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__QuoteListByDateResponse__                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__QuoteListByDateResponse__" of service binding "DataSoap".
Returns a complete list of end of day quotes for an entire exchange and a specific
date.<br/>INPUT: Token (Login Token), Exchange (eg: NASDAQ), QuoteDate (format:yyyyMMdd
eg:20080225)<br/>OUTPUT: List of end of day quotes

  - One-way service response message

  - GET document/literal style messaging

  - Action: "/QuoteListByDate"

  - Addressing output action: "/QuoteListByDate"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__QuoteListByDateResponse__(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__QuoteListByDateResponse__(
    struct soap *soap,
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	QuoteListByDateResponse__ GET
//gsoap ns1  service method-style:	QuoteListByDateResponse__ document
//gsoap ns1  service method-encoding:	QuoteListByDateResponse__ literal
//gsoap ns1  service method-action:	QuoteListByDateResponse__ /QuoteListByDate
int __ns1__QuoteListByDateResponse__(
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__QuoteListByDate2Response__                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__QuoteListByDate2Response__" of service binding "DataSoap".
Returns a complete list of end of day quotes for an entire exchange and a specific
date (compact format).<br/>INPUT: Token (Login Token), Exchange (eg: NASDAQ), QuoteDate
(format:yyyyMMdd eg:20080225)<br/>OUTPUT: List of end of day quotes

  - One-way service response message

  - GET document/literal style messaging

  - Action: "/QuoteListByDate2"

  - Addressing output action: "/QuoteListByDate2"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__QuoteListByDate2Response__(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__QuoteListByDate2Response__(
    struct soap *soap,
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	QuoteListByDate2Response__ GET
//gsoap ns1  service method-style:	QuoteListByDate2Response__ document
//gsoap ns1  service method-encoding:	QuoteListByDate2Response__ literal
//gsoap ns1  service method-action:	QuoteListByDate2Response__ /QuoteListByDate2
int __ns1__QuoteListByDate2Response__(
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SymbolHistoryResponse__                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SymbolHistoryResponse__" of service binding "DataSoap".
Returns a list of historical end of day data of a specified symbol and specified
start date up to today's date.<br/>INPUT: Token (Login Token), Exchange (eg: NASDAQ),
Symbol (eg:MSFT), StartDate (format:yyyyMMdd eg:20080225)<br/>OUTPUT: List of historical
end of day quotes

  - One-way service response message

  - GET document/literal style messaging

  - Action: "/SymbolHistory"

  - Addressing output action: "/SymbolHistory"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SymbolHistoryResponse__(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SymbolHistoryResponse__(
    struct soap *soap,
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SymbolHistoryResponse__ GET
//gsoap ns1  service method-style:	SymbolHistoryResponse__ document
//gsoap ns1  service method-encoding:	SymbolHistoryResponse__ literal
//gsoap ns1  service method-action:	SymbolHistoryResponse__ /SymbolHistory
int __ns1__SymbolHistoryResponse__(
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__Top10GainsResponse__                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__Top10GainsResponse__" of service binding "DataSoap".
Returns a list of the Top 10 Gains of a specified exchange. <br/>INPUT: Token (Login
Token), Exchange (eg: NASDAQ)<br/>OUTPUT: List of quotes

  - One-way service response message

  - GET document/literal style messaging

  - Action: "/Top10Gains"

  - Addressing output action: "/Top10Gains"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__Top10GainsResponse__(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__Top10GainsResponse__(
    struct soap *soap,
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	Top10GainsResponse__ GET
//gsoap ns1  service method-style:	Top10GainsResponse__ document
//gsoap ns1  service method-encoding:	Top10GainsResponse__ literal
//gsoap ns1  service method-action:	Top10GainsResponse__ /Top10Gains
int __ns1__Top10GainsResponse__(
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__Top10LossesResponse__                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__Top10LossesResponse__" of service binding "DataSoap".
Returns a list of the Top 10 Losses of a specified exchange. <br/>INPUT: Token (Login
Token), Exchange (eg: NASDAQ)<br/>OUTPUT: List of quotes

  - One-way service response message

  - GET document/literal style messaging

  - Action: "/Top10Losses"

  - Addressing output action: "/Top10Losses"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__Top10LossesResponse__(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__Top10LossesResponse__(
    struct soap *soap,
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	Top10LossesResponse__ GET
//gsoap ns1  service method-style:	Top10LossesResponse__ document
//gsoap ns1  service method-encoding:	Top10LossesResponse__ literal
//gsoap ns1  service method-action:	Top10LossesResponse__ /Top10Losses
int __ns1__Top10LossesResponse__(
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SymbolChartResponse__                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SymbolChartResponse__" of service binding "DataSoap".
Returns a URL to a chart image of a specific symbol.<br/>INPUT: Token (Login Token),
Exchange (eg: NASDAQ), Symbol (eg:MSFT)<br/>OUTPUT: Chart URL

  - One-way service response message

  - GET document/literal style messaging

  - Action: "/SymbolChart"

  - Addressing output action: "/SymbolChart"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SymbolChartResponse__(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SymbolChartResponse__(
    struct soap *soap,
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SymbolChartResponse__ GET
//gsoap ns1  service method-style:	SymbolChartResponse__ document
//gsoap ns1  service method-encoding:	SymbolChartResponse__ literal
//gsoap ns1  service method-action:	SymbolChartResponse__ /SymbolChart
int __ns1__SymbolChartResponse__(
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__ExchangeMonthsResponse__                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__ExchangeMonthsResponse__" of service binding "DataSoap".
Returns the number of Months history a user is allowed to download.<br/>INPUT: Token
(Login Token), Exchange (eg: NASDAQ)<br/>OUTPUT: Number of Months

  - One-way service response message

  - GET document/literal style messaging

  - Action: "/ExchangeMonths"

  - Addressing output action: "/ExchangeMonths"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__ExchangeMonthsResponse__(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__ExchangeMonthsResponse__(
    struct soap *soap,
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	ExchangeMonthsResponse__ GET
//gsoap ns1  service method-style:	ExchangeMonthsResponse__ document
//gsoap ns1  service method-encoding:	ExchangeMonthsResponse__ literal
//gsoap ns1  service method-action:	ExchangeMonthsResponse__ /ExchangeMonths
int __ns1__ExchangeMonthsResponse__(
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SplitListByExchangeResponse__                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SplitListByExchangeResponse__" of service binding "DataSoap".
Returns a list of Splits of a specific exchange.<br/>INPUT: Token (Login Token),
Exchange (eg: NASDAQ)<br/>OUTPUT: List of splits

  - One-way service response message

  - GET document/literal style messaging

  - Action: "/SplitListByExchange"

  - Addressing output action: "/SplitListByExchange"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SplitListByExchangeResponse__(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SplitListByExchangeResponse__(
    struct soap *soap,
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SplitListByExchangeResponse__ GET
//gsoap ns1  service method-style:	SplitListByExchangeResponse__ document
//gsoap ns1  service method-encoding:	SplitListByExchangeResponse__ literal
//gsoap ns1  service method-action:	SplitListByExchangeResponse__ /SplitListByExchange
int __ns1__SplitListByExchangeResponse__(
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SplitListBySymbolResponse__                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SplitListBySymbolResponse__" of service binding "DataSoap".
Returns a list of Splits of a specific symbol.<br/>INPUT: Token (Login Token), Exchange
(eg: NASDAQ), Symbol (eg:MSFT)<br/>OUTPUT: List of splits

  - One-way service response message

  - GET document/literal style messaging

  - Action: "/SplitListBySymbol"

  - Addressing output action: "/SplitListBySymbol"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SplitListBySymbolResponse__(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SplitListBySymbolResponse__(
    struct soap *soap,
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SplitListBySymbolResponse__ GET
//gsoap ns1  service method-style:	SplitListBySymbolResponse__ document
//gsoap ns1  service method-encoding:	SplitListBySymbolResponse__ literal
//gsoap ns1  service method-action:	SplitListBySymbolResponse__ /SplitListBySymbol
int __ns1__SplitListBySymbolResponse__(
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__CountryListResponse__                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__CountryListResponse__" of service binding "DataSoap".
Returns a list of available countries.<br/>INPUT: Token (Login Token)<br/>OUTPUT:
List of countries

  - One-way service response message

  - GET document/literal style messaging

  - Action: "/CountryList"

  - Addressing output action: "/CountryList"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__CountryListResponse__(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__CountryListResponse__(
    struct soap *soap,
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	CountryListResponse__ GET
//gsoap ns1  service method-style:	CountryListResponse__ document
//gsoap ns1  service method-encoding:	CountryListResponse__ literal
//gsoap ns1  service method-action:	CountryListResponse__ /CountryList
int __ns1__CountryListResponse__(
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SymbolHistoryPeriodResponse__                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SymbolHistoryPeriodResponse__" of service binding "DataSoap".
Returns a list of historical data of a specified symbol, specified date and specified
period.<br/>INPUT: Token (Login Token), Exchange (eg: NASDAQ), Symbol (eg:MSFT),
Date (format:yyyyMMdd eg:20080225), Period (1, 5, 10, 15, 30, h, d, w, m)<br/>OUTPUT:
List of historical quotes

  - One-way service response message

  - GET document/literal style messaging

  - Action: "/SymbolHistoryPeriod"

  - Addressing output action: "/SymbolHistoryPeriod"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SymbolHistoryPeriodResponse__(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SymbolHistoryPeriodResponse__(
    struct soap *soap,
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SymbolHistoryPeriodResponse__ GET
//gsoap ns1  service method-style:	SymbolHistoryPeriodResponse__ document
//gsoap ns1  service method-encoding:	SymbolHistoryPeriodResponse__ literal
//gsoap ns1  service method-action:	SymbolHistoryPeriodResponse__ /SymbolHistoryPeriod
int __ns1__SymbolHistoryPeriodResponse__(
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SymbolHistoryPeriodByDateRangeResponse__                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SymbolHistoryPeriodByDateRangeResponse__" of service binding "DataSoap".
Returns a list of historical data of a specified symbol, specified date range and
specified period.<br/>INPUT: Token (Login Token), Exchange (eg: NASDAQ), Symbol
(eg:MSFT), StartDate (format:yyyyMMdd eg:20080225), EndDate (format:yyyyMMdd eg:20080225),
Period (1, 5, 10, 15, 30, h, d, w, m)<br/>OUTPUT: List of historical quotes

  - One-way service response message

  - GET document/literal style messaging

  - Action: "/SymbolHistoryPeriodByDateRange"

  - Addressing output action: "/SymbolHistoryPeriodByDateRange"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SymbolHistoryPeriodByDateRangeResponse__(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SymbolHistoryPeriodByDateRangeResponse__(
    struct soap *soap,
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SymbolHistoryPeriodByDateRangeResponse__ GET
//gsoap ns1  service method-style:	SymbolHistoryPeriodByDateRangeResponse__ document
//gsoap ns1  service method-encoding:	SymbolHistoryPeriodByDateRangeResponse__ literal
//gsoap ns1  service method-action:	SymbolHistoryPeriodByDateRangeResponse__ /SymbolHistoryPeriodByDateRange
int __ns1__SymbolHistoryPeriodByDateRangeResponse__(
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__QuoteListByDatePeriodResponse__                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__QuoteListByDatePeriodResponse__" of service binding "DataSoap".
Returns a complete list of quotes for an entire exchange, specific date, and specific
period.<br/>INPUT: Token (Login Token), Exchange (eg: NASDAQ), QuoteDate (format:yyyyMMdd
eg:20080225), Period (1, 5, 10, 15, 30, h, d, w, m)<br/>OUTPUT: List of quotes

  - One-way service response message

  - GET document/literal style messaging

  - Action: "/QuoteListByDatePeriod"

  - Addressing output action: "/QuoteListByDatePeriod"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__QuoteListByDatePeriodResponse__(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__QuoteListByDatePeriodResponse__(
    struct soap *soap,
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	QuoteListByDatePeriodResponse__ GET
//gsoap ns1  service method-style:	QuoteListByDatePeriodResponse__ document
//gsoap ns1  service method-encoding:	QuoteListByDatePeriodResponse__ literal
//gsoap ns1  service method-action:	QuoteListByDatePeriodResponse__ /QuoteListByDatePeriod
int __ns1__QuoteListByDatePeriodResponse__(
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__QuoteListByDatePeriod2Response__                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__QuoteListByDatePeriod2Response__" of service binding "DataSoap".
Returns a complete list of quotes for an entire exchange, specific date, and specific
period (compact format).<br/>INPUT: Token (Login Token), Exchange (eg: NASDAQ),
QuoteDate (format:yyyyMMdd eg:20080225), Period (1, 5, 10, 15, 30, h, d, w, m)<br/>OUTPUT:
List of quotes

  - One-way service response message

  - GET document/literal style messaging

  - Action: "/QuoteListByDatePeriod2"

  - Addressing output action: "/QuoteListByDatePeriod2"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__QuoteListByDatePeriod2Response__(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__QuoteListByDatePeriod2Response__(
    struct soap *soap,
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	QuoteListByDatePeriod2Response__ GET
//gsoap ns1  service method-style:	QuoteListByDatePeriod2Response__ document
//gsoap ns1  service method-encoding:	QuoteListByDatePeriod2Response__ literal
//gsoap ns1  service method-action:	QuoteListByDatePeriod2Response__ /QuoteListByDatePeriod2
int __ns1__QuoteListByDatePeriod2Response__(
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SymbolChangesByExchangeResponse__                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SymbolChangesByExchangeResponse__" of service binding "DataSoap".
Returns a list of symbol changes of a given exchange. <br/>INPUT: Token (Login Token),
Exchange (eg: NASDAQ)<br/>OUTPUT: List of symbol changes

  - One-way service response message

  - GET document/literal style messaging

  - Action: "/SymbolChangesByExchange"

  - Addressing output action: "/SymbolChangesByExchange"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SymbolChangesByExchangeResponse__(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SymbolChangesByExchangeResponse__(
    struct soap *soap,
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SymbolChangesByExchangeResponse__ GET
//gsoap ns1  service method-style:	SymbolChangesByExchangeResponse__ document
//gsoap ns1  service method-encoding:	SymbolChangesByExchangeResponse__ literal
//gsoap ns1  service method-action:	SymbolChangesByExchangeResponse__ /SymbolChangesByExchange
int __ns1__SymbolChangesByExchangeResponse__(
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__DataClientLatestVersionResponse__                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__DataClientLatestVersionResponse__" of service binding "DataSoap".
Returns the latest version information of Data Client.<br/>INPUT: Token (Login Token)<br/>OUTPUT:
Date Client Version

  - One-way service response message

  - GET document/literal style messaging

  - Action: "/DataClientLatestVersion"

  - Addressing output action: "/DataClientLatestVersion"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__DataClientLatestVersionResponse__(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__DataClientLatestVersionResponse__(
    struct soap *soap,
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DataClientLatestVersionResponse__ GET
//gsoap ns1  service method-style:	DataClientLatestVersionResponse__ document
//gsoap ns1  service method-encoding:	DataClientLatestVersionResponse__ literal
//gsoap ns1  service method-action:	DataClientLatestVersionResponse__ /DataClientLatestVersion
int __ns1__DataClientLatestVersionResponse__(
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__DataFormatsResponse__                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__DataFormatsResponse__" of service binding "DataSoap".
Returns the list of data formats.<br/>INPUT: Token (Login Token)<br/>OUTPUT: List
of DataFormats

  - One-way service response message

  - GET document/literal style messaging

  - Action: "/DataFormats"

  - Addressing output action: "/DataFormats"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__DataFormatsResponse__(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__DataFormatsResponse__(
    struct soap *soap,
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DataFormatsResponse__ GET
//gsoap ns1  service method-style:	DataFormatsResponse__ document
//gsoap ns1  service method-encoding:	DataFormatsResponse__ literal
//gsoap ns1  service method-action:	DataFormatsResponse__ /DataFormats
int __ns1__DataFormatsResponse__(
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__UpdateDataFormatResponse__                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__UpdateDataFormatResponse__" of service binding "DataSoap".
Update preferred Data Format<br/>INPUT: Token (Login Token), IncludeHeader, IncludeSuffix<br/>OUTPUT:
List of DataFormats

  - One-way service response message

  - GET document/literal style messaging

  - Action: "/UpdateDataFormat"

  - Addressing output action: "/UpdateDataFormat"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__UpdateDataFormatResponse__(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__UpdateDataFormatResponse__(
    struct soap *soap,
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	UpdateDataFormatResponse__ GET
//gsoap ns1  service method-style:	UpdateDataFormatResponse__ document
//gsoap ns1  service method-encoding:	UpdateDataFormatResponse__ literal
//gsoap ns1  service method-action:	UpdateDataFormatResponse__ /UpdateDataFormat
int __ns1__UpdateDataFormatResponse__(
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__ValidateAccessResponse__                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__ValidateAccessResponse__" of service binding "DataSoap".
Validate access for an entire exchange, specific date, and specific period.<br/>INPUT:
Token (Login Token), Exchange (eg: NASDAQ), QuoteDate (format:yyyyMMdd eg:20080225),
Period (1, 5, 10, 15, 30, h, d, w, m)<br/>OUTPUT: RESPONSE

  - One-way service response message

  - GET document/literal style messaging

  - Action: "/ValidateAccess"

  - Addressing output action: "/ValidateAccess"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__ValidateAccessResponse__(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__ValidateAccessResponse__(
    struct soap *soap,
    // parameters:
    ns1__RESPONSE*                      ns1__RESPONSE_,
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	ValidateAccessResponse__ GET
//gsoap ns1  service method-style:	ValidateAccessResponse__ document
//gsoap ns1  service method-encoding:	ValidateAccessResponse__ literal
//gsoap ns1  service method-action:	ValidateAccessResponse__ /ValidateAccess
int __ns1__ValidateAccessResponse__(
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__Login___                                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__Login___" of service binding "DataSoap".
Login to EODData Financial Information Web Service. Used for Web Authentication.<br/>INPUT:
Username, Password<br/>OUTPUT: Login Token

  - Request message MIME content type="application/x-www-form-urlencoded
"
    Use the httpform.c plugin to retrieve key-value pairs from the REST request
    message form data at the server side (client side is automated).

  - POST application/x-www-form-urlencoded messaging

  - Action: "/Login"

  - Addressing input action: "/Login"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__Login___(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         Username,
    std::string                         Password,
    // output parameters:
    ns1__LOGINRESPONSE                 &ns1__LOGINRESPONSE_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__Login___(
    struct soap *soap,
    // input parameters:
    std::string                         Username,
    std::string                         Password,
    // output parameters:
    ns1__LOGINRESPONSE                 &ns1__LOGINRESPONSE_
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	Login___ POST
//gsoap ns1  service method-mime-type:	Login___ application/x-www-form-urlencoded
//gsoap ns1  service method-encoding:	Login___ literal
//gsoap ns1  service method-input-action:	Login___ /Login
int __ns1__Login___(
    std::string                         Username,	///< Input parameter
    std::string                         Password,	///< Input parameter
    ns1__LOGINRESPONSE                 &ns1__LOGINRESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__Login2___                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__Login2___" of service binding "DataSoap".
Login to EODData Financial Information Web Service. Used for Application Authentication.<br/>INPUT:
Username, Password, Version (Application Version)<br/>OUTPUT: Login Token

  - Request message MIME content type="application/x-www-form-urlencoded
"
    Use the httpform.c plugin to retrieve key-value pairs from the REST request
    message form data at the server side (client side is automated).

  - POST application/x-www-form-urlencoded messaging

  - Action: "/Login2"

  - Addressing input action: "/Login2"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__Login2___(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         Username,
    std::string                         Password,
    std::string                         Version,
    // output parameters:
    ns1__LOGINRESPONSE                 &ns1__LOGINRESPONSE_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__Login2___(
    struct soap *soap,
    // input parameters:
    std::string                         Username,
    std::string                         Password,
    std::string                         Version,
    // output parameters:
    ns1__LOGINRESPONSE                 &ns1__LOGINRESPONSE_
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	Login2___ POST
//gsoap ns1  service method-mime-type:	Login2___ application/x-www-form-urlencoded
//gsoap ns1  service method-encoding:	Login2___ literal
//gsoap ns1  service method-input-action:	Login2___ /Login2
int __ns1__Login2___(
    std::string                         Username,	///< Input parameter
    std::string                         Password,	///< Input parameter
    std::string                         Version,	///< Input parameter
    ns1__LOGINRESPONSE                 &ns1__LOGINRESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__Membership___                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__Membership___" of service binding "DataSoap".
Returns membership of user.<br/>INPUT: Token (Login Token)<br/>OUTPUT: Membership

  - Request message MIME content type="application/x-www-form-urlencoded
"
    Use the httpform.c plugin to retrieve key-value pairs from the REST request
    message form data at the server side (client side is automated).

  - POST application/x-www-form-urlencoded messaging

  - Action: "/Membership"

  - Addressing input action: "/Membership"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__Membership___(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         Token,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__Membership___(
    struct soap *soap,
    // input parameters:
    std::string                         Token,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	Membership___ POST
//gsoap ns1  service method-mime-type:	Membership___ application/x-www-form-urlencoded
//gsoap ns1  service method-encoding:	Membership___ literal
//gsoap ns1  service method-input-action:	Membership___ /Membership
int __ns1__Membership___(
    std::string                         Token,	///< Input parameter
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__ExchangeList___                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__ExchangeList___" of service binding "DataSoap".
Returns a list of available exchanges.<br/>INPUT: Token (Login Token)<br/>OUTPUT:
List of exchanges

  - Request message MIME content type="application/x-www-form-urlencoded
"
    Use the httpform.c plugin to retrieve key-value pairs from the REST request
    message form data at the server side (client side is automated).

  - POST application/x-www-form-urlencoded messaging

  - Action: "/ExchangeList"

  - Addressing input action: "/ExchangeList"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__ExchangeList___(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         Token,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__ExchangeList___(
    struct soap *soap,
    // input parameters:
    std::string                         Token,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	ExchangeList___ POST
//gsoap ns1  service method-mime-type:	ExchangeList___ application/x-www-form-urlencoded
//gsoap ns1  service method-encoding:	ExchangeList___ literal
//gsoap ns1  service method-input-action:	ExchangeList___ /ExchangeList
int __ns1__ExchangeList___(
    std::string                         Token,	///< Input parameter
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__ExchangeGet___                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__ExchangeGet___" of service binding "DataSoap".
Returns detailed information of a specific exchange.<br/>INPUT: Token (Login Token),
Exchange (eg: NASDAQ)<br/>OUTPUT: Exchange

  - Request message MIME content type="application/x-www-form-urlencoded
"
    Use the httpform.c plugin to retrieve key-value pairs from the REST request
    message form data at the server side (client side is automated).

  - POST application/x-www-form-urlencoded messaging

  - Action: "/ExchangeGet"

  - Addressing input action: "/ExchangeGet"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__ExchangeGet___(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         Token,
    std::string                         Exchange,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__ExchangeGet___(
    struct soap *soap,
    // input parameters:
    std::string                         Token,
    std::string                         Exchange,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	ExchangeGet___ POST
//gsoap ns1  service method-mime-type:	ExchangeGet___ application/x-www-form-urlencoded
//gsoap ns1  service method-encoding:	ExchangeGet___ literal
//gsoap ns1  service method-input-action:	ExchangeGet___ /ExchangeGet
int __ns1__ExchangeGet___(
    std::string                         Token,	///< Input parameter
    std::string                         Exchange,	///< Input parameter
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SymbolList___                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SymbolList___" of service binding "DataSoap".
Returns a list of symbols of a specified exchange. <br/>INPUT: Token (Login Token),
Exchange (eg: NASDAQ)<br/>OUTPUT: List of symbols

  - Request message MIME content type="application/x-www-form-urlencoded
"
    Use the httpform.c plugin to retrieve key-value pairs from the REST request
    message form data at the server side (client side is automated).

  - POST application/x-www-form-urlencoded messaging

  - Action: "/SymbolList"

  - Addressing input action: "/SymbolList"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SymbolList___(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         Token,
    std::string                         Exchange,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SymbolList___(
    struct soap *soap,
    // input parameters:
    std::string                         Token,
    std::string                         Exchange,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SymbolList___ POST
//gsoap ns1  service method-mime-type:	SymbolList___ application/x-www-form-urlencoded
//gsoap ns1  service method-encoding:	SymbolList___ literal
//gsoap ns1  service method-input-action:	SymbolList___ /SymbolList
int __ns1__SymbolList___(
    std::string                         Token,	///< Input parameter
    std::string                         Exchange,	///< Input parameter
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SymbolList2___                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SymbolList2___" of service binding "DataSoap".
Returns a list of symbols of a specified exchange (compact format).<br/>INPUT: Token
(Login Token), Exchange (eg: NASDAQ)<br/>OUTPUT: List of symbols

  - Request message MIME content type="application/x-www-form-urlencoded
"
    Use the httpform.c plugin to retrieve key-value pairs from the REST request
    message form data at the server side (client side is automated).

  - POST application/x-www-form-urlencoded messaging

  - Action: "/SymbolList2"

  - Addressing input action: "/SymbolList2"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SymbolList2___(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         Token,
    std::string                         Exchange,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SymbolList2___(
    struct soap *soap,
    // input parameters:
    std::string                         Token,
    std::string                         Exchange,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SymbolList2___ POST
//gsoap ns1  service method-mime-type:	SymbolList2___ application/x-www-form-urlencoded
//gsoap ns1  service method-encoding:	SymbolList2___ literal
//gsoap ns1  service method-input-action:	SymbolList2___ /SymbolList2
int __ns1__SymbolList2___(
    std::string                         Token,	///< Input parameter
    std::string                         Exchange,	///< Input parameter
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__QuoteGet___                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__QuoteGet___" of service binding "DataSoap".
Returns an end of day quote for a specific symbol.<br/>INPUT: Token (Login Token),
Exchange (eg: NASDAQ), Symbol (eg:MSFT)<br/>OUTPUT: End of day quote

  - Request message MIME content type="application/x-www-form-urlencoded
"
    Use the httpform.c plugin to retrieve key-value pairs from the REST request
    message form data at the server side (client side is automated).

  - POST application/x-www-form-urlencoded messaging

  - Action: "/QuoteGet"

  - Addressing input action: "/QuoteGet"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__QuoteGet___(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         Token,
    std::string                         Exchange,
    std::string                         Symbol,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__QuoteGet___(
    struct soap *soap,
    // input parameters:
    std::string                         Token,
    std::string                         Exchange,
    std::string                         Symbol,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	QuoteGet___ POST
//gsoap ns1  service method-mime-type:	QuoteGet___ application/x-www-form-urlencoded
//gsoap ns1  service method-encoding:	QuoteGet___ literal
//gsoap ns1  service method-input-action:	QuoteGet___ /QuoteGet
int __ns1__QuoteGet___(
    std::string                         Token,	///< Input parameter
    std::string                         Exchange,	///< Input parameter
    std::string                         Symbol,	///< Input parameter
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__QuoteList2___                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__QuoteList2___" of service binding "DataSoap".
Returns latest end of day quotes for a list of symbols of a specific exchange (compact
format).<br/>INPUT: Token (Login Token), Exchange (eg: NASDAQ), Symbols (eg:MSFT,INTC)<br/>OUTPUT:
List of end of day quotes

  - Request message MIME content type="application/x-www-form-urlencoded
"
    Use the httpform.c plugin to retrieve key-value pairs from the REST request
    message form data at the server side (client side is automated).

  - POST application/x-www-form-urlencoded messaging

  - Action: "/QuoteList2"

  - Addressing input action: "/QuoteList2"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__QuoteList2___(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         Token,
    std::string                         Exchange,
    std::string                         Symbols,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__QuoteList2___(
    struct soap *soap,
    // input parameters:
    std::string                         Token,
    std::string                         Exchange,
    std::string                         Symbols,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	QuoteList2___ POST
//gsoap ns1  service method-mime-type:	QuoteList2___ application/x-www-form-urlencoded
//gsoap ns1  service method-encoding:	QuoteList2___ literal
//gsoap ns1  service method-input-action:	QuoteList2___ /QuoteList2
int __ns1__QuoteList2___(
    std::string                         Token,	///< Input parameter
    std::string                         Exchange,	///< Input parameter
    std::string                         Symbols,	///< Input parameter
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SymbolGet___                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SymbolGet___" of service binding "DataSoap".
Returns detailed information of a specific symbol.<br/>INPUT: Token (Login Token),
Exchange (eg: NASDAQ), Symbol (eg:MSFT)<br/>OUTPUT: Symbol

  - Request message MIME content type="application/x-www-form-urlencoded
"
    Use the httpform.c plugin to retrieve key-value pairs from the REST request
    message form data at the server side (client side is automated).

  - POST application/x-www-form-urlencoded messaging

  - Action: "/SymbolGet"

  - Addressing input action: "/SymbolGet"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SymbolGet___(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         Token,
    std::string                         Exchange,
    std::string                         Symbol,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SymbolGet___(
    struct soap *soap,
    // input parameters:
    std::string                         Token,
    std::string                         Exchange,
    std::string                         Symbol,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SymbolGet___ POST
//gsoap ns1  service method-mime-type:	SymbolGet___ application/x-www-form-urlencoded
//gsoap ns1  service method-encoding:	SymbolGet___ literal
//gsoap ns1  service method-input-action:	SymbolGet___ /SymbolGet
int __ns1__SymbolGet___(
    std::string                         Token,	///< Input parameter
    std::string                         Exchange,	///< Input parameter
    std::string                         Symbol,	///< Input parameter
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__QuoteList___                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__QuoteList___" of service binding "DataSoap".
Returns a complete list of end of day quotes for an entire exchange.<br/>INPUT:
Token (Login Token), Exchange (eg: NASDAQ)<br/>OUTPUT: List of end of day quotes

  - Request message MIME content type="application/x-www-form-urlencoded
"
    Use the httpform.c plugin to retrieve key-value pairs from the REST request
    message form data at the server side (client side is automated).

  - POST application/x-www-form-urlencoded messaging

  - Action: "/QuoteList"

  - Addressing input action: "/QuoteList"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__QuoteList___(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         Token,
    std::string                         Exchange,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__QuoteList___(
    struct soap *soap,
    // input parameters:
    std::string                         Token,
    std::string                         Exchange,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	QuoteList___ POST
//gsoap ns1  service method-mime-type:	QuoteList___ application/x-www-form-urlencoded
//gsoap ns1  service method-encoding:	QuoteList___ literal
//gsoap ns1  service method-input-action:	QuoteList___ /QuoteList
int __ns1__QuoteList___(
    std::string                         Token,	///< Input parameter
    std::string                         Exchange,	///< Input parameter
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__NewsList___                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__NewsList___" of service binding "DataSoap".
Returns a list of News articles for an entire exchange.<br/>INPUT: Token (Login
Token), Exchange (eg: NASDAQ)<br/>OUTPUT: List of News articles

  - Request message MIME content type="application/x-www-form-urlencoded
"
    Use the httpform.c plugin to retrieve key-value pairs from the REST request
    message form data at the server side (client side is automated).

  - POST application/x-www-form-urlencoded messaging

  - Action: "/NewsList"

  - Addressing input action: "/NewsList"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__NewsList___(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         Token,
    std::string                         Exchange,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__NewsList___(
    struct soap *soap,
    // input parameters:
    std::string                         Token,
    std::string                         Exchange,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	NewsList___ POST
//gsoap ns1  service method-mime-type:	NewsList___ application/x-www-form-urlencoded
//gsoap ns1  service method-encoding:	NewsList___ literal
//gsoap ns1  service method-input-action:	NewsList___ /NewsList
int __ns1__NewsList___(
    std::string                         Token,	///< Input parameter
    std::string                         Exchange,	///< Input parameter
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__NewsListBySymbol___                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__NewsListBySymbol___" of service binding "DataSoap".
Returns a list of News articles for a given Exchange and Symbol.<br/>INPUT: Token
(Login Token), Exchange (eg: NASDAQ), Symbol (eg: AAPL)<br/>OUTPUT: List of News
articles

  - Request message MIME content type="application/x-www-form-urlencoded
"
    Use the httpform.c plugin to retrieve key-value pairs from the REST request
    message form data at the server side (client side is automated).

  - POST application/x-www-form-urlencoded messaging

  - Action: "/NewsListBySymbol"

  - Addressing input action: "/NewsListBySymbol"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__NewsListBySymbol___(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         token,
    std::string                         Exchange,
    std::string                         symbol,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__NewsListBySymbol___(
    struct soap *soap,
    // input parameters:
    std::string                         token,
    std::string                         Exchange,
    std::string                         symbol,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	NewsListBySymbol___ POST
//gsoap ns1  service method-mime-type:	NewsListBySymbol___ application/x-www-form-urlencoded
//gsoap ns1  service method-encoding:	NewsListBySymbol___ literal
//gsoap ns1  service method-input-action:	NewsListBySymbol___ /NewsListBySymbol
int __ns1__NewsListBySymbol___(
    std::string                         token,	///< Input parameter
    std::string                         Exchange,	///< Input parameter
    std::string                         symbol,	///< Input parameter
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__FundamentalList___                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__FundamentalList___" of service binding "DataSoap".
Returns a complete list of fundamental data for an entire exchange.<br/>INPUT: Token
(Login Token), Exchange (eg: NASDAQ)<br/>OUTPUT: List of fundamentals

  - Request message MIME content type="application/x-www-form-urlencoded
"
    Use the httpform.c plugin to retrieve key-value pairs from the REST request
    message form data at the server side (client side is automated).

  - POST application/x-www-form-urlencoded messaging

  - Action: "/FundamentalList"

  - Addressing input action: "/FundamentalList"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__FundamentalList___(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         Token,
    std::string                         Exchange,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__FundamentalList___(
    struct soap *soap,
    // input parameters:
    std::string                         Token,
    std::string                         Exchange,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	FundamentalList___ POST
//gsoap ns1  service method-mime-type:	FundamentalList___ application/x-www-form-urlencoded
//gsoap ns1  service method-encoding:	FundamentalList___ literal
//gsoap ns1  service method-input-action:	FundamentalList___ /FundamentalList
int __ns1__FundamentalList___(
    std::string                         Token,	///< Input parameter
    std::string                         Exchange,	///< Input parameter
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__TechnicalList___                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__TechnicalList___" of service binding "DataSoap".
Returns a complete list of technical data for an entire exchange. <br/>INPUT: Token
(Login Token), Exchange (eg: NASDAQ)<br/>OUTPUT: List of quotes

  - Request message MIME content type="application/x-www-form-urlencoded
"
    Use the httpform.c plugin to retrieve key-value pairs from the REST request
    message form data at the server side (client side is automated).

  - POST application/x-www-form-urlencoded messaging

  - Action: "/TechnicalList"

  - Addressing input action: "/TechnicalList"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__TechnicalList___(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         Token,
    std::string                         Exchange,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__TechnicalList___(
    struct soap *soap,
    // input parameters:
    std::string                         Token,
    std::string                         Exchange,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	TechnicalList___ POST
//gsoap ns1  service method-mime-type:	TechnicalList___ application/x-www-form-urlencoded
//gsoap ns1  service method-encoding:	TechnicalList___ literal
//gsoap ns1  service method-input-action:	TechnicalList___ /TechnicalList
int __ns1__TechnicalList___(
    std::string                         Token,	///< Input parameter
    std::string                         Exchange,	///< Input parameter
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__QuoteListByDate___                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__QuoteListByDate___" of service binding "DataSoap".
Returns a complete list of end of day quotes for an entire exchange and a specific
date.<br/>INPUT: Token (Login Token), Exchange (eg: NASDAQ), QuoteDate (format:yyyyMMdd
eg:20080225)<br/>OUTPUT: List of end of day quotes

  - Request message MIME content type="application/x-www-form-urlencoded
"
    Use the httpform.c plugin to retrieve key-value pairs from the REST request
    message form data at the server side (client side is automated).

  - POST application/x-www-form-urlencoded messaging

  - Action: "/QuoteListByDate"

  - Addressing input action: "/QuoteListByDate"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__QuoteListByDate___(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         Token,
    std::string                         Exchange,
    std::string                         QuoteDate,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__QuoteListByDate___(
    struct soap *soap,
    // input parameters:
    std::string                         Token,
    std::string                         Exchange,
    std::string                         QuoteDate,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	QuoteListByDate___ POST
//gsoap ns1  service method-mime-type:	QuoteListByDate___ application/x-www-form-urlencoded
//gsoap ns1  service method-encoding:	QuoteListByDate___ literal
//gsoap ns1  service method-input-action:	QuoteListByDate___ /QuoteListByDate
int __ns1__QuoteListByDate___(
    std::string                         Token,	///< Input parameter
    std::string                         Exchange,	///< Input parameter
    std::string                         QuoteDate,	///< Input parameter
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__QuoteListByDate2___                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__QuoteListByDate2___" of service binding "DataSoap".
Returns a complete list of end of day quotes for an entire exchange and a specific
date (compact format).<br/>INPUT: Token (Login Token), Exchange (eg: NASDAQ), QuoteDate
(format:yyyyMMdd eg:20080225)<br/>OUTPUT: List of end of day quotes

  - Request message MIME content type="application/x-www-form-urlencoded
"
    Use the httpform.c plugin to retrieve key-value pairs from the REST request
    message form data at the server side (client side is automated).

  - POST application/x-www-form-urlencoded messaging

  - Action: "/QuoteListByDate2"

  - Addressing input action: "/QuoteListByDate2"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__QuoteListByDate2___(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         Token,
    std::string                         Exchange,
    std::string                         QuoteDate,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__QuoteListByDate2___(
    struct soap *soap,
    // input parameters:
    std::string                         Token,
    std::string                         Exchange,
    std::string                         QuoteDate,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	QuoteListByDate2___ POST
//gsoap ns1  service method-mime-type:	QuoteListByDate2___ application/x-www-form-urlencoded
//gsoap ns1  service method-encoding:	QuoteListByDate2___ literal
//gsoap ns1  service method-input-action:	QuoteListByDate2___ /QuoteListByDate2
int __ns1__QuoteListByDate2___(
    std::string                         Token,	///< Input parameter
    std::string                         Exchange,	///< Input parameter
    std::string                         QuoteDate,	///< Input parameter
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SymbolHistory___                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SymbolHistory___" of service binding "DataSoap".
Returns a list of historical end of day data of a specified symbol and specified
start date up to today's date.<br/>INPUT: Token (Login Token), Exchange (eg: NASDAQ),
Symbol (eg:MSFT), StartDate (format:yyyyMMdd eg:20080225)<br/>OUTPUT: List of historical
end of day quotes

  - Request message MIME content type="application/x-www-form-urlencoded
"
    Use the httpform.c plugin to retrieve key-value pairs from the REST request
    message form data at the server side (client side is automated).

  - POST application/x-www-form-urlencoded messaging

  - Action: "/SymbolHistory"

  - Addressing input action: "/SymbolHistory"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SymbolHistory___(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         Token,
    std::string                         Exchange,
    std::string                         Symbol,
    std::string                         StartDate,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SymbolHistory___(
    struct soap *soap,
    // input parameters:
    std::string                         Token,
    std::string                         Exchange,
    std::string                         Symbol,
    std::string                         StartDate,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SymbolHistory___ POST
//gsoap ns1  service method-mime-type:	SymbolHistory___ application/x-www-form-urlencoded
//gsoap ns1  service method-encoding:	SymbolHistory___ literal
//gsoap ns1  service method-input-action:	SymbolHistory___ /SymbolHistory
int __ns1__SymbolHistory___(
    std::string                         Token,	///< Input parameter
    std::string                         Exchange,	///< Input parameter
    std::string                         Symbol,	///< Input parameter
    std::string                         StartDate,	///< Input parameter
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__Top10Gains___                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__Top10Gains___" of service binding "DataSoap".
Returns a list of the Top 10 Gains of a specified exchange. <br/>INPUT: Token (Login
Token), Exchange (eg: NASDAQ)<br/>OUTPUT: List of quotes

  - Request message MIME content type="application/x-www-form-urlencoded
"
    Use the httpform.c plugin to retrieve key-value pairs from the REST request
    message form data at the server side (client side is automated).

  - POST application/x-www-form-urlencoded messaging

  - Action: "/Top10Gains"

  - Addressing input action: "/Top10Gains"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__Top10Gains___(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         Token,
    std::string                         Exchange,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__Top10Gains___(
    struct soap *soap,
    // input parameters:
    std::string                         Token,
    std::string                         Exchange,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	Top10Gains___ POST
//gsoap ns1  service method-mime-type:	Top10Gains___ application/x-www-form-urlencoded
//gsoap ns1  service method-encoding:	Top10Gains___ literal
//gsoap ns1  service method-input-action:	Top10Gains___ /Top10Gains
int __ns1__Top10Gains___(
    std::string                         Token,	///< Input parameter
    std::string                         Exchange,	///< Input parameter
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__Top10Losses___                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__Top10Losses___" of service binding "DataSoap".
Returns a list of the Top 10 Losses of a specified exchange. <br/>INPUT: Token (Login
Token), Exchange (eg: NASDAQ)<br/>OUTPUT: List of quotes

  - Request message MIME content type="application/x-www-form-urlencoded
"
    Use the httpform.c plugin to retrieve key-value pairs from the REST request
    message form data at the server side (client side is automated).

  - POST application/x-www-form-urlencoded messaging

  - Action: "/Top10Losses"

  - Addressing input action: "/Top10Losses"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__Top10Losses___(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         Token,
    std::string                         Exchange,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__Top10Losses___(
    struct soap *soap,
    // input parameters:
    std::string                         Token,
    std::string                         Exchange,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	Top10Losses___ POST
//gsoap ns1  service method-mime-type:	Top10Losses___ application/x-www-form-urlencoded
//gsoap ns1  service method-encoding:	Top10Losses___ literal
//gsoap ns1  service method-input-action:	Top10Losses___ /Top10Losses
int __ns1__Top10Losses___(
    std::string                         Token,	///< Input parameter
    std::string                         Exchange,	///< Input parameter
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SymbolChart___                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SymbolChart___" of service binding "DataSoap".
Returns a URL to a chart image of a specific symbol.<br/>INPUT: Token (Login Token),
Exchange (eg: NASDAQ), Symbol (eg:MSFT)<br/>OUTPUT: Chart URL

  - Request message MIME content type="application/x-www-form-urlencoded
"
    Use the httpform.c plugin to retrieve key-value pairs from the REST request
    message form data at the server side (client side is automated).

  - POST application/x-www-form-urlencoded messaging

  - Action: "/SymbolChart"

  - Addressing input action: "/SymbolChart"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SymbolChart___(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         Token,
    std::string                         Exchange,
    std::string                         Symbol,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SymbolChart___(
    struct soap *soap,
    // input parameters:
    std::string                         Token,
    std::string                         Exchange,
    std::string                         Symbol,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SymbolChart___ POST
//gsoap ns1  service method-mime-type:	SymbolChart___ application/x-www-form-urlencoded
//gsoap ns1  service method-encoding:	SymbolChart___ literal
//gsoap ns1  service method-input-action:	SymbolChart___ /SymbolChart
int __ns1__SymbolChart___(
    std::string                         Token,	///< Input parameter
    std::string                         Exchange,	///< Input parameter
    std::string                         Symbol,	///< Input parameter
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__ExchangeMonths___                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__ExchangeMonths___" of service binding "DataSoap".
Returns the number of Months history a user is allowed to download.<br/>INPUT: Token
(Login Token), Exchange (eg: NASDAQ)<br/>OUTPUT: Number of Months

  - Request message MIME content type="application/x-www-form-urlencoded
"
    Use the httpform.c plugin to retrieve key-value pairs from the REST request
    message form data at the server side (client side is automated).

  - POST application/x-www-form-urlencoded messaging

  - Action: "/ExchangeMonths"

  - Addressing input action: "/ExchangeMonths"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__ExchangeMonths___(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         Token,
    std::string                         Exchange,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__ExchangeMonths___(
    struct soap *soap,
    // input parameters:
    std::string                         Token,
    std::string                         Exchange,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	ExchangeMonths___ POST
//gsoap ns1  service method-mime-type:	ExchangeMonths___ application/x-www-form-urlencoded
//gsoap ns1  service method-encoding:	ExchangeMonths___ literal
//gsoap ns1  service method-input-action:	ExchangeMonths___ /ExchangeMonths
int __ns1__ExchangeMonths___(
    std::string                         Token,	///< Input parameter
    std::string                         Exchange,	///< Input parameter
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SplitListByExchange___                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SplitListByExchange___" of service binding "DataSoap".
Returns a list of Splits of a specific exchange.<br/>INPUT: Token (Login Token),
Exchange (eg: NASDAQ)<br/>OUTPUT: List of splits

  - Request message MIME content type="application/x-www-form-urlencoded
"
    Use the httpform.c plugin to retrieve key-value pairs from the REST request
    message form data at the server side (client side is automated).

  - POST application/x-www-form-urlencoded messaging

  - Action: "/SplitListByExchange"

  - Addressing input action: "/SplitListByExchange"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SplitListByExchange___(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         Token,
    std::string                         Exchange,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SplitListByExchange___(
    struct soap *soap,
    // input parameters:
    std::string                         Token,
    std::string                         Exchange,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SplitListByExchange___ POST
//gsoap ns1  service method-mime-type:	SplitListByExchange___ application/x-www-form-urlencoded
//gsoap ns1  service method-encoding:	SplitListByExchange___ literal
//gsoap ns1  service method-input-action:	SplitListByExchange___ /SplitListByExchange
int __ns1__SplitListByExchange___(
    std::string                         Token,	///< Input parameter
    std::string                         Exchange,	///< Input parameter
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SplitListBySymbol___                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SplitListBySymbol___" of service binding "DataSoap".
Returns a list of Splits of a specific symbol.<br/>INPUT: Token (Login Token), Exchange
(eg: NASDAQ), Symbol (eg:MSFT)<br/>OUTPUT: List of splits

  - Request message MIME content type="application/x-www-form-urlencoded
"
    Use the httpform.c plugin to retrieve key-value pairs from the REST request
    message form data at the server side (client side is automated).

  - POST application/x-www-form-urlencoded messaging

  - Action: "/SplitListBySymbol"

  - Addressing input action: "/SplitListBySymbol"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SplitListBySymbol___(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         Token,
    std::string                         Exchange,
    std::string                         Symbol,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SplitListBySymbol___(
    struct soap *soap,
    // input parameters:
    std::string                         Token,
    std::string                         Exchange,
    std::string                         Symbol,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SplitListBySymbol___ POST
//gsoap ns1  service method-mime-type:	SplitListBySymbol___ application/x-www-form-urlencoded
//gsoap ns1  service method-encoding:	SplitListBySymbol___ literal
//gsoap ns1  service method-input-action:	SplitListBySymbol___ /SplitListBySymbol
int __ns1__SplitListBySymbol___(
    std::string                         Token,	///< Input parameter
    std::string                         Exchange,	///< Input parameter
    std::string                         Symbol,	///< Input parameter
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__CountryList___                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__CountryList___" of service binding "DataSoap".
Returns a list of available countries.<br/>INPUT: Token (Login Token)<br/>OUTPUT:
List of countries

  - Request message MIME content type="application/x-www-form-urlencoded
"
    Use the httpform.c plugin to retrieve key-value pairs from the REST request
    message form data at the server side (client side is automated).

  - POST application/x-www-form-urlencoded messaging

  - Action: "/CountryList"

  - Addressing input action: "/CountryList"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__CountryList___(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         Token,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__CountryList___(
    struct soap *soap,
    // input parameters:
    std::string                         Token,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	CountryList___ POST
//gsoap ns1  service method-mime-type:	CountryList___ application/x-www-form-urlencoded
//gsoap ns1  service method-encoding:	CountryList___ literal
//gsoap ns1  service method-input-action:	CountryList___ /CountryList
int __ns1__CountryList___(
    std::string                         Token,	///< Input parameter
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SymbolHistoryPeriod___                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SymbolHistoryPeriod___" of service binding "DataSoap".
Returns a list of historical data of a specified symbol, specified date and specified
period.<br/>INPUT: Token (Login Token), Exchange (eg: NASDAQ), Symbol (eg:MSFT),
Date (format:yyyyMMdd eg:20080225), Period (1, 5, 10, 15, 30, h, d, w, m)<br/>OUTPUT:
List of historical quotes

  - Request message MIME content type="application/x-www-form-urlencoded
"
    Use the httpform.c plugin to retrieve key-value pairs from the REST request
    message form data at the server side (client side is automated).

  - POST application/x-www-form-urlencoded messaging

  - Action: "/SymbolHistoryPeriod"

  - Addressing input action: "/SymbolHistoryPeriod"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SymbolHistoryPeriod___(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         Token,
    std::string                         Exchange,
    std::string                         Symbol,
    std::string                         Date,
    std::string                         Period,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SymbolHistoryPeriod___(
    struct soap *soap,
    // input parameters:
    std::string                         Token,
    std::string                         Exchange,
    std::string                         Symbol,
    std::string                         Date,
    std::string                         Period,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SymbolHistoryPeriod___ POST
//gsoap ns1  service method-mime-type:	SymbolHistoryPeriod___ application/x-www-form-urlencoded
//gsoap ns1  service method-encoding:	SymbolHistoryPeriod___ literal
//gsoap ns1  service method-input-action:	SymbolHistoryPeriod___ /SymbolHistoryPeriod
int __ns1__SymbolHistoryPeriod___(
    std::string                         Token,	///< Input parameter
    std::string                         Exchange,	///< Input parameter
    std::string                         Symbol,	///< Input parameter
    std::string                         Date,	///< Input parameter
    std::string                         Period,	///< Input parameter
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SymbolHistoryPeriodByDateRange___                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SymbolHistoryPeriodByDateRange___" of service binding "DataSoap".
Returns a list of historical data of a specified symbol, specified date range and
specified period.<br/>INPUT: Token (Login Token), Exchange (eg: NASDAQ), Symbol
(eg:MSFT), StartDate (format:yyyyMMdd eg:20080225), EndDate (format:yyyyMMdd eg:20080225),
Period (1, 5, 10, 15, 30, h, d, w, m)<br/>OUTPUT: List of historical quotes

  - Request message MIME content type="application/x-www-form-urlencoded
"
    Use the httpform.c plugin to retrieve key-value pairs from the REST request
    message form data at the server side (client side is automated).

  - POST application/x-www-form-urlencoded messaging

  - Action: "/SymbolHistoryPeriodByDateRange"

  - Addressing input action: "/SymbolHistoryPeriodByDateRange"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SymbolHistoryPeriodByDateRange___(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         Token,
    std::string                         Exchange,
    std::string                         Symbol,
    std::string                         StartDate,
    std::string                         EndDate,
    std::string                         Period,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SymbolHistoryPeriodByDateRange___(
    struct soap *soap,
    // input parameters:
    std::string                         Token,
    std::string                         Exchange,
    std::string                         Symbol,
    std::string                         StartDate,
    std::string                         EndDate,
    std::string                         Period,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SymbolHistoryPeriodByDateRange___ POST
//gsoap ns1  service method-mime-type:	SymbolHistoryPeriodByDateRange___ application/x-www-form-urlencoded
//gsoap ns1  service method-encoding:	SymbolHistoryPeriodByDateRange___ literal
//gsoap ns1  service method-input-action:	SymbolHistoryPeriodByDateRange___ /SymbolHistoryPeriodByDateRange
int __ns1__SymbolHistoryPeriodByDateRange___(
    std::string                         Token,	///< Input parameter
    std::string                         Exchange,	///< Input parameter
    std::string                         Symbol,	///< Input parameter
    std::string                         StartDate,	///< Input parameter
    std::string                         EndDate,	///< Input parameter
    std::string                         Period,	///< Input parameter
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__QuoteListByDatePeriod___                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__QuoteListByDatePeriod___" of service binding "DataSoap".
Returns a complete list of quotes for an entire exchange, specific date, and specific
period.<br/>INPUT: Token (Login Token), Exchange (eg: NASDAQ), QuoteDate (format:yyyyMMdd
eg:20080225), Period (1, 5, 10, 15, 30, h, d, w, m)<br/>OUTPUT: List of quotes

  - Request message MIME content type="application/x-www-form-urlencoded
"
    Use the httpform.c plugin to retrieve key-value pairs from the REST request
    message form data at the server side (client side is automated).

  - POST application/x-www-form-urlencoded messaging

  - Action: "/QuoteListByDatePeriod"

  - Addressing input action: "/QuoteListByDatePeriod"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__QuoteListByDatePeriod___(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         Token,
    std::string                         Exchange,
    std::string                         QuoteDate,
    std::string                         Period,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__QuoteListByDatePeriod___(
    struct soap *soap,
    // input parameters:
    std::string                         Token,
    std::string                         Exchange,
    std::string                         QuoteDate,
    std::string                         Period,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	QuoteListByDatePeriod___ POST
//gsoap ns1  service method-mime-type:	QuoteListByDatePeriod___ application/x-www-form-urlencoded
//gsoap ns1  service method-encoding:	QuoteListByDatePeriod___ literal
//gsoap ns1  service method-input-action:	QuoteListByDatePeriod___ /QuoteListByDatePeriod
int __ns1__QuoteListByDatePeriod___(
    std::string                         Token,	///< Input parameter
    std::string                         Exchange,	///< Input parameter
    std::string                         QuoteDate,	///< Input parameter
    std::string                         Period,	///< Input parameter
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__QuoteListByDatePeriod2___                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__QuoteListByDatePeriod2___" of service binding "DataSoap".
Returns a complete list of quotes for an entire exchange, specific date, and specific
period (compact format).<br/>INPUT: Token (Login Token), Exchange (eg: NASDAQ),
QuoteDate (format:yyyyMMdd eg:20080225), Period (1, 5, 10, 15, 30, h, d, w, m)<br/>OUTPUT:
List of quotes

  - Request message MIME content type="application/x-www-form-urlencoded
"
    Use the httpform.c plugin to retrieve key-value pairs from the REST request
    message form data at the server side (client side is automated).

  - POST application/x-www-form-urlencoded messaging

  - Action: "/QuoteListByDatePeriod2"

  - Addressing input action: "/QuoteListByDatePeriod2"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__QuoteListByDatePeriod2___(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         Token,
    std::string                         Exchange,
    std::string                         QuoteDate,
    std::string                         Period,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__QuoteListByDatePeriod2___(
    struct soap *soap,
    // input parameters:
    std::string                         Token,
    std::string                         Exchange,
    std::string                         QuoteDate,
    std::string                         Period,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	QuoteListByDatePeriod2___ POST
//gsoap ns1  service method-mime-type:	QuoteListByDatePeriod2___ application/x-www-form-urlencoded
//gsoap ns1  service method-encoding:	QuoteListByDatePeriod2___ literal
//gsoap ns1  service method-input-action:	QuoteListByDatePeriod2___ /QuoteListByDatePeriod2
int __ns1__QuoteListByDatePeriod2___(
    std::string                         Token,	///< Input parameter
    std::string                         Exchange,	///< Input parameter
    std::string                         QuoteDate,	///< Input parameter
    std::string                         Period,	///< Input parameter
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SymbolChangesByExchange___                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SymbolChangesByExchange___" of service binding "DataSoap".
Returns a list of symbol changes of a given exchange. <br/>INPUT: Token (Login Token),
Exchange (eg: NASDAQ)<br/>OUTPUT: List of symbol changes

  - Request message MIME content type="application/x-www-form-urlencoded
"
    Use the httpform.c plugin to retrieve key-value pairs from the REST request
    message form data at the server side (client side is automated).

  - POST application/x-www-form-urlencoded messaging

  - Action: "/SymbolChangesByExchange"

  - Addressing input action: "/SymbolChangesByExchange"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SymbolChangesByExchange___(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         Token,
    std::string                         Exchange,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SymbolChangesByExchange___(
    struct soap *soap,
    // input parameters:
    std::string                         Token,
    std::string                         Exchange,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SymbolChangesByExchange___ POST
//gsoap ns1  service method-mime-type:	SymbolChangesByExchange___ application/x-www-form-urlencoded
//gsoap ns1  service method-encoding:	SymbolChangesByExchange___ literal
//gsoap ns1  service method-input-action:	SymbolChangesByExchange___ /SymbolChangesByExchange
int __ns1__SymbolChangesByExchange___(
    std::string                         Token,	///< Input parameter
    std::string                         Exchange,	///< Input parameter
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__DataClientLatestVersion___                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__DataClientLatestVersion___" of service binding "DataSoap".
Returns the latest version information of Data Client.<br/>INPUT: Token (Login Token)<br/>OUTPUT:
Date Client Version

  - Request message MIME content type="application/x-www-form-urlencoded
"
    Use the httpform.c plugin to retrieve key-value pairs from the REST request
    message form data at the server side (client side is automated).

  - POST application/x-www-form-urlencoded messaging

  - Action: "/DataClientLatestVersion"

  - Addressing input action: "/DataClientLatestVersion"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__DataClientLatestVersion___(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         Token,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__DataClientLatestVersion___(
    struct soap *soap,
    // input parameters:
    std::string                         Token,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DataClientLatestVersion___ POST
//gsoap ns1  service method-mime-type:	DataClientLatestVersion___ application/x-www-form-urlencoded
//gsoap ns1  service method-encoding:	DataClientLatestVersion___ literal
//gsoap ns1  service method-input-action:	DataClientLatestVersion___ /DataClientLatestVersion
int __ns1__DataClientLatestVersion___(
    std::string                         Token,	///< Input parameter
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__DataFormats___                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__DataFormats___" of service binding "DataSoap".
Returns the list of data formats.<br/>INPUT: Token (Login Token)<br/>OUTPUT: List
of DataFormats

  - Request message MIME content type="application/x-www-form-urlencoded
"
    Use the httpform.c plugin to retrieve key-value pairs from the REST request
    message form data at the server side (client side is automated).

  - POST application/x-www-form-urlencoded messaging

  - Action: "/DataFormats"

  - Addressing input action: "/DataFormats"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__DataFormats___(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         Token,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__DataFormats___(
    struct soap *soap,
    // input parameters:
    std::string                         Token,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DataFormats___ POST
//gsoap ns1  service method-mime-type:	DataFormats___ application/x-www-form-urlencoded
//gsoap ns1  service method-encoding:	DataFormats___ literal
//gsoap ns1  service method-input-action:	DataFormats___ /DataFormats
int __ns1__DataFormats___(
    std::string                         Token,	///< Input parameter
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__UpdateDataFormat___                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__UpdateDataFormat___" of service binding "DataSoap".
Update preferred Data Format<br/>INPUT: Token (Login Token), IncludeHeader, IncludeSuffix<br/>OUTPUT:
List of DataFormats

  - Request message MIME content type="application/x-www-form-urlencoded
"
    Use the httpform.c plugin to retrieve key-value pairs from the REST request
    message form data at the server side (client side is automated).

  - POST application/x-www-form-urlencoded messaging

  - Action: "/UpdateDataFormat"

  - Addressing input action: "/UpdateDataFormat"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__UpdateDataFormat___(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         Token,
    std::string                         DataFormat,
    std::string                         IncludeHeader,
    std::string                         IncludeSuffix,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__UpdateDataFormat___(
    struct soap *soap,
    // input parameters:
    std::string                         Token,
    std::string                         DataFormat,
    std::string                         IncludeHeader,
    std::string                         IncludeSuffix,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	UpdateDataFormat___ POST
//gsoap ns1  service method-mime-type:	UpdateDataFormat___ application/x-www-form-urlencoded
//gsoap ns1  service method-encoding:	UpdateDataFormat___ literal
//gsoap ns1  service method-input-action:	UpdateDataFormat___ /UpdateDataFormat
int __ns1__UpdateDataFormat___(
    std::string                         Token,	///< Input parameter
    std::string                         DataFormat,	///< Input parameter
    std::string                         IncludeHeader,	///< Input parameter
    std::string                         IncludeSuffix,	///< Input parameter
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__ValidateAccess___                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__ValidateAccess___" of service binding "DataSoap".
Validate access for an entire exchange, specific date, and specific period.<br/>INPUT:
Token (Login Token), Exchange (eg: NASDAQ), QuoteDate (format:yyyyMMdd eg:20080225),
Period (1, 5, 10, 15, 30, h, d, w, m)<br/>OUTPUT: RESPONSE

  - Request message MIME content type="application/x-www-form-urlencoded
"
    Use the httpform.c plugin to retrieve key-value pairs from the REST request
    message form data at the server side (client side is automated).

  - POST application/x-www-form-urlencoded messaging

  - Action: "/ValidateAccess"

  - Addressing input action: "/ValidateAccess"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__ValidateAccess___(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         Token,
    std::string                         Exchange,
    std::string                         QuoteDate,
    std::string                         Period,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__ValidateAccess___(
    struct soap *soap,
    // input parameters:
    std::string                         Token,
    std::string                         Exchange,
    std::string                         QuoteDate,
    std::string                         Period,
    // output parameters:
    ns1__RESPONSE                      &ns1__RESPONSE_
  );
@endcode

C++ proxy class (defined in soapDataSoapProxy.h):
@code
  class DataSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapDataSoapService.h):
@code
  class DataSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	ValidateAccess___ POST
//gsoap ns1  service method-mime-type:	ValidateAccess___ application/x-www-form-urlencoded
//gsoap ns1  service method-encoding:	ValidateAccess___ literal
//gsoap ns1  service method-input-action:	ValidateAccess___ /ValidateAccess
int __ns1__ValidateAccess___(
    std::string                         Token,	///< Input parameter
    std::string                         Exchange,	///< Input parameter
    std::string                         QuoteDate,	///< Input parameter
    std::string                         Period,	///< Input parameter
    ns1__RESPONSE                      &ns1__RESPONSE_	///< Output parameter
);

/**

@page DataSoap Binding "DataSoap"

@section DataSoap_policy_enablers Policy Enablers of Binding "DataSoap"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section ns1 Top-level root elements of schema "http://ws.eoddata.com/Data"

  - <ns1:Login> @ref _ns1__Login
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__Login(struct soap*, _ns1__Login*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__Login(struct soap*, _ns1__Login*);
    @endcode

  - <ns1:LoginResponse> @ref _ns1__LoginResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__LoginResponse(struct soap*, _ns1__LoginResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__LoginResponse(struct soap*, _ns1__LoginResponse*);
    @endcode

  - <ns1:Login2> @ref _ns1__Login2
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__Login2(struct soap*, _ns1__Login2*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__Login2(struct soap*, _ns1__Login2*);
    @endcode

  - <ns1:Login2Response> @ref _ns1__Login2Response
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__Login2Response(struct soap*, _ns1__Login2Response*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__Login2Response(struct soap*, _ns1__Login2Response*);
    @endcode

  - <ns1:Membership> @ref _ns1__Membership
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__Membership(struct soap*, _ns1__Membership*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__Membership(struct soap*, _ns1__Membership*);
    @endcode

  - <ns1:MembershipResponse> @ref _ns1__MembershipResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__MembershipResponse(struct soap*, _ns1__MembershipResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__MembershipResponse(struct soap*, _ns1__MembershipResponse*);
    @endcode

  - <ns1:ExchangeList> @ref _ns1__ExchangeList
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__ExchangeList(struct soap*, _ns1__ExchangeList*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__ExchangeList(struct soap*, _ns1__ExchangeList*);
    @endcode

  - <ns1:ExchangeListResponse> @ref _ns1__ExchangeListResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__ExchangeListResponse(struct soap*, _ns1__ExchangeListResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__ExchangeListResponse(struct soap*, _ns1__ExchangeListResponse*);
    @endcode

  - <ns1:ExchangeGet> @ref _ns1__ExchangeGet
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__ExchangeGet(struct soap*, _ns1__ExchangeGet*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__ExchangeGet(struct soap*, _ns1__ExchangeGet*);
    @endcode

  - <ns1:ExchangeGetResponse> @ref _ns1__ExchangeGetResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__ExchangeGetResponse(struct soap*, _ns1__ExchangeGetResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__ExchangeGetResponse(struct soap*, _ns1__ExchangeGetResponse*);
    @endcode

  - <ns1:SymbolList> @ref _ns1__SymbolList
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SymbolList(struct soap*, _ns1__SymbolList*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SymbolList(struct soap*, _ns1__SymbolList*);
    @endcode

  - <ns1:SymbolListResponse> @ref _ns1__SymbolListResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SymbolListResponse(struct soap*, _ns1__SymbolListResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SymbolListResponse(struct soap*, _ns1__SymbolListResponse*);
    @endcode

  - <ns1:SymbolList2> @ref _ns1__SymbolList2
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SymbolList2(struct soap*, _ns1__SymbolList2*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SymbolList2(struct soap*, _ns1__SymbolList2*);
    @endcode

  - <ns1:SymbolList2Response> @ref _ns1__SymbolList2Response
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SymbolList2Response(struct soap*, _ns1__SymbolList2Response*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SymbolList2Response(struct soap*, _ns1__SymbolList2Response*);
    @endcode

  - <ns1:QuoteGet> @ref _ns1__QuoteGet
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__QuoteGet(struct soap*, _ns1__QuoteGet*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__QuoteGet(struct soap*, _ns1__QuoteGet*);
    @endcode

  - <ns1:QuoteGetResponse> @ref _ns1__QuoteGetResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__QuoteGetResponse(struct soap*, _ns1__QuoteGetResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__QuoteGetResponse(struct soap*, _ns1__QuoteGetResponse*);
    @endcode

  - <ns1:QuoteList2> @ref _ns1__QuoteList2
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__QuoteList2(struct soap*, _ns1__QuoteList2*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__QuoteList2(struct soap*, _ns1__QuoteList2*);
    @endcode

  - <ns1:QuoteList2Response> @ref _ns1__QuoteList2Response
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__QuoteList2Response(struct soap*, _ns1__QuoteList2Response*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__QuoteList2Response(struct soap*, _ns1__QuoteList2Response*);
    @endcode

  - <ns1:SymbolGet> @ref _ns1__SymbolGet
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SymbolGet(struct soap*, _ns1__SymbolGet*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SymbolGet(struct soap*, _ns1__SymbolGet*);
    @endcode

  - <ns1:SymbolGetResponse> @ref _ns1__SymbolGetResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SymbolGetResponse(struct soap*, _ns1__SymbolGetResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SymbolGetResponse(struct soap*, _ns1__SymbolGetResponse*);
    @endcode

  - <ns1:QuoteList> @ref _ns1__QuoteList
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__QuoteList(struct soap*, _ns1__QuoteList*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__QuoteList(struct soap*, _ns1__QuoteList*);
    @endcode

  - <ns1:QuoteListResponse> @ref _ns1__QuoteListResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__QuoteListResponse(struct soap*, _ns1__QuoteListResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__QuoteListResponse(struct soap*, _ns1__QuoteListResponse*);
    @endcode

  - <ns1:NewsList> @ref _ns1__NewsList
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__NewsList(struct soap*, _ns1__NewsList*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__NewsList(struct soap*, _ns1__NewsList*);
    @endcode

  - <ns1:NewsListResponse> @ref _ns1__NewsListResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__NewsListResponse(struct soap*, _ns1__NewsListResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__NewsListResponse(struct soap*, _ns1__NewsListResponse*);
    @endcode

  - <ns1:NewsListBySymbol> @ref _ns1__NewsListBySymbol
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__NewsListBySymbol(struct soap*, _ns1__NewsListBySymbol*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__NewsListBySymbol(struct soap*, _ns1__NewsListBySymbol*);
    @endcode

  - <ns1:NewsListBySymbolResponse> @ref _ns1__NewsListBySymbolResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__NewsListBySymbolResponse(struct soap*, _ns1__NewsListBySymbolResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__NewsListBySymbolResponse(struct soap*, _ns1__NewsListBySymbolResponse*);
    @endcode

  - <ns1:FundamentalList> @ref _ns1__FundamentalList
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__FundamentalList(struct soap*, _ns1__FundamentalList*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__FundamentalList(struct soap*, _ns1__FundamentalList*);
    @endcode

  - <ns1:FundamentalListResponse> @ref _ns1__FundamentalListResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__FundamentalListResponse(struct soap*, _ns1__FundamentalListResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__FundamentalListResponse(struct soap*, _ns1__FundamentalListResponse*);
    @endcode

  - <ns1:TechnicalList> @ref _ns1__TechnicalList
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__TechnicalList(struct soap*, _ns1__TechnicalList*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__TechnicalList(struct soap*, _ns1__TechnicalList*);
    @endcode

  - <ns1:TechnicalListResponse> @ref _ns1__TechnicalListResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__TechnicalListResponse(struct soap*, _ns1__TechnicalListResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__TechnicalListResponse(struct soap*, _ns1__TechnicalListResponse*);
    @endcode

  - <ns1:QuoteListByDate> @ref _ns1__QuoteListByDate
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__QuoteListByDate(struct soap*, _ns1__QuoteListByDate*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__QuoteListByDate(struct soap*, _ns1__QuoteListByDate*);
    @endcode

  - <ns1:QuoteListByDateResponse> @ref _ns1__QuoteListByDateResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__QuoteListByDateResponse(struct soap*, _ns1__QuoteListByDateResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__QuoteListByDateResponse(struct soap*, _ns1__QuoteListByDateResponse*);
    @endcode

  - <ns1:QuoteListByDate2> @ref _ns1__QuoteListByDate2
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__QuoteListByDate2(struct soap*, _ns1__QuoteListByDate2*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__QuoteListByDate2(struct soap*, _ns1__QuoteListByDate2*);
    @endcode

  - <ns1:QuoteListByDate2Response> @ref _ns1__QuoteListByDate2Response
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__QuoteListByDate2Response(struct soap*, _ns1__QuoteListByDate2Response*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__QuoteListByDate2Response(struct soap*, _ns1__QuoteListByDate2Response*);
    @endcode

  - <ns1:SymbolHistory> @ref _ns1__SymbolHistory
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SymbolHistory(struct soap*, _ns1__SymbolHistory*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SymbolHistory(struct soap*, _ns1__SymbolHistory*);
    @endcode

  - <ns1:SymbolHistoryResponse> @ref _ns1__SymbolHistoryResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SymbolHistoryResponse(struct soap*, _ns1__SymbolHistoryResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SymbolHistoryResponse(struct soap*, _ns1__SymbolHistoryResponse*);
    @endcode

  - <ns1:Top10Gains> @ref _ns1__Top10Gains
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__Top10Gains(struct soap*, _ns1__Top10Gains*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__Top10Gains(struct soap*, _ns1__Top10Gains*);
    @endcode

  - <ns1:Top10GainsResponse> @ref _ns1__Top10GainsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__Top10GainsResponse(struct soap*, _ns1__Top10GainsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__Top10GainsResponse(struct soap*, _ns1__Top10GainsResponse*);
    @endcode

  - <ns1:Top10Losses> @ref _ns1__Top10Losses
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__Top10Losses(struct soap*, _ns1__Top10Losses*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__Top10Losses(struct soap*, _ns1__Top10Losses*);
    @endcode

  - <ns1:Top10LossesResponse> @ref _ns1__Top10LossesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__Top10LossesResponse(struct soap*, _ns1__Top10LossesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__Top10LossesResponse(struct soap*, _ns1__Top10LossesResponse*);
    @endcode

  - <ns1:SymbolChart> @ref _ns1__SymbolChart
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SymbolChart(struct soap*, _ns1__SymbolChart*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SymbolChart(struct soap*, _ns1__SymbolChart*);
    @endcode

  - <ns1:SymbolChartResponse> @ref _ns1__SymbolChartResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SymbolChartResponse(struct soap*, _ns1__SymbolChartResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SymbolChartResponse(struct soap*, _ns1__SymbolChartResponse*);
    @endcode

  - <ns1:ExchangeMonths> @ref _ns1__ExchangeMonths
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__ExchangeMonths(struct soap*, _ns1__ExchangeMonths*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__ExchangeMonths(struct soap*, _ns1__ExchangeMonths*);
    @endcode

  - <ns1:ExchangeMonthsResponse> @ref _ns1__ExchangeMonthsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__ExchangeMonthsResponse(struct soap*, _ns1__ExchangeMonthsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__ExchangeMonthsResponse(struct soap*, _ns1__ExchangeMonthsResponse*);
    @endcode

  - <ns1:SplitListByExchange> @ref _ns1__SplitListByExchange
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SplitListByExchange(struct soap*, _ns1__SplitListByExchange*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SplitListByExchange(struct soap*, _ns1__SplitListByExchange*);
    @endcode

  - <ns1:SplitListByExchangeResponse> @ref _ns1__SplitListByExchangeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SplitListByExchangeResponse(struct soap*, _ns1__SplitListByExchangeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SplitListByExchangeResponse(struct soap*, _ns1__SplitListByExchangeResponse*);
    @endcode

  - <ns1:SplitListBySymbol> @ref _ns1__SplitListBySymbol
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SplitListBySymbol(struct soap*, _ns1__SplitListBySymbol*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SplitListBySymbol(struct soap*, _ns1__SplitListBySymbol*);
    @endcode

  - <ns1:SplitListBySymbolResponse> @ref _ns1__SplitListBySymbolResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SplitListBySymbolResponse(struct soap*, _ns1__SplitListBySymbolResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SplitListBySymbolResponse(struct soap*, _ns1__SplitListBySymbolResponse*);
    @endcode

  - <ns1:CountryList> @ref _ns1__CountryList
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CountryList(struct soap*, _ns1__CountryList*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CountryList(struct soap*, _ns1__CountryList*);
    @endcode

  - <ns1:CountryListResponse> @ref _ns1__CountryListResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CountryListResponse(struct soap*, _ns1__CountryListResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CountryListResponse(struct soap*, _ns1__CountryListResponse*);
    @endcode

  - <ns1:SymbolHistoryPeriod> @ref _ns1__SymbolHistoryPeriod
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SymbolHistoryPeriod(struct soap*, _ns1__SymbolHistoryPeriod*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SymbolHistoryPeriod(struct soap*, _ns1__SymbolHistoryPeriod*);
    @endcode

  - <ns1:SymbolHistoryPeriodResponse> @ref _ns1__SymbolHistoryPeriodResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SymbolHistoryPeriodResponse(struct soap*, _ns1__SymbolHistoryPeriodResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SymbolHistoryPeriodResponse(struct soap*, _ns1__SymbolHistoryPeriodResponse*);
    @endcode

  - <ns1:SymbolHistoryPeriodByDateRange> @ref _ns1__SymbolHistoryPeriodByDateRange
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SymbolHistoryPeriodByDateRange(struct soap*, _ns1__SymbolHistoryPeriodByDateRange*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SymbolHistoryPeriodByDateRange(struct soap*, _ns1__SymbolHistoryPeriodByDateRange*);
    @endcode

  - <ns1:SymbolHistoryPeriodByDateRangeResponse> @ref _ns1__SymbolHistoryPeriodByDateRangeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SymbolHistoryPeriodByDateRangeResponse(struct soap*, _ns1__SymbolHistoryPeriodByDateRangeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SymbolHistoryPeriodByDateRangeResponse(struct soap*, _ns1__SymbolHistoryPeriodByDateRangeResponse*);
    @endcode

  - <ns1:QuoteListByDatePeriod> @ref _ns1__QuoteListByDatePeriod
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__QuoteListByDatePeriod(struct soap*, _ns1__QuoteListByDatePeriod*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__QuoteListByDatePeriod(struct soap*, _ns1__QuoteListByDatePeriod*);
    @endcode

  - <ns1:QuoteListByDatePeriodResponse> @ref _ns1__QuoteListByDatePeriodResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__QuoteListByDatePeriodResponse(struct soap*, _ns1__QuoteListByDatePeriodResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__QuoteListByDatePeriodResponse(struct soap*, _ns1__QuoteListByDatePeriodResponse*);
    @endcode

  - <ns1:QuoteListByDatePeriod2> @ref _ns1__QuoteListByDatePeriod2
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__QuoteListByDatePeriod2(struct soap*, _ns1__QuoteListByDatePeriod2*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__QuoteListByDatePeriod2(struct soap*, _ns1__QuoteListByDatePeriod2*);
    @endcode

  - <ns1:QuoteListByDatePeriod2Response> @ref _ns1__QuoteListByDatePeriod2Response
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__QuoteListByDatePeriod2Response(struct soap*, _ns1__QuoteListByDatePeriod2Response*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__QuoteListByDatePeriod2Response(struct soap*, _ns1__QuoteListByDatePeriod2Response*);
    @endcode

  - <ns1:SymbolChangesByExchange> @ref _ns1__SymbolChangesByExchange
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SymbolChangesByExchange(struct soap*, _ns1__SymbolChangesByExchange*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SymbolChangesByExchange(struct soap*, _ns1__SymbolChangesByExchange*);
    @endcode

  - <ns1:SymbolChangesByExchangeResponse> @ref _ns1__SymbolChangesByExchangeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SymbolChangesByExchangeResponse(struct soap*, _ns1__SymbolChangesByExchangeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SymbolChangesByExchangeResponse(struct soap*, _ns1__SymbolChangesByExchangeResponse*);
    @endcode

  - <ns1:DataClientLatestVersion> @ref _ns1__DataClientLatestVersion
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DataClientLatestVersion(struct soap*, _ns1__DataClientLatestVersion*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DataClientLatestVersion(struct soap*, _ns1__DataClientLatestVersion*);
    @endcode

  - <ns1:DataClientLatestVersionResponse> @ref _ns1__DataClientLatestVersionResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DataClientLatestVersionResponse(struct soap*, _ns1__DataClientLatestVersionResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DataClientLatestVersionResponse(struct soap*, _ns1__DataClientLatestVersionResponse*);
    @endcode

  - <ns1:DataFormats> @ref _ns1__DataFormats
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DataFormats(struct soap*, _ns1__DataFormats*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DataFormats(struct soap*, _ns1__DataFormats*);
    @endcode

  - <ns1:DataFormatsResponse> @ref _ns1__DataFormatsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DataFormatsResponse(struct soap*, _ns1__DataFormatsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DataFormatsResponse(struct soap*, _ns1__DataFormatsResponse*);
    @endcode

  - <ns1:UpdateDataFormat> @ref _ns1__UpdateDataFormat
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__UpdateDataFormat(struct soap*, _ns1__UpdateDataFormat*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__UpdateDataFormat(struct soap*, _ns1__UpdateDataFormat*);
    @endcode

  - <ns1:UpdateDataFormatResponse> @ref _ns1__UpdateDataFormatResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__UpdateDataFormatResponse(struct soap*, _ns1__UpdateDataFormatResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__UpdateDataFormatResponse(struct soap*, _ns1__UpdateDataFormatResponse*);
    @endcode

  - <ns1:ValidateAccess> @ref _ns1__ValidateAccess
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__ValidateAccess(struct soap*, _ns1__ValidateAccess*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__ValidateAccess(struct soap*, _ns1__ValidateAccess*);
    @endcode

  - <ns1:ValidateAccessResponse> @ref _ns1__ValidateAccessResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__ValidateAccessResponse(struct soap*, _ns1__ValidateAccessResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__ValidateAccessResponse(struct soap*, _ns1__ValidateAccessResponse*);
    @endcode

  - <ns1:LOGINRESPONSE> (use wsdl2h option -g to auto-generate type _ns1__LOGINRESPONSE)

  - <ns1:RESPONSE> (use wsdl2h option -g to auto-generate type _ns1__RESPONSE)

*/

} // namespace ns

/* End of eoddatawebservice.h */
