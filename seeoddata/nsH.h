/* nsH.h
   Generated by gSOAP 2.8.28 from eoddatawebservice.h

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef nsH_H
#define nsH_H
#include "nsStub.h"

namespace ns {
#ifndef WITH_NOIDREF
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);
SOAP_FMAC3 void * SOAP_FMAC4 ns_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 ns_fdelete(struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 ns_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 ns_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_ns_byte
#define SOAP_TYPE_ns_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ns::soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( ((data) ? (ns::soap_default_byte(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_byte(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_int
#define SOAP_TYPE_ns_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ns::soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( ((data) ? (ns::soap_default_int(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_int(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_LONG64
#define SOAP_TYPE_ns_LONG64 (132)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_LONG64(struct soap*, LONG64 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap*, const char*, int, const LONG64 *, const char*);
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap*, const char*, LONG64 *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap*, const LONG64 *, const char*, const char*);

#ifndef soap_write_LONG64
#define soap_write_LONG64(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ns::soap_put_LONG64(soap, data, "long", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap*, LONG64 *, const char*, const char*);

#ifndef soap_read_LONG64
#define soap_read_LONG64(soap, data) ( ((data) ? (ns::soap_default_LONG64(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_LONG64(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_double
#define SOAP_TYPE_ns_double (131)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap*, double *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap*, const char*, double *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap*, const double *, const char*, const char*);

#ifndef soap_write_double
#define soap_write_double(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ns::soap_put_double(soap, data, "double", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap*, double *, const char*, const char*);

#ifndef soap_read_double
#define soap_read_double(soap, data) ( ((data) ? (ns::soap_default_double(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_double(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_dateTime
#define SOAP_TYPE_ns_dateTime (126)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_dateTime(struct soap*, time_t *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_dateTime(struct soap*, const char*, int, const time_t *, const char*);
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_dateTime(struct soap*, const char*, time_t *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_dateTime(struct soap*, const time_t *, const char*, const char*);

#ifndef soap_write_dateTime
#define soap_write_dateTime(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ns::soap_put_dateTime(soap, data, "dateTime", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_dateTime(struct soap*, time_t *, const char*, const char*);

#ifndef soap_read_dateTime
#define soap_read_dateTime(soap, data) ( ((data) ? (ns::soap_default_dateTime(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_dateTime(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_bool
#define SOAP_TYPE_ns_bool (109)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap*, bool *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

#ifndef soap_write_bool
#define soap_write_bool(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ns::soap_put_bool(soap, data, "boolean", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

#ifndef soap_read_bool
#define soap_read_bool(soap, data) ( ((data) ? (ns::soap_default_bool(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_bool(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_std__string
#define SOAP_TYPE_ns_std__string (107)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1) { return soap_instantiate_std__string(soap, n, NULL, NULL, NULL); }

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{	std::string *_p = soap_new_std__string(soap);
	if (_p)
	{	soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{	std::string *_p = soap_new_std__string(soap);
	if (_p)
	{	soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_std__string
#define soap_write_std__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_std__string(soap, data), 0) || ns::soap_put_std__string(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_std__string
#define soap_read_std__string(soap, data) ( ((data) ? (ns::soap_default_std__string(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_std__string(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__ValidateAccessResponse
#define SOAP_TYPE_ns__ns1__ValidateAccessResponse (106)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ValidateAccessResponse(struct soap*, const char*, int, const _ns1__ValidateAccessResponse *, const char*);
SOAP_FMAC3 _ns1__ValidateAccessResponse * SOAP_FMAC4 soap_in__ns1__ValidateAccessResponse(struct soap*, const char*, _ns1__ValidateAccessResponse *, const char*);
SOAP_FMAC1 _ns1__ValidateAccessResponse * SOAP_FMAC2 soap_instantiate__ns1__ValidateAccessResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ValidateAccessResponse * soap_new__ns1__ValidateAccessResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__ValidateAccessResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__ValidateAccessResponse * soap_new_req__ns1__ValidateAccessResponse(
	struct soap *soap)
{	_ns1__ValidateAccessResponse *_p = soap_new__ns1__ValidateAccessResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ValidateAccessResponse * soap_new_set__ns1__ValidateAccessResponse(
	struct soap *soap,
	ns1__RESPONSE *ValidateAccessResult)
{	_ns1__ValidateAccessResponse *_p = soap_new__ns1__ValidateAccessResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ValidateAccessResponse::ValidateAccessResult = ValidateAccessResult;
	}
	return _p;
}

#ifndef soap_write__ns1__ValidateAccessResponse
#define soap_write__ns1__ValidateAccessResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:ValidateAccessResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__ValidateAccessResponse * SOAP_FMAC4 soap_get__ns1__ValidateAccessResponse(struct soap*, _ns1__ValidateAccessResponse *, const char*, const char*);

#ifndef soap_read__ns1__ValidateAccessResponse
#define soap_read__ns1__ValidateAccessResponse(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__ValidateAccessResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__ValidateAccess
#define SOAP_TYPE_ns__ns1__ValidateAccess (105)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ValidateAccess(struct soap*, const char*, int, const _ns1__ValidateAccess *, const char*);
SOAP_FMAC3 _ns1__ValidateAccess * SOAP_FMAC4 soap_in__ns1__ValidateAccess(struct soap*, const char*, _ns1__ValidateAccess *, const char*);
SOAP_FMAC1 _ns1__ValidateAccess * SOAP_FMAC2 soap_instantiate__ns1__ValidateAccess(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ValidateAccess * soap_new__ns1__ValidateAccess(struct soap *soap, int n = -1) { return soap_instantiate__ns1__ValidateAccess(soap, n, NULL, NULL, NULL); }

inline _ns1__ValidateAccess * soap_new_req__ns1__ValidateAccess(
	struct soap *soap)
{	_ns1__ValidateAccess *_p = soap_new__ns1__ValidateAccess(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ValidateAccess * soap_new_set__ns1__ValidateAccess(
	struct soap *soap,
	std::string *Token,
	std::string *Exchange,
	std::string *QuoteDate,
	std::string *Period)
{	_ns1__ValidateAccess *_p = soap_new__ns1__ValidateAccess(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ValidateAccess::Token = Token;
		_p->_ns1__ValidateAccess::Exchange = Exchange;
		_p->_ns1__ValidateAccess::QuoteDate = QuoteDate;
		_p->_ns1__ValidateAccess::Period = Period;
	}
	return _p;
}

#ifndef soap_write__ns1__ValidateAccess
#define soap_write__ns1__ValidateAccess(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:ValidateAccess", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__ValidateAccess * SOAP_FMAC4 soap_get__ns1__ValidateAccess(struct soap*, _ns1__ValidateAccess *, const char*, const char*);

#ifndef soap_read__ns1__ValidateAccess
#define soap_read__ns1__ValidateAccess(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__ValidateAccess(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__UpdateDataFormatResponse
#define SOAP_TYPE_ns__ns1__UpdateDataFormatResponse (104)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__UpdateDataFormatResponse(struct soap*, const char*, int, const _ns1__UpdateDataFormatResponse *, const char*);
SOAP_FMAC3 _ns1__UpdateDataFormatResponse * SOAP_FMAC4 soap_in__ns1__UpdateDataFormatResponse(struct soap*, const char*, _ns1__UpdateDataFormatResponse *, const char*);
SOAP_FMAC1 _ns1__UpdateDataFormatResponse * SOAP_FMAC2 soap_instantiate__ns1__UpdateDataFormatResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__UpdateDataFormatResponse * soap_new__ns1__UpdateDataFormatResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__UpdateDataFormatResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__UpdateDataFormatResponse * soap_new_req__ns1__UpdateDataFormatResponse(
	struct soap *soap)
{	_ns1__UpdateDataFormatResponse *_p = soap_new__ns1__UpdateDataFormatResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__UpdateDataFormatResponse * soap_new_set__ns1__UpdateDataFormatResponse(
	struct soap *soap,
	ns1__RESPONSE *UpdateDataFormatResult)
{	_ns1__UpdateDataFormatResponse *_p = soap_new__ns1__UpdateDataFormatResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__UpdateDataFormatResponse::UpdateDataFormatResult = UpdateDataFormatResult;
	}
	return _p;
}

#ifndef soap_write__ns1__UpdateDataFormatResponse
#define soap_write__ns1__UpdateDataFormatResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:UpdateDataFormatResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__UpdateDataFormatResponse * SOAP_FMAC4 soap_get__ns1__UpdateDataFormatResponse(struct soap*, _ns1__UpdateDataFormatResponse *, const char*, const char*);

#ifndef soap_read__ns1__UpdateDataFormatResponse
#define soap_read__ns1__UpdateDataFormatResponse(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__UpdateDataFormatResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__UpdateDataFormat
#define SOAP_TYPE_ns__ns1__UpdateDataFormat (103)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__UpdateDataFormat(struct soap*, const char*, int, const _ns1__UpdateDataFormat *, const char*);
SOAP_FMAC3 _ns1__UpdateDataFormat * SOAP_FMAC4 soap_in__ns1__UpdateDataFormat(struct soap*, const char*, _ns1__UpdateDataFormat *, const char*);
SOAP_FMAC1 _ns1__UpdateDataFormat * SOAP_FMAC2 soap_instantiate__ns1__UpdateDataFormat(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__UpdateDataFormat * soap_new__ns1__UpdateDataFormat(struct soap *soap, int n = -1) { return soap_instantiate__ns1__UpdateDataFormat(soap, n, NULL, NULL, NULL); }

inline _ns1__UpdateDataFormat * soap_new_req__ns1__UpdateDataFormat(
	struct soap *soap,
	bool IncludeHeader,
	bool IncludeSuffix)
{	_ns1__UpdateDataFormat *_p = soap_new__ns1__UpdateDataFormat(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__UpdateDataFormat::IncludeHeader = IncludeHeader;
		_p->_ns1__UpdateDataFormat::IncludeSuffix = IncludeSuffix;
	}
	return _p;
}

inline _ns1__UpdateDataFormat * soap_new_set__ns1__UpdateDataFormat(
	struct soap *soap,
	std::string *Token,
	std::string *DataFormat,
	bool IncludeHeader,
	bool IncludeSuffix)
{	_ns1__UpdateDataFormat *_p = soap_new__ns1__UpdateDataFormat(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__UpdateDataFormat::Token = Token;
		_p->_ns1__UpdateDataFormat::DataFormat = DataFormat;
		_p->_ns1__UpdateDataFormat::IncludeHeader = IncludeHeader;
		_p->_ns1__UpdateDataFormat::IncludeSuffix = IncludeSuffix;
	}
	return _p;
}

#ifndef soap_write__ns1__UpdateDataFormat
#define soap_write__ns1__UpdateDataFormat(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:UpdateDataFormat", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__UpdateDataFormat * SOAP_FMAC4 soap_get__ns1__UpdateDataFormat(struct soap*, _ns1__UpdateDataFormat *, const char*, const char*);

#ifndef soap_read__ns1__UpdateDataFormat
#define soap_read__ns1__UpdateDataFormat(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__UpdateDataFormat(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__DataFormatsResponse
#define SOAP_TYPE_ns__ns1__DataFormatsResponse (102)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DataFormatsResponse(struct soap*, const char*, int, const _ns1__DataFormatsResponse *, const char*);
SOAP_FMAC3 _ns1__DataFormatsResponse * SOAP_FMAC4 soap_in__ns1__DataFormatsResponse(struct soap*, const char*, _ns1__DataFormatsResponse *, const char*);
SOAP_FMAC1 _ns1__DataFormatsResponse * SOAP_FMAC2 soap_instantiate__ns1__DataFormatsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__DataFormatsResponse * soap_new__ns1__DataFormatsResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__DataFormatsResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__DataFormatsResponse * soap_new_req__ns1__DataFormatsResponse(
	struct soap *soap)
{	_ns1__DataFormatsResponse *_p = soap_new__ns1__DataFormatsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__DataFormatsResponse * soap_new_set__ns1__DataFormatsResponse(
	struct soap *soap,
	ns1__RESPONSE *DataFormatsResult)
{	_ns1__DataFormatsResponse *_p = soap_new__ns1__DataFormatsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DataFormatsResponse::DataFormatsResult = DataFormatsResult;
	}
	return _p;
}

#ifndef soap_write__ns1__DataFormatsResponse
#define soap_write__ns1__DataFormatsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:DataFormatsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__DataFormatsResponse * SOAP_FMAC4 soap_get__ns1__DataFormatsResponse(struct soap*, _ns1__DataFormatsResponse *, const char*, const char*);

#ifndef soap_read__ns1__DataFormatsResponse
#define soap_read__ns1__DataFormatsResponse(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__DataFormatsResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__DataFormats
#define SOAP_TYPE_ns__ns1__DataFormats (101)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DataFormats(struct soap*, const char*, int, const _ns1__DataFormats *, const char*);
SOAP_FMAC3 _ns1__DataFormats * SOAP_FMAC4 soap_in__ns1__DataFormats(struct soap*, const char*, _ns1__DataFormats *, const char*);
SOAP_FMAC1 _ns1__DataFormats * SOAP_FMAC2 soap_instantiate__ns1__DataFormats(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__DataFormats * soap_new__ns1__DataFormats(struct soap *soap, int n = -1) { return soap_instantiate__ns1__DataFormats(soap, n, NULL, NULL, NULL); }

inline _ns1__DataFormats * soap_new_req__ns1__DataFormats(
	struct soap *soap)
{	_ns1__DataFormats *_p = soap_new__ns1__DataFormats(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__DataFormats * soap_new_set__ns1__DataFormats(
	struct soap *soap,
	std::string *Token)
{	_ns1__DataFormats *_p = soap_new__ns1__DataFormats(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DataFormats::Token = Token;
	}
	return _p;
}

#ifndef soap_write__ns1__DataFormats
#define soap_write__ns1__DataFormats(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:DataFormats", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__DataFormats * SOAP_FMAC4 soap_get__ns1__DataFormats(struct soap*, _ns1__DataFormats *, const char*, const char*);

#ifndef soap_read__ns1__DataFormats
#define soap_read__ns1__DataFormats(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__DataFormats(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__DataClientLatestVersionResponse
#define SOAP_TYPE_ns__ns1__DataClientLatestVersionResponse (100)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DataClientLatestVersionResponse(struct soap*, const char*, int, const _ns1__DataClientLatestVersionResponse *, const char*);
SOAP_FMAC3 _ns1__DataClientLatestVersionResponse * SOAP_FMAC4 soap_in__ns1__DataClientLatestVersionResponse(struct soap*, const char*, _ns1__DataClientLatestVersionResponse *, const char*);
SOAP_FMAC1 _ns1__DataClientLatestVersionResponse * SOAP_FMAC2 soap_instantiate__ns1__DataClientLatestVersionResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__DataClientLatestVersionResponse * soap_new__ns1__DataClientLatestVersionResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__DataClientLatestVersionResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__DataClientLatestVersionResponse * soap_new_req__ns1__DataClientLatestVersionResponse(
	struct soap *soap)
{	_ns1__DataClientLatestVersionResponse *_p = soap_new__ns1__DataClientLatestVersionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__DataClientLatestVersionResponse * soap_new_set__ns1__DataClientLatestVersionResponse(
	struct soap *soap,
	ns1__RESPONSE *DataClientLatestVersionResult)
{	_ns1__DataClientLatestVersionResponse *_p = soap_new__ns1__DataClientLatestVersionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DataClientLatestVersionResponse::DataClientLatestVersionResult = DataClientLatestVersionResult;
	}
	return _p;
}

#ifndef soap_write__ns1__DataClientLatestVersionResponse
#define soap_write__ns1__DataClientLatestVersionResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:DataClientLatestVersionResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__DataClientLatestVersionResponse * SOAP_FMAC4 soap_get__ns1__DataClientLatestVersionResponse(struct soap*, _ns1__DataClientLatestVersionResponse *, const char*, const char*);

#ifndef soap_read__ns1__DataClientLatestVersionResponse
#define soap_read__ns1__DataClientLatestVersionResponse(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__DataClientLatestVersionResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__DataClientLatestVersion
#define SOAP_TYPE_ns__ns1__DataClientLatestVersion (99)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DataClientLatestVersion(struct soap*, const char*, int, const _ns1__DataClientLatestVersion *, const char*);
SOAP_FMAC3 _ns1__DataClientLatestVersion * SOAP_FMAC4 soap_in__ns1__DataClientLatestVersion(struct soap*, const char*, _ns1__DataClientLatestVersion *, const char*);
SOAP_FMAC1 _ns1__DataClientLatestVersion * SOAP_FMAC2 soap_instantiate__ns1__DataClientLatestVersion(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__DataClientLatestVersion * soap_new__ns1__DataClientLatestVersion(struct soap *soap, int n = -1) { return soap_instantiate__ns1__DataClientLatestVersion(soap, n, NULL, NULL, NULL); }

inline _ns1__DataClientLatestVersion * soap_new_req__ns1__DataClientLatestVersion(
	struct soap *soap)
{	_ns1__DataClientLatestVersion *_p = soap_new__ns1__DataClientLatestVersion(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__DataClientLatestVersion * soap_new_set__ns1__DataClientLatestVersion(
	struct soap *soap,
	std::string *Token)
{	_ns1__DataClientLatestVersion *_p = soap_new__ns1__DataClientLatestVersion(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DataClientLatestVersion::Token = Token;
	}
	return _p;
}

#ifndef soap_write__ns1__DataClientLatestVersion
#define soap_write__ns1__DataClientLatestVersion(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:DataClientLatestVersion", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__DataClientLatestVersion * SOAP_FMAC4 soap_get__ns1__DataClientLatestVersion(struct soap*, _ns1__DataClientLatestVersion *, const char*, const char*);

#ifndef soap_read__ns1__DataClientLatestVersion
#define soap_read__ns1__DataClientLatestVersion(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__DataClientLatestVersion(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__SymbolChangesByExchangeResponse
#define SOAP_TYPE_ns__ns1__SymbolChangesByExchangeResponse (98)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SymbolChangesByExchangeResponse(struct soap*, const char*, int, const _ns1__SymbolChangesByExchangeResponse *, const char*);
SOAP_FMAC3 _ns1__SymbolChangesByExchangeResponse * SOAP_FMAC4 soap_in__ns1__SymbolChangesByExchangeResponse(struct soap*, const char*, _ns1__SymbolChangesByExchangeResponse *, const char*);
SOAP_FMAC1 _ns1__SymbolChangesByExchangeResponse * SOAP_FMAC2 soap_instantiate__ns1__SymbolChangesByExchangeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SymbolChangesByExchangeResponse * soap_new__ns1__SymbolChangesByExchangeResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SymbolChangesByExchangeResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__SymbolChangesByExchangeResponse * soap_new_req__ns1__SymbolChangesByExchangeResponse(
	struct soap *soap)
{	_ns1__SymbolChangesByExchangeResponse *_p = soap_new__ns1__SymbolChangesByExchangeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SymbolChangesByExchangeResponse * soap_new_set__ns1__SymbolChangesByExchangeResponse(
	struct soap *soap,
	ns1__RESPONSE *SymbolChangesByExchangeResult)
{	_ns1__SymbolChangesByExchangeResponse *_p = soap_new__ns1__SymbolChangesByExchangeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SymbolChangesByExchangeResponse::SymbolChangesByExchangeResult = SymbolChangesByExchangeResult;
	}
	return _p;
}

#ifndef soap_write__ns1__SymbolChangesByExchangeResponse
#define soap_write__ns1__SymbolChangesByExchangeResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SymbolChangesByExchangeResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SymbolChangesByExchangeResponse * SOAP_FMAC4 soap_get__ns1__SymbolChangesByExchangeResponse(struct soap*, _ns1__SymbolChangesByExchangeResponse *, const char*, const char*);

#ifndef soap_read__ns1__SymbolChangesByExchangeResponse
#define soap_read__ns1__SymbolChangesByExchangeResponse(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__SymbolChangesByExchangeResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__SymbolChangesByExchange
#define SOAP_TYPE_ns__ns1__SymbolChangesByExchange (97)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SymbolChangesByExchange(struct soap*, const char*, int, const _ns1__SymbolChangesByExchange *, const char*);
SOAP_FMAC3 _ns1__SymbolChangesByExchange * SOAP_FMAC4 soap_in__ns1__SymbolChangesByExchange(struct soap*, const char*, _ns1__SymbolChangesByExchange *, const char*);
SOAP_FMAC1 _ns1__SymbolChangesByExchange * SOAP_FMAC2 soap_instantiate__ns1__SymbolChangesByExchange(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SymbolChangesByExchange * soap_new__ns1__SymbolChangesByExchange(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SymbolChangesByExchange(soap, n, NULL, NULL, NULL); }

inline _ns1__SymbolChangesByExchange * soap_new_req__ns1__SymbolChangesByExchange(
	struct soap *soap)
{	_ns1__SymbolChangesByExchange *_p = soap_new__ns1__SymbolChangesByExchange(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SymbolChangesByExchange * soap_new_set__ns1__SymbolChangesByExchange(
	struct soap *soap,
	std::string *Token,
	std::string *Exchange)
{	_ns1__SymbolChangesByExchange *_p = soap_new__ns1__SymbolChangesByExchange(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SymbolChangesByExchange::Token = Token;
		_p->_ns1__SymbolChangesByExchange::Exchange = Exchange;
	}
	return _p;
}

#ifndef soap_write__ns1__SymbolChangesByExchange
#define soap_write__ns1__SymbolChangesByExchange(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SymbolChangesByExchange", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SymbolChangesByExchange * SOAP_FMAC4 soap_get__ns1__SymbolChangesByExchange(struct soap*, _ns1__SymbolChangesByExchange *, const char*, const char*);

#ifndef soap_read__ns1__SymbolChangesByExchange
#define soap_read__ns1__SymbolChangesByExchange(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__SymbolChangesByExchange(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__QuoteListByDatePeriod2Response
#define SOAP_TYPE_ns__ns1__QuoteListByDatePeriod2Response (96)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__QuoteListByDatePeriod2Response(struct soap*, const char*, int, const _ns1__QuoteListByDatePeriod2Response *, const char*);
SOAP_FMAC3 _ns1__QuoteListByDatePeriod2Response * SOAP_FMAC4 soap_in__ns1__QuoteListByDatePeriod2Response(struct soap*, const char*, _ns1__QuoteListByDatePeriod2Response *, const char*);
SOAP_FMAC1 _ns1__QuoteListByDatePeriod2Response * SOAP_FMAC2 soap_instantiate__ns1__QuoteListByDatePeriod2Response(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__QuoteListByDatePeriod2Response * soap_new__ns1__QuoteListByDatePeriod2Response(struct soap *soap, int n = -1) { return soap_instantiate__ns1__QuoteListByDatePeriod2Response(soap, n, NULL, NULL, NULL); }

inline _ns1__QuoteListByDatePeriod2Response * soap_new_req__ns1__QuoteListByDatePeriod2Response(
	struct soap *soap)
{	_ns1__QuoteListByDatePeriod2Response *_p = soap_new__ns1__QuoteListByDatePeriod2Response(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__QuoteListByDatePeriod2Response * soap_new_set__ns1__QuoteListByDatePeriod2Response(
	struct soap *soap,
	ns1__RESPONSE *QuoteListByDatePeriod2Result)
{	_ns1__QuoteListByDatePeriod2Response *_p = soap_new__ns1__QuoteListByDatePeriod2Response(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__QuoteListByDatePeriod2Response::QuoteListByDatePeriod2Result = QuoteListByDatePeriod2Result;
	}
	return _p;
}

#ifndef soap_write__ns1__QuoteListByDatePeriod2Response
#define soap_write__ns1__QuoteListByDatePeriod2Response(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:QuoteListByDatePeriod2Response", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__QuoteListByDatePeriod2Response * SOAP_FMAC4 soap_get__ns1__QuoteListByDatePeriod2Response(struct soap*, _ns1__QuoteListByDatePeriod2Response *, const char*, const char*);

#ifndef soap_read__ns1__QuoteListByDatePeriod2Response
#define soap_read__ns1__QuoteListByDatePeriod2Response(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__QuoteListByDatePeriod2Response(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__QuoteListByDatePeriod2
#define SOAP_TYPE_ns__ns1__QuoteListByDatePeriod2 (95)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__QuoteListByDatePeriod2(struct soap*, const char*, int, const _ns1__QuoteListByDatePeriod2 *, const char*);
SOAP_FMAC3 _ns1__QuoteListByDatePeriod2 * SOAP_FMAC4 soap_in__ns1__QuoteListByDatePeriod2(struct soap*, const char*, _ns1__QuoteListByDatePeriod2 *, const char*);
SOAP_FMAC1 _ns1__QuoteListByDatePeriod2 * SOAP_FMAC2 soap_instantiate__ns1__QuoteListByDatePeriod2(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__QuoteListByDatePeriod2 * soap_new__ns1__QuoteListByDatePeriod2(struct soap *soap, int n = -1) { return soap_instantiate__ns1__QuoteListByDatePeriod2(soap, n, NULL, NULL, NULL); }

inline _ns1__QuoteListByDatePeriod2 * soap_new_req__ns1__QuoteListByDatePeriod2(
	struct soap *soap)
{	_ns1__QuoteListByDatePeriod2 *_p = soap_new__ns1__QuoteListByDatePeriod2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__QuoteListByDatePeriod2 * soap_new_set__ns1__QuoteListByDatePeriod2(
	struct soap *soap,
	std::string *Token,
	std::string *Exchange,
	std::string *QuoteDate,
	std::string *Period)
{	_ns1__QuoteListByDatePeriod2 *_p = soap_new__ns1__QuoteListByDatePeriod2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__QuoteListByDatePeriod2::Token = Token;
		_p->_ns1__QuoteListByDatePeriod2::Exchange = Exchange;
		_p->_ns1__QuoteListByDatePeriod2::QuoteDate = QuoteDate;
		_p->_ns1__QuoteListByDatePeriod2::Period = Period;
	}
	return _p;
}

#ifndef soap_write__ns1__QuoteListByDatePeriod2
#define soap_write__ns1__QuoteListByDatePeriod2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:QuoteListByDatePeriod2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__QuoteListByDatePeriod2 * SOAP_FMAC4 soap_get__ns1__QuoteListByDatePeriod2(struct soap*, _ns1__QuoteListByDatePeriod2 *, const char*, const char*);

#ifndef soap_read__ns1__QuoteListByDatePeriod2
#define soap_read__ns1__QuoteListByDatePeriod2(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__QuoteListByDatePeriod2(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__QuoteListByDatePeriodResponse
#define SOAP_TYPE_ns__ns1__QuoteListByDatePeriodResponse (94)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__QuoteListByDatePeriodResponse(struct soap*, const char*, int, const _ns1__QuoteListByDatePeriodResponse *, const char*);
SOAP_FMAC3 _ns1__QuoteListByDatePeriodResponse * SOAP_FMAC4 soap_in__ns1__QuoteListByDatePeriodResponse(struct soap*, const char*, _ns1__QuoteListByDatePeriodResponse *, const char*);
SOAP_FMAC1 _ns1__QuoteListByDatePeriodResponse * SOAP_FMAC2 soap_instantiate__ns1__QuoteListByDatePeriodResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__QuoteListByDatePeriodResponse * soap_new__ns1__QuoteListByDatePeriodResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__QuoteListByDatePeriodResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__QuoteListByDatePeriodResponse * soap_new_req__ns1__QuoteListByDatePeriodResponse(
	struct soap *soap)
{	_ns1__QuoteListByDatePeriodResponse *_p = soap_new__ns1__QuoteListByDatePeriodResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__QuoteListByDatePeriodResponse * soap_new_set__ns1__QuoteListByDatePeriodResponse(
	struct soap *soap,
	ns1__RESPONSE *QuoteListByDatePeriodResult)
{	_ns1__QuoteListByDatePeriodResponse *_p = soap_new__ns1__QuoteListByDatePeriodResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__QuoteListByDatePeriodResponse::QuoteListByDatePeriodResult = QuoteListByDatePeriodResult;
	}
	return _p;
}

#ifndef soap_write__ns1__QuoteListByDatePeriodResponse
#define soap_write__ns1__QuoteListByDatePeriodResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:QuoteListByDatePeriodResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__QuoteListByDatePeriodResponse * SOAP_FMAC4 soap_get__ns1__QuoteListByDatePeriodResponse(struct soap*, _ns1__QuoteListByDatePeriodResponse *, const char*, const char*);

#ifndef soap_read__ns1__QuoteListByDatePeriodResponse
#define soap_read__ns1__QuoteListByDatePeriodResponse(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__QuoteListByDatePeriodResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__QuoteListByDatePeriod
#define SOAP_TYPE_ns__ns1__QuoteListByDatePeriod (93)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__QuoteListByDatePeriod(struct soap*, const char*, int, const _ns1__QuoteListByDatePeriod *, const char*);
SOAP_FMAC3 _ns1__QuoteListByDatePeriod * SOAP_FMAC4 soap_in__ns1__QuoteListByDatePeriod(struct soap*, const char*, _ns1__QuoteListByDatePeriod *, const char*);
SOAP_FMAC1 _ns1__QuoteListByDatePeriod * SOAP_FMAC2 soap_instantiate__ns1__QuoteListByDatePeriod(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__QuoteListByDatePeriod * soap_new__ns1__QuoteListByDatePeriod(struct soap *soap, int n = -1) { return soap_instantiate__ns1__QuoteListByDatePeriod(soap, n, NULL, NULL, NULL); }

inline _ns1__QuoteListByDatePeriod * soap_new_req__ns1__QuoteListByDatePeriod(
	struct soap *soap)
{	_ns1__QuoteListByDatePeriod *_p = soap_new__ns1__QuoteListByDatePeriod(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__QuoteListByDatePeriod * soap_new_set__ns1__QuoteListByDatePeriod(
	struct soap *soap,
	std::string *Token,
	std::string *Exchange,
	std::string *QuoteDate,
	std::string *Period)
{	_ns1__QuoteListByDatePeriod *_p = soap_new__ns1__QuoteListByDatePeriod(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__QuoteListByDatePeriod::Token = Token;
		_p->_ns1__QuoteListByDatePeriod::Exchange = Exchange;
		_p->_ns1__QuoteListByDatePeriod::QuoteDate = QuoteDate;
		_p->_ns1__QuoteListByDatePeriod::Period = Period;
	}
	return _p;
}

#ifndef soap_write__ns1__QuoteListByDatePeriod
#define soap_write__ns1__QuoteListByDatePeriod(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:QuoteListByDatePeriod", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__QuoteListByDatePeriod * SOAP_FMAC4 soap_get__ns1__QuoteListByDatePeriod(struct soap*, _ns1__QuoteListByDatePeriod *, const char*, const char*);

#ifndef soap_read__ns1__QuoteListByDatePeriod
#define soap_read__ns1__QuoteListByDatePeriod(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__QuoteListByDatePeriod(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__SymbolHistoryPeriodByDateRangeResponse
#define SOAP_TYPE_ns__ns1__SymbolHistoryPeriodByDateRangeResponse (92)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SymbolHistoryPeriodByDateRangeResponse(struct soap*, const char*, int, const _ns1__SymbolHistoryPeriodByDateRangeResponse *, const char*);
SOAP_FMAC3 _ns1__SymbolHistoryPeriodByDateRangeResponse * SOAP_FMAC4 soap_in__ns1__SymbolHistoryPeriodByDateRangeResponse(struct soap*, const char*, _ns1__SymbolHistoryPeriodByDateRangeResponse *, const char*);
SOAP_FMAC1 _ns1__SymbolHistoryPeriodByDateRangeResponse * SOAP_FMAC2 soap_instantiate__ns1__SymbolHistoryPeriodByDateRangeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SymbolHistoryPeriodByDateRangeResponse * soap_new__ns1__SymbolHistoryPeriodByDateRangeResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SymbolHistoryPeriodByDateRangeResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__SymbolHistoryPeriodByDateRangeResponse * soap_new_req__ns1__SymbolHistoryPeriodByDateRangeResponse(
	struct soap *soap)
{	_ns1__SymbolHistoryPeriodByDateRangeResponse *_p = soap_new__ns1__SymbolHistoryPeriodByDateRangeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SymbolHistoryPeriodByDateRangeResponse * soap_new_set__ns1__SymbolHistoryPeriodByDateRangeResponse(
	struct soap *soap,
	ns1__RESPONSE *SymbolHistoryPeriodByDateRangeResult)
{	_ns1__SymbolHistoryPeriodByDateRangeResponse *_p = soap_new__ns1__SymbolHistoryPeriodByDateRangeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SymbolHistoryPeriodByDateRangeResponse::SymbolHistoryPeriodByDateRangeResult = SymbolHistoryPeriodByDateRangeResult;
	}
	return _p;
}

#ifndef soap_write__ns1__SymbolHistoryPeriodByDateRangeResponse
#define soap_write__ns1__SymbolHistoryPeriodByDateRangeResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SymbolHistoryPeriodByDateRangeResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SymbolHistoryPeriodByDateRangeResponse * SOAP_FMAC4 soap_get__ns1__SymbolHistoryPeriodByDateRangeResponse(struct soap*, _ns1__SymbolHistoryPeriodByDateRangeResponse *, const char*, const char*);

#ifndef soap_read__ns1__SymbolHistoryPeriodByDateRangeResponse
#define soap_read__ns1__SymbolHistoryPeriodByDateRangeResponse(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__SymbolHistoryPeriodByDateRangeResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__SymbolHistoryPeriodByDateRange
#define SOAP_TYPE_ns__ns1__SymbolHistoryPeriodByDateRange (91)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SymbolHistoryPeriodByDateRange(struct soap*, const char*, int, const _ns1__SymbolHistoryPeriodByDateRange *, const char*);
SOAP_FMAC3 _ns1__SymbolHistoryPeriodByDateRange * SOAP_FMAC4 soap_in__ns1__SymbolHistoryPeriodByDateRange(struct soap*, const char*, _ns1__SymbolHistoryPeriodByDateRange *, const char*);
SOAP_FMAC1 _ns1__SymbolHistoryPeriodByDateRange * SOAP_FMAC2 soap_instantiate__ns1__SymbolHistoryPeriodByDateRange(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SymbolHistoryPeriodByDateRange * soap_new__ns1__SymbolHistoryPeriodByDateRange(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SymbolHistoryPeriodByDateRange(soap, n, NULL, NULL, NULL); }

inline _ns1__SymbolHistoryPeriodByDateRange * soap_new_req__ns1__SymbolHistoryPeriodByDateRange(
	struct soap *soap)
{	_ns1__SymbolHistoryPeriodByDateRange *_p = soap_new__ns1__SymbolHistoryPeriodByDateRange(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SymbolHistoryPeriodByDateRange * soap_new_set__ns1__SymbolHistoryPeriodByDateRange(
	struct soap *soap,
	std::string *Token,
	std::string *Exchange,
	std::string *Symbol,
	std::string *StartDate,
	std::string *EndDate,
	std::string *Period)
{	_ns1__SymbolHistoryPeriodByDateRange *_p = soap_new__ns1__SymbolHistoryPeriodByDateRange(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SymbolHistoryPeriodByDateRange::Token = Token;
		_p->_ns1__SymbolHistoryPeriodByDateRange::Exchange = Exchange;
		_p->_ns1__SymbolHistoryPeriodByDateRange::Symbol = Symbol;
		_p->_ns1__SymbolHistoryPeriodByDateRange::StartDate = StartDate;
		_p->_ns1__SymbolHistoryPeriodByDateRange::EndDate = EndDate;
		_p->_ns1__SymbolHistoryPeriodByDateRange::Period = Period;
	}
	return _p;
}

#ifndef soap_write__ns1__SymbolHistoryPeriodByDateRange
#define soap_write__ns1__SymbolHistoryPeriodByDateRange(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SymbolHistoryPeriodByDateRange", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SymbolHistoryPeriodByDateRange * SOAP_FMAC4 soap_get__ns1__SymbolHistoryPeriodByDateRange(struct soap*, _ns1__SymbolHistoryPeriodByDateRange *, const char*, const char*);

#ifndef soap_read__ns1__SymbolHistoryPeriodByDateRange
#define soap_read__ns1__SymbolHistoryPeriodByDateRange(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__SymbolHistoryPeriodByDateRange(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__SymbolHistoryPeriodResponse
#define SOAP_TYPE_ns__ns1__SymbolHistoryPeriodResponse (90)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SymbolHistoryPeriodResponse(struct soap*, const char*, int, const _ns1__SymbolHistoryPeriodResponse *, const char*);
SOAP_FMAC3 _ns1__SymbolHistoryPeriodResponse * SOAP_FMAC4 soap_in__ns1__SymbolHistoryPeriodResponse(struct soap*, const char*, _ns1__SymbolHistoryPeriodResponse *, const char*);
SOAP_FMAC1 _ns1__SymbolHistoryPeriodResponse * SOAP_FMAC2 soap_instantiate__ns1__SymbolHistoryPeriodResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SymbolHistoryPeriodResponse * soap_new__ns1__SymbolHistoryPeriodResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SymbolHistoryPeriodResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__SymbolHistoryPeriodResponse * soap_new_req__ns1__SymbolHistoryPeriodResponse(
	struct soap *soap)
{	_ns1__SymbolHistoryPeriodResponse *_p = soap_new__ns1__SymbolHistoryPeriodResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SymbolHistoryPeriodResponse * soap_new_set__ns1__SymbolHistoryPeriodResponse(
	struct soap *soap,
	ns1__RESPONSE *SymbolHistoryPeriodResult)
{	_ns1__SymbolHistoryPeriodResponse *_p = soap_new__ns1__SymbolHistoryPeriodResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SymbolHistoryPeriodResponse::SymbolHistoryPeriodResult = SymbolHistoryPeriodResult;
	}
	return _p;
}

#ifndef soap_write__ns1__SymbolHistoryPeriodResponse
#define soap_write__ns1__SymbolHistoryPeriodResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SymbolHistoryPeriodResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SymbolHistoryPeriodResponse * SOAP_FMAC4 soap_get__ns1__SymbolHistoryPeriodResponse(struct soap*, _ns1__SymbolHistoryPeriodResponse *, const char*, const char*);

#ifndef soap_read__ns1__SymbolHistoryPeriodResponse
#define soap_read__ns1__SymbolHistoryPeriodResponse(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__SymbolHistoryPeriodResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__SymbolHistoryPeriod
#define SOAP_TYPE_ns__ns1__SymbolHistoryPeriod (89)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SymbolHistoryPeriod(struct soap*, const char*, int, const _ns1__SymbolHistoryPeriod *, const char*);
SOAP_FMAC3 _ns1__SymbolHistoryPeriod * SOAP_FMAC4 soap_in__ns1__SymbolHistoryPeriod(struct soap*, const char*, _ns1__SymbolHistoryPeriod *, const char*);
SOAP_FMAC1 _ns1__SymbolHistoryPeriod * SOAP_FMAC2 soap_instantiate__ns1__SymbolHistoryPeriod(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SymbolHistoryPeriod * soap_new__ns1__SymbolHistoryPeriod(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SymbolHistoryPeriod(soap, n, NULL, NULL, NULL); }

inline _ns1__SymbolHistoryPeriod * soap_new_req__ns1__SymbolHistoryPeriod(
	struct soap *soap)
{	_ns1__SymbolHistoryPeriod *_p = soap_new__ns1__SymbolHistoryPeriod(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SymbolHistoryPeriod * soap_new_set__ns1__SymbolHistoryPeriod(
	struct soap *soap,
	std::string *Token,
	std::string *Exchange,
	std::string *Symbol,
	std::string *Date,
	std::string *Period)
{	_ns1__SymbolHistoryPeriod *_p = soap_new__ns1__SymbolHistoryPeriod(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SymbolHistoryPeriod::Token = Token;
		_p->_ns1__SymbolHistoryPeriod::Exchange = Exchange;
		_p->_ns1__SymbolHistoryPeriod::Symbol = Symbol;
		_p->_ns1__SymbolHistoryPeriod::Date = Date;
		_p->_ns1__SymbolHistoryPeriod::Period = Period;
	}
	return _p;
}

#ifndef soap_write__ns1__SymbolHistoryPeriod
#define soap_write__ns1__SymbolHistoryPeriod(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SymbolHistoryPeriod", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SymbolHistoryPeriod * SOAP_FMAC4 soap_get__ns1__SymbolHistoryPeriod(struct soap*, _ns1__SymbolHistoryPeriod *, const char*, const char*);

#ifndef soap_read__ns1__SymbolHistoryPeriod
#define soap_read__ns1__SymbolHistoryPeriod(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__SymbolHistoryPeriod(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__CountryListResponse
#define SOAP_TYPE_ns__ns1__CountryListResponse (88)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CountryListResponse(struct soap*, const char*, int, const _ns1__CountryListResponse *, const char*);
SOAP_FMAC3 _ns1__CountryListResponse * SOAP_FMAC4 soap_in__ns1__CountryListResponse(struct soap*, const char*, _ns1__CountryListResponse *, const char*);
SOAP_FMAC1 _ns1__CountryListResponse * SOAP_FMAC2 soap_instantiate__ns1__CountryListResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CountryListResponse * soap_new__ns1__CountryListResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__CountryListResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__CountryListResponse * soap_new_req__ns1__CountryListResponse(
	struct soap *soap)
{	_ns1__CountryListResponse *_p = soap_new__ns1__CountryListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__CountryListResponse * soap_new_set__ns1__CountryListResponse(
	struct soap *soap,
	ns1__RESPONSE *CountryListResult)
{	_ns1__CountryListResponse *_p = soap_new__ns1__CountryListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CountryListResponse::CountryListResult = CountryListResult;
	}
	return _p;
}

#ifndef soap_write__ns1__CountryListResponse
#define soap_write__ns1__CountryListResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:CountryListResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__CountryListResponse * SOAP_FMAC4 soap_get__ns1__CountryListResponse(struct soap*, _ns1__CountryListResponse *, const char*, const char*);

#ifndef soap_read__ns1__CountryListResponse
#define soap_read__ns1__CountryListResponse(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__CountryListResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__CountryList
#define SOAP_TYPE_ns__ns1__CountryList (87)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CountryList(struct soap*, const char*, int, const _ns1__CountryList *, const char*);
SOAP_FMAC3 _ns1__CountryList * SOAP_FMAC4 soap_in__ns1__CountryList(struct soap*, const char*, _ns1__CountryList *, const char*);
SOAP_FMAC1 _ns1__CountryList * SOAP_FMAC2 soap_instantiate__ns1__CountryList(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CountryList * soap_new__ns1__CountryList(struct soap *soap, int n = -1) { return soap_instantiate__ns1__CountryList(soap, n, NULL, NULL, NULL); }

inline _ns1__CountryList * soap_new_req__ns1__CountryList(
	struct soap *soap)
{	_ns1__CountryList *_p = soap_new__ns1__CountryList(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__CountryList * soap_new_set__ns1__CountryList(
	struct soap *soap,
	std::string *Token)
{	_ns1__CountryList *_p = soap_new__ns1__CountryList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CountryList::Token = Token;
	}
	return _p;
}

#ifndef soap_write__ns1__CountryList
#define soap_write__ns1__CountryList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:CountryList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__CountryList * SOAP_FMAC4 soap_get__ns1__CountryList(struct soap*, _ns1__CountryList *, const char*, const char*);

#ifndef soap_read__ns1__CountryList
#define soap_read__ns1__CountryList(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__CountryList(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__SplitListBySymbolResponse
#define SOAP_TYPE_ns__ns1__SplitListBySymbolResponse (86)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SplitListBySymbolResponse(struct soap*, const char*, int, const _ns1__SplitListBySymbolResponse *, const char*);
SOAP_FMAC3 _ns1__SplitListBySymbolResponse * SOAP_FMAC4 soap_in__ns1__SplitListBySymbolResponse(struct soap*, const char*, _ns1__SplitListBySymbolResponse *, const char*);
SOAP_FMAC1 _ns1__SplitListBySymbolResponse * SOAP_FMAC2 soap_instantiate__ns1__SplitListBySymbolResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SplitListBySymbolResponse * soap_new__ns1__SplitListBySymbolResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SplitListBySymbolResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__SplitListBySymbolResponse * soap_new_req__ns1__SplitListBySymbolResponse(
	struct soap *soap)
{	_ns1__SplitListBySymbolResponse *_p = soap_new__ns1__SplitListBySymbolResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SplitListBySymbolResponse * soap_new_set__ns1__SplitListBySymbolResponse(
	struct soap *soap,
	ns1__RESPONSE *SplitListBySymbolResult)
{	_ns1__SplitListBySymbolResponse *_p = soap_new__ns1__SplitListBySymbolResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SplitListBySymbolResponse::SplitListBySymbolResult = SplitListBySymbolResult;
	}
	return _p;
}

#ifndef soap_write__ns1__SplitListBySymbolResponse
#define soap_write__ns1__SplitListBySymbolResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SplitListBySymbolResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SplitListBySymbolResponse * SOAP_FMAC4 soap_get__ns1__SplitListBySymbolResponse(struct soap*, _ns1__SplitListBySymbolResponse *, const char*, const char*);

#ifndef soap_read__ns1__SplitListBySymbolResponse
#define soap_read__ns1__SplitListBySymbolResponse(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__SplitListBySymbolResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__SplitListBySymbol
#define SOAP_TYPE_ns__ns1__SplitListBySymbol (85)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SplitListBySymbol(struct soap*, const char*, int, const _ns1__SplitListBySymbol *, const char*);
SOAP_FMAC3 _ns1__SplitListBySymbol * SOAP_FMAC4 soap_in__ns1__SplitListBySymbol(struct soap*, const char*, _ns1__SplitListBySymbol *, const char*);
SOAP_FMAC1 _ns1__SplitListBySymbol * SOAP_FMAC2 soap_instantiate__ns1__SplitListBySymbol(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SplitListBySymbol * soap_new__ns1__SplitListBySymbol(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SplitListBySymbol(soap, n, NULL, NULL, NULL); }

inline _ns1__SplitListBySymbol * soap_new_req__ns1__SplitListBySymbol(
	struct soap *soap)
{	_ns1__SplitListBySymbol *_p = soap_new__ns1__SplitListBySymbol(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SplitListBySymbol * soap_new_set__ns1__SplitListBySymbol(
	struct soap *soap,
	std::string *Token,
	std::string *Exchange,
	std::string *Symbol)
{	_ns1__SplitListBySymbol *_p = soap_new__ns1__SplitListBySymbol(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SplitListBySymbol::Token = Token;
		_p->_ns1__SplitListBySymbol::Exchange = Exchange;
		_p->_ns1__SplitListBySymbol::Symbol = Symbol;
	}
	return _p;
}

#ifndef soap_write__ns1__SplitListBySymbol
#define soap_write__ns1__SplitListBySymbol(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SplitListBySymbol", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SplitListBySymbol * SOAP_FMAC4 soap_get__ns1__SplitListBySymbol(struct soap*, _ns1__SplitListBySymbol *, const char*, const char*);

#ifndef soap_read__ns1__SplitListBySymbol
#define soap_read__ns1__SplitListBySymbol(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__SplitListBySymbol(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__SplitListByExchangeResponse
#define SOAP_TYPE_ns__ns1__SplitListByExchangeResponse (84)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SplitListByExchangeResponse(struct soap*, const char*, int, const _ns1__SplitListByExchangeResponse *, const char*);
SOAP_FMAC3 _ns1__SplitListByExchangeResponse * SOAP_FMAC4 soap_in__ns1__SplitListByExchangeResponse(struct soap*, const char*, _ns1__SplitListByExchangeResponse *, const char*);
SOAP_FMAC1 _ns1__SplitListByExchangeResponse * SOAP_FMAC2 soap_instantiate__ns1__SplitListByExchangeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SplitListByExchangeResponse * soap_new__ns1__SplitListByExchangeResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SplitListByExchangeResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__SplitListByExchangeResponse * soap_new_req__ns1__SplitListByExchangeResponse(
	struct soap *soap)
{	_ns1__SplitListByExchangeResponse *_p = soap_new__ns1__SplitListByExchangeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SplitListByExchangeResponse * soap_new_set__ns1__SplitListByExchangeResponse(
	struct soap *soap,
	ns1__RESPONSE *SplitListByExchangeResult)
{	_ns1__SplitListByExchangeResponse *_p = soap_new__ns1__SplitListByExchangeResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SplitListByExchangeResponse::SplitListByExchangeResult = SplitListByExchangeResult;
	}
	return _p;
}

#ifndef soap_write__ns1__SplitListByExchangeResponse
#define soap_write__ns1__SplitListByExchangeResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SplitListByExchangeResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SplitListByExchangeResponse * SOAP_FMAC4 soap_get__ns1__SplitListByExchangeResponse(struct soap*, _ns1__SplitListByExchangeResponse *, const char*, const char*);

#ifndef soap_read__ns1__SplitListByExchangeResponse
#define soap_read__ns1__SplitListByExchangeResponse(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__SplitListByExchangeResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__SplitListByExchange
#define SOAP_TYPE_ns__ns1__SplitListByExchange (83)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SplitListByExchange(struct soap*, const char*, int, const _ns1__SplitListByExchange *, const char*);
SOAP_FMAC3 _ns1__SplitListByExchange * SOAP_FMAC4 soap_in__ns1__SplitListByExchange(struct soap*, const char*, _ns1__SplitListByExchange *, const char*);
SOAP_FMAC1 _ns1__SplitListByExchange * SOAP_FMAC2 soap_instantiate__ns1__SplitListByExchange(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SplitListByExchange * soap_new__ns1__SplitListByExchange(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SplitListByExchange(soap, n, NULL, NULL, NULL); }

inline _ns1__SplitListByExchange * soap_new_req__ns1__SplitListByExchange(
	struct soap *soap)
{	_ns1__SplitListByExchange *_p = soap_new__ns1__SplitListByExchange(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SplitListByExchange * soap_new_set__ns1__SplitListByExchange(
	struct soap *soap,
	std::string *Token,
	std::string *Exchange)
{	_ns1__SplitListByExchange *_p = soap_new__ns1__SplitListByExchange(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SplitListByExchange::Token = Token;
		_p->_ns1__SplitListByExchange::Exchange = Exchange;
	}
	return _p;
}

#ifndef soap_write__ns1__SplitListByExchange
#define soap_write__ns1__SplitListByExchange(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SplitListByExchange", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SplitListByExchange * SOAP_FMAC4 soap_get__ns1__SplitListByExchange(struct soap*, _ns1__SplitListByExchange *, const char*, const char*);

#ifndef soap_read__ns1__SplitListByExchange
#define soap_read__ns1__SplitListByExchange(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__SplitListByExchange(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__ExchangeMonthsResponse
#define SOAP_TYPE_ns__ns1__ExchangeMonthsResponse (82)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ExchangeMonthsResponse(struct soap*, const char*, int, const _ns1__ExchangeMonthsResponse *, const char*);
SOAP_FMAC3 _ns1__ExchangeMonthsResponse * SOAP_FMAC4 soap_in__ns1__ExchangeMonthsResponse(struct soap*, const char*, _ns1__ExchangeMonthsResponse *, const char*);
SOAP_FMAC1 _ns1__ExchangeMonthsResponse * SOAP_FMAC2 soap_instantiate__ns1__ExchangeMonthsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ExchangeMonthsResponse * soap_new__ns1__ExchangeMonthsResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__ExchangeMonthsResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__ExchangeMonthsResponse * soap_new_req__ns1__ExchangeMonthsResponse(
	struct soap *soap)
{	_ns1__ExchangeMonthsResponse *_p = soap_new__ns1__ExchangeMonthsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ExchangeMonthsResponse * soap_new_set__ns1__ExchangeMonthsResponse(
	struct soap *soap,
	ns1__RESPONSE *ExchangeMonthsResult)
{	_ns1__ExchangeMonthsResponse *_p = soap_new__ns1__ExchangeMonthsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ExchangeMonthsResponse::ExchangeMonthsResult = ExchangeMonthsResult;
	}
	return _p;
}

#ifndef soap_write__ns1__ExchangeMonthsResponse
#define soap_write__ns1__ExchangeMonthsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:ExchangeMonthsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__ExchangeMonthsResponse * SOAP_FMAC4 soap_get__ns1__ExchangeMonthsResponse(struct soap*, _ns1__ExchangeMonthsResponse *, const char*, const char*);

#ifndef soap_read__ns1__ExchangeMonthsResponse
#define soap_read__ns1__ExchangeMonthsResponse(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__ExchangeMonthsResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__ExchangeMonths
#define SOAP_TYPE_ns__ns1__ExchangeMonths (81)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ExchangeMonths(struct soap*, const char*, int, const _ns1__ExchangeMonths *, const char*);
SOAP_FMAC3 _ns1__ExchangeMonths * SOAP_FMAC4 soap_in__ns1__ExchangeMonths(struct soap*, const char*, _ns1__ExchangeMonths *, const char*);
SOAP_FMAC1 _ns1__ExchangeMonths * SOAP_FMAC2 soap_instantiate__ns1__ExchangeMonths(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ExchangeMonths * soap_new__ns1__ExchangeMonths(struct soap *soap, int n = -1) { return soap_instantiate__ns1__ExchangeMonths(soap, n, NULL, NULL, NULL); }

inline _ns1__ExchangeMonths * soap_new_req__ns1__ExchangeMonths(
	struct soap *soap)
{	_ns1__ExchangeMonths *_p = soap_new__ns1__ExchangeMonths(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ExchangeMonths * soap_new_set__ns1__ExchangeMonths(
	struct soap *soap,
	std::string *Token,
	std::string *Exchange)
{	_ns1__ExchangeMonths *_p = soap_new__ns1__ExchangeMonths(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ExchangeMonths::Token = Token;
		_p->_ns1__ExchangeMonths::Exchange = Exchange;
	}
	return _p;
}

#ifndef soap_write__ns1__ExchangeMonths
#define soap_write__ns1__ExchangeMonths(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:ExchangeMonths", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__ExchangeMonths * SOAP_FMAC4 soap_get__ns1__ExchangeMonths(struct soap*, _ns1__ExchangeMonths *, const char*, const char*);

#ifndef soap_read__ns1__ExchangeMonths
#define soap_read__ns1__ExchangeMonths(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__ExchangeMonths(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__SymbolChartResponse
#define SOAP_TYPE_ns__ns1__SymbolChartResponse (80)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SymbolChartResponse(struct soap*, const char*, int, const _ns1__SymbolChartResponse *, const char*);
SOAP_FMAC3 _ns1__SymbolChartResponse * SOAP_FMAC4 soap_in__ns1__SymbolChartResponse(struct soap*, const char*, _ns1__SymbolChartResponse *, const char*);
SOAP_FMAC1 _ns1__SymbolChartResponse * SOAP_FMAC2 soap_instantiate__ns1__SymbolChartResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SymbolChartResponse * soap_new__ns1__SymbolChartResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SymbolChartResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__SymbolChartResponse * soap_new_req__ns1__SymbolChartResponse(
	struct soap *soap)
{	_ns1__SymbolChartResponse *_p = soap_new__ns1__SymbolChartResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SymbolChartResponse * soap_new_set__ns1__SymbolChartResponse(
	struct soap *soap,
	ns1__RESPONSE *SymbolChartResult)
{	_ns1__SymbolChartResponse *_p = soap_new__ns1__SymbolChartResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SymbolChartResponse::SymbolChartResult = SymbolChartResult;
	}
	return _p;
}

#ifndef soap_write__ns1__SymbolChartResponse
#define soap_write__ns1__SymbolChartResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SymbolChartResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SymbolChartResponse * SOAP_FMAC4 soap_get__ns1__SymbolChartResponse(struct soap*, _ns1__SymbolChartResponse *, const char*, const char*);

#ifndef soap_read__ns1__SymbolChartResponse
#define soap_read__ns1__SymbolChartResponse(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__SymbolChartResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__SymbolChart
#define SOAP_TYPE_ns__ns1__SymbolChart (79)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SymbolChart(struct soap*, const char*, int, const _ns1__SymbolChart *, const char*);
SOAP_FMAC3 _ns1__SymbolChart * SOAP_FMAC4 soap_in__ns1__SymbolChart(struct soap*, const char*, _ns1__SymbolChart *, const char*);
SOAP_FMAC1 _ns1__SymbolChart * SOAP_FMAC2 soap_instantiate__ns1__SymbolChart(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SymbolChart * soap_new__ns1__SymbolChart(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SymbolChart(soap, n, NULL, NULL, NULL); }

inline _ns1__SymbolChart * soap_new_req__ns1__SymbolChart(
	struct soap *soap)
{	_ns1__SymbolChart *_p = soap_new__ns1__SymbolChart(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SymbolChart * soap_new_set__ns1__SymbolChart(
	struct soap *soap,
	std::string *Token,
	std::string *Exchange,
	std::string *Symbol)
{	_ns1__SymbolChart *_p = soap_new__ns1__SymbolChart(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SymbolChart::Token = Token;
		_p->_ns1__SymbolChart::Exchange = Exchange;
		_p->_ns1__SymbolChart::Symbol = Symbol;
	}
	return _p;
}

#ifndef soap_write__ns1__SymbolChart
#define soap_write__ns1__SymbolChart(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SymbolChart", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SymbolChart * SOAP_FMAC4 soap_get__ns1__SymbolChart(struct soap*, _ns1__SymbolChart *, const char*, const char*);

#ifndef soap_read__ns1__SymbolChart
#define soap_read__ns1__SymbolChart(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__SymbolChart(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__Top10LossesResponse
#define SOAP_TYPE_ns__ns1__Top10LossesResponse (78)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Top10LossesResponse(struct soap*, const char*, int, const _ns1__Top10LossesResponse *, const char*);
SOAP_FMAC3 _ns1__Top10LossesResponse * SOAP_FMAC4 soap_in__ns1__Top10LossesResponse(struct soap*, const char*, _ns1__Top10LossesResponse *, const char*);
SOAP_FMAC1 _ns1__Top10LossesResponse * SOAP_FMAC2 soap_instantiate__ns1__Top10LossesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__Top10LossesResponse * soap_new__ns1__Top10LossesResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__Top10LossesResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__Top10LossesResponse * soap_new_req__ns1__Top10LossesResponse(
	struct soap *soap)
{	_ns1__Top10LossesResponse *_p = soap_new__ns1__Top10LossesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__Top10LossesResponse * soap_new_set__ns1__Top10LossesResponse(
	struct soap *soap,
	ns1__RESPONSE *Top10LossesResult)
{	_ns1__Top10LossesResponse *_p = soap_new__ns1__Top10LossesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__Top10LossesResponse::Top10LossesResult = Top10LossesResult;
	}
	return _p;
}

#ifndef soap_write__ns1__Top10LossesResponse
#define soap_write__ns1__Top10LossesResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:Top10LossesResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__Top10LossesResponse * SOAP_FMAC4 soap_get__ns1__Top10LossesResponse(struct soap*, _ns1__Top10LossesResponse *, const char*, const char*);

#ifndef soap_read__ns1__Top10LossesResponse
#define soap_read__ns1__Top10LossesResponse(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__Top10LossesResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__Top10Losses
#define SOAP_TYPE_ns__ns1__Top10Losses (77)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Top10Losses(struct soap*, const char*, int, const _ns1__Top10Losses *, const char*);
SOAP_FMAC3 _ns1__Top10Losses * SOAP_FMAC4 soap_in__ns1__Top10Losses(struct soap*, const char*, _ns1__Top10Losses *, const char*);
SOAP_FMAC1 _ns1__Top10Losses * SOAP_FMAC2 soap_instantiate__ns1__Top10Losses(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__Top10Losses * soap_new__ns1__Top10Losses(struct soap *soap, int n = -1) { return soap_instantiate__ns1__Top10Losses(soap, n, NULL, NULL, NULL); }

inline _ns1__Top10Losses * soap_new_req__ns1__Top10Losses(
	struct soap *soap)
{	_ns1__Top10Losses *_p = soap_new__ns1__Top10Losses(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__Top10Losses * soap_new_set__ns1__Top10Losses(
	struct soap *soap,
	std::string *Token,
	std::string *Exchange)
{	_ns1__Top10Losses *_p = soap_new__ns1__Top10Losses(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__Top10Losses::Token = Token;
		_p->_ns1__Top10Losses::Exchange = Exchange;
	}
	return _p;
}

#ifndef soap_write__ns1__Top10Losses
#define soap_write__ns1__Top10Losses(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:Top10Losses", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__Top10Losses * SOAP_FMAC4 soap_get__ns1__Top10Losses(struct soap*, _ns1__Top10Losses *, const char*, const char*);

#ifndef soap_read__ns1__Top10Losses
#define soap_read__ns1__Top10Losses(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__Top10Losses(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__Top10GainsResponse
#define SOAP_TYPE_ns__ns1__Top10GainsResponse (76)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Top10GainsResponse(struct soap*, const char*, int, const _ns1__Top10GainsResponse *, const char*);
SOAP_FMAC3 _ns1__Top10GainsResponse * SOAP_FMAC4 soap_in__ns1__Top10GainsResponse(struct soap*, const char*, _ns1__Top10GainsResponse *, const char*);
SOAP_FMAC1 _ns1__Top10GainsResponse * SOAP_FMAC2 soap_instantiate__ns1__Top10GainsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__Top10GainsResponse * soap_new__ns1__Top10GainsResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__Top10GainsResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__Top10GainsResponse * soap_new_req__ns1__Top10GainsResponse(
	struct soap *soap)
{	_ns1__Top10GainsResponse *_p = soap_new__ns1__Top10GainsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__Top10GainsResponse * soap_new_set__ns1__Top10GainsResponse(
	struct soap *soap,
	ns1__RESPONSE *Top10GainsResult)
{	_ns1__Top10GainsResponse *_p = soap_new__ns1__Top10GainsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__Top10GainsResponse::Top10GainsResult = Top10GainsResult;
	}
	return _p;
}

#ifndef soap_write__ns1__Top10GainsResponse
#define soap_write__ns1__Top10GainsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:Top10GainsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__Top10GainsResponse * SOAP_FMAC4 soap_get__ns1__Top10GainsResponse(struct soap*, _ns1__Top10GainsResponse *, const char*, const char*);

#ifndef soap_read__ns1__Top10GainsResponse
#define soap_read__ns1__Top10GainsResponse(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__Top10GainsResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__Top10Gains
#define SOAP_TYPE_ns__ns1__Top10Gains (75)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Top10Gains(struct soap*, const char*, int, const _ns1__Top10Gains *, const char*);
SOAP_FMAC3 _ns1__Top10Gains * SOAP_FMAC4 soap_in__ns1__Top10Gains(struct soap*, const char*, _ns1__Top10Gains *, const char*);
SOAP_FMAC1 _ns1__Top10Gains * SOAP_FMAC2 soap_instantiate__ns1__Top10Gains(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__Top10Gains * soap_new__ns1__Top10Gains(struct soap *soap, int n = -1) { return soap_instantiate__ns1__Top10Gains(soap, n, NULL, NULL, NULL); }

inline _ns1__Top10Gains * soap_new_req__ns1__Top10Gains(
	struct soap *soap)
{	_ns1__Top10Gains *_p = soap_new__ns1__Top10Gains(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__Top10Gains * soap_new_set__ns1__Top10Gains(
	struct soap *soap,
	std::string *Token,
	std::string *Exchange)
{	_ns1__Top10Gains *_p = soap_new__ns1__Top10Gains(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__Top10Gains::Token = Token;
		_p->_ns1__Top10Gains::Exchange = Exchange;
	}
	return _p;
}

#ifndef soap_write__ns1__Top10Gains
#define soap_write__ns1__Top10Gains(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:Top10Gains", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__Top10Gains * SOAP_FMAC4 soap_get__ns1__Top10Gains(struct soap*, _ns1__Top10Gains *, const char*, const char*);

#ifndef soap_read__ns1__Top10Gains
#define soap_read__ns1__Top10Gains(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__Top10Gains(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__SymbolHistoryResponse
#define SOAP_TYPE_ns__ns1__SymbolHistoryResponse (74)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SymbolHistoryResponse(struct soap*, const char*, int, const _ns1__SymbolHistoryResponse *, const char*);
SOAP_FMAC3 _ns1__SymbolHistoryResponse * SOAP_FMAC4 soap_in__ns1__SymbolHistoryResponse(struct soap*, const char*, _ns1__SymbolHistoryResponse *, const char*);
SOAP_FMAC1 _ns1__SymbolHistoryResponse * SOAP_FMAC2 soap_instantiate__ns1__SymbolHistoryResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SymbolHistoryResponse * soap_new__ns1__SymbolHistoryResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SymbolHistoryResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__SymbolHistoryResponse * soap_new_req__ns1__SymbolHistoryResponse(
	struct soap *soap)
{	_ns1__SymbolHistoryResponse *_p = soap_new__ns1__SymbolHistoryResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SymbolHistoryResponse * soap_new_set__ns1__SymbolHistoryResponse(
	struct soap *soap,
	ns1__RESPONSE *SymbolHistoryResult)
{	_ns1__SymbolHistoryResponse *_p = soap_new__ns1__SymbolHistoryResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SymbolHistoryResponse::SymbolHistoryResult = SymbolHistoryResult;
	}
	return _p;
}

#ifndef soap_write__ns1__SymbolHistoryResponse
#define soap_write__ns1__SymbolHistoryResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SymbolHistoryResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SymbolHistoryResponse * SOAP_FMAC4 soap_get__ns1__SymbolHistoryResponse(struct soap*, _ns1__SymbolHistoryResponse *, const char*, const char*);

#ifndef soap_read__ns1__SymbolHistoryResponse
#define soap_read__ns1__SymbolHistoryResponse(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__SymbolHistoryResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__SymbolHistory
#define SOAP_TYPE_ns__ns1__SymbolHistory (73)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SymbolHistory(struct soap*, const char*, int, const _ns1__SymbolHistory *, const char*);
SOAP_FMAC3 _ns1__SymbolHistory * SOAP_FMAC4 soap_in__ns1__SymbolHistory(struct soap*, const char*, _ns1__SymbolHistory *, const char*);
SOAP_FMAC1 _ns1__SymbolHistory * SOAP_FMAC2 soap_instantiate__ns1__SymbolHistory(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SymbolHistory * soap_new__ns1__SymbolHistory(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SymbolHistory(soap, n, NULL, NULL, NULL); }

inline _ns1__SymbolHistory * soap_new_req__ns1__SymbolHistory(
	struct soap *soap)
{	_ns1__SymbolHistory *_p = soap_new__ns1__SymbolHistory(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SymbolHistory * soap_new_set__ns1__SymbolHistory(
	struct soap *soap,
	std::string *Token,
	std::string *Exchange,
	std::string *Symbol,
	std::string *StartDate)
{	_ns1__SymbolHistory *_p = soap_new__ns1__SymbolHistory(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SymbolHistory::Token = Token;
		_p->_ns1__SymbolHistory::Exchange = Exchange;
		_p->_ns1__SymbolHistory::Symbol = Symbol;
		_p->_ns1__SymbolHistory::StartDate = StartDate;
	}
	return _p;
}

#ifndef soap_write__ns1__SymbolHistory
#define soap_write__ns1__SymbolHistory(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SymbolHistory", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SymbolHistory * SOAP_FMAC4 soap_get__ns1__SymbolHistory(struct soap*, _ns1__SymbolHistory *, const char*, const char*);

#ifndef soap_read__ns1__SymbolHistory
#define soap_read__ns1__SymbolHistory(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__SymbolHistory(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__QuoteListByDate2Response
#define SOAP_TYPE_ns__ns1__QuoteListByDate2Response (72)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__QuoteListByDate2Response(struct soap*, const char*, int, const _ns1__QuoteListByDate2Response *, const char*);
SOAP_FMAC3 _ns1__QuoteListByDate2Response * SOAP_FMAC4 soap_in__ns1__QuoteListByDate2Response(struct soap*, const char*, _ns1__QuoteListByDate2Response *, const char*);
SOAP_FMAC1 _ns1__QuoteListByDate2Response * SOAP_FMAC2 soap_instantiate__ns1__QuoteListByDate2Response(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__QuoteListByDate2Response * soap_new__ns1__QuoteListByDate2Response(struct soap *soap, int n = -1) { return soap_instantiate__ns1__QuoteListByDate2Response(soap, n, NULL, NULL, NULL); }

inline _ns1__QuoteListByDate2Response * soap_new_req__ns1__QuoteListByDate2Response(
	struct soap *soap)
{	_ns1__QuoteListByDate2Response *_p = soap_new__ns1__QuoteListByDate2Response(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__QuoteListByDate2Response * soap_new_set__ns1__QuoteListByDate2Response(
	struct soap *soap,
	ns1__RESPONSE *QuoteListByDate2Result)
{	_ns1__QuoteListByDate2Response *_p = soap_new__ns1__QuoteListByDate2Response(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__QuoteListByDate2Response::QuoteListByDate2Result = QuoteListByDate2Result;
	}
	return _p;
}

#ifndef soap_write__ns1__QuoteListByDate2Response
#define soap_write__ns1__QuoteListByDate2Response(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:QuoteListByDate2Response", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__QuoteListByDate2Response * SOAP_FMAC4 soap_get__ns1__QuoteListByDate2Response(struct soap*, _ns1__QuoteListByDate2Response *, const char*, const char*);

#ifndef soap_read__ns1__QuoteListByDate2Response
#define soap_read__ns1__QuoteListByDate2Response(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__QuoteListByDate2Response(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__QuoteListByDate2
#define SOAP_TYPE_ns__ns1__QuoteListByDate2 (71)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__QuoteListByDate2(struct soap*, const char*, int, const _ns1__QuoteListByDate2 *, const char*);
SOAP_FMAC3 _ns1__QuoteListByDate2 * SOAP_FMAC4 soap_in__ns1__QuoteListByDate2(struct soap*, const char*, _ns1__QuoteListByDate2 *, const char*);
SOAP_FMAC1 _ns1__QuoteListByDate2 * SOAP_FMAC2 soap_instantiate__ns1__QuoteListByDate2(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__QuoteListByDate2 * soap_new__ns1__QuoteListByDate2(struct soap *soap, int n = -1) { return soap_instantiate__ns1__QuoteListByDate2(soap, n, NULL, NULL, NULL); }

inline _ns1__QuoteListByDate2 * soap_new_req__ns1__QuoteListByDate2(
	struct soap *soap)
{	_ns1__QuoteListByDate2 *_p = soap_new__ns1__QuoteListByDate2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__QuoteListByDate2 * soap_new_set__ns1__QuoteListByDate2(
	struct soap *soap,
	std::string *Token,
	std::string *Exchange,
	std::string *QuoteDate)
{	_ns1__QuoteListByDate2 *_p = soap_new__ns1__QuoteListByDate2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__QuoteListByDate2::Token = Token;
		_p->_ns1__QuoteListByDate2::Exchange = Exchange;
		_p->_ns1__QuoteListByDate2::QuoteDate = QuoteDate;
	}
	return _p;
}

#ifndef soap_write__ns1__QuoteListByDate2
#define soap_write__ns1__QuoteListByDate2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:QuoteListByDate2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__QuoteListByDate2 * SOAP_FMAC4 soap_get__ns1__QuoteListByDate2(struct soap*, _ns1__QuoteListByDate2 *, const char*, const char*);

#ifndef soap_read__ns1__QuoteListByDate2
#define soap_read__ns1__QuoteListByDate2(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__QuoteListByDate2(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__QuoteListByDateResponse
#define SOAP_TYPE_ns__ns1__QuoteListByDateResponse (70)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__QuoteListByDateResponse(struct soap*, const char*, int, const _ns1__QuoteListByDateResponse *, const char*);
SOAP_FMAC3 _ns1__QuoteListByDateResponse * SOAP_FMAC4 soap_in__ns1__QuoteListByDateResponse(struct soap*, const char*, _ns1__QuoteListByDateResponse *, const char*);
SOAP_FMAC1 _ns1__QuoteListByDateResponse * SOAP_FMAC2 soap_instantiate__ns1__QuoteListByDateResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__QuoteListByDateResponse * soap_new__ns1__QuoteListByDateResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__QuoteListByDateResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__QuoteListByDateResponse * soap_new_req__ns1__QuoteListByDateResponse(
	struct soap *soap)
{	_ns1__QuoteListByDateResponse *_p = soap_new__ns1__QuoteListByDateResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__QuoteListByDateResponse * soap_new_set__ns1__QuoteListByDateResponse(
	struct soap *soap,
	ns1__RESPONSE *QuoteListByDateResult)
{	_ns1__QuoteListByDateResponse *_p = soap_new__ns1__QuoteListByDateResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__QuoteListByDateResponse::QuoteListByDateResult = QuoteListByDateResult;
	}
	return _p;
}

#ifndef soap_write__ns1__QuoteListByDateResponse
#define soap_write__ns1__QuoteListByDateResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:QuoteListByDateResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__QuoteListByDateResponse * SOAP_FMAC4 soap_get__ns1__QuoteListByDateResponse(struct soap*, _ns1__QuoteListByDateResponse *, const char*, const char*);

#ifndef soap_read__ns1__QuoteListByDateResponse
#define soap_read__ns1__QuoteListByDateResponse(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__QuoteListByDateResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__QuoteListByDate
#define SOAP_TYPE_ns__ns1__QuoteListByDate (69)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__QuoteListByDate(struct soap*, const char*, int, const _ns1__QuoteListByDate *, const char*);
SOAP_FMAC3 _ns1__QuoteListByDate * SOAP_FMAC4 soap_in__ns1__QuoteListByDate(struct soap*, const char*, _ns1__QuoteListByDate *, const char*);
SOAP_FMAC1 _ns1__QuoteListByDate * SOAP_FMAC2 soap_instantiate__ns1__QuoteListByDate(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__QuoteListByDate * soap_new__ns1__QuoteListByDate(struct soap *soap, int n = -1) { return soap_instantiate__ns1__QuoteListByDate(soap, n, NULL, NULL, NULL); }

inline _ns1__QuoteListByDate * soap_new_req__ns1__QuoteListByDate(
	struct soap *soap)
{	_ns1__QuoteListByDate *_p = soap_new__ns1__QuoteListByDate(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__QuoteListByDate * soap_new_set__ns1__QuoteListByDate(
	struct soap *soap,
	std::string *Token,
	std::string *Exchange,
	std::string *QuoteDate)
{	_ns1__QuoteListByDate *_p = soap_new__ns1__QuoteListByDate(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__QuoteListByDate::Token = Token;
		_p->_ns1__QuoteListByDate::Exchange = Exchange;
		_p->_ns1__QuoteListByDate::QuoteDate = QuoteDate;
	}
	return _p;
}

#ifndef soap_write__ns1__QuoteListByDate
#define soap_write__ns1__QuoteListByDate(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:QuoteListByDate", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__QuoteListByDate * SOAP_FMAC4 soap_get__ns1__QuoteListByDate(struct soap*, _ns1__QuoteListByDate *, const char*, const char*);

#ifndef soap_read__ns1__QuoteListByDate
#define soap_read__ns1__QuoteListByDate(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__QuoteListByDate(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__TechnicalListResponse
#define SOAP_TYPE_ns__ns1__TechnicalListResponse (68)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__TechnicalListResponse(struct soap*, const char*, int, const _ns1__TechnicalListResponse *, const char*);
SOAP_FMAC3 _ns1__TechnicalListResponse * SOAP_FMAC4 soap_in__ns1__TechnicalListResponse(struct soap*, const char*, _ns1__TechnicalListResponse *, const char*);
SOAP_FMAC1 _ns1__TechnicalListResponse * SOAP_FMAC2 soap_instantiate__ns1__TechnicalListResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__TechnicalListResponse * soap_new__ns1__TechnicalListResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__TechnicalListResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__TechnicalListResponse * soap_new_req__ns1__TechnicalListResponse(
	struct soap *soap)
{	_ns1__TechnicalListResponse *_p = soap_new__ns1__TechnicalListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__TechnicalListResponse * soap_new_set__ns1__TechnicalListResponse(
	struct soap *soap,
	ns1__RESPONSE *TechnicalListResult)
{	_ns1__TechnicalListResponse *_p = soap_new__ns1__TechnicalListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__TechnicalListResponse::TechnicalListResult = TechnicalListResult;
	}
	return _p;
}

#ifndef soap_write__ns1__TechnicalListResponse
#define soap_write__ns1__TechnicalListResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:TechnicalListResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__TechnicalListResponse * SOAP_FMAC4 soap_get__ns1__TechnicalListResponse(struct soap*, _ns1__TechnicalListResponse *, const char*, const char*);

#ifndef soap_read__ns1__TechnicalListResponse
#define soap_read__ns1__TechnicalListResponse(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__TechnicalListResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__TechnicalList
#define SOAP_TYPE_ns__ns1__TechnicalList (67)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__TechnicalList(struct soap*, const char*, int, const _ns1__TechnicalList *, const char*);
SOAP_FMAC3 _ns1__TechnicalList * SOAP_FMAC4 soap_in__ns1__TechnicalList(struct soap*, const char*, _ns1__TechnicalList *, const char*);
SOAP_FMAC1 _ns1__TechnicalList * SOAP_FMAC2 soap_instantiate__ns1__TechnicalList(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__TechnicalList * soap_new__ns1__TechnicalList(struct soap *soap, int n = -1) { return soap_instantiate__ns1__TechnicalList(soap, n, NULL, NULL, NULL); }

inline _ns1__TechnicalList * soap_new_req__ns1__TechnicalList(
	struct soap *soap)
{	_ns1__TechnicalList *_p = soap_new__ns1__TechnicalList(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__TechnicalList * soap_new_set__ns1__TechnicalList(
	struct soap *soap,
	std::string *Token,
	std::string *Exchange)
{	_ns1__TechnicalList *_p = soap_new__ns1__TechnicalList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__TechnicalList::Token = Token;
		_p->_ns1__TechnicalList::Exchange = Exchange;
	}
	return _p;
}

#ifndef soap_write__ns1__TechnicalList
#define soap_write__ns1__TechnicalList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:TechnicalList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__TechnicalList * SOAP_FMAC4 soap_get__ns1__TechnicalList(struct soap*, _ns1__TechnicalList *, const char*, const char*);

#ifndef soap_read__ns1__TechnicalList
#define soap_read__ns1__TechnicalList(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__TechnicalList(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__FundamentalListResponse
#define SOAP_TYPE_ns__ns1__FundamentalListResponse (66)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__FundamentalListResponse(struct soap*, const char*, int, const _ns1__FundamentalListResponse *, const char*);
SOAP_FMAC3 _ns1__FundamentalListResponse * SOAP_FMAC4 soap_in__ns1__FundamentalListResponse(struct soap*, const char*, _ns1__FundamentalListResponse *, const char*);
SOAP_FMAC1 _ns1__FundamentalListResponse * SOAP_FMAC2 soap_instantiate__ns1__FundamentalListResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__FundamentalListResponse * soap_new__ns1__FundamentalListResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__FundamentalListResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__FundamentalListResponse * soap_new_req__ns1__FundamentalListResponse(
	struct soap *soap)
{	_ns1__FundamentalListResponse *_p = soap_new__ns1__FundamentalListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__FundamentalListResponse * soap_new_set__ns1__FundamentalListResponse(
	struct soap *soap,
	ns1__RESPONSE *FundamentalListResult)
{	_ns1__FundamentalListResponse *_p = soap_new__ns1__FundamentalListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__FundamentalListResponse::FundamentalListResult = FundamentalListResult;
	}
	return _p;
}

#ifndef soap_write__ns1__FundamentalListResponse
#define soap_write__ns1__FundamentalListResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:FundamentalListResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__FundamentalListResponse * SOAP_FMAC4 soap_get__ns1__FundamentalListResponse(struct soap*, _ns1__FundamentalListResponse *, const char*, const char*);

#ifndef soap_read__ns1__FundamentalListResponse
#define soap_read__ns1__FundamentalListResponse(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__FundamentalListResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__FundamentalList
#define SOAP_TYPE_ns__ns1__FundamentalList (65)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__FundamentalList(struct soap*, const char*, int, const _ns1__FundamentalList *, const char*);
SOAP_FMAC3 _ns1__FundamentalList * SOAP_FMAC4 soap_in__ns1__FundamentalList(struct soap*, const char*, _ns1__FundamentalList *, const char*);
SOAP_FMAC1 _ns1__FundamentalList * SOAP_FMAC2 soap_instantiate__ns1__FundamentalList(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__FundamentalList * soap_new__ns1__FundamentalList(struct soap *soap, int n = -1) { return soap_instantiate__ns1__FundamentalList(soap, n, NULL, NULL, NULL); }

inline _ns1__FundamentalList * soap_new_req__ns1__FundamentalList(
	struct soap *soap)
{	_ns1__FundamentalList *_p = soap_new__ns1__FundamentalList(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__FundamentalList * soap_new_set__ns1__FundamentalList(
	struct soap *soap,
	std::string *Token,
	std::string *Exchange)
{	_ns1__FundamentalList *_p = soap_new__ns1__FundamentalList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__FundamentalList::Token = Token;
		_p->_ns1__FundamentalList::Exchange = Exchange;
	}
	return _p;
}

#ifndef soap_write__ns1__FundamentalList
#define soap_write__ns1__FundamentalList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:FundamentalList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__FundamentalList * SOAP_FMAC4 soap_get__ns1__FundamentalList(struct soap*, _ns1__FundamentalList *, const char*, const char*);

#ifndef soap_read__ns1__FundamentalList
#define soap_read__ns1__FundamentalList(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__FundamentalList(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__NewsListBySymbolResponse
#define SOAP_TYPE_ns__ns1__NewsListBySymbolResponse (64)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__NewsListBySymbolResponse(struct soap*, const char*, int, const _ns1__NewsListBySymbolResponse *, const char*);
SOAP_FMAC3 _ns1__NewsListBySymbolResponse * SOAP_FMAC4 soap_in__ns1__NewsListBySymbolResponse(struct soap*, const char*, _ns1__NewsListBySymbolResponse *, const char*);
SOAP_FMAC1 _ns1__NewsListBySymbolResponse * SOAP_FMAC2 soap_instantiate__ns1__NewsListBySymbolResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__NewsListBySymbolResponse * soap_new__ns1__NewsListBySymbolResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__NewsListBySymbolResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__NewsListBySymbolResponse * soap_new_req__ns1__NewsListBySymbolResponse(
	struct soap *soap)
{	_ns1__NewsListBySymbolResponse *_p = soap_new__ns1__NewsListBySymbolResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__NewsListBySymbolResponse * soap_new_set__ns1__NewsListBySymbolResponse(
	struct soap *soap,
	ns1__RESPONSE *NewsListBySymbolResult)
{	_ns1__NewsListBySymbolResponse *_p = soap_new__ns1__NewsListBySymbolResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__NewsListBySymbolResponse::NewsListBySymbolResult = NewsListBySymbolResult;
	}
	return _p;
}

#ifndef soap_write__ns1__NewsListBySymbolResponse
#define soap_write__ns1__NewsListBySymbolResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:NewsListBySymbolResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__NewsListBySymbolResponse * SOAP_FMAC4 soap_get__ns1__NewsListBySymbolResponse(struct soap*, _ns1__NewsListBySymbolResponse *, const char*, const char*);

#ifndef soap_read__ns1__NewsListBySymbolResponse
#define soap_read__ns1__NewsListBySymbolResponse(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__NewsListBySymbolResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__NewsListBySymbol
#define SOAP_TYPE_ns__ns1__NewsListBySymbol (63)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__NewsListBySymbol(struct soap*, const char*, int, const _ns1__NewsListBySymbol *, const char*);
SOAP_FMAC3 _ns1__NewsListBySymbol * SOAP_FMAC4 soap_in__ns1__NewsListBySymbol(struct soap*, const char*, _ns1__NewsListBySymbol *, const char*);
SOAP_FMAC1 _ns1__NewsListBySymbol * SOAP_FMAC2 soap_instantiate__ns1__NewsListBySymbol(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__NewsListBySymbol * soap_new__ns1__NewsListBySymbol(struct soap *soap, int n = -1) { return soap_instantiate__ns1__NewsListBySymbol(soap, n, NULL, NULL, NULL); }

inline _ns1__NewsListBySymbol * soap_new_req__ns1__NewsListBySymbol(
	struct soap *soap)
{	_ns1__NewsListBySymbol *_p = soap_new__ns1__NewsListBySymbol(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__NewsListBySymbol * soap_new_set__ns1__NewsListBySymbol(
	struct soap *soap,
	std::string *token,
	std::string *Exchange,
	std::string *symbol)
{	_ns1__NewsListBySymbol *_p = soap_new__ns1__NewsListBySymbol(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__NewsListBySymbol::token = token;
		_p->_ns1__NewsListBySymbol::Exchange = Exchange;
		_p->_ns1__NewsListBySymbol::symbol = symbol;
	}
	return _p;
}

#ifndef soap_write__ns1__NewsListBySymbol
#define soap_write__ns1__NewsListBySymbol(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:NewsListBySymbol", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__NewsListBySymbol * SOAP_FMAC4 soap_get__ns1__NewsListBySymbol(struct soap*, _ns1__NewsListBySymbol *, const char*, const char*);

#ifndef soap_read__ns1__NewsListBySymbol
#define soap_read__ns1__NewsListBySymbol(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__NewsListBySymbol(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__NewsListResponse
#define SOAP_TYPE_ns__ns1__NewsListResponse (62)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__NewsListResponse(struct soap*, const char*, int, const _ns1__NewsListResponse *, const char*);
SOAP_FMAC3 _ns1__NewsListResponse * SOAP_FMAC4 soap_in__ns1__NewsListResponse(struct soap*, const char*, _ns1__NewsListResponse *, const char*);
SOAP_FMAC1 _ns1__NewsListResponse * SOAP_FMAC2 soap_instantiate__ns1__NewsListResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__NewsListResponse * soap_new__ns1__NewsListResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__NewsListResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__NewsListResponse * soap_new_req__ns1__NewsListResponse(
	struct soap *soap)
{	_ns1__NewsListResponse *_p = soap_new__ns1__NewsListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__NewsListResponse * soap_new_set__ns1__NewsListResponse(
	struct soap *soap,
	ns1__RESPONSE *NewsListResult)
{	_ns1__NewsListResponse *_p = soap_new__ns1__NewsListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__NewsListResponse::NewsListResult = NewsListResult;
	}
	return _p;
}

#ifndef soap_write__ns1__NewsListResponse
#define soap_write__ns1__NewsListResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:NewsListResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__NewsListResponse * SOAP_FMAC4 soap_get__ns1__NewsListResponse(struct soap*, _ns1__NewsListResponse *, const char*, const char*);

#ifndef soap_read__ns1__NewsListResponse
#define soap_read__ns1__NewsListResponse(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__NewsListResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__NewsList
#define SOAP_TYPE_ns__ns1__NewsList (61)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__NewsList(struct soap*, const char*, int, const _ns1__NewsList *, const char*);
SOAP_FMAC3 _ns1__NewsList * SOAP_FMAC4 soap_in__ns1__NewsList(struct soap*, const char*, _ns1__NewsList *, const char*);
SOAP_FMAC1 _ns1__NewsList * SOAP_FMAC2 soap_instantiate__ns1__NewsList(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__NewsList * soap_new__ns1__NewsList(struct soap *soap, int n = -1) { return soap_instantiate__ns1__NewsList(soap, n, NULL, NULL, NULL); }

inline _ns1__NewsList * soap_new_req__ns1__NewsList(
	struct soap *soap)
{	_ns1__NewsList *_p = soap_new__ns1__NewsList(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__NewsList * soap_new_set__ns1__NewsList(
	struct soap *soap,
	std::string *Token,
	std::string *Exchange)
{	_ns1__NewsList *_p = soap_new__ns1__NewsList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__NewsList::Token = Token;
		_p->_ns1__NewsList::Exchange = Exchange;
	}
	return _p;
}

#ifndef soap_write__ns1__NewsList
#define soap_write__ns1__NewsList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:NewsList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__NewsList * SOAP_FMAC4 soap_get__ns1__NewsList(struct soap*, _ns1__NewsList *, const char*, const char*);

#ifndef soap_read__ns1__NewsList
#define soap_read__ns1__NewsList(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__NewsList(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__QuoteListResponse
#define SOAP_TYPE_ns__ns1__QuoteListResponse (60)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__QuoteListResponse(struct soap*, const char*, int, const _ns1__QuoteListResponse *, const char*);
SOAP_FMAC3 _ns1__QuoteListResponse * SOAP_FMAC4 soap_in__ns1__QuoteListResponse(struct soap*, const char*, _ns1__QuoteListResponse *, const char*);
SOAP_FMAC1 _ns1__QuoteListResponse * SOAP_FMAC2 soap_instantiate__ns1__QuoteListResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__QuoteListResponse * soap_new__ns1__QuoteListResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__QuoteListResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__QuoteListResponse * soap_new_req__ns1__QuoteListResponse(
	struct soap *soap)
{	_ns1__QuoteListResponse *_p = soap_new__ns1__QuoteListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__QuoteListResponse * soap_new_set__ns1__QuoteListResponse(
	struct soap *soap,
	ns1__RESPONSE *QuoteListResult)
{	_ns1__QuoteListResponse *_p = soap_new__ns1__QuoteListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__QuoteListResponse::QuoteListResult = QuoteListResult;
	}
	return _p;
}

#ifndef soap_write__ns1__QuoteListResponse
#define soap_write__ns1__QuoteListResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:QuoteListResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__QuoteListResponse * SOAP_FMAC4 soap_get__ns1__QuoteListResponse(struct soap*, _ns1__QuoteListResponse *, const char*, const char*);

#ifndef soap_read__ns1__QuoteListResponse
#define soap_read__ns1__QuoteListResponse(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__QuoteListResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__QuoteList
#define SOAP_TYPE_ns__ns1__QuoteList (59)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__QuoteList(struct soap*, const char*, int, const _ns1__QuoteList *, const char*);
SOAP_FMAC3 _ns1__QuoteList * SOAP_FMAC4 soap_in__ns1__QuoteList(struct soap*, const char*, _ns1__QuoteList *, const char*);
SOAP_FMAC1 _ns1__QuoteList * SOAP_FMAC2 soap_instantiate__ns1__QuoteList(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__QuoteList * soap_new__ns1__QuoteList(struct soap *soap, int n = -1) { return soap_instantiate__ns1__QuoteList(soap, n, NULL, NULL, NULL); }

inline _ns1__QuoteList * soap_new_req__ns1__QuoteList(
	struct soap *soap)
{	_ns1__QuoteList *_p = soap_new__ns1__QuoteList(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__QuoteList * soap_new_set__ns1__QuoteList(
	struct soap *soap,
	std::string *Token,
	std::string *Exchange)
{	_ns1__QuoteList *_p = soap_new__ns1__QuoteList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__QuoteList::Token = Token;
		_p->_ns1__QuoteList::Exchange = Exchange;
	}
	return _p;
}

#ifndef soap_write__ns1__QuoteList
#define soap_write__ns1__QuoteList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:QuoteList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__QuoteList * SOAP_FMAC4 soap_get__ns1__QuoteList(struct soap*, _ns1__QuoteList *, const char*, const char*);

#ifndef soap_read__ns1__QuoteList
#define soap_read__ns1__QuoteList(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__QuoteList(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__SymbolGetResponse
#define SOAP_TYPE_ns__ns1__SymbolGetResponse (58)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SymbolGetResponse(struct soap*, const char*, int, const _ns1__SymbolGetResponse *, const char*);
SOAP_FMAC3 _ns1__SymbolGetResponse * SOAP_FMAC4 soap_in__ns1__SymbolGetResponse(struct soap*, const char*, _ns1__SymbolGetResponse *, const char*);
SOAP_FMAC1 _ns1__SymbolGetResponse * SOAP_FMAC2 soap_instantiate__ns1__SymbolGetResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SymbolGetResponse * soap_new__ns1__SymbolGetResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SymbolGetResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__SymbolGetResponse * soap_new_req__ns1__SymbolGetResponse(
	struct soap *soap)
{	_ns1__SymbolGetResponse *_p = soap_new__ns1__SymbolGetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SymbolGetResponse * soap_new_set__ns1__SymbolGetResponse(
	struct soap *soap,
	ns1__RESPONSE *SymbolGetResult)
{	_ns1__SymbolGetResponse *_p = soap_new__ns1__SymbolGetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SymbolGetResponse::SymbolGetResult = SymbolGetResult;
	}
	return _p;
}

#ifndef soap_write__ns1__SymbolGetResponse
#define soap_write__ns1__SymbolGetResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SymbolGetResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SymbolGetResponse * SOAP_FMAC4 soap_get__ns1__SymbolGetResponse(struct soap*, _ns1__SymbolGetResponse *, const char*, const char*);

#ifndef soap_read__ns1__SymbolGetResponse
#define soap_read__ns1__SymbolGetResponse(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__SymbolGetResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__SymbolGet
#define SOAP_TYPE_ns__ns1__SymbolGet (57)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SymbolGet(struct soap*, const char*, int, const _ns1__SymbolGet *, const char*);
SOAP_FMAC3 _ns1__SymbolGet * SOAP_FMAC4 soap_in__ns1__SymbolGet(struct soap*, const char*, _ns1__SymbolGet *, const char*);
SOAP_FMAC1 _ns1__SymbolGet * SOAP_FMAC2 soap_instantiate__ns1__SymbolGet(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SymbolGet * soap_new__ns1__SymbolGet(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SymbolGet(soap, n, NULL, NULL, NULL); }

inline _ns1__SymbolGet * soap_new_req__ns1__SymbolGet(
	struct soap *soap)
{	_ns1__SymbolGet *_p = soap_new__ns1__SymbolGet(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SymbolGet * soap_new_set__ns1__SymbolGet(
	struct soap *soap,
	std::string *Token,
	std::string *Exchange,
	std::string *Symbol)
{	_ns1__SymbolGet *_p = soap_new__ns1__SymbolGet(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SymbolGet::Token = Token;
		_p->_ns1__SymbolGet::Exchange = Exchange;
		_p->_ns1__SymbolGet::Symbol = Symbol;
	}
	return _p;
}

#ifndef soap_write__ns1__SymbolGet
#define soap_write__ns1__SymbolGet(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SymbolGet", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SymbolGet * SOAP_FMAC4 soap_get__ns1__SymbolGet(struct soap*, _ns1__SymbolGet *, const char*, const char*);

#ifndef soap_read__ns1__SymbolGet
#define soap_read__ns1__SymbolGet(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__SymbolGet(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__QuoteList2Response
#define SOAP_TYPE_ns__ns1__QuoteList2Response (56)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__QuoteList2Response(struct soap*, const char*, int, const _ns1__QuoteList2Response *, const char*);
SOAP_FMAC3 _ns1__QuoteList2Response * SOAP_FMAC4 soap_in__ns1__QuoteList2Response(struct soap*, const char*, _ns1__QuoteList2Response *, const char*);
SOAP_FMAC1 _ns1__QuoteList2Response * SOAP_FMAC2 soap_instantiate__ns1__QuoteList2Response(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__QuoteList2Response * soap_new__ns1__QuoteList2Response(struct soap *soap, int n = -1) { return soap_instantiate__ns1__QuoteList2Response(soap, n, NULL, NULL, NULL); }

inline _ns1__QuoteList2Response * soap_new_req__ns1__QuoteList2Response(
	struct soap *soap)
{	_ns1__QuoteList2Response *_p = soap_new__ns1__QuoteList2Response(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__QuoteList2Response * soap_new_set__ns1__QuoteList2Response(
	struct soap *soap,
	ns1__RESPONSE *QuoteList2Result)
{	_ns1__QuoteList2Response *_p = soap_new__ns1__QuoteList2Response(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__QuoteList2Response::QuoteList2Result = QuoteList2Result;
	}
	return _p;
}

#ifndef soap_write__ns1__QuoteList2Response
#define soap_write__ns1__QuoteList2Response(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:QuoteList2Response", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__QuoteList2Response * SOAP_FMAC4 soap_get__ns1__QuoteList2Response(struct soap*, _ns1__QuoteList2Response *, const char*, const char*);

#ifndef soap_read__ns1__QuoteList2Response
#define soap_read__ns1__QuoteList2Response(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__QuoteList2Response(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__QuoteList2
#define SOAP_TYPE_ns__ns1__QuoteList2 (55)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__QuoteList2(struct soap*, const char*, int, const _ns1__QuoteList2 *, const char*);
SOAP_FMAC3 _ns1__QuoteList2 * SOAP_FMAC4 soap_in__ns1__QuoteList2(struct soap*, const char*, _ns1__QuoteList2 *, const char*);
SOAP_FMAC1 _ns1__QuoteList2 * SOAP_FMAC2 soap_instantiate__ns1__QuoteList2(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__QuoteList2 * soap_new__ns1__QuoteList2(struct soap *soap, int n = -1) { return soap_instantiate__ns1__QuoteList2(soap, n, NULL, NULL, NULL); }

inline _ns1__QuoteList2 * soap_new_req__ns1__QuoteList2(
	struct soap *soap)
{	_ns1__QuoteList2 *_p = soap_new__ns1__QuoteList2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__QuoteList2 * soap_new_set__ns1__QuoteList2(
	struct soap *soap,
	std::string *Token,
	std::string *Exchange,
	std::string *Symbols)
{	_ns1__QuoteList2 *_p = soap_new__ns1__QuoteList2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__QuoteList2::Token = Token;
		_p->_ns1__QuoteList2::Exchange = Exchange;
		_p->_ns1__QuoteList2::Symbols = Symbols;
	}
	return _p;
}

#ifndef soap_write__ns1__QuoteList2
#define soap_write__ns1__QuoteList2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:QuoteList2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__QuoteList2 * SOAP_FMAC4 soap_get__ns1__QuoteList2(struct soap*, _ns1__QuoteList2 *, const char*, const char*);

#ifndef soap_read__ns1__QuoteList2
#define soap_read__ns1__QuoteList2(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__QuoteList2(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__QuoteGetResponse
#define SOAP_TYPE_ns__ns1__QuoteGetResponse (54)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__QuoteGetResponse(struct soap*, const char*, int, const _ns1__QuoteGetResponse *, const char*);
SOAP_FMAC3 _ns1__QuoteGetResponse * SOAP_FMAC4 soap_in__ns1__QuoteGetResponse(struct soap*, const char*, _ns1__QuoteGetResponse *, const char*);
SOAP_FMAC1 _ns1__QuoteGetResponse * SOAP_FMAC2 soap_instantiate__ns1__QuoteGetResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__QuoteGetResponse * soap_new__ns1__QuoteGetResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__QuoteGetResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__QuoteGetResponse * soap_new_req__ns1__QuoteGetResponse(
	struct soap *soap)
{	_ns1__QuoteGetResponse *_p = soap_new__ns1__QuoteGetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__QuoteGetResponse * soap_new_set__ns1__QuoteGetResponse(
	struct soap *soap,
	ns1__RESPONSE *QuoteGetResult)
{	_ns1__QuoteGetResponse *_p = soap_new__ns1__QuoteGetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__QuoteGetResponse::QuoteGetResult = QuoteGetResult;
	}
	return _p;
}

#ifndef soap_write__ns1__QuoteGetResponse
#define soap_write__ns1__QuoteGetResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:QuoteGetResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__QuoteGetResponse * SOAP_FMAC4 soap_get__ns1__QuoteGetResponse(struct soap*, _ns1__QuoteGetResponse *, const char*, const char*);

#ifndef soap_read__ns1__QuoteGetResponse
#define soap_read__ns1__QuoteGetResponse(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__QuoteGetResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__QuoteGet
#define SOAP_TYPE_ns__ns1__QuoteGet (53)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__QuoteGet(struct soap*, const char*, int, const _ns1__QuoteGet *, const char*);
SOAP_FMAC3 _ns1__QuoteGet * SOAP_FMAC4 soap_in__ns1__QuoteGet(struct soap*, const char*, _ns1__QuoteGet *, const char*);
SOAP_FMAC1 _ns1__QuoteGet * SOAP_FMAC2 soap_instantiate__ns1__QuoteGet(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__QuoteGet * soap_new__ns1__QuoteGet(struct soap *soap, int n = -1) { return soap_instantiate__ns1__QuoteGet(soap, n, NULL, NULL, NULL); }

inline _ns1__QuoteGet * soap_new_req__ns1__QuoteGet(
	struct soap *soap)
{	_ns1__QuoteGet *_p = soap_new__ns1__QuoteGet(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__QuoteGet * soap_new_set__ns1__QuoteGet(
	struct soap *soap,
	std::string *Token,
	std::string *Exchange,
	std::string *Symbol)
{	_ns1__QuoteGet *_p = soap_new__ns1__QuoteGet(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__QuoteGet::Token = Token;
		_p->_ns1__QuoteGet::Exchange = Exchange;
		_p->_ns1__QuoteGet::Symbol = Symbol;
	}
	return _p;
}

#ifndef soap_write__ns1__QuoteGet
#define soap_write__ns1__QuoteGet(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:QuoteGet", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__QuoteGet * SOAP_FMAC4 soap_get__ns1__QuoteGet(struct soap*, _ns1__QuoteGet *, const char*, const char*);

#ifndef soap_read__ns1__QuoteGet
#define soap_read__ns1__QuoteGet(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__QuoteGet(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__SymbolList2Response
#define SOAP_TYPE_ns__ns1__SymbolList2Response (52)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SymbolList2Response(struct soap*, const char*, int, const _ns1__SymbolList2Response *, const char*);
SOAP_FMAC3 _ns1__SymbolList2Response * SOAP_FMAC4 soap_in__ns1__SymbolList2Response(struct soap*, const char*, _ns1__SymbolList2Response *, const char*);
SOAP_FMAC1 _ns1__SymbolList2Response * SOAP_FMAC2 soap_instantiate__ns1__SymbolList2Response(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SymbolList2Response * soap_new__ns1__SymbolList2Response(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SymbolList2Response(soap, n, NULL, NULL, NULL); }

inline _ns1__SymbolList2Response * soap_new_req__ns1__SymbolList2Response(
	struct soap *soap)
{	_ns1__SymbolList2Response *_p = soap_new__ns1__SymbolList2Response(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SymbolList2Response * soap_new_set__ns1__SymbolList2Response(
	struct soap *soap,
	ns1__RESPONSE *SymbolList2Result)
{	_ns1__SymbolList2Response *_p = soap_new__ns1__SymbolList2Response(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SymbolList2Response::SymbolList2Result = SymbolList2Result;
	}
	return _p;
}

#ifndef soap_write__ns1__SymbolList2Response
#define soap_write__ns1__SymbolList2Response(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SymbolList2Response", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SymbolList2Response * SOAP_FMAC4 soap_get__ns1__SymbolList2Response(struct soap*, _ns1__SymbolList2Response *, const char*, const char*);

#ifndef soap_read__ns1__SymbolList2Response
#define soap_read__ns1__SymbolList2Response(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__SymbolList2Response(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__SymbolList2
#define SOAP_TYPE_ns__ns1__SymbolList2 (51)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SymbolList2(struct soap*, const char*, int, const _ns1__SymbolList2 *, const char*);
SOAP_FMAC3 _ns1__SymbolList2 * SOAP_FMAC4 soap_in__ns1__SymbolList2(struct soap*, const char*, _ns1__SymbolList2 *, const char*);
SOAP_FMAC1 _ns1__SymbolList2 * SOAP_FMAC2 soap_instantiate__ns1__SymbolList2(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SymbolList2 * soap_new__ns1__SymbolList2(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SymbolList2(soap, n, NULL, NULL, NULL); }

inline _ns1__SymbolList2 * soap_new_req__ns1__SymbolList2(
	struct soap *soap)
{	_ns1__SymbolList2 *_p = soap_new__ns1__SymbolList2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SymbolList2 * soap_new_set__ns1__SymbolList2(
	struct soap *soap,
	std::string *Token,
	std::string *Exchange)
{	_ns1__SymbolList2 *_p = soap_new__ns1__SymbolList2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SymbolList2::Token = Token;
		_p->_ns1__SymbolList2::Exchange = Exchange;
	}
	return _p;
}

#ifndef soap_write__ns1__SymbolList2
#define soap_write__ns1__SymbolList2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SymbolList2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SymbolList2 * SOAP_FMAC4 soap_get__ns1__SymbolList2(struct soap*, _ns1__SymbolList2 *, const char*, const char*);

#ifndef soap_read__ns1__SymbolList2
#define soap_read__ns1__SymbolList2(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__SymbolList2(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__SymbolListResponse
#define SOAP_TYPE_ns__ns1__SymbolListResponse (50)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SymbolListResponse(struct soap*, const char*, int, const _ns1__SymbolListResponse *, const char*);
SOAP_FMAC3 _ns1__SymbolListResponse * SOAP_FMAC4 soap_in__ns1__SymbolListResponse(struct soap*, const char*, _ns1__SymbolListResponse *, const char*);
SOAP_FMAC1 _ns1__SymbolListResponse * SOAP_FMAC2 soap_instantiate__ns1__SymbolListResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SymbolListResponse * soap_new__ns1__SymbolListResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SymbolListResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__SymbolListResponse * soap_new_req__ns1__SymbolListResponse(
	struct soap *soap)
{	_ns1__SymbolListResponse *_p = soap_new__ns1__SymbolListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SymbolListResponse * soap_new_set__ns1__SymbolListResponse(
	struct soap *soap,
	ns1__RESPONSE *SymbolListResult)
{	_ns1__SymbolListResponse *_p = soap_new__ns1__SymbolListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SymbolListResponse::SymbolListResult = SymbolListResult;
	}
	return _p;
}

#ifndef soap_write__ns1__SymbolListResponse
#define soap_write__ns1__SymbolListResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SymbolListResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SymbolListResponse * SOAP_FMAC4 soap_get__ns1__SymbolListResponse(struct soap*, _ns1__SymbolListResponse *, const char*, const char*);

#ifndef soap_read__ns1__SymbolListResponse
#define soap_read__ns1__SymbolListResponse(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__SymbolListResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__SymbolList
#define SOAP_TYPE_ns__ns1__SymbolList (49)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SymbolList(struct soap*, const char*, int, const _ns1__SymbolList *, const char*);
SOAP_FMAC3 _ns1__SymbolList * SOAP_FMAC4 soap_in__ns1__SymbolList(struct soap*, const char*, _ns1__SymbolList *, const char*);
SOAP_FMAC1 _ns1__SymbolList * SOAP_FMAC2 soap_instantiate__ns1__SymbolList(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SymbolList * soap_new__ns1__SymbolList(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SymbolList(soap, n, NULL, NULL, NULL); }

inline _ns1__SymbolList * soap_new_req__ns1__SymbolList(
	struct soap *soap)
{	_ns1__SymbolList *_p = soap_new__ns1__SymbolList(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SymbolList * soap_new_set__ns1__SymbolList(
	struct soap *soap,
	std::string *Token,
	std::string *Exchange)
{	_ns1__SymbolList *_p = soap_new__ns1__SymbolList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SymbolList::Token = Token;
		_p->_ns1__SymbolList::Exchange = Exchange;
	}
	return _p;
}

#ifndef soap_write__ns1__SymbolList
#define soap_write__ns1__SymbolList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SymbolList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SymbolList * SOAP_FMAC4 soap_get__ns1__SymbolList(struct soap*, _ns1__SymbolList *, const char*, const char*);

#ifndef soap_read__ns1__SymbolList
#define soap_read__ns1__SymbolList(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__SymbolList(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__ExchangeGetResponse
#define SOAP_TYPE_ns__ns1__ExchangeGetResponse (48)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ExchangeGetResponse(struct soap*, const char*, int, const _ns1__ExchangeGetResponse *, const char*);
SOAP_FMAC3 _ns1__ExchangeGetResponse * SOAP_FMAC4 soap_in__ns1__ExchangeGetResponse(struct soap*, const char*, _ns1__ExchangeGetResponse *, const char*);
SOAP_FMAC1 _ns1__ExchangeGetResponse * SOAP_FMAC2 soap_instantiate__ns1__ExchangeGetResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ExchangeGetResponse * soap_new__ns1__ExchangeGetResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__ExchangeGetResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__ExchangeGetResponse * soap_new_req__ns1__ExchangeGetResponse(
	struct soap *soap)
{	_ns1__ExchangeGetResponse *_p = soap_new__ns1__ExchangeGetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ExchangeGetResponse * soap_new_set__ns1__ExchangeGetResponse(
	struct soap *soap,
	ns1__RESPONSE *ExchangeGetResult)
{	_ns1__ExchangeGetResponse *_p = soap_new__ns1__ExchangeGetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ExchangeGetResponse::ExchangeGetResult = ExchangeGetResult;
	}
	return _p;
}

#ifndef soap_write__ns1__ExchangeGetResponse
#define soap_write__ns1__ExchangeGetResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:ExchangeGetResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__ExchangeGetResponse * SOAP_FMAC4 soap_get__ns1__ExchangeGetResponse(struct soap*, _ns1__ExchangeGetResponse *, const char*, const char*);

#ifndef soap_read__ns1__ExchangeGetResponse
#define soap_read__ns1__ExchangeGetResponse(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__ExchangeGetResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__ExchangeGet
#define SOAP_TYPE_ns__ns1__ExchangeGet (47)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ExchangeGet(struct soap*, const char*, int, const _ns1__ExchangeGet *, const char*);
SOAP_FMAC3 _ns1__ExchangeGet * SOAP_FMAC4 soap_in__ns1__ExchangeGet(struct soap*, const char*, _ns1__ExchangeGet *, const char*);
SOAP_FMAC1 _ns1__ExchangeGet * SOAP_FMAC2 soap_instantiate__ns1__ExchangeGet(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ExchangeGet * soap_new__ns1__ExchangeGet(struct soap *soap, int n = -1) { return soap_instantiate__ns1__ExchangeGet(soap, n, NULL, NULL, NULL); }

inline _ns1__ExchangeGet * soap_new_req__ns1__ExchangeGet(
	struct soap *soap)
{	_ns1__ExchangeGet *_p = soap_new__ns1__ExchangeGet(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ExchangeGet * soap_new_set__ns1__ExchangeGet(
	struct soap *soap,
	std::string *Token,
	std::string *Exchange)
{	_ns1__ExchangeGet *_p = soap_new__ns1__ExchangeGet(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ExchangeGet::Token = Token;
		_p->_ns1__ExchangeGet::Exchange = Exchange;
	}
	return _p;
}

#ifndef soap_write__ns1__ExchangeGet
#define soap_write__ns1__ExchangeGet(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:ExchangeGet", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__ExchangeGet * SOAP_FMAC4 soap_get__ns1__ExchangeGet(struct soap*, _ns1__ExchangeGet *, const char*, const char*);

#ifndef soap_read__ns1__ExchangeGet
#define soap_read__ns1__ExchangeGet(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__ExchangeGet(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__ExchangeListResponse
#define SOAP_TYPE_ns__ns1__ExchangeListResponse (46)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ExchangeListResponse(struct soap*, const char*, int, const _ns1__ExchangeListResponse *, const char*);
SOAP_FMAC3 _ns1__ExchangeListResponse * SOAP_FMAC4 soap_in__ns1__ExchangeListResponse(struct soap*, const char*, _ns1__ExchangeListResponse *, const char*);
SOAP_FMAC1 _ns1__ExchangeListResponse * SOAP_FMAC2 soap_instantiate__ns1__ExchangeListResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ExchangeListResponse * soap_new__ns1__ExchangeListResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__ExchangeListResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__ExchangeListResponse * soap_new_req__ns1__ExchangeListResponse(
	struct soap *soap)
{	_ns1__ExchangeListResponse *_p = soap_new__ns1__ExchangeListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ExchangeListResponse * soap_new_set__ns1__ExchangeListResponse(
	struct soap *soap,
	ns1__RESPONSE *ExchangeListResult)
{	_ns1__ExchangeListResponse *_p = soap_new__ns1__ExchangeListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ExchangeListResponse::ExchangeListResult = ExchangeListResult;
	}
	return _p;
}

#ifndef soap_write__ns1__ExchangeListResponse
#define soap_write__ns1__ExchangeListResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:ExchangeListResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__ExchangeListResponse * SOAP_FMAC4 soap_get__ns1__ExchangeListResponse(struct soap*, _ns1__ExchangeListResponse *, const char*, const char*);

#ifndef soap_read__ns1__ExchangeListResponse
#define soap_read__ns1__ExchangeListResponse(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__ExchangeListResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__ExchangeList
#define SOAP_TYPE_ns__ns1__ExchangeList (45)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ExchangeList(struct soap*, const char*, int, const _ns1__ExchangeList *, const char*);
SOAP_FMAC3 _ns1__ExchangeList * SOAP_FMAC4 soap_in__ns1__ExchangeList(struct soap*, const char*, _ns1__ExchangeList *, const char*);
SOAP_FMAC1 _ns1__ExchangeList * SOAP_FMAC2 soap_instantiate__ns1__ExchangeList(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ExchangeList * soap_new__ns1__ExchangeList(struct soap *soap, int n = -1) { return soap_instantiate__ns1__ExchangeList(soap, n, NULL, NULL, NULL); }

inline _ns1__ExchangeList * soap_new_req__ns1__ExchangeList(
	struct soap *soap)
{	_ns1__ExchangeList *_p = soap_new__ns1__ExchangeList(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ExchangeList * soap_new_set__ns1__ExchangeList(
	struct soap *soap,
	std::string *Token)
{	_ns1__ExchangeList *_p = soap_new__ns1__ExchangeList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ExchangeList::Token = Token;
	}
	return _p;
}

#ifndef soap_write__ns1__ExchangeList
#define soap_write__ns1__ExchangeList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:ExchangeList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__ExchangeList * SOAP_FMAC4 soap_get__ns1__ExchangeList(struct soap*, _ns1__ExchangeList *, const char*, const char*);

#ifndef soap_read__ns1__ExchangeList
#define soap_read__ns1__ExchangeList(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__ExchangeList(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__MembershipResponse
#define SOAP_TYPE_ns__ns1__MembershipResponse (44)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__MembershipResponse(struct soap*, const char*, int, const _ns1__MembershipResponse *, const char*);
SOAP_FMAC3 _ns1__MembershipResponse * SOAP_FMAC4 soap_in__ns1__MembershipResponse(struct soap*, const char*, _ns1__MembershipResponse *, const char*);
SOAP_FMAC1 _ns1__MembershipResponse * SOAP_FMAC2 soap_instantiate__ns1__MembershipResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__MembershipResponse * soap_new__ns1__MembershipResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__MembershipResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__MembershipResponse * soap_new_req__ns1__MembershipResponse(
	struct soap *soap)
{	_ns1__MembershipResponse *_p = soap_new__ns1__MembershipResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__MembershipResponse * soap_new_set__ns1__MembershipResponse(
	struct soap *soap,
	ns1__RESPONSE *MembershipResult)
{	_ns1__MembershipResponse *_p = soap_new__ns1__MembershipResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__MembershipResponse::MembershipResult = MembershipResult;
	}
	return _p;
}

#ifndef soap_write__ns1__MembershipResponse
#define soap_write__ns1__MembershipResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:MembershipResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__MembershipResponse * SOAP_FMAC4 soap_get__ns1__MembershipResponse(struct soap*, _ns1__MembershipResponse *, const char*, const char*);

#ifndef soap_read__ns1__MembershipResponse
#define soap_read__ns1__MembershipResponse(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__MembershipResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__Membership
#define SOAP_TYPE_ns__ns1__Membership (43)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Membership(struct soap*, const char*, int, const _ns1__Membership *, const char*);
SOAP_FMAC3 _ns1__Membership * SOAP_FMAC4 soap_in__ns1__Membership(struct soap*, const char*, _ns1__Membership *, const char*);
SOAP_FMAC1 _ns1__Membership * SOAP_FMAC2 soap_instantiate__ns1__Membership(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__Membership * soap_new__ns1__Membership(struct soap *soap, int n = -1) { return soap_instantiate__ns1__Membership(soap, n, NULL, NULL, NULL); }

inline _ns1__Membership * soap_new_req__ns1__Membership(
	struct soap *soap)
{	_ns1__Membership *_p = soap_new__ns1__Membership(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__Membership * soap_new_set__ns1__Membership(
	struct soap *soap,
	std::string *Token)
{	_ns1__Membership *_p = soap_new__ns1__Membership(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__Membership::Token = Token;
	}
	return _p;
}

#ifndef soap_write__ns1__Membership
#define soap_write__ns1__Membership(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:Membership", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__Membership * SOAP_FMAC4 soap_get__ns1__Membership(struct soap*, _ns1__Membership *, const char*, const char*);

#ifndef soap_read__ns1__Membership
#define soap_read__ns1__Membership(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__Membership(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__Login2Response
#define SOAP_TYPE_ns__ns1__Login2Response (42)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Login2Response(struct soap*, const char*, int, const _ns1__Login2Response *, const char*);
SOAP_FMAC3 _ns1__Login2Response * SOAP_FMAC4 soap_in__ns1__Login2Response(struct soap*, const char*, _ns1__Login2Response *, const char*);
SOAP_FMAC1 _ns1__Login2Response * SOAP_FMAC2 soap_instantiate__ns1__Login2Response(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__Login2Response * soap_new__ns1__Login2Response(struct soap *soap, int n = -1) { return soap_instantiate__ns1__Login2Response(soap, n, NULL, NULL, NULL); }

inline _ns1__Login2Response * soap_new_req__ns1__Login2Response(
	struct soap *soap)
{	_ns1__Login2Response *_p = soap_new__ns1__Login2Response(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__Login2Response * soap_new_set__ns1__Login2Response(
	struct soap *soap,
	ns1__LOGINRESPONSE *Login2Result)
{	_ns1__Login2Response *_p = soap_new__ns1__Login2Response(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__Login2Response::Login2Result = Login2Result;
	}
	return _p;
}

#ifndef soap_write__ns1__Login2Response
#define soap_write__ns1__Login2Response(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:Login2Response", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__Login2Response * SOAP_FMAC4 soap_get__ns1__Login2Response(struct soap*, _ns1__Login2Response *, const char*, const char*);

#ifndef soap_read__ns1__Login2Response
#define soap_read__ns1__Login2Response(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__Login2Response(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__Login2
#define SOAP_TYPE_ns__ns1__Login2 (41)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Login2(struct soap*, const char*, int, const _ns1__Login2 *, const char*);
SOAP_FMAC3 _ns1__Login2 * SOAP_FMAC4 soap_in__ns1__Login2(struct soap*, const char*, _ns1__Login2 *, const char*);
SOAP_FMAC1 _ns1__Login2 * SOAP_FMAC2 soap_instantiate__ns1__Login2(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__Login2 * soap_new__ns1__Login2(struct soap *soap, int n = -1) { return soap_instantiate__ns1__Login2(soap, n, NULL, NULL, NULL); }

inline _ns1__Login2 * soap_new_req__ns1__Login2(
	struct soap *soap)
{	_ns1__Login2 *_p = soap_new__ns1__Login2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__Login2 * soap_new_set__ns1__Login2(
	struct soap *soap,
	std::string *Username,
	std::string *Password,
	std::string *Version)
{	_ns1__Login2 *_p = soap_new__ns1__Login2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__Login2::Username = Username;
		_p->_ns1__Login2::Password = Password;
		_p->_ns1__Login2::Version = Version;
	}
	return _p;
}

#ifndef soap_write__ns1__Login2
#define soap_write__ns1__Login2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:Login2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__Login2 * SOAP_FMAC4 soap_get__ns1__Login2(struct soap*, _ns1__Login2 *, const char*, const char*);

#ifndef soap_read__ns1__Login2
#define soap_read__ns1__Login2(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__Login2(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__LoginResponse
#define SOAP_TYPE_ns__ns1__LoginResponse (40)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__LoginResponse(struct soap*, const char*, int, const _ns1__LoginResponse *, const char*);
SOAP_FMAC3 _ns1__LoginResponse * SOAP_FMAC4 soap_in__ns1__LoginResponse(struct soap*, const char*, _ns1__LoginResponse *, const char*);
SOAP_FMAC1 _ns1__LoginResponse * SOAP_FMAC2 soap_instantiate__ns1__LoginResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__LoginResponse * soap_new__ns1__LoginResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__LoginResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__LoginResponse * soap_new_req__ns1__LoginResponse(
	struct soap *soap)
{	_ns1__LoginResponse *_p = soap_new__ns1__LoginResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__LoginResponse * soap_new_set__ns1__LoginResponse(
	struct soap *soap,
	ns1__LOGINRESPONSE *LoginResult)
{	_ns1__LoginResponse *_p = soap_new__ns1__LoginResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__LoginResponse::LoginResult = LoginResult;
	}
	return _p;
}

#ifndef soap_write__ns1__LoginResponse
#define soap_write__ns1__LoginResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:LoginResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__LoginResponse * SOAP_FMAC4 soap_get__ns1__LoginResponse(struct soap*, _ns1__LoginResponse *, const char*, const char*);

#ifndef soap_read__ns1__LoginResponse
#define soap_read__ns1__LoginResponse(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__LoginResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ns1__Login
#define SOAP_TYPE_ns__ns1__Login (39)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Login(struct soap*, const char*, int, const _ns1__Login *, const char*);
SOAP_FMAC3 _ns1__Login * SOAP_FMAC4 soap_in__ns1__Login(struct soap*, const char*, _ns1__Login *, const char*);
SOAP_FMAC1 _ns1__Login * SOAP_FMAC2 soap_instantiate__ns1__Login(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__Login * soap_new__ns1__Login(struct soap *soap, int n = -1) { return soap_instantiate__ns1__Login(soap, n, NULL, NULL, NULL); }

inline _ns1__Login * soap_new_req__ns1__Login(
	struct soap *soap)
{	_ns1__Login *_p = soap_new__ns1__Login(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__Login * soap_new_set__ns1__Login(
	struct soap *soap,
	std::string *Username,
	std::string *Password)
{	_ns1__Login *_p = soap_new__ns1__Login(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__Login::Username = Username;
		_p->_ns1__Login::Password = Password;
	}
	return _p;
}

#ifndef soap_write__ns1__Login
#define soap_write__ns1__Login(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:Login", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__Login * SOAP_FMAC4 soap_get__ns1__Login(struct soap*, _ns1__Login *, const char*, const char*);

#ifndef soap_read__ns1__Login
#define soap_read__ns1__Login(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__ns1__Login(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_ns1__DATAFORMAT_USCORECOLUMN
#define SOAP_TYPE_ns_ns1__DATAFORMAT_USCORECOLUMN (38)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DATAFORMAT_USCORECOLUMN(struct soap*, const char*, int, const ns1__DATAFORMAT_USCORECOLUMN *, const char*);
SOAP_FMAC3 ns1__DATAFORMAT_USCORECOLUMN * SOAP_FMAC4 soap_in_ns1__DATAFORMAT_USCORECOLUMN(struct soap*, const char*, ns1__DATAFORMAT_USCORECOLUMN *, const char*);
SOAP_FMAC1 ns1__DATAFORMAT_USCORECOLUMN * SOAP_FMAC2 soap_instantiate_ns1__DATAFORMAT_USCORECOLUMN(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DATAFORMAT_USCORECOLUMN * soap_new_ns1__DATAFORMAT_USCORECOLUMN(struct soap *soap, int n = -1) { return soap_instantiate_ns1__DATAFORMAT_USCORECOLUMN(soap, n, NULL, NULL, NULL); }

inline ns1__DATAFORMAT_USCORECOLUMN * soap_new_req_ns1__DATAFORMAT_USCORECOLUMN(
	struct soap *soap,
	int SortOrder,
	int ColumnTypeId)
{	ns1__DATAFORMAT_USCORECOLUMN *_p = soap_new_ns1__DATAFORMAT_USCORECOLUMN(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DATAFORMAT_USCORECOLUMN::SortOrder = SortOrder;
		_p->ns1__DATAFORMAT_USCORECOLUMN::ColumnTypeId = ColumnTypeId;
	}
	return _p;
}

inline ns1__DATAFORMAT_USCORECOLUMN * soap_new_set_ns1__DATAFORMAT_USCORECOLUMN(
	struct soap *soap,
	int SortOrder,
	std::string *Code,
	std::string *DataFormat,
	std::string *ColumnCode,
	std::string *ColumnName,
	int ColumnTypeId,
	std::string *ColumnType,
	std::string *Header)
{	ns1__DATAFORMAT_USCORECOLUMN *_p = soap_new_ns1__DATAFORMAT_USCORECOLUMN(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DATAFORMAT_USCORECOLUMN::SortOrder = SortOrder;
		_p->ns1__DATAFORMAT_USCORECOLUMN::Code = Code;
		_p->ns1__DATAFORMAT_USCORECOLUMN::DataFormat = DataFormat;
		_p->ns1__DATAFORMAT_USCORECOLUMN::ColumnCode = ColumnCode;
		_p->ns1__DATAFORMAT_USCORECOLUMN::ColumnName = ColumnName;
		_p->ns1__DATAFORMAT_USCORECOLUMN::ColumnTypeId = ColumnTypeId;
		_p->ns1__DATAFORMAT_USCORECOLUMN::ColumnType = ColumnType;
		_p->ns1__DATAFORMAT_USCORECOLUMN::Header = Header;
	}
	return _p;
}

#ifndef soap_write_ns1__DATAFORMAT_USCORECOLUMN
#define soap_write_ns1__DATAFORMAT_USCORECOLUMN(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:DATAFORMAT_COLUMN", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__DATAFORMAT_USCORECOLUMN * SOAP_FMAC4 soap_get_ns1__DATAFORMAT_USCORECOLUMN(struct soap*, ns1__DATAFORMAT_USCORECOLUMN *, const char*, const char*);

#ifndef soap_read_ns1__DATAFORMAT_USCORECOLUMN
#define soap_read_ns1__DATAFORMAT_USCORECOLUMN(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_ns1__DATAFORMAT_USCORECOLUMN(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_ns1__ArrayOfDATAFORMAT_USCORECOLUMN
#define SOAP_TYPE_ns_ns1__ArrayOfDATAFORMAT_USCORECOLUMN (37)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfDATAFORMAT_USCORECOLUMN(struct soap*, const char*, int, const ns1__ArrayOfDATAFORMAT_USCORECOLUMN *, const char*);
SOAP_FMAC3 ns1__ArrayOfDATAFORMAT_USCORECOLUMN * SOAP_FMAC4 soap_in_ns1__ArrayOfDATAFORMAT_USCORECOLUMN(struct soap*, const char*, ns1__ArrayOfDATAFORMAT_USCORECOLUMN *, const char*);
SOAP_FMAC1 ns1__ArrayOfDATAFORMAT_USCORECOLUMN * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfDATAFORMAT_USCORECOLUMN(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ArrayOfDATAFORMAT_USCORECOLUMN * soap_new_ns1__ArrayOfDATAFORMAT_USCORECOLUMN(struct soap *soap, int n = -1) { return soap_instantiate_ns1__ArrayOfDATAFORMAT_USCORECOLUMN(soap, n, NULL, NULL, NULL); }

inline ns1__ArrayOfDATAFORMAT_USCORECOLUMN * soap_new_req_ns1__ArrayOfDATAFORMAT_USCORECOLUMN(
	struct soap *soap)
{	ns1__ArrayOfDATAFORMAT_USCORECOLUMN *_p = soap_new_ns1__ArrayOfDATAFORMAT_USCORECOLUMN(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__ArrayOfDATAFORMAT_USCORECOLUMN * soap_new_set_ns1__ArrayOfDATAFORMAT_USCORECOLUMN(
	struct soap *soap,
	const std::vector<ns1__DATAFORMAT_USCORECOLUMN *> & DATAFORMAT_USCORECOLUMN)
{	ns1__ArrayOfDATAFORMAT_USCORECOLUMN *_p = soap_new_ns1__ArrayOfDATAFORMAT_USCORECOLUMN(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ArrayOfDATAFORMAT_USCORECOLUMN::DATAFORMAT_USCORECOLUMN = DATAFORMAT_USCORECOLUMN;
	}
	return _p;
}

#ifndef soap_write_ns1__ArrayOfDATAFORMAT_USCORECOLUMN
#define soap_write_ns1__ArrayOfDATAFORMAT_USCORECOLUMN(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:ArrayOfDATAFORMAT_COLUMN", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__ArrayOfDATAFORMAT_USCORECOLUMN * SOAP_FMAC4 soap_get_ns1__ArrayOfDATAFORMAT_USCORECOLUMN(struct soap*, ns1__ArrayOfDATAFORMAT_USCORECOLUMN *, const char*, const char*);

#ifndef soap_read_ns1__ArrayOfDATAFORMAT_USCORECOLUMN
#define soap_read_ns1__ArrayOfDATAFORMAT_USCORECOLUMN(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_ns1__ArrayOfDATAFORMAT_USCORECOLUMN(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_ns1__DATAFORMAT
#define SOAP_TYPE_ns_ns1__DATAFORMAT (36)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DATAFORMAT(struct soap*, const char*, int, const ns1__DATAFORMAT *, const char*);
SOAP_FMAC3 ns1__DATAFORMAT * SOAP_FMAC4 soap_in_ns1__DATAFORMAT(struct soap*, const char*, ns1__DATAFORMAT *, const char*);
SOAP_FMAC1 ns1__DATAFORMAT * SOAP_FMAC2 soap_instantiate_ns1__DATAFORMAT(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DATAFORMAT * soap_new_ns1__DATAFORMAT(struct soap *soap, int n = -1) { return soap_instantiate_ns1__DATAFORMAT(soap, n, NULL, NULL, NULL); }

inline ns1__DATAFORMAT * soap_new_req_ns1__DATAFORMAT(
	struct soap *soap,
	bool IncludeSuffix,
	bool TabColumnSeperator,
	bool FilenameExchangeCode,
	bool FilenameDate,
	bool IncludeHeaderRow)
{	ns1__DATAFORMAT *_p = soap_new_ns1__DATAFORMAT(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DATAFORMAT::IncludeSuffix = IncludeSuffix;
		_p->ns1__DATAFORMAT::TabColumnSeperator = TabColumnSeperator;
		_p->ns1__DATAFORMAT::FilenameExchangeCode = FilenameExchangeCode;
		_p->ns1__DATAFORMAT::FilenameDate = FilenameDate;
		_p->ns1__DATAFORMAT::IncludeHeaderRow = IncludeHeaderRow;
	}
	return _p;
}

inline ns1__DATAFORMAT * soap_new_set_ns1__DATAFORMAT(
	struct soap *soap,
	ns1__ArrayOfDATAFORMAT_USCORECOLUMN *COLUMNS,
	std::string *Code,
	std::string *Name,
	std::string *Header,
	std::string *DateFormat,
	std::string *Extension,
	bool IncludeSuffix,
	bool TabColumnSeperator,
	std::string *ColumnSeperator,
	std::string *TextQualifier,
	std::string *FilenamePrefix,
	bool FilenameExchangeCode,
	bool FilenameDate,
	bool IncludeHeaderRow,
	std::string *HourFormat,
	std::string *DateTimeSeperator,
	std::string *ExchangeFilenameFormatDate,
	std::string *ExchangeFilenameFormatDateRange,
	std::string *SymbolFilenameFormatDate,
	std::string *SymbolFilenameFormatDateRange)
{	ns1__DATAFORMAT *_p = soap_new_ns1__DATAFORMAT(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DATAFORMAT::COLUMNS = COLUMNS;
		_p->ns1__DATAFORMAT::Code = Code;
		_p->ns1__DATAFORMAT::Name = Name;
		_p->ns1__DATAFORMAT::Header = Header;
		_p->ns1__DATAFORMAT::DateFormat = DateFormat;
		_p->ns1__DATAFORMAT::Extension = Extension;
		_p->ns1__DATAFORMAT::IncludeSuffix = IncludeSuffix;
		_p->ns1__DATAFORMAT::TabColumnSeperator = TabColumnSeperator;
		_p->ns1__DATAFORMAT::ColumnSeperator = ColumnSeperator;
		_p->ns1__DATAFORMAT::TextQualifier = TextQualifier;
		_p->ns1__DATAFORMAT::FilenamePrefix = FilenamePrefix;
		_p->ns1__DATAFORMAT::FilenameExchangeCode = FilenameExchangeCode;
		_p->ns1__DATAFORMAT::FilenameDate = FilenameDate;
		_p->ns1__DATAFORMAT::IncludeHeaderRow = IncludeHeaderRow;
		_p->ns1__DATAFORMAT::HourFormat = HourFormat;
		_p->ns1__DATAFORMAT::DateTimeSeperator = DateTimeSeperator;
		_p->ns1__DATAFORMAT::ExchangeFilenameFormatDate = ExchangeFilenameFormatDate;
		_p->ns1__DATAFORMAT::ExchangeFilenameFormatDateRange = ExchangeFilenameFormatDateRange;
		_p->ns1__DATAFORMAT::SymbolFilenameFormatDate = SymbolFilenameFormatDate;
		_p->ns1__DATAFORMAT::SymbolFilenameFormatDateRange = SymbolFilenameFormatDateRange;
	}
	return _p;
}

#ifndef soap_write_ns1__DATAFORMAT
#define soap_write_ns1__DATAFORMAT(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:DATAFORMAT", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__DATAFORMAT * SOAP_FMAC4 soap_get_ns1__DATAFORMAT(struct soap*, ns1__DATAFORMAT *, const char*, const char*);

#ifndef soap_read_ns1__DATAFORMAT
#define soap_read_ns1__DATAFORMAT(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_ns1__DATAFORMAT(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_ns1__ArrayOfDATAFORMAT
#define SOAP_TYPE_ns_ns1__ArrayOfDATAFORMAT (35)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfDATAFORMAT(struct soap*, const char*, int, const ns1__ArrayOfDATAFORMAT *, const char*);
SOAP_FMAC3 ns1__ArrayOfDATAFORMAT * SOAP_FMAC4 soap_in_ns1__ArrayOfDATAFORMAT(struct soap*, const char*, ns1__ArrayOfDATAFORMAT *, const char*);
SOAP_FMAC1 ns1__ArrayOfDATAFORMAT * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfDATAFORMAT(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ArrayOfDATAFORMAT * soap_new_ns1__ArrayOfDATAFORMAT(struct soap *soap, int n = -1) { return soap_instantiate_ns1__ArrayOfDATAFORMAT(soap, n, NULL, NULL, NULL); }

inline ns1__ArrayOfDATAFORMAT * soap_new_req_ns1__ArrayOfDATAFORMAT(
	struct soap *soap)
{	ns1__ArrayOfDATAFORMAT *_p = soap_new_ns1__ArrayOfDATAFORMAT(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__ArrayOfDATAFORMAT * soap_new_set_ns1__ArrayOfDATAFORMAT(
	struct soap *soap,
	const std::vector<ns1__DATAFORMAT *> & DATAFORMAT)
{	ns1__ArrayOfDATAFORMAT *_p = soap_new_ns1__ArrayOfDATAFORMAT(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ArrayOfDATAFORMAT::DATAFORMAT = DATAFORMAT;
	}
	return _p;
}

#ifndef soap_write_ns1__ArrayOfDATAFORMAT
#define soap_write_ns1__ArrayOfDATAFORMAT(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:ArrayOfDATAFORMAT", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__ArrayOfDATAFORMAT * SOAP_FMAC4 soap_get_ns1__ArrayOfDATAFORMAT(struct soap*, ns1__ArrayOfDATAFORMAT *, const char*, const char*);

#ifndef soap_read_ns1__ArrayOfDATAFORMAT
#define soap_read_ns1__ArrayOfDATAFORMAT(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_ns1__ArrayOfDATAFORMAT(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_ns1__NEWS
#define SOAP_TYPE_ns_ns1__NEWS (34)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__NEWS(struct soap*, const char*, int, const ns1__NEWS *, const char*);
SOAP_FMAC3 ns1__NEWS * SOAP_FMAC4 soap_in_ns1__NEWS(struct soap*, const char*, ns1__NEWS *, const char*);
SOAP_FMAC1 ns1__NEWS * SOAP_FMAC2 soap_instantiate_ns1__NEWS(struct soap*, int, const char*, const char*, size_t*);

inline ns1__NEWS * soap_new_ns1__NEWS(struct soap *soap, int n = -1) { return soap_instantiate_ns1__NEWS(soap, n, NULL, NULL, NULL); }

inline ns1__NEWS * soap_new_req_ns1__NEWS(
	struct soap *soap,
	LONG64 Id,
	time_t DateTime,
	int Views)
{	ns1__NEWS *_p = soap_new_ns1__NEWS(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__NEWS::Id = Id;
		_p->ns1__NEWS::DateTime = DateTime;
		_p->ns1__NEWS::Views = Views;
	}
	return _p;
}

inline ns1__NEWS * soap_new_set_ns1__NEWS(
	struct soap *soap,
	std::string *Exchange,
	std::string *Symbol,
	LONG64 Id,
	std::string *SourceKey,
	time_t DateTime,
	std::string *Headline,
	std::string *Introduction,
	std::string *Story,
	std::string *Caption,
	int Views)
{	ns1__NEWS *_p = soap_new_ns1__NEWS(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__NEWS::Exchange = Exchange;
		_p->ns1__NEWS::Symbol = Symbol;
		_p->ns1__NEWS::Id = Id;
		_p->ns1__NEWS::SourceKey = SourceKey;
		_p->ns1__NEWS::DateTime = DateTime;
		_p->ns1__NEWS::Headline = Headline;
		_p->ns1__NEWS::Introduction = Introduction;
		_p->ns1__NEWS::Story = Story;
		_p->ns1__NEWS::Caption = Caption;
		_p->ns1__NEWS::Views = Views;
	}
	return _p;
}

#ifndef soap_write_ns1__NEWS
#define soap_write_ns1__NEWS(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:NEWS", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__NEWS * SOAP_FMAC4 soap_get_ns1__NEWS(struct soap*, ns1__NEWS *, const char*, const char*);

#ifndef soap_read_ns1__NEWS
#define soap_read_ns1__NEWS(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_ns1__NEWS(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_ns1__ArrayOfNEWS
#define SOAP_TYPE_ns_ns1__ArrayOfNEWS (33)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfNEWS(struct soap*, const char*, int, const ns1__ArrayOfNEWS *, const char*);
SOAP_FMAC3 ns1__ArrayOfNEWS * SOAP_FMAC4 soap_in_ns1__ArrayOfNEWS(struct soap*, const char*, ns1__ArrayOfNEWS *, const char*);
SOAP_FMAC1 ns1__ArrayOfNEWS * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfNEWS(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ArrayOfNEWS * soap_new_ns1__ArrayOfNEWS(struct soap *soap, int n = -1) { return soap_instantiate_ns1__ArrayOfNEWS(soap, n, NULL, NULL, NULL); }

inline ns1__ArrayOfNEWS * soap_new_req_ns1__ArrayOfNEWS(
	struct soap *soap)
{	ns1__ArrayOfNEWS *_p = soap_new_ns1__ArrayOfNEWS(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__ArrayOfNEWS * soap_new_set_ns1__ArrayOfNEWS(
	struct soap *soap,
	const std::vector<ns1__NEWS *> & NEWS)
{	ns1__ArrayOfNEWS *_p = soap_new_ns1__ArrayOfNEWS(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ArrayOfNEWS::NEWS = NEWS;
	}
	return _p;
}

#ifndef soap_write_ns1__ArrayOfNEWS
#define soap_write_ns1__ArrayOfNEWS(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:ArrayOfNEWS", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__ArrayOfNEWS * SOAP_FMAC4 soap_get_ns1__ArrayOfNEWS(struct soap*, ns1__ArrayOfNEWS *, const char*, const char*);

#ifndef soap_read_ns1__ArrayOfNEWS
#define soap_read_ns1__ArrayOfNEWS(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_ns1__ArrayOfNEWS(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_ns1__SYMBOLCHANGE
#define SOAP_TYPE_ns_ns1__SYMBOLCHANGE (32)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SYMBOLCHANGE(struct soap*, const char*, int, const ns1__SYMBOLCHANGE *, const char*);
SOAP_FMAC3 ns1__SYMBOLCHANGE * SOAP_FMAC4 soap_in_ns1__SYMBOLCHANGE(struct soap*, const char*, ns1__SYMBOLCHANGE *, const char*);
SOAP_FMAC1 ns1__SYMBOLCHANGE * SOAP_FMAC2 soap_instantiate_ns1__SYMBOLCHANGE(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SYMBOLCHANGE * soap_new_ns1__SYMBOLCHANGE(struct soap *soap, int n = -1) { return soap_instantiate_ns1__SYMBOLCHANGE(soap, n, NULL, NULL, NULL); }

inline ns1__SYMBOLCHANGE * soap_new_req_ns1__SYMBOLCHANGE(
	struct soap *soap,
	time_t DateTime)
{	ns1__SYMBOLCHANGE *_p = soap_new_ns1__SYMBOLCHANGE(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SYMBOLCHANGE::DateTime = DateTime;
	}
	return _p;
}

inline ns1__SYMBOLCHANGE * soap_new_set_ns1__SYMBOLCHANGE(
	struct soap *soap,
	time_t DateTime,
	std::string *OldSymbol,
	std::string *NewSymbol,
	std::string *ExchangeCode,
	std::string *NewExchangeCode)
{	ns1__SYMBOLCHANGE *_p = soap_new_ns1__SYMBOLCHANGE(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SYMBOLCHANGE::DateTime = DateTime;
		_p->ns1__SYMBOLCHANGE::OldSymbol = OldSymbol;
		_p->ns1__SYMBOLCHANGE::NewSymbol = NewSymbol;
		_p->ns1__SYMBOLCHANGE::ExchangeCode = ExchangeCode;
		_p->ns1__SYMBOLCHANGE::NewExchangeCode = NewExchangeCode;
	}
	return _p;
}

#ifndef soap_write_ns1__SYMBOLCHANGE
#define soap_write_ns1__SYMBOLCHANGE(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SYMBOLCHANGE", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__SYMBOLCHANGE * SOAP_FMAC4 soap_get_ns1__SYMBOLCHANGE(struct soap*, ns1__SYMBOLCHANGE *, const char*, const char*);

#ifndef soap_read_ns1__SYMBOLCHANGE
#define soap_read_ns1__SYMBOLCHANGE(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_ns1__SYMBOLCHANGE(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_ns1__ArrayOfSYMBOLCHANGE
#define SOAP_TYPE_ns_ns1__ArrayOfSYMBOLCHANGE (31)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfSYMBOLCHANGE(struct soap*, const char*, int, const ns1__ArrayOfSYMBOLCHANGE *, const char*);
SOAP_FMAC3 ns1__ArrayOfSYMBOLCHANGE * SOAP_FMAC4 soap_in_ns1__ArrayOfSYMBOLCHANGE(struct soap*, const char*, ns1__ArrayOfSYMBOLCHANGE *, const char*);
SOAP_FMAC1 ns1__ArrayOfSYMBOLCHANGE * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfSYMBOLCHANGE(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ArrayOfSYMBOLCHANGE * soap_new_ns1__ArrayOfSYMBOLCHANGE(struct soap *soap, int n = -1) { return soap_instantiate_ns1__ArrayOfSYMBOLCHANGE(soap, n, NULL, NULL, NULL); }

inline ns1__ArrayOfSYMBOLCHANGE * soap_new_req_ns1__ArrayOfSYMBOLCHANGE(
	struct soap *soap)
{	ns1__ArrayOfSYMBOLCHANGE *_p = soap_new_ns1__ArrayOfSYMBOLCHANGE(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__ArrayOfSYMBOLCHANGE * soap_new_set_ns1__ArrayOfSYMBOLCHANGE(
	struct soap *soap,
	const std::vector<ns1__SYMBOLCHANGE *> & SYMBOLCHANGE)
{	ns1__ArrayOfSYMBOLCHANGE *_p = soap_new_ns1__ArrayOfSYMBOLCHANGE(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ArrayOfSYMBOLCHANGE::SYMBOLCHANGE = SYMBOLCHANGE;
	}
	return _p;
}

#ifndef soap_write_ns1__ArrayOfSYMBOLCHANGE
#define soap_write_ns1__ArrayOfSYMBOLCHANGE(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:ArrayOfSYMBOLCHANGE", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__ArrayOfSYMBOLCHANGE * SOAP_FMAC4 soap_get_ns1__ArrayOfSYMBOLCHANGE(struct soap*, ns1__ArrayOfSYMBOLCHANGE *, const char*, const char*);

#ifndef soap_read_ns1__ArrayOfSYMBOLCHANGE
#define soap_read_ns1__ArrayOfSYMBOLCHANGE(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_ns1__ArrayOfSYMBOLCHANGE(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_ns1__TECHNICAL
#define SOAP_TYPE_ns_ns1__TECHNICAL (30)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__TECHNICAL(struct soap*, const char*, int, const ns1__TECHNICAL *, const char*);
SOAP_FMAC3 ns1__TECHNICAL * SOAP_FMAC4 soap_in_ns1__TECHNICAL(struct soap*, const char*, ns1__TECHNICAL *, const char*);
SOAP_FMAC1 ns1__TECHNICAL * SOAP_FMAC2 soap_instantiate_ns1__TECHNICAL(struct soap*, int, const char*, const char*, size_t*);

inline ns1__TECHNICAL * soap_new_ns1__TECHNICAL(struct soap *soap, int n = -1) { return soap_instantiate_ns1__TECHNICAL(soap, n, NULL, NULL, NULL); }

inline ns1__TECHNICAL * soap_new_req_ns1__TECHNICAL(
	struct soap *soap,
	time_t DateTime,
	double Previous,
	double Change,
	int MA1,
	int MA2,
	int MA5,
	int MA20,
	int MA50,
	int MA100,
	int MA200,
	double MAPercent,
	double MAReturn,
	LONG64 VolumeChange,
	double ThreeMonthChange,
	double SixMonthChange,
	double WeekHigh,
	double WeekLow,
	double WeekChange,
	double AvgWeekChange,
	double AvgWeekVolume,
	double WeekVolume,
	double MonthHigh,
	double MonthLow,
	double MonthChange,
	double AvgMonthChange,
	double AvgMonthVolume,
	double MonthVolume,
	double YearHigh,
	double YearLow,
	double YearChange,
	double AvgYearChange,
	double AvgYearVolume,
	double YTDChange,
	double RSI14,
	double STO9,
	double WPR14,
	double MTM14,
	double ROC14,
	LONG64 PTC,
	double SAR,
	double Volatility,
	double Liquidity)
{	ns1__TECHNICAL *_p = soap_new_ns1__TECHNICAL(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__TECHNICAL::DateTime = DateTime;
		_p->ns1__TECHNICAL::Previous = Previous;
		_p->ns1__TECHNICAL::Change = Change;
		_p->ns1__TECHNICAL::MA1 = MA1;
		_p->ns1__TECHNICAL::MA2 = MA2;
		_p->ns1__TECHNICAL::MA5 = MA5;
		_p->ns1__TECHNICAL::MA20 = MA20;
		_p->ns1__TECHNICAL::MA50 = MA50;
		_p->ns1__TECHNICAL::MA100 = MA100;
		_p->ns1__TECHNICAL::MA200 = MA200;
		_p->ns1__TECHNICAL::MAPercent = MAPercent;
		_p->ns1__TECHNICAL::MAReturn = MAReturn;
		_p->ns1__TECHNICAL::VolumeChange = VolumeChange;
		_p->ns1__TECHNICAL::ThreeMonthChange = ThreeMonthChange;
		_p->ns1__TECHNICAL::SixMonthChange = SixMonthChange;
		_p->ns1__TECHNICAL::WeekHigh = WeekHigh;
		_p->ns1__TECHNICAL::WeekLow = WeekLow;
		_p->ns1__TECHNICAL::WeekChange = WeekChange;
		_p->ns1__TECHNICAL::AvgWeekChange = AvgWeekChange;
		_p->ns1__TECHNICAL::AvgWeekVolume = AvgWeekVolume;
		_p->ns1__TECHNICAL::WeekVolume = WeekVolume;
		_p->ns1__TECHNICAL::MonthHigh = MonthHigh;
		_p->ns1__TECHNICAL::MonthLow = MonthLow;
		_p->ns1__TECHNICAL::MonthChange = MonthChange;
		_p->ns1__TECHNICAL::AvgMonthChange = AvgMonthChange;
		_p->ns1__TECHNICAL::AvgMonthVolume = AvgMonthVolume;
		_p->ns1__TECHNICAL::MonthVolume = MonthVolume;
		_p->ns1__TECHNICAL::YearHigh = YearHigh;
		_p->ns1__TECHNICAL::YearLow = YearLow;
		_p->ns1__TECHNICAL::YearChange = YearChange;
		_p->ns1__TECHNICAL::AvgYearChange = AvgYearChange;
		_p->ns1__TECHNICAL::AvgYearVolume = AvgYearVolume;
		_p->ns1__TECHNICAL::YTDChange = YTDChange;
		_p->ns1__TECHNICAL::RSI14 = RSI14;
		_p->ns1__TECHNICAL::STO9 = STO9;
		_p->ns1__TECHNICAL::WPR14 = WPR14;
		_p->ns1__TECHNICAL::MTM14 = MTM14;
		_p->ns1__TECHNICAL::ROC14 = ROC14;
		_p->ns1__TECHNICAL::PTC = PTC;
		_p->ns1__TECHNICAL::SAR = SAR;
		_p->ns1__TECHNICAL::Volatility = Volatility;
		_p->ns1__TECHNICAL::Liquidity = Liquidity;
	}
	return _p;
}

inline ns1__TECHNICAL * soap_new_set_ns1__TECHNICAL(
	struct soap *soap,
	std::string *Symbol,
	std::string *Name,
	std::string *Description,
	time_t DateTime,
	double Previous,
	double Change,
	int MA1,
	int MA2,
	int MA5,
	int MA20,
	int MA50,
	int MA100,
	int MA200,
	double MAPercent,
	double MAReturn,
	LONG64 VolumeChange,
	double ThreeMonthChange,
	double SixMonthChange,
	double WeekHigh,
	double WeekLow,
	double WeekChange,
	double AvgWeekChange,
	double AvgWeekVolume,
	double WeekVolume,
	double MonthHigh,
	double MonthLow,
	double MonthChange,
	double AvgMonthChange,
	double AvgMonthVolume,
	double MonthVolume,
	double YearHigh,
	double YearLow,
	double YearChange,
	double AvgYearChange,
	double AvgYearVolume,
	double YTDChange,
	double RSI14,
	double STO9,
	double WPR14,
	double MTM14,
	double ROC14,
	LONG64 PTC,
	double SAR,
	double Volatility,
	double Liquidity)
{	ns1__TECHNICAL *_p = soap_new_ns1__TECHNICAL(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__TECHNICAL::Symbol = Symbol;
		_p->ns1__TECHNICAL::Name = Name;
		_p->ns1__TECHNICAL::Description = Description;
		_p->ns1__TECHNICAL::DateTime = DateTime;
		_p->ns1__TECHNICAL::Previous = Previous;
		_p->ns1__TECHNICAL::Change = Change;
		_p->ns1__TECHNICAL::MA1 = MA1;
		_p->ns1__TECHNICAL::MA2 = MA2;
		_p->ns1__TECHNICAL::MA5 = MA5;
		_p->ns1__TECHNICAL::MA20 = MA20;
		_p->ns1__TECHNICAL::MA50 = MA50;
		_p->ns1__TECHNICAL::MA100 = MA100;
		_p->ns1__TECHNICAL::MA200 = MA200;
		_p->ns1__TECHNICAL::MAPercent = MAPercent;
		_p->ns1__TECHNICAL::MAReturn = MAReturn;
		_p->ns1__TECHNICAL::VolumeChange = VolumeChange;
		_p->ns1__TECHNICAL::ThreeMonthChange = ThreeMonthChange;
		_p->ns1__TECHNICAL::SixMonthChange = SixMonthChange;
		_p->ns1__TECHNICAL::WeekHigh = WeekHigh;
		_p->ns1__TECHNICAL::WeekLow = WeekLow;
		_p->ns1__TECHNICAL::WeekChange = WeekChange;
		_p->ns1__TECHNICAL::AvgWeekChange = AvgWeekChange;
		_p->ns1__TECHNICAL::AvgWeekVolume = AvgWeekVolume;
		_p->ns1__TECHNICAL::WeekVolume = WeekVolume;
		_p->ns1__TECHNICAL::MonthHigh = MonthHigh;
		_p->ns1__TECHNICAL::MonthLow = MonthLow;
		_p->ns1__TECHNICAL::MonthChange = MonthChange;
		_p->ns1__TECHNICAL::AvgMonthChange = AvgMonthChange;
		_p->ns1__TECHNICAL::AvgMonthVolume = AvgMonthVolume;
		_p->ns1__TECHNICAL::MonthVolume = MonthVolume;
		_p->ns1__TECHNICAL::YearHigh = YearHigh;
		_p->ns1__TECHNICAL::YearLow = YearLow;
		_p->ns1__TECHNICAL::YearChange = YearChange;
		_p->ns1__TECHNICAL::AvgYearChange = AvgYearChange;
		_p->ns1__TECHNICAL::AvgYearVolume = AvgYearVolume;
		_p->ns1__TECHNICAL::YTDChange = YTDChange;
		_p->ns1__TECHNICAL::RSI14 = RSI14;
		_p->ns1__TECHNICAL::STO9 = STO9;
		_p->ns1__TECHNICAL::WPR14 = WPR14;
		_p->ns1__TECHNICAL::MTM14 = MTM14;
		_p->ns1__TECHNICAL::ROC14 = ROC14;
		_p->ns1__TECHNICAL::PTC = PTC;
		_p->ns1__TECHNICAL::SAR = SAR;
		_p->ns1__TECHNICAL::Volatility = Volatility;
		_p->ns1__TECHNICAL::Liquidity = Liquidity;
	}
	return _p;
}

#ifndef soap_write_ns1__TECHNICAL
#define soap_write_ns1__TECHNICAL(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:TECHNICAL", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__TECHNICAL * SOAP_FMAC4 soap_get_ns1__TECHNICAL(struct soap*, ns1__TECHNICAL *, const char*, const char*);

#ifndef soap_read_ns1__TECHNICAL
#define soap_read_ns1__TECHNICAL(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_ns1__TECHNICAL(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_ns1__ArrayOfTECHNICAL
#define SOAP_TYPE_ns_ns1__ArrayOfTECHNICAL (29)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfTECHNICAL(struct soap*, const char*, int, const ns1__ArrayOfTECHNICAL *, const char*);
SOAP_FMAC3 ns1__ArrayOfTECHNICAL * SOAP_FMAC4 soap_in_ns1__ArrayOfTECHNICAL(struct soap*, const char*, ns1__ArrayOfTECHNICAL *, const char*);
SOAP_FMAC1 ns1__ArrayOfTECHNICAL * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfTECHNICAL(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ArrayOfTECHNICAL * soap_new_ns1__ArrayOfTECHNICAL(struct soap *soap, int n = -1) { return soap_instantiate_ns1__ArrayOfTECHNICAL(soap, n, NULL, NULL, NULL); }

inline ns1__ArrayOfTECHNICAL * soap_new_req_ns1__ArrayOfTECHNICAL(
	struct soap *soap)
{	ns1__ArrayOfTECHNICAL *_p = soap_new_ns1__ArrayOfTECHNICAL(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__ArrayOfTECHNICAL * soap_new_set_ns1__ArrayOfTECHNICAL(
	struct soap *soap,
	const std::vector<ns1__TECHNICAL *> & TECHNICAL)
{	ns1__ArrayOfTECHNICAL *_p = soap_new_ns1__ArrayOfTECHNICAL(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ArrayOfTECHNICAL::TECHNICAL = TECHNICAL;
	}
	return _p;
}

#ifndef soap_write_ns1__ArrayOfTECHNICAL
#define soap_write_ns1__ArrayOfTECHNICAL(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:ArrayOfTECHNICAL", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__ArrayOfTECHNICAL * SOAP_FMAC4 soap_get_ns1__ArrayOfTECHNICAL(struct soap*, ns1__ArrayOfTECHNICAL *, const char*, const char*);

#ifndef soap_read_ns1__ArrayOfTECHNICAL
#define soap_read_ns1__ArrayOfTECHNICAL(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_ns1__ArrayOfTECHNICAL(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_ns1__FUNDAMENTAL
#define SOAP_TYPE_ns_ns1__FUNDAMENTAL (28)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__FUNDAMENTAL(struct soap*, const char*, int, const ns1__FUNDAMENTAL *, const char*);
SOAP_FMAC3 ns1__FUNDAMENTAL * SOAP_FMAC4 soap_in_ns1__FUNDAMENTAL(struct soap*, const char*, ns1__FUNDAMENTAL *, const char*);
SOAP_FMAC1 ns1__FUNDAMENTAL * SOAP_FMAC2 soap_instantiate_ns1__FUNDAMENTAL(struct soap*, int, const char*, const char*, size_t*);

inline ns1__FUNDAMENTAL * soap_new_ns1__FUNDAMENTAL(struct soap *soap, int n = -1) { return soap_instantiate_ns1__FUNDAMENTAL(soap, n, NULL, NULL, NULL); }

inline ns1__FUNDAMENTAL * soap_new_req_ns1__FUNDAMENTAL(
	struct soap *soap,
	time_t DateTime,
	LONG64 Shares,
	LONG64 MarketCap,
	double PE,
	double EPS,
	double NTA,
	double DivYield,
	double Dividend,
	time_t DividendDate,
	double DPS,
	double ImputationCredits,
	double EBITDA,
	double PEG,
	double PtS,
	double PtB,
	double Yield)
{	ns1__FUNDAMENTAL *_p = soap_new_ns1__FUNDAMENTAL(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__FUNDAMENTAL::DateTime = DateTime;
		_p->ns1__FUNDAMENTAL::Shares = Shares;
		_p->ns1__FUNDAMENTAL::MarketCap = MarketCap;
		_p->ns1__FUNDAMENTAL::PE = PE;
		_p->ns1__FUNDAMENTAL::EPS = EPS;
		_p->ns1__FUNDAMENTAL::NTA = NTA;
		_p->ns1__FUNDAMENTAL::DivYield = DivYield;
		_p->ns1__FUNDAMENTAL::Dividend = Dividend;
		_p->ns1__FUNDAMENTAL::DividendDate = DividendDate;
		_p->ns1__FUNDAMENTAL::DPS = DPS;
		_p->ns1__FUNDAMENTAL::ImputationCredits = ImputationCredits;
		_p->ns1__FUNDAMENTAL::EBITDA = EBITDA;
		_p->ns1__FUNDAMENTAL::PEG = PEG;
		_p->ns1__FUNDAMENTAL::PtS = PtS;
		_p->ns1__FUNDAMENTAL::PtB = PtB;
		_p->ns1__FUNDAMENTAL::Yield = Yield;
	}
	return _p;
}

inline ns1__FUNDAMENTAL * soap_new_set_ns1__FUNDAMENTAL(
	struct soap *soap,
	std::string *Symbol,
	std::string *Name,
	std::string *Description,
	time_t DateTime,
	std::string *Industry,
	std::string *Sector,
	LONG64 Shares,
	LONG64 MarketCap,
	double PE,
	double EPS,
	double NTA,
	double DivYield,
	double Dividend,
	time_t DividendDate,
	double DPS,
	double ImputationCredits,
	double EBITDA,
	double PEG,
	double PtS,
	double PtB,
	double Yield)
{	ns1__FUNDAMENTAL *_p = soap_new_ns1__FUNDAMENTAL(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__FUNDAMENTAL::Symbol = Symbol;
		_p->ns1__FUNDAMENTAL::Name = Name;
		_p->ns1__FUNDAMENTAL::Description = Description;
		_p->ns1__FUNDAMENTAL::DateTime = DateTime;
		_p->ns1__FUNDAMENTAL::Industry = Industry;
		_p->ns1__FUNDAMENTAL::Sector = Sector;
		_p->ns1__FUNDAMENTAL::Shares = Shares;
		_p->ns1__FUNDAMENTAL::MarketCap = MarketCap;
		_p->ns1__FUNDAMENTAL::PE = PE;
		_p->ns1__FUNDAMENTAL::EPS = EPS;
		_p->ns1__FUNDAMENTAL::NTA = NTA;
		_p->ns1__FUNDAMENTAL::DivYield = DivYield;
		_p->ns1__FUNDAMENTAL::Dividend = Dividend;
		_p->ns1__FUNDAMENTAL::DividendDate = DividendDate;
		_p->ns1__FUNDAMENTAL::DPS = DPS;
		_p->ns1__FUNDAMENTAL::ImputationCredits = ImputationCredits;
		_p->ns1__FUNDAMENTAL::EBITDA = EBITDA;
		_p->ns1__FUNDAMENTAL::PEG = PEG;
		_p->ns1__FUNDAMENTAL::PtS = PtS;
		_p->ns1__FUNDAMENTAL::PtB = PtB;
		_p->ns1__FUNDAMENTAL::Yield = Yield;
	}
	return _p;
}

#ifndef soap_write_ns1__FUNDAMENTAL
#define soap_write_ns1__FUNDAMENTAL(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:FUNDAMENTAL", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__FUNDAMENTAL * SOAP_FMAC4 soap_get_ns1__FUNDAMENTAL(struct soap*, ns1__FUNDAMENTAL *, const char*, const char*);

#ifndef soap_read_ns1__FUNDAMENTAL
#define soap_read_ns1__FUNDAMENTAL(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_ns1__FUNDAMENTAL(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_ns1__ArrayOfFUNDAMENTAL
#define SOAP_TYPE_ns_ns1__ArrayOfFUNDAMENTAL (27)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfFUNDAMENTAL(struct soap*, const char*, int, const ns1__ArrayOfFUNDAMENTAL *, const char*);
SOAP_FMAC3 ns1__ArrayOfFUNDAMENTAL * SOAP_FMAC4 soap_in_ns1__ArrayOfFUNDAMENTAL(struct soap*, const char*, ns1__ArrayOfFUNDAMENTAL *, const char*);
SOAP_FMAC1 ns1__ArrayOfFUNDAMENTAL * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfFUNDAMENTAL(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ArrayOfFUNDAMENTAL * soap_new_ns1__ArrayOfFUNDAMENTAL(struct soap *soap, int n = -1) { return soap_instantiate_ns1__ArrayOfFUNDAMENTAL(soap, n, NULL, NULL, NULL); }

inline ns1__ArrayOfFUNDAMENTAL * soap_new_req_ns1__ArrayOfFUNDAMENTAL(
	struct soap *soap)
{	ns1__ArrayOfFUNDAMENTAL *_p = soap_new_ns1__ArrayOfFUNDAMENTAL(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__ArrayOfFUNDAMENTAL * soap_new_set_ns1__ArrayOfFUNDAMENTAL(
	struct soap *soap,
	const std::vector<ns1__FUNDAMENTAL *> & FUNDAMENTAL)
{	ns1__ArrayOfFUNDAMENTAL *_p = soap_new_ns1__ArrayOfFUNDAMENTAL(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ArrayOfFUNDAMENTAL::FUNDAMENTAL = FUNDAMENTAL;
	}
	return _p;
}

#ifndef soap_write_ns1__ArrayOfFUNDAMENTAL
#define soap_write_ns1__ArrayOfFUNDAMENTAL(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:ArrayOfFUNDAMENTAL", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__ArrayOfFUNDAMENTAL * SOAP_FMAC4 soap_get_ns1__ArrayOfFUNDAMENTAL(struct soap*, ns1__ArrayOfFUNDAMENTAL *, const char*, const char*);

#ifndef soap_read_ns1__ArrayOfFUNDAMENTAL
#define soap_read_ns1__ArrayOfFUNDAMENTAL(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_ns1__ArrayOfFUNDAMENTAL(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_ns1__CountryBase
#define SOAP_TYPE_ns_ns1__CountryBase (26)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CountryBase(struct soap*, const char*, int, const ns1__CountryBase *, const char*);
SOAP_FMAC3 ns1__CountryBase * SOAP_FMAC4 soap_in_ns1__CountryBase(struct soap*, const char*, ns1__CountryBase *, const char*);
SOAP_FMAC1 ns1__CountryBase * SOAP_FMAC2 soap_instantiate_ns1__CountryBase(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CountryBase * soap_new_ns1__CountryBase(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CountryBase(soap, n, NULL, NULL, NULL); }

inline ns1__CountryBase * soap_new_req_ns1__CountryBase(
	struct soap *soap)
{	ns1__CountryBase *_p = soap_new_ns1__CountryBase(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__CountryBase * soap_new_set_ns1__CountryBase(
	struct soap *soap,
	std::string *Code,
	std::string *Name)
{	ns1__CountryBase *_p = soap_new_ns1__CountryBase(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CountryBase::Code = Code;
		_p->ns1__CountryBase::Name = Name;
	}
	return _p;
}

#ifndef soap_write_ns1__CountryBase
#define soap_write_ns1__CountryBase(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:CountryBase", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__CountryBase * SOAP_FMAC4 soap_get_ns1__CountryBase(struct soap*, ns1__CountryBase *, const char*, const char*);

#ifndef soap_read_ns1__CountryBase
#define soap_read_ns1__CountryBase(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_ns1__CountryBase(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_ns1__ArrayOfCountryBase
#define SOAP_TYPE_ns_ns1__ArrayOfCountryBase (25)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfCountryBase(struct soap*, const char*, int, const ns1__ArrayOfCountryBase *, const char*);
SOAP_FMAC3 ns1__ArrayOfCountryBase * SOAP_FMAC4 soap_in_ns1__ArrayOfCountryBase(struct soap*, const char*, ns1__ArrayOfCountryBase *, const char*);
SOAP_FMAC1 ns1__ArrayOfCountryBase * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfCountryBase(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ArrayOfCountryBase * soap_new_ns1__ArrayOfCountryBase(struct soap *soap, int n = -1) { return soap_instantiate_ns1__ArrayOfCountryBase(soap, n, NULL, NULL, NULL); }

inline ns1__ArrayOfCountryBase * soap_new_req_ns1__ArrayOfCountryBase(
	struct soap *soap)
{	ns1__ArrayOfCountryBase *_p = soap_new_ns1__ArrayOfCountryBase(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__ArrayOfCountryBase * soap_new_set_ns1__ArrayOfCountryBase(
	struct soap *soap,
	const std::vector<ns1__CountryBase *> & CountryBase)
{	ns1__ArrayOfCountryBase *_p = soap_new_ns1__ArrayOfCountryBase(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ArrayOfCountryBase::CountryBase = CountryBase;
	}
	return _p;
}

#ifndef soap_write_ns1__ArrayOfCountryBase
#define soap_write_ns1__ArrayOfCountryBase(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:ArrayOfCountryBase", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__ArrayOfCountryBase * SOAP_FMAC4 soap_get_ns1__ArrayOfCountryBase(struct soap*, ns1__ArrayOfCountryBase *, const char*, const char*);

#ifndef soap_read_ns1__ArrayOfCountryBase
#define soap_read_ns1__ArrayOfCountryBase(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_ns1__ArrayOfCountryBase(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_ns1__SPLIT
#define SOAP_TYPE_ns_ns1__SPLIT (24)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SPLIT(struct soap*, const char*, int, const ns1__SPLIT *, const char*);
SOAP_FMAC3 ns1__SPLIT * SOAP_FMAC4 soap_in_ns1__SPLIT(struct soap*, const char*, ns1__SPLIT *, const char*);
SOAP_FMAC1 ns1__SPLIT * SOAP_FMAC2 soap_instantiate_ns1__SPLIT(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SPLIT * soap_new_ns1__SPLIT(struct soap *soap, int n = -1) { return soap_instantiate_ns1__SPLIT(soap, n, NULL, NULL, NULL); }

inline ns1__SPLIT * soap_new_req_ns1__SPLIT(
	struct soap *soap,
	time_t DateTime)
{	ns1__SPLIT *_p = soap_new_ns1__SPLIT(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SPLIT::DateTime = DateTime;
	}
	return _p;
}

inline ns1__SPLIT * soap_new_set_ns1__SPLIT(
	struct soap *soap,
	std::string *Exchange,
	std::string *Symbol,
	time_t DateTime,
	std::string *Ratio)
{	ns1__SPLIT *_p = soap_new_ns1__SPLIT(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SPLIT::Exchange = Exchange;
		_p->ns1__SPLIT::Symbol = Symbol;
		_p->ns1__SPLIT::DateTime = DateTime;
		_p->ns1__SPLIT::Ratio = Ratio;
	}
	return _p;
}

#ifndef soap_write_ns1__SPLIT
#define soap_write_ns1__SPLIT(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SPLIT", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__SPLIT * SOAP_FMAC4 soap_get_ns1__SPLIT(struct soap*, ns1__SPLIT *, const char*, const char*);

#ifndef soap_read_ns1__SPLIT
#define soap_read_ns1__SPLIT(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_ns1__SPLIT(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_ns1__ArrayOfSPLIT
#define SOAP_TYPE_ns_ns1__ArrayOfSPLIT (23)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfSPLIT(struct soap*, const char*, int, const ns1__ArrayOfSPLIT *, const char*);
SOAP_FMAC3 ns1__ArrayOfSPLIT * SOAP_FMAC4 soap_in_ns1__ArrayOfSPLIT(struct soap*, const char*, ns1__ArrayOfSPLIT *, const char*);
SOAP_FMAC1 ns1__ArrayOfSPLIT * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfSPLIT(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ArrayOfSPLIT * soap_new_ns1__ArrayOfSPLIT(struct soap *soap, int n = -1) { return soap_instantiate_ns1__ArrayOfSPLIT(soap, n, NULL, NULL, NULL); }

inline ns1__ArrayOfSPLIT * soap_new_req_ns1__ArrayOfSPLIT(
	struct soap *soap)
{	ns1__ArrayOfSPLIT *_p = soap_new_ns1__ArrayOfSPLIT(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__ArrayOfSPLIT * soap_new_set_ns1__ArrayOfSPLIT(
	struct soap *soap,
	const std::vector<ns1__SPLIT *> & SPLIT)
{	ns1__ArrayOfSPLIT *_p = soap_new_ns1__ArrayOfSPLIT(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ArrayOfSPLIT::SPLIT = SPLIT;
	}
	return _p;
}

#ifndef soap_write_ns1__ArrayOfSPLIT
#define soap_write_ns1__ArrayOfSPLIT(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:ArrayOfSPLIT", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__ArrayOfSPLIT * SOAP_FMAC4 soap_get_ns1__ArrayOfSPLIT(struct soap*, ns1__ArrayOfSPLIT *, const char*, const char*);

#ifndef soap_read_ns1__ArrayOfSPLIT
#define soap_read_ns1__ArrayOfSPLIT(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_ns1__ArrayOfSPLIT(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_ns1__QUOTE2
#define SOAP_TYPE_ns_ns1__QUOTE2 (22)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__QUOTE2(struct soap*, const char*, int, const ns1__QUOTE2 *, const char*);
SOAP_FMAC3 ns1__QUOTE2 * SOAP_FMAC4 soap_in_ns1__QUOTE2(struct soap*, const char*, ns1__QUOTE2 *, const char*);
SOAP_FMAC1 ns1__QUOTE2 * SOAP_FMAC2 soap_instantiate_ns1__QUOTE2(struct soap*, int, const char*, const char*, size_t*);

inline ns1__QUOTE2 * soap_new_ns1__QUOTE2(struct soap *soap, int n = -1) { return soap_instantiate_ns1__QUOTE2(soap, n, NULL, NULL, NULL); }

inline ns1__QUOTE2 * soap_new_req_ns1__QUOTE2(
	struct soap *soap,
	time_t d,
	double o,
	double h,
	double l,
	double c,
	LONG64 v,
	LONG64 i,
	double b,
	double a)
{	ns1__QUOTE2 *_p = soap_new_ns1__QUOTE2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__QUOTE2::d = d;
		_p->ns1__QUOTE2::o = o;
		_p->ns1__QUOTE2::h = h;
		_p->ns1__QUOTE2::l = l;
		_p->ns1__QUOTE2::c = c;
		_p->ns1__QUOTE2::v = v;
		_p->ns1__QUOTE2::i = i;
		_p->ns1__QUOTE2::b = b;
		_p->ns1__QUOTE2::a = a;
	}
	return _p;
}

inline ns1__QUOTE2 * soap_new_set_ns1__QUOTE2(
	struct soap *soap,
	std::string *s,
	time_t d,
	double o,
	double h,
	double l,
	double c,
	LONG64 v,
	LONG64 i,
	double b,
	double a)
{	ns1__QUOTE2 *_p = soap_new_ns1__QUOTE2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__QUOTE2::s = s;
		_p->ns1__QUOTE2::d = d;
		_p->ns1__QUOTE2::o = o;
		_p->ns1__QUOTE2::h = h;
		_p->ns1__QUOTE2::l = l;
		_p->ns1__QUOTE2::c = c;
		_p->ns1__QUOTE2::v = v;
		_p->ns1__QUOTE2::i = i;
		_p->ns1__QUOTE2::b = b;
		_p->ns1__QUOTE2::a = a;
	}
	return _p;
}

#ifndef soap_write_ns1__QUOTE2
#define soap_write_ns1__QUOTE2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:QUOTE2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__QUOTE2 * SOAP_FMAC4 soap_get_ns1__QUOTE2(struct soap*, ns1__QUOTE2 *, const char*, const char*);

#ifndef soap_read_ns1__QUOTE2
#define soap_read_ns1__QUOTE2(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_ns1__QUOTE2(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_ns1__ArrayOfQUOTE2
#define SOAP_TYPE_ns_ns1__ArrayOfQUOTE2 (21)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfQUOTE2(struct soap*, const char*, int, const ns1__ArrayOfQUOTE2 *, const char*);
SOAP_FMAC3 ns1__ArrayOfQUOTE2 * SOAP_FMAC4 soap_in_ns1__ArrayOfQUOTE2(struct soap*, const char*, ns1__ArrayOfQUOTE2 *, const char*);
SOAP_FMAC1 ns1__ArrayOfQUOTE2 * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfQUOTE2(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ArrayOfQUOTE2 * soap_new_ns1__ArrayOfQUOTE2(struct soap *soap, int n = -1) { return soap_instantiate_ns1__ArrayOfQUOTE2(soap, n, NULL, NULL, NULL); }

inline ns1__ArrayOfQUOTE2 * soap_new_req_ns1__ArrayOfQUOTE2(
	struct soap *soap)
{	ns1__ArrayOfQUOTE2 *_p = soap_new_ns1__ArrayOfQUOTE2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__ArrayOfQUOTE2 * soap_new_set_ns1__ArrayOfQUOTE2(
	struct soap *soap,
	const std::vector<ns1__QUOTE2 *> & QUOTE2)
{	ns1__ArrayOfQUOTE2 *_p = soap_new_ns1__ArrayOfQUOTE2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ArrayOfQUOTE2::QUOTE2 = QUOTE2;
	}
	return _p;
}

#ifndef soap_write_ns1__ArrayOfQUOTE2
#define soap_write_ns1__ArrayOfQUOTE2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:ArrayOfQUOTE2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__ArrayOfQUOTE2 * SOAP_FMAC4 soap_get_ns1__ArrayOfQUOTE2(struct soap*, ns1__ArrayOfQUOTE2 *, const char*, const char*);

#ifndef soap_read_ns1__ArrayOfQUOTE2
#define soap_read_ns1__ArrayOfQUOTE2(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_ns1__ArrayOfQUOTE2(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_ns1__ArrayOfQUOTE
#define SOAP_TYPE_ns_ns1__ArrayOfQUOTE (20)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfQUOTE(struct soap*, const char*, int, const ns1__ArrayOfQUOTE *, const char*);
SOAP_FMAC3 ns1__ArrayOfQUOTE * SOAP_FMAC4 soap_in_ns1__ArrayOfQUOTE(struct soap*, const char*, ns1__ArrayOfQUOTE *, const char*);
SOAP_FMAC1 ns1__ArrayOfQUOTE * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfQUOTE(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ArrayOfQUOTE * soap_new_ns1__ArrayOfQUOTE(struct soap *soap, int n = -1) { return soap_instantiate_ns1__ArrayOfQUOTE(soap, n, NULL, NULL, NULL); }

inline ns1__ArrayOfQUOTE * soap_new_req_ns1__ArrayOfQUOTE(
	struct soap *soap)
{	ns1__ArrayOfQUOTE *_p = soap_new_ns1__ArrayOfQUOTE(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__ArrayOfQUOTE * soap_new_set_ns1__ArrayOfQUOTE(
	struct soap *soap,
	const std::vector<ns1__QUOTE *> & QUOTE)
{	ns1__ArrayOfQUOTE *_p = soap_new_ns1__ArrayOfQUOTE(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ArrayOfQUOTE::QUOTE = QUOTE;
	}
	return _p;
}

#ifndef soap_write_ns1__ArrayOfQUOTE
#define soap_write_ns1__ArrayOfQUOTE(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:ArrayOfQUOTE", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__ArrayOfQUOTE * SOAP_FMAC4 soap_get_ns1__ArrayOfQUOTE(struct soap*, ns1__ArrayOfQUOTE *, const char*, const char*);

#ifndef soap_read_ns1__ArrayOfQUOTE
#define soap_read_ns1__ArrayOfQUOTE(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_ns1__ArrayOfQUOTE(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_ns1__QUOTE
#define SOAP_TYPE_ns_ns1__QUOTE (19)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__QUOTE(struct soap*, const char*, int, const ns1__QUOTE *, const char*);
SOAP_FMAC3 ns1__QUOTE * SOAP_FMAC4 soap_in_ns1__QUOTE(struct soap*, const char*, ns1__QUOTE *, const char*);
SOAP_FMAC1 ns1__QUOTE * SOAP_FMAC2 soap_instantiate_ns1__QUOTE(struct soap*, int, const char*, const char*, size_t*);

inline ns1__QUOTE * soap_new_ns1__QUOTE(struct soap *soap, int n = -1) { return soap_instantiate_ns1__QUOTE(soap, n, NULL, NULL, NULL); }

inline ns1__QUOTE * soap_new_req_ns1__QUOTE(
	struct soap *soap,
	time_t DateTime,
	double Open,
	double High,
	double Low,
	double Close,
	LONG64 Volume,
	LONG64 OpenInterest,
	double Previous,
	double Change,
	double Bid,
	double Ask,
	double PreviousClose,
	double NextOpen,
	time_t Modified)
{	ns1__QUOTE *_p = soap_new_ns1__QUOTE(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__QUOTE::DateTime = DateTime;
		_p->ns1__QUOTE::Open = Open;
		_p->ns1__QUOTE::High = High;
		_p->ns1__QUOTE::Low = Low;
		_p->ns1__QUOTE::Close = Close;
		_p->ns1__QUOTE::Volume = Volume;
		_p->ns1__QUOTE::OpenInterest = OpenInterest;
		_p->ns1__QUOTE::Previous = Previous;
		_p->ns1__QUOTE::Change = Change;
		_p->ns1__QUOTE::Bid = Bid;
		_p->ns1__QUOTE::Ask = Ask;
		_p->ns1__QUOTE::PreviousClose = PreviousClose;
		_p->ns1__QUOTE::NextOpen = NextOpen;
		_p->ns1__QUOTE::Modified = Modified;
	}
	return _p;
}

inline ns1__QUOTE * soap_new_set_ns1__QUOTE(
	struct soap *soap,
	std::string *Symbol,
	std::string *Description,
	std::string *Name,
	time_t DateTime,
	double Open,
	double High,
	double Low,
	double Close,
	LONG64 Volume,
	LONG64 OpenInterest,
	double Previous,
	double Change,
	double Bid,
	double Ask,
	double PreviousClose,
	double NextOpen,
	time_t Modified)
{	ns1__QUOTE *_p = soap_new_ns1__QUOTE(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__QUOTE::Symbol = Symbol;
		_p->ns1__QUOTE::Description = Description;
		_p->ns1__QUOTE::Name = Name;
		_p->ns1__QUOTE::DateTime = DateTime;
		_p->ns1__QUOTE::Open = Open;
		_p->ns1__QUOTE::High = High;
		_p->ns1__QUOTE::Low = Low;
		_p->ns1__QUOTE::Close = Close;
		_p->ns1__QUOTE::Volume = Volume;
		_p->ns1__QUOTE::OpenInterest = OpenInterest;
		_p->ns1__QUOTE::Previous = Previous;
		_p->ns1__QUOTE::Change = Change;
		_p->ns1__QUOTE::Bid = Bid;
		_p->ns1__QUOTE::Ask = Ask;
		_p->ns1__QUOTE::PreviousClose = PreviousClose;
		_p->ns1__QUOTE::NextOpen = NextOpen;
		_p->ns1__QUOTE::Modified = Modified;
	}
	return _p;
}

#ifndef soap_write_ns1__QUOTE
#define soap_write_ns1__QUOTE(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:QUOTE", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__QUOTE * SOAP_FMAC4 soap_get_ns1__QUOTE(struct soap*, ns1__QUOTE *, const char*, const char*);

#ifndef soap_read_ns1__QUOTE
#define soap_read_ns1__QUOTE(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_ns1__QUOTE(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_ns1__SYMBOL2
#define SOAP_TYPE_ns_ns1__SYMBOL2 (18)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SYMBOL2(struct soap*, const char*, int, const ns1__SYMBOL2 *, const char*);
SOAP_FMAC3 ns1__SYMBOL2 * SOAP_FMAC4 soap_in_ns1__SYMBOL2(struct soap*, const char*, ns1__SYMBOL2 *, const char*);
SOAP_FMAC1 ns1__SYMBOL2 * SOAP_FMAC2 soap_instantiate_ns1__SYMBOL2(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SYMBOL2 * soap_new_ns1__SYMBOL2(struct soap *soap, int n = -1) { return soap_instantiate_ns1__SYMBOL2(soap, n, NULL, NULL, NULL); }

inline ns1__SYMBOL2 * soap_new_req_ns1__SYMBOL2(
	struct soap *soap)
{	ns1__SYMBOL2 *_p = soap_new_ns1__SYMBOL2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__SYMBOL2 * soap_new_set_ns1__SYMBOL2(
	struct soap *soap,
	std::string *c,
	std::string *n)
{	ns1__SYMBOL2 *_p = soap_new_ns1__SYMBOL2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SYMBOL2::c = c;
		_p->ns1__SYMBOL2::n = n;
	}
	return _p;
}

#ifndef soap_write_ns1__SYMBOL2
#define soap_write_ns1__SYMBOL2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SYMBOL2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__SYMBOL2 * SOAP_FMAC4 soap_get_ns1__SYMBOL2(struct soap*, ns1__SYMBOL2 *, const char*, const char*);

#ifndef soap_read_ns1__SYMBOL2
#define soap_read_ns1__SYMBOL2(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_ns1__SYMBOL2(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_ns1__ArrayOfSYMBOL2
#define SOAP_TYPE_ns_ns1__ArrayOfSYMBOL2 (17)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfSYMBOL2(struct soap*, const char*, int, const ns1__ArrayOfSYMBOL2 *, const char*);
SOAP_FMAC3 ns1__ArrayOfSYMBOL2 * SOAP_FMAC4 soap_in_ns1__ArrayOfSYMBOL2(struct soap*, const char*, ns1__ArrayOfSYMBOL2 *, const char*);
SOAP_FMAC1 ns1__ArrayOfSYMBOL2 * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfSYMBOL2(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ArrayOfSYMBOL2 * soap_new_ns1__ArrayOfSYMBOL2(struct soap *soap, int n = -1) { return soap_instantiate_ns1__ArrayOfSYMBOL2(soap, n, NULL, NULL, NULL); }

inline ns1__ArrayOfSYMBOL2 * soap_new_req_ns1__ArrayOfSYMBOL2(
	struct soap *soap)
{	ns1__ArrayOfSYMBOL2 *_p = soap_new_ns1__ArrayOfSYMBOL2(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__ArrayOfSYMBOL2 * soap_new_set_ns1__ArrayOfSYMBOL2(
	struct soap *soap,
	const std::vector<ns1__SYMBOL2 *> & SYMBOL2)
{	ns1__ArrayOfSYMBOL2 *_p = soap_new_ns1__ArrayOfSYMBOL2(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ArrayOfSYMBOL2::SYMBOL2 = SYMBOL2;
	}
	return _p;
}

#ifndef soap_write_ns1__ArrayOfSYMBOL2
#define soap_write_ns1__ArrayOfSYMBOL2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:ArrayOfSYMBOL2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__ArrayOfSYMBOL2 * SOAP_FMAC4 soap_get_ns1__ArrayOfSYMBOL2(struct soap*, ns1__ArrayOfSYMBOL2 *, const char*, const char*);

#ifndef soap_read_ns1__ArrayOfSYMBOL2
#define soap_read_ns1__ArrayOfSYMBOL2(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_ns1__ArrayOfSYMBOL2(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_ns1__ArrayOfSYMBOL
#define SOAP_TYPE_ns_ns1__ArrayOfSYMBOL (16)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfSYMBOL(struct soap*, const char*, int, const ns1__ArrayOfSYMBOL *, const char*);
SOAP_FMAC3 ns1__ArrayOfSYMBOL * SOAP_FMAC4 soap_in_ns1__ArrayOfSYMBOL(struct soap*, const char*, ns1__ArrayOfSYMBOL *, const char*);
SOAP_FMAC1 ns1__ArrayOfSYMBOL * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfSYMBOL(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ArrayOfSYMBOL * soap_new_ns1__ArrayOfSYMBOL(struct soap *soap, int n = -1) { return soap_instantiate_ns1__ArrayOfSYMBOL(soap, n, NULL, NULL, NULL); }

inline ns1__ArrayOfSYMBOL * soap_new_req_ns1__ArrayOfSYMBOL(
	struct soap *soap)
{	ns1__ArrayOfSYMBOL *_p = soap_new_ns1__ArrayOfSYMBOL(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__ArrayOfSYMBOL * soap_new_set_ns1__ArrayOfSYMBOL(
	struct soap *soap,
	const std::vector<ns1__SYMBOL *> & SYMBOL)
{	ns1__ArrayOfSYMBOL *_p = soap_new_ns1__ArrayOfSYMBOL(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ArrayOfSYMBOL::SYMBOL = SYMBOL;
	}
	return _p;
}

#ifndef soap_write_ns1__ArrayOfSYMBOL
#define soap_write_ns1__ArrayOfSYMBOL(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:ArrayOfSYMBOL", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__ArrayOfSYMBOL * SOAP_FMAC4 soap_get_ns1__ArrayOfSYMBOL(struct soap*, ns1__ArrayOfSYMBOL *, const char*, const char*);

#ifndef soap_read_ns1__ArrayOfSYMBOL
#define soap_read_ns1__ArrayOfSYMBOL(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_ns1__ArrayOfSYMBOL(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_ns1__SYMBOL
#define SOAP_TYPE_ns_ns1__SYMBOL (15)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SYMBOL(struct soap*, const char*, int, const ns1__SYMBOL *, const char*);
SOAP_FMAC3 ns1__SYMBOL * SOAP_FMAC4 soap_in_ns1__SYMBOL(struct soap*, const char*, ns1__SYMBOL *, const char*);
SOAP_FMAC1 ns1__SYMBOL * SOAP_FMAC2 soap_instantiate_ns1__SYMBOL(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SYMBOL * soap_new_ns1__SYMBOL(struct soap *soap, int n = -1) { return soap_instantiate_ns1__SYMBOL(soap, n, NULL, NULL, NULL); }

inline ns1__SYMBOL * soap_new_req_ns1__SYMBOL(
	struct soap *soap,
	time_t DateTime)
{	ns1__SYMBOL *_p = soap_new_ns1__SYMBOL(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SYMBOL::DateTime = DateTime;
	}
	return _p;
}

inline ns1__SYMBOL * soap_new_set_ns1__SYMBOL(
	struct soap *soap,
	std::string *Code,
	std::string *Name,
	std::string *LongName,
	time_t DateTime)
{	ns1__SYMBOL *_p = soap_new_ns1__SYMBOL(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SYMBOL::Code = Code;
		_p->ns1__SYMBOL::Name = Name;
		_p->ns1__SYMBOL::LongName = LongName;
		_p->ns1__SYMBOL::DateTime = DateTime;
	}
	return _p;
}

#ifndef soap_write_ns1__SYMBOL
#define soap_write_ns1__SYMBOL(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:SYMBOL", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__SYMBOL * SOAP_FMAC4 soap_get_ns1__SYMBOL(struct soap*, ns1__SYMBOL *, const char*, const char*);

#ifndef soap_read_ns1__SYMBOL
#define soap_read_ns1__SYMBOL(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_ns1__SYMBOL(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_ns1__ArrayOfEXCHANGE
#define SOAP_TYPE_ns_ns1__ArrayOfEXCHANGE (14)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfEXCHANGE(struct soap*, const char*, int, const ns1__ArrayOfEXCHANGE *, const char*);
SOAP_FMAC3 ns1__ArrayOfEXCHANGE * SOAP_FMAC4 soap_in_ns1__ArrayOfEXCHANGE(struct soap*, const char*, ns1__ArrayOfEXCHANGE *, const char*);
SOAP_FMAC1 ns1__ArrayOfEXCHANGE * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfEXCHANGE(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ArrayOfEXCHANGE * soap_new_ns1__ArrayOfEXCHANGE(struct soap *soap, int n = -1) { return soap_instantiate_ns1__ArrayOfEXCHANGE(soap, n, NULL, NULL, NULL); }

inline ns1__ArrayOfEXCHANGE * soap_new_req_ns1__ArrayOfEXCHANGE(
	struct soap *soap)
{	ns1__ArrayOfEXCHANGE *_p = soap_new_ns1__ArrayOfEXCHANGE(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__ArrayOfEXCHANGE * soap_new_set_ns1__ArrayOfEXCHANGE(
	struct soap *soap,
	const std::vector<ns1__EXCHANGE *> & EXCHANGE)
{	ns1__ArrayOfEXCHANGE *_p = soap_new_ns1__ArrayOfEXCHANGE(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ArrayOfEXCHANGE::EXCHANGE = EXCHANGE;
	}
	return _p;
}

#ifndef soap_write_ns1__ArrayOfEXCHANGE
#define soap_write_ns1__ArrayOfEXCHANGE(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:ArrayOfEXCHANGE", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__ArrayOfEXCHANGE * SOAP_FMAC4 soap_get_ns1__ArrayOfEXCHANGE(struct soap*, ns1__ArrayOfEXCHANGE *, const char*, const char*);

#ifndef soap_read_ns1__ArrayOfEXCHANGE
#define soap_read_ns1__ArrayOfEXCHANGE(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_ns1__ArrayOfEXCHANGE(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_ns1__EXCHANGE
#define SOAP_TYPE_ns_ns1__EXCHANGE (13)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__EXCHANGE(struct soap*, const char*, int, const ns1__EXCHANGE *, const char*);
SOAP_FMAC3 ns1__EXCHANGE * SOAP_FMAC4 soap_in_ns1__EXCHANGE(struct soap*, const char*, ns1__EXCHANGE *, const char*);
SOAP_FMAC1 ns1__EXCHANGE * SOAP_FMAC2 soap_instantiate_ns1__EXCHANGE(struct soap*, int, const char*, const char*, size_t*);

inline ns1__EXCHANGE * soap_new_ns1__EXCHANGE(struct soap *soap, int n = -1) { return soap_instantiate_ns1__EXCHANGE(soap, n, NULL, NULL, NULL); }

inline ns1__EXCHANGE * soap_new_req_ns1__EXCHANGE(
	struct soap *soap,
	time_t LastTradeDateTime,
	int Advances,
	int Declines,
	bool IsIntraday,
	time_t IntradayStartDate,
	bool HasIntradayProduct)
{	ns1__EXCHANGE *_p = soap_new_ns1__EXCHANGE(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__EXCHANGE::LastTradeDateTime = LastTradeDateTime;
		_p->ns1__EXCHANGE::Advances = Advances;
		_p->ns1__EXCHANGE::Declines = Declines;
		_p->ns1__EXCHANGE::IsIntraday = IsIntraday;
		_p->ns1__EXCHANGE::IntradayStartDate = IntradayStartDate;
		_p->ns1__EXCHANGE::HasIntradayProduct = HasIntradayProduct;
	}
	return _p;
}

inline ns1__EXCHANGE * soap_new_set_ns1__EXCHANGE(
	struct soap *soap,
	std::string *Code,
	std::string *Name,
	time_t LastTradeDateTime,
	std::string *Country,
	std::string *Currency,
	int Advances,
	int Declines,
	std::string *Suffix,
	std::string *TimeZone,
	bool IsIntraday,
	time_t IntradayStartDate,
	bool HasIntradayProduct)
{	ns1__EXCHANGE *_p = soap_new_ns1__EXCHANGE(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__EXCHANGE::Code = Code;
		_p->ns1__EXCHANGE::Name = Name;
		_p->ns1__EXCHANGE::LastTradeDateTime = LastTradeDateTime;
		_p->ns1__EXCHANGE::Country = Country;
		_p->ns1__EXCHANGE::Currency = Currency;
		_p->ns1__EXCHANGE::Advances = Advances;
		_p->ns1__EXCHANGE::Declines = Declines;
		_p->ns1__EXCHANGE::Suffix = Suffix;
		_p->ns1__EXCHANGE::TimeZone = TimeZone;
		_p->ns1__EXCHANGE::IsIntraday = IsIntraday;
		_p->ns1__EXCHANGE::IntradayStartDate = IntradayStartDate;
		_p->ns1__EXCHANGE::HasIntradayProduct = HasIntradayProduct;
	}
	return _p;
}

#ifndef soap_write_ns1__EXCHANGE
#define soap_write_ns1__EXCHANGE(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:EXCHANGE", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__EXCHANGE * SOAP_FMAC4 soap_get_ns1__EXCHANGE(struct soap*, ns1__EXCHANGE *, const char*, const char*);

#ifndef soap_read_ns1__EXCHANGE
#define soap_read_ns1__EXCHANGE(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_ns1__EXCHANGE(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_ns1__RESPONSE
#define SOAP_TYPE_ns_ns1__RESPONSE (12)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RESPONSE(struct soap*, const char*, int, const ns1__RESPONSE *, const char*);
SOAP_FMAC3 ns1__RESPONSE * SOAP_FMAC4 soap_in_ns1__RESPONSE(struct soap*, const char*, ns1__RESPONSE *, const char*);
SOAP_FMAC1 ns1__RESPONSE * SOAP_FMAC2 soap_instantiate_ns1__RESPONSE(struct soap*, int, const char*, const char*, size_t*);

inline ns1__RESPONSE * soap_new_ns1__RESPONSE(struct soap *soap, int n = -1) { return soap_instantiate_ns1__RESPONSE(soap, n, NULL, NULL, NULL); }

inline ns1__RESPONSE * soap_new_req_ns1__RESPONSE(
	struct soap *soap,
	time_t Date)
{	ns1__RESPONSE *_p = soap_new_ns1__RESPONSE(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RESPONSE::Date = Date;
	}
	return _p;
}

inline ns1__RESPONSE * soap_new_set_ns1__RESPONSE(
	struct soap *soap,
	ns1__EXCHANGE *EXCHANGE,
	ns1__ArrayOfEXCHANGE *EXCHANGES,
	ns1__SYMBOL *SYMBOL,
	ns1__ArrayOfSYMBOL *SYMBOLS,
	ns1__ArrayOfSYMBOL2 *SYMBOLS2,
	ns1__QUOTE *QUOTE,
	ns1__ArrayOfQUOTE *QUOTES,
	ns1__ArrayOfQUOTE2 *QUOTES2,
	ns1__ArrayOfSPLIT *SPLITS,
	ns1__ArrayOfCountryBase *COUNTRIES,
	ns1__ArrayOfFUNDAMENTAL *FUNDAMENTALS,
	ns1__ArrayOfTECHNICAL *TECHNICALS,
	ns1__ArrayOfSYMBOLCHANGE *SYMBOLCHANGES,
	ns1__ArrayOfNEWS *NEWSLIST,
	std::string *CHART,
	std::string *MEMBERSHIP,
	std::string *VERSION,
	std::string *MONTHS,
	ns1__ArrayOfDATAFORMAT *DATAFORMATS,
	std::string *Source,
	std::string *Message,
	time_t Date)
{	ns1__RESPONSE *_p = soap_new_ns1__RESPONSE(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RESPONSE::EXCHANGE = EXCHANGE;
		_p->ns1__RESPONSE::EXCHANGES = EXCHANGES;
		_p->ns1__RESPONSE::SYMBOL = SYMBOL;
		_p->ns1__RESPONSE::SYMBOLS = SYMBOLS;
		_p->ns1__RESPONSE::SYMBOLS2 = SYMBOLS2;
		_p->ns1__RESPONSE::QUOTE = QUOTE;
		_p->ns1__RESPONSE::QUOTES = QUOTES;
		_p->ns1__RESPONSE::QUOTES2 = QUOTES2;
		_p->ns1__RESPONSE::SPLITS = SPLITS;
		_p->ns1__RESPONSE::COUNTRIES = COUNTRIES;
		_p->ns1__RESPONSE::FUNDAMENTALS = FUNDAMENTALS;
		_p->ns1__RESPONSE::TECHNICALS = TECHNICALS;
		_p->ns1__RESPONSE::SYMBOLCHANGES = SYMBOLCHANGES;
		_p->ns1__RESPONSE::NEWSLIST = NEWSLIST;
		_p->ns1__RESPONSE::CHART = CHART;
		_p->ns1__RESPONSE::MEMBERSHIP = MEMBERSHIP;
		_p->ns1__RESPONSE::VERSION = VERSION;
		_p->ns1__RESPONSE::MONTHS = MONTHS;
		_p->ns1__RESPONSE::DATAFORMATS = DATAFORMATS;
		_p->ns1__RESPONSE::Source = Source;
		_p->ns1__RESPONSE::Message = Message;
		_p->ns1__RESPONSE::Date = Date;
	}
	return _p;
}

#ifndef soap_write_ns1__RESPONSE
#define soap_write_ns1__RESPONSE(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:RESPONSE", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__RESPONSE * SOAP_FMAC4 soap_get_ns1__RESPONSE(struct soap*, ns1__RESPONSE *, const char*, const char*);

#ifndef soap_read_ns1__RESPONSE
#define soap_read_ns1__RESPONSE(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_ns1__RESPONSE(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_ns1__LOGINRESPONSE
#define SOAP_TYPE_ns_ns1__LOGINRESPONSE (11)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__LOGINRESPONSE(struct soap*, const char*, int, const ns1__LOGINRESPONSE *, const char*);
SOAP_FMAC3 ns1__LOGINRESPONSE * SOAP_FMAC4 soap_in_ns1__LOGINRESPONSE(struct soap*, const char*, ns1__LOGINRESPONSE *, const char*);
SOAP_FMAC1 ns1__LOGINRESPONSE * SOAP_FMAC2 soap_instantiate_ns1__LOGINRESPONSE(struct soap*, int, const char*, const char*, size_t*);

inline ns1__LOGINRESPONSE * soap_new_ns1__LOGINRESPONSE(struct soap *soap, int n = -1) { return soap_instantiate_ns1__LOGINRESPONSE(soap, n, NULL, NULL, NULL); }

inline ns1__LOGINRESPONSE * soap_new_req_ns1__LOGINRESPONSE(
	struct soap *soap,
	bool Header,
	bool Suffix)
{	ns1__LOGINRESPONSE *_p = soap_new_ns1__LOGINRESPONSE(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__LOGINRESPONSE::Header = Header;
		_p->ns1__LOGINRESPONSE::Suffix = Suffix;
	}
	return _p;
}

inline ns1__LOGINRESPONSE * soap_new_set_ns1__LOGINRESPONSE(
	struct soap *soap,
	std::string *Message,
	std::string *Token,
	std::string *DataFormat,
	bool Header,
	bool Suffix)
{	ns1__LOGINRESPONSE *_p = soap_new_ns1__LOGINRESPONSE(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__LOGINRESPONSE::Message = Message;
		_p->ns1__LOGINRESPONSE::Token = Token;
		_p->ns1__LOGINRESPONSE::DataFormat = DataFormat;
		_p->ns1__LOGINRESPONSE::Header = Header;
		_p->ns1__LOGINRESPONSE::Suffix = Suffix;
	}
	return _p;
}

#ifndef soap_write_ns1__LOGINRESPONSE
#define soap_write_ns1__LOGINRESPONSE(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "ns1:LOGINRESPONSE", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__LOGINRESPONSE * SOAP_FMAC4 soap_get_ns1__LOGINRESPONSE(struct soap*, ns1__LOGINRESPONSE *, const char*, const char*);

#ifndef soap_read_ns1__LOGINRESPONSE
#define soap_read_ns1__LOGINRESPONSE(soap, data) ( ((data) ? ((data)->soap_default(soap), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_ns1__LOGINRESPONSE(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_ns_SOAP_ENV__Fault
#define SOAP_TYPE_ns_SOAP_ENV__Fault (504)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_SOAP_ENV__Fault(soap, data), 0) || ns::soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( ((data) ? (ns::soap_default_SOAP_ENV__Fault(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_SOAP_ENV__Fault(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_ns_SOAP_ENV__Reason
#define SOAP_TYPE_ns_SOAP_ENV__Reason (503)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_SOAP_ENV__Reason(soap, data), 0) || ns::soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( ((data) ? (ns::soap_default_SOAP_ENV__Reason(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_SOAP_ENV__Reason(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_ns_SOAP_ENV__Detail
#define SOAP_TYPE_ns_SOAP_ENV__Detail (500)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_SOAP_ENV__Detail(soap, data), 0) || ns::soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( ((data) ? (ns::soap_default_SOAP_ENV__Detail(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_SOAP_ENV__Detail(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_ns_SOAP_ENV__Code
#define SOAP_TYPE_ns_SOAP_ENV__Code (498)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_SOAP_ENV__Code(soap, data), 0) || ns::soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( ((data) ? (ns::soap_default_SOAP_ENV__Code(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_SOAP_ENV__Code(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_ns_SOAP_ENV__Header
#define SOAP_TYPE_ns_SOAP_ENV__Header (497)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_SOAP_ENV__Header(soap, data), 0) || ns::soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( ((data) ? (ns::soap_default_SOAP_ENV__Header(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_SOAP_ENV__Header(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE_ns___ns1__ValidateAccess___
#define SOAP_TYPE_ns___ns1__ValidateAccess___ (496)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ValidateAccess___(struct soap*, struct __ns1__ValidateAccess___ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ValidateAccess___(struct soap*, const struct __ns1__ValidateAccess___ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ValidateAccess___(struct soap*, const char*, int, const struct __ns1__ValidateAccess___ *, const char*);
SOAP_FMAC3 struct __ns1__ValidateAccess___ * SOAP_FMAC4 soap_in___ns1__ValidateAccess___(struct soap*, const char*, struct __ns1__ValidateAccess___ *, const char*);
SOAP_FMAC1 struct __ns1__ValidateAccess___ * SOAP_FMAC2 soap_instantiate___ns1__ValidateAccess___(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ValidateAccess___ * soap_new___ns1__ValidateAccess___(struct soap *soap, int n = -1) { return soap_instantiate___ns1__ValidateAccess___(soap, n, NULL, NULL, NULL); }

inline struct __ns1__ValidateAccess___ * soap_new_req___ns1__ValidateAccess___(
	struct soap *soap,
	const std::string& Token,
	const std::string& Exchange,
	const std::string& QuoteDate,
	const std::string& Period)
{	struct __ns1__ValidateAccess___ *_p = soap_new___ns1__ValidateAccess___(soap);
	if (_p)
	{	soap_default___ns1__ValidateAccess___(soap, _p);
		_p->Token = Token;
		_p->Exchange = Exchange;
		_p->QuoteDate = QuoteDate;
		_p->Period = Period;
	}
	return _p;
}

inline struct __ns1__ValidateAccess___ * soap_new_set___ns1__ValidateAccess___(
	struct soap *soap,
	const std::string& Token,
	const std::string& Exchange,
	const std::string& QuoteDate,
	const std::string& Period)
{	struct __ns1__ValidateAccess___ *_p = soap_new___ns1__ValidateAccess___(soap);
	if (_p)
	{	soap_default___ns1__ValidateAccess___(soap, _p);
		_p->Token = Token;
		_p->Exchange = Exchange;
		_p->QuoteDate = QuoteDate;
		_p->Period = Period;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ValidateAccess___(struct soap*, const struct __ns1__ValidateAccess___ *, const char*, const char*);

#ifndef soap_write___ns1__ValidateAccess___
#define soap_write___ns1__ValidateAccess___(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__ValidateAccess___(soap, data), 0) || ns::soap_put___ns1__ValidateAccess___(soap, data, "-ns1:ValidateAccess", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__ValidateAccess___ * SOAP_FMAC4 soap_get___ns1__ValidateAccess___(struct soap*, struct __ns1__ValidateAccess___ *, const char*, const char*);

#ifndef soap_read___ns1__ValidateAccess___
#define soap_read___ns1__ValidateAccess___(soap, data) ( ((data) ? (ns::soap_default___ns1__ValidateAccess___(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__ValidateAccess___(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__UpdateDataFormat___
#define SOAP_TYPE_ns___ns1__UpdateDataFormat___ (494)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__UpdateDataFormat___(struct soap*, struct __ns1__UpdateDataFormat___ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__UpdateDataFormat___(struct soap*, const struct __ns1__UpdateDataFormat___ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__UpdateDataFormat___(struct soap*, const char*, int, const struct __ns1__UpdateDataFormat___ *, const char*);
SOAP_FMAC3 struct __ns1__UpdateDataFormat___ * SOAP_FMAC4 soap_in___ns1__UpdateDataFormat___(struct soap*, const char*, struct __ns1__UpdateDataFormat___ *, const char*);
SOAP_FMAC1 struct __ns1__UpdateDataFormat___ * SOAP_FMAC2 soap_instantiate___ns1__UpdateDataFormat___(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__UpdateDataFormat___ * soap_new___ns1__UpdateDataFormat___(struct soap *soap, int n = -1) { return soap_instantiate___ns1__UpdateDataFormat___(soap, n, NULL, NULL, NULL); }

inline struct __ns1__UpdateDataFormat___ * soap_new_req___ns1__UpdateDataFormat___(
	struct soap *soap,
	const std::string& Token,
	const std::string& DataFormat,
	const std::string& IncludeHeader,
	const std::string& IncludeSuffix)
{	struct __ns1__UpdateDataFormat___ *_p = soap_new___ns1__UpdateDataFormat___(soap);
	if (_p)
	{	soap_default___ns1__UpdateDataFormat___(soap, _p);
		_p->Token = Token;
		_p->DataFormat = DataFormat;
		_p->IncludeHeader = IncludeHeader;
		_p->IncludeSuffix = IncludeSuffix;
	}
	return _p;
}

inline struct __ns1__UpdateDataFormat___ * soap_new_set___ns1__UpdateDataFormat___(
	struct soap *soap,
	const std::string& Token,
	const std::string& DataFormat,
	const std::string& IncludeHeader,
	const std::string& IncludeSuffix)
{	struct __ns1__UpdateDataFormat___ *_p = soap_new___ns1__UpdateDataFormat___(soap);
	if (_p)
	{	soap_default___ns1__UpdateDataFormat___(soap, _p);
		_p->Token = Token;
		_p->DataFormat = DataFormat;
		_p->IncludeHeader = IncludeHeader;
		_p->IncludeSuffix = IncludeSuffix;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__UpdateDataFormat___(struct soap*, const struct __ns1__UpdateDataFormat___ *, const char*, const char*);

#ifndef soap_write___ns1__UpdateDataFormat___
#define soap_write___ns1__UpdateDataFormat___(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__UpdateDataFormat___(soap, data), 0) || ns::soap_put___ns1__UpdateDataFormat___(soap, data, "-ns1:UpdateDataFormat", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__UpdateDataFormat___ * SOAP_FMAC4 soap_get___ns1__UpdateDataFormat___(struct soap*, struct __ns1__UpdateDataFormat___ *, const char*, const char*);

#ifndef soap_read___ns1__UpdateDataFormat___
#define soap_read___ns1__UpdateDataFormat___(soap, data) ( ((data) ? (ns::soap_default___ns1__UpdateDataFormat___(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__UpdateDataFormat___(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__DataFormats___
#define SOAP_TYPE_ns___ns1__DataFormats___ (492)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DataFormats___(struct soap*, struct __ns1__DataFormats___ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DataFormats___(struct soap*, const struct __ns1__DataFormats___ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DataFormats___(struct soap*, const char*, int, const struct __ns1__DataFormats___ *, const char*);
SOAP_FMAC3 struct __ns1__DataFormats___ * SOAP_FMAC4 soap_in___ns1__DataFormats___(struct soap*, const char*, struct __ns1__DataFormats___ *, const char*);
SOAP_FMAC1 struct __ns1__DataFormats___ * SOAP_FMAC2 soap_instantiate___ns1__DataFormats___(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__DataFormats___ * soap_new___ns1__DataFormats___(struct soap *soap, int n = -1) { return soap_instantiate___ns1__DataFormats___(soap, n, NULL, NULL, NULL); }

inline struct __ns1__DataFormats___ * soap_new_req___ns1__DataFormats___(
	struct soap *soap,
	const std::string& Token)
{	struct __ns1__DataFormats___ *_p = soap_new___ns1__DataFormats___(soap);
	if (_p)
	{	soap_default___ns1__DataFormats___(soap, _p);
		_p->Token = Token;
	}
	return _p;
}

inline struct __ns1__DataFormats___ * soap_new_set___ns1__DataFormats___(
	struct soap *soap,
	const std::string& Token)
{	struct __ns1__DataFormats___ *_p = soap_new___ns1__DataFormats___(soap);
	if (_p)
	{	soap_default___ns1__DataFormats___(soap, _p);
		_p->Token = Token;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DataFormats___(struct soap*, const struct __ns1__DataFormats___ *, const char*, const char*);

#ifndef soap_write___ns1__DataFormats___
#define soap_write___ns1__DataFormats___(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__DataFormats___(soap, data), 0) || ns::soap_put___ns1__DataFormats___(soap, data, "-ns1:DataFormats", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__DataFormats___ * SOAP_FMAC4 soap_get___ns1__DataFormats___(struct soap*, struct __ns1__DataFormats___ *, const char*, const char*);

#ifndef soap_read___ns1__DataFormats___
#define soap_read___ns1__DataFormats___(soap, data) ( ((data) ? (ns::soap_default___ns1__DataFormats___(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__DataFormats___(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__DataClientLatestVersion___
#define SOAP_TYPE_ns___ns1__DataClientLatestVersion___ (490)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DataClientLatestVersion___(struct soap*, struct __ns1__DataClientLatestVersion___ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DataClientLatestVersion___(struct soap*, const struct __ns1__DataClientLatestVersion___ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DataClientLatestVersion___(struct soap*, const char*, int, const struct __ns1__DataClientLatestVersion___ *, const char*);
SOAP_FMAC3 struct __ns1__DataClientLatestVersion___ * SOAP_FMAC4 soap_in___ns1__DataClientLatestVersion___(struct soap*, const char*, struct __ns1__DataClientLatestVersion___ *, const char*);
SOAP_FMAC1 struct __ns1__DataClientLatestVersion___ * SOAP_FMAC2 soap_instantiate___ns1__DataClientLatestVersion___(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__DataClientLatestVersion___ * soap_new___ns1__DataClientLatestVersion___(struct soap *soap, int n = -1) { return soap_instantiate___ns1__DataClientLatestVersion___(soap, n, NULL, NULL, NULL); }

inline struct __ns1__DataClientLatestVersion___ * soap_new_req___ns1__DataClientLatestVersion___(
	struct soap *soap,
	const std::string& Token)
{	struct __ns1__DataClientLatestVersion___ *_p = soap_new___ns1__DataClientLatestVersion___(soap);
	if (_p)
	{	soap_default___ns1__DataClientLatestVersion___(soap, _p);
		_p->Token = Token;
	}
	return _p;
}

inline struct __ns1__DataClientLatestVersion___ * soap_new_set___ns1__DataClientLatestVersion___(
	struct soap *soap,
	const std::string& Token)
{	struct __ns1__DataClientLatestVersion___ *_p = soap_new___ns1__DataClientLatestVersion___(soap);
	if (_p)
	{	soap_default___ns1__DataClientLatestVersion___(soap, _p);
		_p->Token = Token;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DataClientLatestVersion___(struct soap*, const struct __ns1__DataClientLatestVersion___ *, const char*, const char*);

#ifndef soap_write___ns1__DataClientLatestVersion___
#define soap_write___ns1__DataClientLatestVersion___(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__DataClientLatestVersion___(soap, data), 0) || ns::soap_put___ns1__DataClientLatestVersion___(soap, data, "-ns1:DataClientLatestVersion", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__DataClientLatestVersion___ * SOAP_FMAC4 soap_get___ns1__DataClientLatestVersion___(struct soap*, struct __ns1__DataClientLatestVersion___ *, const char*, const char*);

#ifndef soap_read___ns1__DataClientLatestVersion___
#define soap_read___ns1__DataClientLatestVersion___(soap, data) ( ((data) ? (ns::soap_default___ns1__DataClientLatestVersion___(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__DataClientLatestVersion___(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__SymbolChangesByExchange___
#define SOAP_TYPE_ns___ns1__SymbolChangesByExchange___ (488)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SymbolChangesByExchange___(struct soap*, struct __ns1__SymbolChangesByExchange___ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SymbolChangesByExchange___(struct soap*, const struct __ns1__SymbolChangesByExchange___ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SymbolChangesByExchange___(struct soap*, const char*, int, const struct __ns1__SymbolChangesByExchange___ *, const char*);
SOAP_FMAC3 struct __ns1__SymbolChangesByExchange___ * SOAP_FMAC4 soap_in___ns1__SymbolChangesByExchange___(struct soap*, const char*, struct __ns1__SymbolChangesByExchange___ *, const char*);
SOAP_FMAC1 struct __ns1__SymbolChangesByExchange___ * SOAP_FMAC2 soap_instantiate___ns1__SymbolChangesByExchange___(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SymbolChangesByExchange___ * soap_new___ns1__SymbolChangesByExchange___(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SymbolChangesByExchange___(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SymbolChangesByExchange___ * soap_new_req___ns1__SymbolChangesByExchange___(
	struct soap *soap,
	const std::string& Token,
	const std::string& Exchange)
{	struct __ns1__SymbolChangesByExchange___ *_p = soap_new___ns1__SymbolChangesByExchange___(soap);
	if (_p)
	{	soap_default___ns1__SymbolChangesByExchange___(soap, _p);
		_p->Token = Token;
		_p->Exchange = Exchange;
	}
	return _p;
}

inline struct __ns1__SymbolChangesByExchange___ * soap_new_set___ns1__SymbolChangesByExchange___(
	struct soap *soap,
	const std::string& Token,
	const std::string& Exchange)
{	struct __ns1__SymbolChangesByExchange___ *_p = soap_new___ns1__SymbolChangesByExchange___(soap);
	if (_p)
	{	soap_default___ns1__SymbolChangesByExchange___(soap, _p);
		_p->Token = Token;
		_p->Exchange = Exchange;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SymbolChangesByExchange___(struct soap*, const struct __ns1__SymbolChangesByExchange___ *, const char*, const char*);

#ifndef soap_write___ns1__SymbolChangesByExchange___
#define soap_write___ns1__SymbolChangesByExchange___(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__SymbolChangesByExchange___(soap, data), 0) || ns::soap_put___ns1__SymbolChangesByExchange___(soap, data, "-ns1:SymbolChangesByExchange", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SymbolChangesByExchange___ * SOAP_FMAC4 soap_get___ns1__SymbolChangesByExchange___(struct soap*, struct __ns1__SymbolChangesByExchange___ *, const char*, const char*);

#ifndef soap_read___ns1__SymbolChangesByExchange___
#define soap_read___ns1__SymbolChangesByExchange___(soap, data) ( ((data) ? (ns::soap_default___ns1__SymbolChangesByExchange___(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__SymbolChangesByExchange___(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__QuoteListByDatePeriod2___
#define SOAP_TYPE_ns___ns1__QuoteListByDatePeriod2___ (486)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__QuoteListByDatePeriod2___(struct soap*, struct __ns1__QuoteListByDatePeriod2___ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__QuoteListByDatePeriod2___(struct soap*, const struct __ns1__QuoteListByDatePeriod2___ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__QuoteListByDatePeriod2___(struct soap*, const char*, int, const struct __ns1__QuoteListByDatePeriod2___ *, const char*);
SOAP_FMAC3 struct __ns1__QuoteListByDatePeriod2___ * SOAP_FMAC4 soap_in___ns1__QuoteListByDatePeriod2___(struct soap*, const char*, struct __ns1__QuoteListByDatePeriod2___ *, const char*);
SOAP_FMAC1 struct __ns1__QuoteListByDatePeriod2___ * SOAP_FMAC2 soap_instantiate___ns1__QuoteListByDatePeriod2___(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__QuoteListByDatePeriod2___ * soap_new___ns1__QuoteListByDatePeriod2___(struct soap *soap, int n = -1) { return soap_instantiate___ns1__QuoteListByDatePeriod2___(soap, n, NULL, NULL, NULL); }

inline struct __ns1__QuoteListByDatePeriod2___ * soap_new_req___ns1__QuoteListByDatePeriod2___(
	struct soap *soap,
	const std::string& Token,
	const std::string& Exchange,
	const std::string& QuoteDate,
	const std::string& Period)
{	struct __ns1__QuoteListByDatePeriod2___ *_p = soap_new___ns1__QuoteListByDatePeriod2___(soap);
	if (_p)
	{	soap_default___ns1__QuoteListByDatePeriod2___(soap, _p);
		_p->Token = Token;
		_p->Exchange = Exchange;
		_p->QuoteDate = QuoteDate;
		_p->Period = Period;
	}
	return _p;
}

inline struct __ns1__QuoteListByDatePeriod2___ * soap_new_set___ns1__QuoteListByDatePeriod2___(
	struct soap *soap,
	const std::string& Token,
	const std::string& Exchange,
	const std::string& QuoteDate,
	const std::string& Period)
{	struct __ns1__QuoteListByDatePeriod2___ *_p = soap_new___ns1__QuoteListByDatePeriod2___(soap);
	if (_p)
	{	soap_default___ns1__QuoteListByDatePeriod2___(soap, _p);
		_p->Token = Token;
		_p->Exchange = Exchange;
		_p->QuoteDate = QuoteDate;
		_p->Period = Period;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__QuoteListByDatePeriod2___(struct soap*, const struct __ns1__QuoteListByDatePeriod2___ *, const char*, const char*);

#ifndef soap_write___ns1__QuoteListByDatePeriod2___
#define soap_write___ns1__QuoteListByDatePeriod2___(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__QuoteListByDatePeriod2___(soap, data), 0) || ns::soap_put___ns1__QuoteListByDatePeriod2___(soap, data, "-ns1:QuoteListByDatePeriod2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__QuoteListByDatePeriod2___ * SOAP_FMAC4 soap_get___ns1__QuoteListByDatePeriod2___(struct soap*, struct __ns1__QuoteListByDatePeriod2___ *, const char*, const char*);

#ifndef soap_read___ns1__QuoteListByDatePeriod2___
#define soap_read___ns1__QuoteListByDatePeriod2___(soap, data) ( ((data) ? (ns::soap_default___ns1__QuoteListByDatePeriod2___(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__QuoteListByDatePeriod2___(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__QuoteListByDatePeriod___
#define SOAP_TYPE_ns___ns1__QuoteListByDatePeriod___ (484)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__QuoteListByDatePeriod___(struct soap*, struct __ns1__QuoteListByDatePeriod___ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__QuoteListByDatePeriod___(struct soap*, const struct __ns1__QuoteListByDatePeriod___ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__QuoteListByDatePeriod___(struct soap*, const char*, int, const struct __ns1__QuoteListByDatePeriod___ *, const char*);
SOAP_FMAC3 struct __ns1__QuoteListByDatePeriod___ * SOAP_FMAC4 soap_in___ns1__QuoteListByDatePeriod___(struct soap*, const char*, struct __ns1__QuoteListByDatePeriod___ *, const char*);
SOAP_FMAC1 struct __ns1__QuoteListByDatePeriod___ * SOAP_FMAC2 soap_instantiate___ns1__QuoteListByDatePeriod___(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__QuoteListByDatePeriod___ * soap_new___ns1__QuoteListByDatePeriod___(struct soap *soap, int n = -1) { return soap_instantiate___ns1__QuoteListByDatePeriod___(soap, n, NULL, NULL, NULL); }

inline struct __ns1__QuoteListByDatePeriod___ * soap_new_req___ns1__QuoteListByDatePeriod___(
	struct soap *soap,
	const std::string& Token,
	const std::string& Exchange,
	const std::string& QuoteDate,
	const std::string& Period)
{	struct __ns1__QuoteListByDatePeriod___ *_p = soap_new___ns1__QuoteListByDatePeriod___(soap);
	if (_p)
	{	soap_default___ns1__QuoteListByDatePeriod___(soap, _p);
		_p->Token = Token;
		_p->Exchange = Exchange;
		_p->QuoteDate = QuoteDate;
		_p->Period = Period;
	}
	return _p;
}

inline struct __ns1__QuoteListByDatePeriod___ * soap_new_set___ns1__QuoteListByDatePeriod___(
	struct soap *soap,
	const std::string& Token,
	const std::string& Exchange,
	const std::string& QuoteDate,
	const std::string& Period)
{	struct __ns1__QuoteListByDatePeriod___ *_p = soap_new___ns1__QuoteListByDatePeriod___(soap);
	if (_p)
	{	soap_default___ns1__QuoteListByDatePeriod___(soap, _p);
		_p->Token = Token;
		_p->Exchange = Exchange;
		_p->QuoteDate = QuoteDate;
		_p->Period = Period;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__QuoteListByDatePeriod___(struct soap*, const struct __ns1__QuoteListByDatePeriod___ *, const char*, const char*);

#ifndef soap_write___ns1__QuoteListByDatePeriod___
#define soap_write___ns1__QuoteListByDatePeriod___(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__QuoteListByDatePeriod___(soap, data), 0) || ns::soap_put___ns1__QuoteListByDatePeriod___(soap, data, "-ns1:QuoteListByDatePeriod", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__QuoteListByDatePeriod___ * SOAP_FMAC4 soap_get___ns1__QuoteListByDatePeriod___(struct soap*, struct __ns1__QuoteListByDatePeriod___ *, const char*, const char*);

#ifndef soap_read___ns1__QuoteListByDatePeriod___
#define soap_read___ns1__QuoteListByDatePeriod___(soap, data) ( ((data) ? (ns::soap_default___ns1__QuoteListByDatePeriod___(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__QuoteListByDatePeriod___(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__SymbolHistoryPeriodByDateRange___
#define SOAP_TYPE_ns___ns1__SymbolHistoryPeriodByDateRange___ (482)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SymbolHistoryPeriodByDateRange___(struct soap*, struct __ns1__SymbolHistoryPeriodByDateRange___ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SymbolHistoryPeriodByDateRange___(struct soap*, const struct __ns1__SymbolHistoryPeriodByDateRange___ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SymbolHistoryPeriodByDateRange___(struct soap*, const char*, int, const struct __ns1__SymbolHistoryPeriodByDateRange___ *, const char*);
SOAP_FMAC3 struct __ns1__SymbolHistoryPeriodByDateRange___ * SOAP_FMAC4 soap_in___ns1__SymbolHistoryPeriodByDateRange___(struct soap*, const char*, struct __ns1__SymbolHistoryPeriodByDateRange___ *, const char*);
SOAP_FMAC1 struct __ns1__SymbolHistoryPeriodByDateRange___ * SOAP_FMAC2 soap_instantiate___ns1__SymbolHistoryPeriodByDateRange___(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SymbolHistoryPeriodByDateRange___ * soap_new___ns1__SymbolHistoryPeriodByDateRange___(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SymbolHistoryPeriodByDateRange___(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SymbolHistoryPeriodByDateRange___ * soap_new_req___ns1__SymbolHistoryPeriodByDateRange___(
	struct soap *soap,
	const std::string& Token,
	const std::string& Exchange,
	const std::string& Symbol,
	const std::string& StartDate,
	const std::string& EndDate,
	const std::string& Period)
{	struct __ns1__SymbolHistoryPeriodByDateRange___ *_p = soap_new___ns1__SymbolHistoryPeriodByDateRange___(soap);
	if (_p)
	{	soap_default___ns1__SymbolHistoryPeriodByDateRange___(soap, _p);
		_p->Token = Token;
		_p->Exchange = Exchange;
		_p->Symbol = Symbol;
		_p->StartDate = StartDate;
		_p->EndDate = EndDate;
		_p->Period = Period;
	}
	return _p;
}

inline struct __ns1__SymbolHistoryPeriodByDateRange___ * soap_new_set___ns1__SymbolHistoryPeriodByDateRange___(
	struct soap *soap,
	const std::string& Token,
	const std::string& Exchange,
	const std::string& Symbol,
	const std::string& StartDate,
	const std::string& EndDate,
	const std::string& Period)
{	struct __ns1__SymbolHistoryPeriodByDateRange___ *_p = soap_new___ns1__SymbolHistoryPeriodByDateRange___(soap);
	if (_p)
	{	soap_default___ns1__SymbolHistoryPeriodByDateRange___(soap, _p);
		_p->Token = Token;
		_p->Exchange = Exchange;
		_p->Symbol = Symbol;
		_p->StartDate = StartDate;
		_p->EndDate = EndDate;
		_p->Period = Period;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SymbolHistoryPeriodByDateRange___(struct soap*, const struct __ns1__SymbolHistoryPeriodByDateRange___ *, const char*, const char*);

#ifndef soap_write___ns1__SymbolHistoryPeriodByDateRange___
#define soap_write___ns1__SymbolHistoryPeriodByDateRange___(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__SymbolHistoryPeriodByDateRange___(soap, data), 0) || ns::soap_put___ns1__SymbolHistoryPeriodByDateRange___(soap, data, "-ns1:SymbolHistoryPeriodByDateRange", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SymbolHistoryPeriodByDateRange___ * SOAP_FMAC4 soap_get___ns1__SymbolHistoryPeriodByDateRange___(struct soap*, struct __ns1__SymbolHistoryPeriodByDateRange___ *, const char*, const char*);

#ifndef soap_read___ns1__SymbolHistoryPeriodByDateRange___
#define soap_read___ns1__SymbolHistoryPeriodByDateRange___(soap, data) ( ((data) ? (ns::soap_default___ns1__SymbolHistoryPeriodByDateRange___(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__SymbolHistoryPeriodByDateRange___(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__SymbolHistoryPeriod___
#define SOAP_TYPE_ns___ns1__SymbolHistoryPeriod___ (480)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SymbolHistoryPeriod___(struct soap*, struct __ns1__SymbolHistoryPeriod___ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SymbolHistoryPeriod___(struct soap*, const struct __ns1__SymbolHistoryPeriod___ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SymbolHistoryPeriod___(struct soap*, const char*, int, const struct __ns1__SymbolHistoryPeriod___ *, const char*);
SOAP_FMAC3 struct __ns1__SymbolHistoryPeriod___ * SOAP_FMAC4 soap_in___ns1__SymbolHistoryPeriod___(struct soap*, const char*, struct __ns1__SymbolHistoryPeriod___ *, const char*);
SOAP_FMAC1 struct __ns1__SymbolHistoryPeriod___ * SOAP_FMAC2 soap_instantiate___ns1__SymbolHistoryPeriod___(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SymbolHistoryPeriod___ * soap_new___ns1__SymbolHistoryPeriod___(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SymbolHistoryPeriod___(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SymbolHistoryPeriod___ * soap_new_req___ns1__SymbolHistoryPeriod___(
	struct soap *soap,
	const std::string& Token,
	const std::string& Exchange,
	const std::string& Symbol,
	const std::string& Date,
	const std::string& Period)
{	struct __ns1__SymbolHistoryPeriod___ *_p = soap_new___ns1__SymbolHistoryPeriod___(soap);
	if (_p)
	{	soap_default___ns1__SymbolHistoryPeriod___(soap, _p);
		_p->Token = Token;
		_p->Exchange = Exchange;
		_p->Symbol = Symbol;
		_p->Date = Date;
		_p->Period = Period;
	}
	return _p;
}

inline struct __ns1__SymbolHistoryPeriod___ * soap_new_set___ns1__SymbolHistoryPeriod___(
	struct soap *soap,
	const std::string& Token,
	const std::string& Exchange,
	const std::string& Symbol,
	const std::string& Date,
	const std::string& Period)
{	struct __ns1__SymbolHistoryPeriod___ *_p = soap_new___ns1__SymbolHistoryPeriod___(soap);
	if (_p)
	{	soap_default___ns1__SymbolHistoryPeriod___(soap, _p);
		_p->Token = Token;
		_p->Exchange = Exchange;
		_p->Symbol = Symbol;
		_p->Date = Date;
		_p->Period = Period;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SymbolHistoryPeriod___(struct soap*, const struct __ns1__SymbolHistoryPeriod___ *, const char*, const char*);

#ifndef soap_write___ns1__SymbolHistoryPeriod___
#define soap_write___ns1__SymbolHistoryPeriod___(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__SymbolHistoryPeriod___(soap, data), 0) || ns::soap_put___ns1__SymbolHistoryPeriod___(soap, data, "-ns1:SymbolHistoryPeriod", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SymbolHistoryPeriod___ * SOAP_FMAC4 soap_get___ns1__SymbolHistoryPeriod___(struct soap*, struct __ns1__SymbolHistoryPeriod___ *, const char*, const char*);

#ifndef soap_read___ns1__SymbolHistoryPeriod___
#define soap_read___ns1__SymbolHistoryPeriod___(soap, data) ( ((data) ? (ns::soap_default___ns1__SymbolHistoryPeriod___(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__SymbolHistoryPeriod___(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__CountryList___
#define SOAP_TYPE_ns___ns1__CountryList___ (478)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CountryList___(struct soap*, struct __ns1__CountryList___ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CountryList___(struct soap*, const struct __ns1__CountryList___ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CountryList___(struct soap*, const char*, int, const struct __ns1__CountryList___ *, const char*);
SOAP_FMAC3 struct __ns1__CountryList___ * SOAP_FMAC4 soap_in___ns1__CountryList___(struct soap*, const char*, struct __ns1__CountryList___ *, const char*);
SOAP_FMAC1 struct __ns1__CountryList___ * SOAP_FMAC2 soap_instantiate___ns1__CountryList___(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__CountryList___ * soap_new___ns1__CountryList___(struct soap *soap, int n = -1) { return soap_instantiate___ns1__CountryList___(soap, n, NULL, NULL, NULL); }

inline struct __ns1__CountryList___ * soap_new_req___ns1__CountryList___(
	struct soap *soap,
	const std::string& Token)
{	struct __ns1__CountryList___ *_p = soap_new___ns1__CountryList___(soap);
	if (_p)
	{	soap_default___ns1__CountryList___(soap, _p);
		_p->Token = Token;
	}
	return _p;
}

inline struct __ns1__CountryList___ * soap_new_set___ns1__CountryList___(
	struct soap *soap,
	const std::string& Token)
{	struct __ns1__CountryList___ *_p = soap_new___ns1__CountryList___(soap);
	if (_p)
	{	soap_default___ns1__CountryList___(soap, _p);
		_p->Token = Token;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CountryList___(struct soap*, const struct __ns1__CountryList___ *, const char*, const char*);

#ifndef soap_write___ns1__CountryList___
#define soap_write___ns1__CountryList___(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__CountryList___(soap, data), 0) || ns::soap_put___ns1__CountryList___(soap, data, "-ns1:CountryList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__CountryList___ * SOAP_FMAC4 soap_get___ns1__CountryList___(struct soap*, struct __ns1__CountryList___ *, const char*, const char*);

#ifndef soap_read___ns1__CountryList___
#define soap_read___ns1__CountryList___(soap, data) ( ((data) ? (ns::soap_default___ns1__CountryList___(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__CountryList___(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__SplitListBySymbol___
#define SOAP_TYPE_ns___ns1__SplitListBySymbol___ (476)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SplitListBySymbol___(struct soap*, struct __ns1__SplitListBySymbol___ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SplitListBySymbol___(struct soap*, const struct __ns1__SplitListBySymbol___ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SplitListBySymbol___(struct soap*, const char*, int, const struct __ns1__SplitListBySymbol___ *, const char*);
SOAP_FMAC3 struct __ns1__SplitListBySymbol___ * SOAP_FMAC4 soap_in___ns1__SplitListBySymbol___(struct soap*, const char*, struct __ns1__SplitListBySymbol___ *, const char*);
SOAP_FMAC1 struct __ns1__SplitListBySymbol___ * SOAP_FMAC2 soap_instantiate___ns1__SplitListBySymbol___(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SplitListBySymbol___ * soap_new___ns1__SplitListBySymbol___(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SplitListBySymbol___(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SplitListBySymbol___ * soap_new_req___ns1__SplitListBySymbol___(
	struct soap *soap,
	const std::string& Token,
	const std::string& Exchange,
	const std::string& Symbol)
{	struct __ns1__SplitListBySymbol___ *_p = soap_new___ns1__SplitListBySymbol___(soap);
	if (_p)
	{	soap_default___ns1__SplitListBySymbol___(soap, _p);
		_p->Token = Token;
		_p->Exchange = Exchange;
		_p->Symbol = Symbol;
	}
	return _p;
}

inline struct __ns1__SplitListBySymbol___ * soap_new_set___ns1__SplitListBySymbol___(
	struct soap *soap,
	const std::string& Token,
	const std::string& Exchange,
	const std::string& Symbol)
{	struct __ns1__SplitListBySymbol___ *_p = soap_new___ns1__SplitListBySymbol___(soap);
	if (_p)
	{	soap_default___ns1__SplitListBySymbol___(soap, _p);
		_p->Token = Token;
		_p->Exchange = Exchange;
		_p->Symbol = Symbol;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SplitListBySymbol___(struct soap*, const struct __ns1__SplitListBySymbol___ *, const char*, const char*);

#ifndef soap_write___ns1__SplitListBySymbol___
#define soap_write___ns1__SplitListBySymbol___(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__SplitListBySymbol___(soap, data), 0) || ns::soap_put___ns1__SplitListBySymbol___(soap, data, "-ns1:SplitListBySymbol", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SplitListBySymbol___ * SOAP_FMAC4 soap_get___ns1__SplitListBySymbol___(struct soap*, struct __ns1__SplitListBySymbol___ *, const char*, const char*);

#ifndef soap_read___ns1__SplitListBySymbol___
#define soap_read___ns1__SplitListBySymbol___(soap, data) ( ((data) ? (ns::soap_default___ns1__SplitListBySymbol___(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__SplitListBySymbol___(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__SplitListByExchange___
#define SOAP_TYPE_ns___ns1__SplitListByExchange___ (474)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SplitListByExchange___(struct soap*, struct __ns1__SplitListByExchange___ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SplitListByExchange___(struct soap*, const struct __ns1__SplitListByExchange___ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SplitListByExchange___(struct soap*, const char*, int, const struct __ns1__SplitListByExchange___ *, const char*);
SOAP_FMAC3 struct __ns1__SplitListByExchange___ * SOAP_FMAC4 soap_in___ns1__SplitListByExchange___(struct soap*, const char*, struct __ns1__SplitListByExchange___ *, const char*);
SOAP_FMAC1 struct __ns1__SplitListByExchange___ * SOAP_FMAC2 soap_instantiate___ns1__SplitListByExchange___(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SplitListByExchange___ * soap_new___ns1__SplitListByExchange___(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SplitListByExchange___(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SplitListByExchange___ * soap_new_req___ns1__SplitListByExchange___(
	struct soap *soap,
	const std::string& Token,
	const std::string& Exchange)
{	struct __ns1__SplitListByExchange___ *_p = soap_new___ns1__SplitListByExchange___(soap);
	if (_p)
	{	soap_default___ns1__SplitListByExchange___(soap, _p);
		_p->Token = Token;
		_p->Exchange = Exchange;
	}
	return _p;
}

inline struct __ns1__SplitListByExchange___ * soap_new_set___ns1__SplitListByExchange___(
	struct soap *soap,
	const std::string& Token,
	const std::string& Exchange)
{	struct __ns1__SplitListByExchange___ *_p = soap_new___ns1__SplitListByExchange___(soap);
	if (_p)
	{	soap_default___ns1__SplitListByExchange___(soap, _p);
		_p->Token = Token;
		_p->Exchange = Exchange;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SplitListByExchange___(struct soap*, const struct __ns1__SplitListByExchange___ *, const char*, const char*);

#ifndef soap_write___ns1__SplitListByExchange___
#define soap_write___ns1__SplitListByExchange___(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__SplitListByExchange___(soap, data), 0) || ns::soap_put___ns1__SplitListByExchange___(soap, data, "-ns1:SplitListByExchange", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SplitListByExchange___ * SOAP_FMAC4 soap_get___ns1__SplitListByExchange___(struct soap*, struct __ns1__SplitListByExchange___ *, const char*, const char*);

#ifndef soap_read___ns1__SplitListByExchange___
#define soap_read___ns1__SplitListByExchange___(soap, data) ( ((data) ? (ns::soap_default___ns1__SplitListByExchange___(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__SplitListByExchange___(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__ExchangeMonths___
#define SOAP_TYPE_ns___ns1__ExchangeMonths___ (472)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ExchangeMonths___(struct soap*, struct __ns1__ExchangeMonths___ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ExchangeMonths___(struct soap*, const struct __ns1__ExchangeMonths___ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ExchangeMonths___(struct soap*, const char*, int, const struct __ns1__ExchangeMonths___ *, const char*);
SOAP_FMAC3 struct __ns1__ExchangeMonths___ * SOAP_FMAC4 soap_in___ns1__ExchangeMonths___(struct soap*, const char*, struct __ns1__ExchangeMonths___ *, const char*);
SOAP_FMAC1 struct __ns1__ExchangeMonths___ * SOAP_FMAC2 soap_instantiate___ns1__ExchangeMonths___(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ExchangeMonths___ * soap_new___ns1__ExchangeMonths___(struct soap *soap, int n = -1) { return soap_instantiate___ns1__ExchangeMonths___(soap, n, NULL, NULL, NULL); }

inline struct __ns1__ExchangeMonths___ * soap_new_req___ns1__ExchangeMonths___(
	struct soap *soap,
	const std::string& Token,
	const std::string& Exchange)
{	struct __ns1__ExchangeMonths___ *_p = soap_new___ns1__ExchangeMonths___(soap);
	if (_p)
	{	soap_default___ns1__ExchangeMonths___(soap, _p);
		_p->Token = Token;
		_p->Exchange = Exchange;
	}
	return _p;
}

inline struct __ns1__ExchangeMonths___ * soap_new_set___ns1__ExchangeMonths___(
	struct soap *soap,
	const std::string& Token,
	const std::string& Exchange)
{	struct __ns1__ExchangeMonths___ *_p = soap_new___ns1__ExchangeMonths___(soap);
	if (_p)
	{	soap_default___ns1__ExchangeMonths___(soap, _p);
		_p->Token = Token;
		_p->Exchange = Exchange;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ExchangeMonths___(struct soap*, const struct __ns1__ExchangeMonths___ *, const char*, const char*);

#ifndef soap_write___ns1__ExchangeMonths___
#define soap_write___ns1__ExchangeMonths___(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__ExchangeMonths___(soap, data), 0) || ns::soap_put___ns1__ExchangeMonths___(soap, data, "-ns1:ExchangeMonths", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__ExchangeMonths___ * SOAP_FMAC4 soap_get___ns1__ExchangeMonths___(struct soap*, struct __ns1__ExchangeMonths___ *, const char*, const char*);

#ifndef soap_read___ns1__ExchangeMonths___
#define soap_read___ns1__ExchangeMonths___(soap, data) ( ((data) ? (ns::soap_default___ns1__ExchangeMonths___(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__ExchangeMonths___(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__SymbolChart___
#define SOAP_TYPE_ns___ns1__SymbolChart___ (470)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SymbolChart___(struct soap*, struct __ns1__SymbolChart___ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SymbolChart___(struct soap*, const struct __ns1__SymbolChart___ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SymbolChart___(struct soap*, const char*, int, const struct __ns1__SymbolChart___ *, const char*);
SOAP_FMAC3 struct __ns1__SymbolChart___ * SOAP_FMAC4 soap_in___ns1__SymbolChart___(struct soap*, const char*, struct __ns1__SymbolChart___ *, const char*);
SOAP_FMAC1 struct __ns1__SymbolChart___ * SOAP_FMAC2 soap_instantiate___ns1__SymbolChart___(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SymbolChart___ * soap_new___ns1__SymbolChart___(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SymbolChart___(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SymbolChart___ * soap_new_req___ns1__SymbolChart___(
	struct soap *soap,
	const std::string& Token,
	const std::string& Exchange,
	const std::string& Symbol)
{	struct __ns1__SymbolChart___ *_p = soap_new___ns1__SymbolChart___(soap);
	if (_p)
	{	soap_default___ns1__SymbolChart___(soap, _p);
		_p->Token = Token;
		_p->Exchange = Exchange;
		_p->Symbol = Symbol;
	}
	return _p;
}

inline struct __ns1__SymbolChart___ * soap_new_set___ns1__SymbolChart___(
	struct soap *soap,
	const std::string& Token,
	const std::string& Exchange,
	const std::string& Symbol)
{	struct __ns1__SymbolChart___ *_p = soap_new___ns1__SymbolChart___(soap);
	if (_p)
	{	soap_default___ns1__SymbolChart___(soap, _p);
		_p->Token = Token;
		_p->Exchange = Exchange;
		_p->Symbol = Symbol;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SymbolChart___(struct soap*, const struct __ns1__SymbolChart___ *, const char*, const char*);

#ifndef soap_write___ns1__SymbolChart___
#define soap_write___ns1__SymbolChart___(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__SymbolChart___(soap, data), 0) || ns::soap_put___ns1__SymbolChart___(soap, data, "-ns1:SymbolChart", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SymbolChart___ * SOAP_FMAC4 soap_get___ns1__SymbolChart___(struct soap*, struct __ns1__SymbolChart___ *, const char*, const char*);

#ifndef soap_read___ns1__SymbolChart___
#define soap_read___ns1__SymbolChart___(soap, data) ( ((data) ? (ns::soap_default___ns1__SymbolChart___(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__SymbolChart___(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__Top10Losses___
#define SOAP_TYPE_ns___ns1__Top10Losses___ (468)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Top10Losses___(struct soap*, struct __ns1__Top10Losses___ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Top10Losses___(struct soap*, const struct __ns1__Top10Losses___ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Top10Losses___(struct soap*, const char*, int, const struct __ns1__Top10Losses___ *, const char*);
SOAP_FMAC3 struct __ns1__Top10Losses___ * SOAP_FMAC4 soap_in___ns1__Top10Losses___(struct soap*, const char*, struct __ns1__Top10Losses___ *, const char*);
SOAP_FMAC1 struct __ns1__Top10Losses___ * SOAP_FMAC2 soap_instantiate___ns1__Top10Losses___(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Top10Losses___ * soap_new___ns1__Top10Losses___(struct soap *soap, int n = -1) { return soap_instantiate___ns1__Top10Losses___(soap, n, NULL, NULL, NULL); }

inline struct __ns1__Top10Losses___ * soap_new_req___ns1__Top10Losses___(
	struct soap *soap,
	const std::string& Token,
	const std::string& Exchange)
{	struct __ns1__Top10Losses___ *_p = soap_new___ns1__Top10Losses___(soap);
	if (_p)
	{	soap_default___ns1__Top10Losses___(soap, _p);
		_p->Token = Token;
		_p->Exchange = Exchange;
	}
	return _p;
}

inline struct __ns1__Top10Losses___ * soap_new_set___ns1__Top10Losses___(
	struct soap *soap,
	const std::string& Token,
	const std::string& Exchange)
{	struct __ns1__Top10Losses___ *_p = soap_new___ns1__Top10Losses___(soap);
	if (_p)
	{	soap_default___ns1__Top10Losses___(soap, _p);
		_p->Token = Token;
		_p->Exchange = Exchange;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Top10Losses___(struct soap*, const struct __ns1__Top10Losses___ *, const char*, const char*);

#ifndef soap_write___ns1__Top10Losses___
#define soap_write___ns1__Top10Losses___(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__Top10Losses___(soap, data), 0) || ns::soap_put___ns1__Top10Losses___(soap, data, "-ns1:Top10Losses", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__Top10Losses___ * SOAP_FMAC4 soap_get___ns1__Top10Losses___(struct soap*, struct __ns1__Top10Losses___ *, const char*, const char*);

#ifndef soap_read___ns1__Top10Losses___
#define soap_read___ns1__Top10Losses___(soap, data) ( ((data) ? (ns::soap_default___ns1__Top10Losses___(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__Top10Losses___(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__Top10Gains___
#define SOAP_TYPE_ns___ns1__Top10Gains___ (466)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Top10Gains___(struct soap*, struct __ns1__Top10Gains___ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Top10Gains___(struct soap*, const struct __ns1__Top10Gains___ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Top10Gains___(struct soap*, const char*, int, const struct __ns1__Top10Gains___ *, const char*);
SOAP_FMAC3 struct __ns1__Top10Gains___ * SOAP_FMAC4 soap_in___ns1__Top10Gains___(struct soap*, const char*, struct __ns1__Top10Gains___ *, const char*);
SOAP_FMAC1 struct __ns1__Top10Gains___ * SOAP_FMAC2 soap_instantiate___ns1__Top10Gains___(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Top10Gains___ * soap_new___ns1__Top10Gains___(struct soap *soap, int n = -1) { return soap_instantiate___ns1__Top10Gains___(soap, n, NULL, NULL, NULL); }

inline struct __ns1__Top10Gains___ * soap_new_req___ns1__Top10Gains___(
	struct soap *soap,
	const std::string& Token,
	const std::string& Exchange)
{	struct __ns1__Top10Gains___ *_p = soap_new___ns1__Top10Gains___(soap);
	if (_p)
	{	soap_default___ns1__Top10Gains___(soap, _p);
		_p->Token = Token;
		_p->Exchange = Exchange;
	}
	return _p;
}

inline struct __ns1__Top10Gains___ * soap_new_set___ns1__Top10Gains___(
	struct soap *soap,
	const std::string& Token,
	const std::string& Exchange)
{	struct __ns1__Top10Gains___ *_p = soap_new___ns1__Top10Gains___(soap);
	if (_p)
	{	soap_default___ns1__Top10Gains___(soap, _p);
		_p->Token = Token;
		_p->Exchange = Exchange;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Top10Gains___(struct soap*, const struct __ns1__Top10Gains___ *, const char*, const char*);

#ifndef soap_write___ns1__Top10Gains___
#define soap_write___ns1__Top10Gains___(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__Top10Gains___(soap, data), 0) || ns::soap_put___ns1__Top10Gains___(soap, data, "-ns1:Top10Gains", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__Top10Gains___ * SOAP_FMAC4 soap_get___ns1__Top10Gains___(struct soap*, struct __ns1__Top10Gains___ *, const char*, const char*);

#ifndef soap_read___ns1__Top10Gains___
#define soap_read___ns1__Top10Gains___(soap, data) ( ((data) ? (ns::soap_default___ns1__Top10Gains___(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__Top10Gains___(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__SymbolHistory___
#define SOAP_TYPE_ns___ns1__SymbolHistory___ (464)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SymbolHistory___(struct soap*, struct __ns1__SymbolHistory___ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SymbolHistory___(struct soap*, const struct __ns1__SymbolHistory___ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SymbolHistory___(struct soap*, const char*, int, const struct __ns1__SymbolHistory___ *, const char*);
SOAP_FMAC3 struct __ns1__SymbolHistory___ * SOAP_FMAC4 soap_in___ns1__SymbolHistory___(struct soap*, const char*, struct __ns1__SymbolHistory___ *, const char*);
SOAP_FMAC1 struct __ns1__SymbolHistory___ * SOAP_FMAC2 soap_instantiate___ns1__SymbolHistory___(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SymbolHistory___ * soap_new___ns1__SymbolHistory___(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SymbolHistory___(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SymbolHistory___ * soap_new_req___ns1__SymbolHistory___(
	struct soap *soap,
	const std::string& Token,
	const std::string& Exchange,
	const std::string& Symbol,
	const std::string& StartDate)
{	struct __ns1__SymbolHistory___ *_p = soap_new___ns1__SymbolHistory___(soap);
	if (_p)
	{	soap_default___ns1__SymbolHistory___(soap, _p);
		_p->Token = Token;
		_p->Exchange = Exchange;
		_p->Symbol = Symbol;
		_p->StartDate = StartDate;
	}
	return _p;
}

inline struct __ns1__SymbolHistory___ * soap_new_set___ns1__SymbolHistory___(
	struct soap *soap,
	const std::string& Token,
	const std::string& Exchange,
	const std::string& Symbol,
	const std::string& StartDate)
{	struct __ns1__SymbolHistory___ *_p = soap_new___ns1__SymbolHistory___(soap);
	if (_p)
	{	soap_default___ns1__SymbolHistory___(soap, _p);
		_p->Token = Token;
		_p->Exchange = Exchange;
		_p->Symbol = Symbol;
		_p->StartDate = StartDate;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SymbolHistory___(struct soap*, const struct __ns1__SymbolHistory___ *, const char*, const char*);

#ifndef soap_write___ns1__SymbolHistory___
#define soap_write___ns1__SymbolHistory___(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__SymbolHistory___(soap, data), 0) || ns::soap_put___ns1__SymbolHistory___(soap, data, "-ns1:SymbolHistory", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SymbolHistory___ * SOAP_FMAC4 soap_get___ns1__SymbolHistory___(struct soap*, struct __ns1__SymbolHistory___ *, const char*, const char*);

#ifndef soap_read___ns1__SymbolHistory___
#define soap_read___ns1__SymbolHistory___(soap, data) ( ((data) ? (ns::soap_default___ns1__SymbolHistory___(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__SymbolHistory___(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__QuoteListByDate2___
#define SOAP_TYPE_ns___ns1__QuoteListByDate2___ (462)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__QuoteListByDate2___(struct soap*, struct __ns1__QuoteListByDate2___ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__QuoteListByDate2___(struct soap*, const struct __ns1__QuoteListByDate2___ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__QuoteListByDate2___(struct soap*, const char*, int, const struct __ns1__QuoteListByDate2___ *, const char*);
SOAP_FMAC3 struct __ns1__QuoteListByDate2___ * SOAP_FMAC4 soap_in___ns1__QuoteListByDate2___(struct soap*, const char*, struct __ns1__QuoteListByDate2___ *, const char*);
SOAP_FMAC1 struct __ns1__QuoteListByDate2___ * SOAP_FMAC2 soap_instantiate___ns1__QuoteListByDate2___(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__QuoteListByDate2___ * soap_new___ns1__QuoteListByDate2___(struct soap *soap, int n = -1) { return soap_instantiate___ns1__QuoteListByDate2___(soap, n, NULL, NULL, NULL); }

inline struct __ns1__QuoteListByDate2___ * soap_new_req___ns1__QuoteListByDate2___(
	struct soap *soap,
	const std::string& Token,
	const std::string& Exchange,
	const std::string& QuoteDate)
{	struct __ns1__QuoteListByDate2___ *_p = soap_new___ns1__QuoteListByDate2___(soap);
	if (_p)
	{	soap_default___ns1__QuoteListByDate2___(soap, _p);
		_p->Token = Token;
		_p->Exchange = Exchange;
		_p->QuoteDate = QuoteDate;
	}
	return _p;
}

inline struct __ns1__QuoteListByDate2___ * soap_new_set___ns1__QuoteListByDate2___(
	struct soap *soap,
	const std::string& Token,
	const std::string& Exchange,
	const std::string& QuoteDate)
{	struct __ns1__QuoteListByDate2___ *_p = soap_new___ns1__QuoteListByDate2___(soap);
	if (_p)
	{	soap_default___ns1__QuoteListByDate2___(soap, _p);
		_p->Token = Token;
		_p->Exchange = Exchange;
		_p->QuoteDate = QuoteDate;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__QuoteListByDate2___(struct soap*, const struct __ns1__QuoteListByDate2___ *, const char*, const char*);

#ifndef soap_write___ns1__QuoteListByDate2___
#define soap_write___ns1__QuoteListByDate2___(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__QuoteListByDate2___(soap, data), 0) || ns::soap_put___ns1__QuoteListByDate2___(soap, data, "-ns1:QuoteListByDate2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__QuoteListByDate2___ * SOAP_FMAC4 soap_get___ns1__QuoteListByDate2___(struct soap*, struct __ns1__QuoteListByDate2___ *, const char*, const char*);

#ifndef soap_read___ns1__QuoteListByDate2___
#define soap_read___ns1__QuoteListByDate2___(soap, data) ( ((data) ? (ns::soap_default___ns1__QuoteListByDate2___(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__QuoteListByDate2___(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__QuoteListByDate___
#define SOAP_TYPE_ns___ns1__QuoteListByDate___ (460)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__QuoteListByDate___(struct soap*, struct __ns1__QuoteListByDate___ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__QuoteListByDate___(struct soap*, const struct __ns1__QuoteListByDate___ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__QuoteListByDate___(struct soap*, const char*, int, const struct __ns1__QuoteListByDate___ *, const char*);
SOAP_FMAC3 struct __ns1__QuoteListByDate___ * SOAP_FMAC4 soap_in___ns1__QuoteListByDate___(struct soap*, const char*, struct __ns1__QuoteListByDate___ *, const char*);
SOAP_FMAC1 struct __ns1__QuoteListByDate___ * SOAP_FMAC2 soap_instantiate___ns1__QuoteListByDate___(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__QuoteListByDate___ * soap_new___ns1__QuoteListByDate___(struct soap *soap, int n = -1) { return soap_instantiate___ns1__QuoteListByDate___(soap, n, NULL, NULL, NULL); }

inline struct __ns1__QuoteListByDate___ * soap_new_req___ns1__QuoteListByDate___(
	struct soap *soap,
	const std::string& Token,
	const std::string& Exchange,
	const std::string& QuoteDate)
{	struct __ns1__QuoteListByDate___ *_p = soap_new___ns1__QuoteListByDate___(soap);
	if (_p)
	{	soap_default___ns1__QuoteListByDate___(soap, _p);
		_p->Token = Token;
		_p->Exchange = Exchange;
		_p->QuoteDate = QuoteDate;
	}
	return _p;
}

inline struct __ns1__QuoteListByDate___ * soap_new_set___ns1__QuoteListByDate___(
	struct soap *soap,
	const std::string& Token,
	const std::string& Exchange,
	const std::string& QuoteDate)
{	struct __ns1__QuoteListByDate___ *_p = soap_new___ns1__QuoteListByDate___(soap);
	if (_p)
	{	soap_default___ns1__QuoteListByDate___(soap, _p);
		_p->Token = Token;
		_p->Exchange = Exchange;
		_p->QuoteDate = QuoteDate;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__QuoteListByDate___(struct soap*, const struct __ns1__QuoteListByDate___ *, const char*, const char*);

#ifndef soap_write___ns1__QuoteListByDate___
#define soap_write___ns1__QuoteListByDate___(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__QuoteListByDate___(soap, data), 0) || ns::soap_put___ns1__QuoteListByDate___(soap, data, "-ns1:QuoteListByDate", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__QuoteListByDate___ * SOAP_FMAC4 soap_get___ns1__QuoteListByDate___(struct soap*, struct __ns1__QuoteListByDate___ *, const char*, const char*);

#ifndef soap_read___ns1__QuoteListByDate___
#define soap_read___ns1__QuoteListByDate___(soap, data) ( ((data) ? (ns::soap_default___ns1__QuoteListByDate___(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__QuoteListByDate___(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__TechnicalList___
#define SOAP_TYPE_ns___ns1__TechnicalList___ (458)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__TechnicalList___(struct soap*, struct __ns1__TechnicalList___ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__TechnicalList___(struct soap*, const struct __ns1__TechnicalList___ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__TechnicalList___(struct soap*, const char*, int, const struct __ns1__TechnicalList___ *, const char*);
SOAP_FMAC3 struct __ns1__TechnicalList___ * SOAP_FMAC4 soap_in___ns1__TechnicalList___(struct soap*, const char*, struct __ns1__TechnicalList___ *, const char*);
SOAP_FMAC1 struct __ns1__TechnicalList___ * SOAP_FMAC2 soap_instantiate___ns1__TechnicalList___(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__TechnicalList___ * soap_new___ns1__TechnicalList___(struct soap *soap, int n = -1) { return soap_instantiate___ns1__TechnicalList___(soap, n, NULL, NULL, NULL); }

inline struct __ns1__TechnicalList___ * soap_new_req___ns1__TechnicalList___(
	struct soap *soap,
	const std::string& Token,
	const std::string& Exchange)
{	struct __ns1__TechnicalList___ *_p = soap_new___ns1__TechnicalList___(soap);
	if (_p)
	{	soap_default___ns1__TechnicalList___(soap, _p);
		_p->Token = Token;
		_p->Exchange = Exchange;
	}
	return _p;
}

inline struct __ns1__TechnicalList___ * soap_new_set___ns1__TechnicalList___(
	struct soap *soap,
	const std::string& Token,
	const std::string& Exchange)
{	struct __ns1__TechnicalList___ *_p = soap_new___ns1__TechnicalList___(soap);
	if (_p)
	{	soap_default___ns1__TechnicalList___(soap, _p);
		_p->Token = Token;
		_p->Exchange = Exchange;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__TechnicalList___(struct soap*, const struct __ns1__TechnicalList___ *, const char*, const char*);

#ifndef soap_write___ns1__TechnicalList___
#define soap_write___ns1__TechnicalList___(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__TechnicalList___(soap, data), 0) || ns::soap_put___ns1__TechnicalList___(soap, data, "-ns1:TechnicalList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__TechnicalList___ * SOAP_FMAC4 soap_get___ns1__TechnicalList___(struct soap*, struct __ns1__TechnicalList___ *, const char*, const char*);

#ifndef soap_read___ns1__TechnicalList___
#define soap_read___ns1__TechnicalList___(soap, data) ( ((data) ? (ns::soap_default___ns1__TechnicalList___(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__TechnicalList___(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__FundamentalList___
#define SOAP_TYPE_ns___ns1__FundamentalList___ (456)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__FundamentalList___(struct soap*, struct __ns1__FundamentalList___ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__FundamentalList___(struct soap*, const struct __ns1__FundamentalList___ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__FundamentalList___(struct soap*, const char*, int, const struct __ns1__FundamentalList___ *, const char*);
SOAP_FMAC3 struct __ns1__FundamentalList___ * SOAP_FMAC4 soap_in___ns1__FundamentalList___(struct soap*, const char*, struct __ns1__FundamentalList___ *, const char*);
SOAP_FMAC1 struct __ns1__FundamentalList___ * SOAP_FMAC2 soap_instantiate___ns1__FundamentalList___(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__FundamentalList___ * soap_new___ns1__FundamentalList___(struct soap *soap, int n = -1) { return soap_instantiate___ns1__FundamentalList___(soap, n, NULL, NULL, NULL); }

inline struct __ns1__FundamentalList___ * soap_new_req___ns1__FundamentalList___(
	struct soap *soap,
	const std::string& Token,
	const std::string& Exchange)
{	struct __ns1__FundamentalList___ *_p = soap_new___ns1__FundamentalList___(soap);
	if (_p)
	{	soap_default___ns1__FundamentalList___(soap, _p);
		_p->Token = Token;
		_p->Exchange = Exchange;
	}
	return _p;
}

inline struct __ns1__FundamentalList___ * soap_new_set___ns1__FundamentalList___(
	struct soap *soap,
	const std::string& Token,
	const std::string& Exchange)
{	struct __ns1__FundamentalList___ *_p = soap_new___ns1__FundamentalList___(soap);
	if (_p)
	{	soap_default___ns1__FundamentalList___(soap, _p);
		_p->Token = Token;
		_p->Exchange = Exchange;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__FundamentalList___(struct soap*, const struct __ns1__FundamentalList___ *, const char*, const char*);

#ifndef soap_write___ns1__FundamentalList___
#define soap_write___ns1__FundamentalList___(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__FundamentalList___(soap, data), 0) || ns::soap_put___ns1__FundamentalList___(soap, data, "-ns1:FundamentalList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__FundamentalList___ * SOAP_FMAC4 soap_get___ns1__FundamentalList___(struct soap*, struct __ns1__FundamentalList___ *, const char*, const char*);

#ifndef soap_read___ns1__FundamentalList___
#define soap_read___ns1__FundamentalList___(soap, data) ( ((data) ? (ns::soap_default___ns1__FundamentalList___(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__FundamentalList___(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__NewsListBySymbol___
#define SOAP_TYPE_ns___ns1__NewsListBySymbol___ (454)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__NewsListBySymbol___(struct soap*, struct __ns1__NewsListBySymbol___ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__NewsListBySymbol___(struct soap*, const struct __ns1__NewsListBySymbol___ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__NewsListBySymbol___(struct soap*, const char*, int, const struct __ns1__NewsListBySymbol___ *, const char*);
SOAP_FMAC3 struct __ns1__NewsListBySymbol___ * SOAP_FMAC4 soap_in___ns1__NewsListBySymbol___(struct soap*, const char*, struct __ns1__NewsListBySymbol___ *, const char*);
SOAP_FMAC1 struct __ns1__NewsListBySymbol___ * SOAP_FMAC2 soap_instantiate___ns1__NewsListBySymbol___(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__NewsListBySymbol___ * soap_new___ns1__NewsListBySymbol___(struct soap *soap, int n = -1) { return soap_instantiate___ns1__NewsListBySymbol___(soap, n, NULL, NULL, NULL); }

inline struct __ns1__NewsListBySymbol___ * soap_new_req___ns1__NewsListBySymbol___(
	struct soap *soap,
	const std::string& token,
	const std::string& Exchange,
	const std::string& symbol)
{	struct __ns1__NewsListBySymbol___ *_p = soap_new___ns1__NewsListBySymbol___(soap);
	if (_p)
	{	soap_default___ns1__NewsListBySymbol___(soap, _p);
		_p->token = token;
		_p->Exchange = Exchange;
		_p->symbol = symbol;
	}
	return _p;
}

inline struct __ns1__NewsListBySymbol___ * soap_new_set___ns1__NewsListBySymbol___(
	struct soap *soap,
	const std::string& token,
	const std::string& Exchange,
	const std::string& symbol)
{	struct __ns1__NewsListBySymbol___ *_p = soap_new___ns1__NewsListBySymbol___(soap);
	if (_p)
	{	soap_default___ns1__NewsListBySymbol___(soap, _p);
		_p->token = token;
		_p->Exchange = Exchange;
		_p->symbol = symbol;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__NewsListBySymbol___(struct soap*, const struct __ns1__NewsListBySymbol___ *, const char*, const char*);

#ifndef soap_write___ns1__NewsListBySymbol___
#define soap_write___ns1__NewsListBySymbol___(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__NewsListBySymbol___(soap, data), 0) || ns::soap_put___ns1__NewsListBySymbol___(soap, data, "-ns1:NewsListBySymbol", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__NewsListBySymbol___ * SOAP_FMAC4 soap_get___ns1__NewsListBySymbol___(struct soap*, struct __ns1__NewsListBySymbol___ *, const char*, const char*);

#ifndef soap_read___ns1__NewsListBySymbol___
#define soap_read___ns1__NewsListBySymbol___(soap, data) ( ((data) ? (ns::soap_default___ns1__NewsListBySymbol___(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__NewsListBySymbol___(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__NewsList___
#define SOAP_TYPE_ns___ns1__NewsList___ (452)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__NewsList___(struct soap*, struct __ns1__NewsList___ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__NewsList___(struct soap*, const struct __ns1__NewsList___ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__NewsList___(struct soap*, const char*, int, const struct __ns1__NewsList___ *, const char*);
SOAP_FMAC3 struct __ns1__NewsList___ * SOAP_FMAC4 soap_in___ns1__NewsList___(struct soap*, const char*, struct __ns1__NewsList___ *, const char*);
SOAP_FMAC1 struct __ns1__NewsList___ * SOAP_FMAC2 soap_instantiate___ns1__NewsList___(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__NewsList___ * soap_new___ns1__NewsList___(struct soap *soap, int n = -1) { return soap_instantiate___ns1__NewsList___(soap, n, NULL, NULL, NULL); }

inline struct __ns1__NewsList___ * soap_new_req___ns1__NewsList___(
	struct soap *soap,
	const std::string& Token,
	const std::string& Exchange)
{	struct __ns1__NewsList___ *_p = soap_new___ns1__NewsList___(soap);
	if (_p)
	{	soap_default___ns1__NewsList___(soap, _p);
		_p->Token = Token;
		_p->Exchange = Exchange;
	}
	return _p;
}

inline struct __ns1__NewsList___ * soap_new_set___ns1__NewsList___(
	struct soap *soap,
	const std::string& Token,
	const std::string& Exchange)
{	struct __ns1__NewsList___ *_p = soap_new___ns1__NewsList___(soap);
	if (_p)
	{	soap_default___ns1__NewsList___(soap, _p);
		_p->Token = Token;
		_p->Exchange = Exchange;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__NewsList___(struct soap*, const struct __ns1__NewsList___ *, const char*, const char*);

#ifndef soap_write___ns1__NewsList___
#define soap_write___ns1__NewsList___(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__NewsList___(soap, data), 0) || ns::soap_put___ns1__NewsList___(soap, data, "-ns1:NewsList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__NewsList___ * SOAP_FMAC4 soap_get___ns1__NewsList___(struct soap*, struct __ns1__NewsList___ *, const char*, const char*);

#ifndef soap_read___ns1__NewsList___
#define soap_read___ns1__NewsList___(soap, data) ( ((data) ? (ns::soap_default___ns1__NewsList___(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__NewsList___(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__QuoteList___
#define SOAP_TYPE_ns___ns1__QuoteList___ (450)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__QuoteList___(struct soap*, struct __ns1__QuoteList___ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__QuoteList___(struct soap*, const struct __ns1__QuoteList___ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__QuoteList___(struct soap*, const char*, int, const struct __ns1__QuoteList___ *, const char*);
SOAP_FMAC3 struct __ns1__QuoteList___ * SOAP_FMAC4 soap_in___ns1__QuoteList___(struct soap*, const char*, struct __ns1__QuoteList___ *, const char*);
SOAP_FMAC1 struct __ns1__QuoteList___ * SOAP_FMAC2 soap_instantiate___ns1__QuoteList___(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__QuoteList___ * soap_new___ns1__QuoteList___(struct soap *soap, int n = -1) { return soap_instantiate___ns1__QuoteList___(soap, n, NULL, NULL, NULL); }

inline struct __ns1__QuoteList___ * soap_new_req___ns1__QuoteList___(
	struct soap *soap,
	const std::string& Token,
	const std::string& Exchange)
{	struct __ns1__QuoteList___ *_p = soap_new___ns1__QuoteList___(soap);
	if (_p)
	{	soap_default___ns1__QuoteList___(soap, _p);
		_p->Token = Token;
		_p->Exchange = Exchange;
	}
	return _p;
}

inline struct __ns1__QuoteList___ * soap_new_set___ns1__QuoteList___(
	struct soap *soap,
	const std::string& Token,
	const std::string& Exchange)
{	struct __ns1__QuoteList___ *_p = soap_new___ns1__QuoteList___(soap);
	if (_p)
	{	soap_default___ns1__QuoteList___(soap, _p);
		_p->Token = Token;
		_p->Exchange = Exchange;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__QuoteList___(struct soap*, const struct __ns1__QuoteList___ *, const char*, const char*);

#ifndef soap_write___ns1__QuoteList___
#define soap_write___ns1__QuoteList___(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__QuoteList___(soap, data), 0) || ns::soap_put___ns1__QuoteList___(soap, data, "-ns1:QuoteList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__QuoteList___ * SOAP_FMAC4 soap_get___ns1__QuoteList___(struct soap*, struct __ns1__QuoteList___ *, const char*, const char*);

#ifndef soap_read___ns1__QuoteList___
#define soap_read___ns1__QuoteList___(soap, data) ( ((data) ? (ns::soap_default___ns1__QuoteList___(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__QuoteList___(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__SymbolGet___
#define SOAP_TYPE_ns___ns1__SymbolGet___ (448)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SymbolGet___(struct soap*, struct __ns1__SymbolGet___ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SymbolGet___(struct soap*, const struct __ns1__SymbolGet___ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SymbolGet___(struct soap*, const char*, int, const struct __ns1__SymbolGet___ *, const char*);
SOAP_FMAC3 struct __ns1__SymbolGet___ * SOAP_FMAC4 soap_in___ns1__SymbolGet___(struct soap*, const char*, struct __ns1__SymbolGet___ *, const char*);
SOAP_FMAC1 struct __ns1__SymbolGet___ * SOAP_FMAC2 soap_instantiate___ns1__SymbolGet___(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SymbolGet___ * soap_new___ns1__SymbolGet___(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SymbolGet___(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SymbolGet___ * soap_new_req___ns1__SymbolGet___(
	struct soap *soap,
	const std::string& Token,
	const std::string& Exchange,
	const std::string& Symbol)
{	struct __ns1__SymbolGet___ *_p = soap_new___ns1__SymbolGet___(soap);
	if (_p)
	{	soap_default___ns1__SymbolGet___(soap, _p);
		_p->Token = Token;
		_p->Exchange = Exchange;
		_p->Symbol = Symbol;
	}
	return _p;
}

inline struct __ns1__SymbolGet___ * soap_new_set___ns1__SymbolGet___(
	struct soap *soap,
	const std::string& Token,
	const std::string& Exchange,
	const std::string& Symbol)
{	struct __ns1__SymbolGet___ *_p = soap_new___ns1__SymbolGet___(soap);
	if (_p)
	{	soap_default___ns1__SymbolGet___(soap, _p);
		_p->Token = Token;
		_p->Exchange = Exchange;
		_p->Symbol = Symbol;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SymbolGet___(struct soap*, const struct __ns1__SymbolGet___ *, const char*, const char*);

#ifndef soap_write___ns1__SymbolGet___
#define soap_write___ns1__SymbolGet___(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__SymbolGet___(soap, data), 0) || ns::soap_put___ns1__SymbolGet___(soap, data, "-ns1:SymbolGet", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SymbolGet___ * SOAP_FMAC4 soap_get___ns1__SymbolGet___(struct soap*, struct __ns1__SymbolGet___ *, const char*, const char*);

#ifndef soap_read___ns1__SymbolGet___
#define soap_read___ns1__SymbolGet___(soap, data) ( ((data) ? (ns::soap_default___ns1__SymbolGet___(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__SymbolGet___(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__QuoteList2___
#define SOAP_TYPE_ns___ns1__QuoteList2___ (446)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__QuoteList2___(struct soap*, struct __ns1__QuoteList2___ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__QuoteList2___(struct soap*, const struct __ns1__QuoteList2___ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__QuoteList2___(struct soap*, const char*, int, const struct __ns1__QuoteList2___ *, const char*);
SOAP_FMAC3 struct __ns1__QuoteList2___ * SOAP_FMAC4 soap_in___ns1__QuoteList2___(struct soap*, const char*, struct __ns1__QuoteList2___ *, const char*);
SOAP_FMAC1 struct __ns1__QuoteList2___ * SOAP_FMAC2 soap_instantiate___ns1__QuoteList2___(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__QuoteList2___ * soap_new___ns1__QuoteList2___(struct soap *soap, int n = -1) { return soap_instantiate___ns1__QuoteList2___(soap, n, NULL, NULL, NULL); }

inline struct __ns1__QuoteList2___ * soap_new_req___ns1__QuoteList2___(
	struct soap *soap,
	const std::string& Token,
	const std::string& Exchange,
	const std::string& Symbols)
{	struct __ns1__QuoteList2___ *_p = soap_new___ns1__QuoteList2___(soap);
	if (_p)
	{	soap_default___ns1__QuoteList2___(soap, _p);
		_p->Token = Token;
		_p->Exchange = Exchange;
		_p->Symbols = Symbols;
	}
	return _p;
}

inline struct __ns1__QuoteList2___ * soap_new_set___ns1__QuoteList2___(
	struct soap *soap,
	const std::string& Token,
	const std::string& Exchange,
	const std::string& Symbols)
{	struct __ns1__QuoteList2___ *_p = soap_new___ns1__QuoteList2___(soap);
	if (_p)
	{	soap_default___ns1__QuoteList2___(soap, _p);
		_p->Token = Token;
		_p->Exchange = Exchange;
		_p->Symbols = Symbols;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__QuoteList2___(struct soap*, const struct __ns1__QuoteList2___ *, const char*, const char*);

#ifndef soap_write___ns1__QuoteList2___
#define soap_write___ns1__QuoteList2___(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__QuoteList2___(soap, data), 0) || ns::soap_put___ns1__QuoteList2___(soap, data, "-ns1:QuoteList2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__QuoteList2___ * SOAP_FMAC4 soap_get___ns1__QuoteList2___(struct soap*, struct __ns1__QuoteList2___ *, const char*, const char*);

#ifndef soap_read___ns1__QuoteList2___
#define soap_read___ns1__QuoteList2___(soap, data) ( ((data) ? (ns::soap_default___ns1__QuoteList2___(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__QuoteList2___(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__QuoteGet___
#define SOAP_TYPE_ns___ns1__QuoteGet___ (444)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__QuoteGet___(struct soap*, struct __ns1__QuoteGet___ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__QuoteGet___(struct soap*, const struct __ns1__QuoteGet___ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__QuoteGet___(struct soap*, const char*, int, const struct __ns1__QuoteGet___ *, const char*);
SOAP_FMAC3 struct __ns1__QuoteGet___ * SOAP_FMAC4 soap_in___ns1__QuoteGet___(struct soap*, const char*, struct __ns1__QuoteGet___ *, const char*);
SOAP_FMAC1 struct __ns1__QuoteGet___ * SOAP_FMAC2 soap_instantiate___ns1__QuoteGet___(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__QuoteGet___ * soap_new___ns1__QuoteGet___(struct soap *soap, int n = -1) { return soap_instantiate___ns1__QuoteGet___(soap, n, NULL, NULL, NULL); }

inline struct __ns1__QuoteGet___ * soap_new_req___ns1__QuoteGet___(
	struct soap *soap,
	const std::string& Token,
	const std::string& Exchange,
	const std::string& Symbol)
{	struct __ns1__QuoteGet___ *_p = soap_new___ns1__QuoteGet___(soap);
	if (_p)
	{	soap_default___ns1__QuoteGet___(soap, _p);
		_p->Token = Token;
		_p->Exchange = Exchange;
		_p->Symbol = Symbol;
	}
	return _p;
}

inline struct __ns1__QuoteGet___ * soap_new_set___ns1__QuoteGet___(
	struct soap *soap,
	const std::string& Token,
	const std::string& Exchange,
	const std::string& Symbol)
{	struct __ns1__QuoteGet___ *_p = soap_new___ns1__QuoteGet___(soap);
	if (_p)
	{	soap_default___ns1__QuoteGet___(soap, _p);
		_p->Token = Token;
		_p->Exchange = Exchange;
		_p->Symbol = Symbol;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__QuoteGet___(struct soap*, const struct __ns1__QuoteGet___ *, const char*, const char*);

#ifndef soap_write___ns1__QuoteGet___
#define soap_write___ns1__QuoteGet___(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__QuoteGet___(soap, data), 0) || ns::soap_put___ns1__QuoteGet___(soap, data, "-ns1:QuoteGet", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__QuoteGet___ * SOAP_FMAC4 soap_get___ns1__QuoteGet___(struct soap*, struct __ns1__QuoteGet___ *, const char*, const char*);

#ifndef soap_read___ns1__QuoteGet___
#define soap_read___ns1__QuoteGet___(soap, data) ( ((data) ? (ns::soap_default___ns1__QuoteGet___(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__QuoteGet___(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__SymbolList2___
#define SOAP_TYPE_ns___ns1__SymbolList2___ (442)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SymbolList2___(struct soap*, struct __ns1__SymbolList2___ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SymbolList2___(struct soap*, const struct __ns1__SymbolList2___ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SymbolList2___(struct soap*, const char*, int, const struct __ns1__SymbolList2___ *, const char*);
SOAP_FMAC3 struct __ns1__SymbolList2___ * SOAP_FMAC4 soap_in___ns1__SymbolList2___(struct soap*, const char*, struct __ns1__SymbolList2___ *, const char*);
SOAP_FMAC1 struct __ns1__SymbolList2___ * SOAP_FMAC2 soap_instantiate___ns1__SymbolList2___(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SymbolList2___ * soap_new___ns1__SymbolList2___(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SymbolList2___(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SymbolList2___ * soap_new_req___ns1__SymbolList2___(
	struct soap *soap,
	const std::string& Token,
	const std::string& Exchange)
{	struct __ns1__SymbolList2___ *_p = soap_new___ns1__SymbolList2___(soap);
	if (_p)
	{	soap_default___ns1__SymbolList2___(soap, _p);
		_p->Token = Token;
		_p->Exchange = Exchange;
	}
	return _p;
}

inline struct __ns1__SymbolList2___ * soap_new_set___ns1__SymbolList2___(
	struct soap *soap,
	const std::string& Token,
	const std::string& Exchange)
{	struct __ns1__SymbolList2___ *_p = soap_new___ns1__SymbolList2___(soap);
	if (_p)
	{	soap_default___ns1__SymbolList2___(soap, _p);
		_p->Token = Token;
		_p->Exchange = Exchange;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SymbolList2___(struct soap*, const struct __ns1__SymbolList2___ *, const char*, const char*);

#ifndef soap_write___ns1__SymbolList2___
#define soap_write___ns1__SymbolList2___(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__SymbolList2___(soap, data), 0) || ns::soap_put___ns1__SymbolList2___(soap, data, "-ns1:SymbolList2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SymbolList2___ * SOAP_FMAC4 soap_get___ns1__SymbolList2___(struct soap*, struct __ns1__SymbolList2___ *, const char*, const char*);

#ifndef soap_read___ns1__SymbolList2___
#define soap_read___ns1__SymbolList2___(soap, data) ( ((data) ? (ns::soap_default___ns1__SymbolList2___(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__SymbolList2___(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__SymbolList___
#define SOAP_TYPE_ns___ns1__SymbolList___ (440)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SymbolList___(struct soap*, struct __ns1__SymbolList___ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SymbolList___(struct soap*, const struct __ns1__SymbolList___ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SymbolList___(struct soap*, const char*, int, const struct __ns1__SymbolList___ *, const char*);
SOAP_FMAC3 struct __ns1__SymbolList___ * SOAP_FMAC4 soap_in___ns1__SymbolList___(struct soap*, const char*, struct __ns1__SymbolList___ *, const char*);
SOAP_FMAC1 struct __ns1__SymbolList___ * SOAP_FMAC2 soap_instantiate___ns1__SymbolList___(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SymbolList___ * soap_new___ns1__SymbolList___(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SymbolList___(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SymbolList___ * soap_new_req___ns1__SymbolList___(
	struct soap *soap,
	const std::string& Token,
	const std::string& Exchange)
{	struct __ns1__SymbolList___ *_p = soap_new___ns1__SymbolList___(soap);
	if (_p)
	{	soap_default___ns1__SymbolList___(soap, _p);
		_p->Token = Token;
		_p->Exchange = Exchange;
	}
	return _p;
}

inline struct __ns1__SymbolList___ * soap_new_set___ns1__SymbolList___(
	struct soap *soap,
	const std::string& Token,
	const std::string& Exchange)
{	struct __ns1__SymbolList___ *_p = soap_new___ns1__SymbolList___(soap);
	if (_p)
	{	soap_default___ns1__SymbolList___(soap, _p);
		_p->Token = Token;
		_p->Exchange = Exchange;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SymbolList___(struct soap*, const struct __ns1__SymbolList___ *, const char*, const char*);

#ifndef soap_write___ns1__SymbolList___
#define soap_write___ns1__SymbolList___(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__SymbolList___(soap, data), 0) || ns::soap_put___ns1__SymbolList___(soap, data, "-ns1:SymbolList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SymbolList___ * SOAP_FMAC4 soap_get___ns1__SymbolList___(struct soap*, struct __ns1__SymbolList___ *, const char*, const char*);

#ifndef soap_read___ns1__SymbolList___
#define soap_read___ns1__SymbolList___(soap, data) ( ((data) ? (ns::soap_default___ns1__SymbolList___(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__SymbolList___(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__ExchangeGet___
#define SOAP_TYPE_ns___ns1__ExchangeGet___ (438)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ExchangeGet___(struct soap*, struct __ns1__ExchangeGet___ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ExchangeGet___(struct soap*, const struct __ns1__ExchangeGet___ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ExchangeGet___(struct soap*, const char*, int, const struct __ns1__ExchangeGet___ *, const char*);
SOAP_FMAC3 struct __ns1__ExchangeGet___ * SOAP_FMAC4 soap_in___ns1__ExchangeGet___(struct soap*, const char*, struct __ns1__ExchangeGet___ *, const char*);
SOAP_FMAC1 struct __ns1__ExchangeGet___ * SOAP_FMAC2 soap_instantiate___ns1__ExchangeGet___(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ExchangeGet___ * soap_new___ns1__ExchangeGet___(struct soap *soap, int n = -1) { return soap_instantiate___ns1__ExchangeGet___(soap, n, NULL, NULL, NULL); }

inline struct __ns1__ExchangeGet___ * soap_new_req___ns1__ExchangeGet___(
	struct soap *soap,
	const std::string& Token,
	const std::string& Exchange)
{	struct __ns1__ExchangeGet___ *_p = soap_new___ns1__ExchangeGet___(soap);
	if (_p)
	{	soap_default___ns1__ExchangeGet___(soap, _p);
		_p->Token = Token;
		_p->Exchange = Exchange;
	}
	return _p;
}

inline struct __ns1__ExchangeGet___ * soap_new_set___ns1__ExchangeGet___(
	struct soap *soap,
	const std::string& Token,
	const std::string& Exchange)
{	struct __ns1__ExchangeGet___ *_p = soap_new___ns1__ExchangeGet___(soap);
	if (_p)
	{	soap_default___ns1__ExchangeGet___(soap, _p);
		_p->Token = Token;
		_p->Exchange = Exchange;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ExchangeGet___(struct soap*, const struct __ns1__ExchangeGet___ *, const char*, const char*);

#ifndef soap_write___ns1__ExchangeGet___
#define soap_write___ns1__ExchangeGet___(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__ExchangeGet___(soap, data), 0) || ns::soap_put___ns1__ExchangeGet___(soap, data, "-ns1:ExchangeGet", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__ExchangeGet___ * SOAP_FMAC4 soap_get___ns1__ExchangeGet___(struct soap*, struct __ns1__ExchangeGet___ *, const char*, const char*);

#ifndef soap_read___ns1__ExchangeGet___
#define soap_read___ns1__ExchangeGet___(soap, data) ( ((data) ? (ns::soap_default___ns1__ExchangeGet___(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__ExchangeGet___(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__ExchangeList___
#define SOAP_TYPE_ns___ns1__ExchangeList___ (436)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ExchangeList___(struct soap*, struct __ns1__ExchangeList___ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ExchangeList___(struct soap*, const struct __ns1__ExchangeList___ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ExchangeList___(struct soap*, const char*, int, const struct __ns1__ExchangeList___ *, const char*);
SOAP_FMAC3 struct __ns1__ExchangeList___ * SOAP_FMAC4 soap_in___ns1__ExchangeList___(struct soap*, const char*, struct __ns1__ExchangeList___ *, const char*);
SOAP_FMAC1 struct __ns1__ExchangeList___ * SOAP_FMAC2 soap_instantiate___ns1__ExchangeList___(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ExchangeList___ * soap_new___ns1__ExchangeList___(struct soap *soap, int n = -1) { return soap_instantiate___ns1__ExchangeList___(soap, n, NULL, NULL, NULL); }

inline struct __ns1__ExchangeList___ * soap_new_req___ns1__ExchangeList___(
	struct soap *soap,
	const std::string& Token)
{	struct __ns1__ExchangeList___ *_p = soap_new___ns1__ExchangeList___(soap);
	if (_p)
	{	soap_default___ns1__ExchangeList___(soap, _p);
		_p->Token = Token;
	}
	return _p;
}

inline struct __ns1__ExchangeList___ * soap_new_set___ns1__ExchangeList___(
	struct soap *soap,
	const std::string& Token)
{	struct __ns1__ExchangeList___ *_p = soap_new___ns1__ExchangeList___(soap);
	if (_p)
	{	soap_default___ns1__ExchangeList___(soap, _p);
		_p->Token = Token;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ExchangeList___(struct soap*, const struct __ns1__ExchangeList___ *, const char*, const char*);

#ifndef soap_write___ns1__ExchangeList___
#define soap_write___ns1__ExchangeList___(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__ExchangeList___(soap, data), 0) || ns::soap_put___ns1__ExchangeList___(soap, data, "-ns1:ExchangeList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__ExchangeList___ * SOAP_FMAC4 soap_get___ns1__ExchangeList___(struct soap*, struct __ns1__ExchangeList___ *, const char*, const char*);

#ifndef soap_read___ns1__ExchangeList___
#define soap_read___ns1__ExchangeList___(soap, data) ( ((data) ? (ns::soap_default___ns1__ExchangeList___(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__ExchangeList___(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__Membership___
#define SOAP_TYPE_ns___ns1__Membership___ (434)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Membership___(struct soap*, struct __ns1__Membership___ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Membership___(struct soap*, const struct __ns1__Membership___ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Membership___(struct soap*, const char*, int, const struct __ns1__Membership___ *, const char*);
SOAP_FMAC3 struct __ns1__Membership___ * SOAP_FMAC4 soap_in___ns1__Membership___(struct soap*, const char*, struct __ns1__Membership___ *, const char*);
SOAP_FMAC1 struct __ns1__Membership___ * SOAP_FMAC2 soap_instantiate___ns1__Membership___(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Membership___ * soap_new___ns1__Membership___(struct soap *soap, int n = -1) { return soap_instantiate___ns1__Membership___(soap, n, NULL, NULL, NULL); }

inline struct __ns1__Membership___ * soap_new_req___ns1__Membership___(
	struct soap *soap,
	const std::string& Token)
{	struct __ns1__Membership___ *_p = soap_new___ns1__Membership___(soap);
	if (_p)
	{	soap_default___ns1__Membership___(soap, _p);
		_p->Token = Token;
	}
	return _p;
}

inline struct __ns1__Membership___ * soap_new_set___ns1__Membership___(
	struct soap *soap,
	const std::string& Token)
{	struct __ns1__Membership___ *_p = soap_new___ns1__Membership___(soap);
	if (_p)
	{	soap_default___ns1__Membership___(soap, _p);
		_p->Token = Token;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Membership___(struct soap*, const struct __ns1__Membership___ *, const char*, const char*);

#ifndef soap_write___ns1__Membership___
#define soap_write___ns1__Membership___(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__Membership___(soap, data), 0) || ns::soap_put___ns1__Membership___(soap, data, "-ns1:Membership", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__Membership___ * SOAP_FMAC4 soap_get___ns1__Membership___(struct soap*, struct __ns1__Membership___ *, const char*, const char*);

#ifndef soap_read___ns1__Membership___
#define soap_read___ns1__Membership___(soap, data) ( ((data) ? (ns::soap_default___ns1__Membership___(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__Membership___(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__Login2___
#define SOAP_TYPE_ns___ns1__Login2___ (432)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Login2___(struct soap*, struct __ns1__Login2___ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Login2___(struct soap*, const struct __ns1__Login2___ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Login2___(struct soap*, const char*, int, const struct __ns1__Login2___ *, const char*);
SOAP_FMAC3 struct __ns1__Login2___ * SOAP_FMAC4 soap_in___ns1__Login2___(struct soap*, const char*, struct __ns1__Login2___ *, const char*);
SOAP_FMAC1 struct __ns1__Login2___ * SOAP_FMAC2 soap_instantiate___ns1__Login2___(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Login2___ * soap_new___ns1__Login2___(struct soap *soap, int n = -1) { return soap_instantiate___ns1__Login2___(soap, n, NULL, NULL, NULL); }

inline struct __ns1__Login2___ * soap_new_req___ns1__Login2___(
	struct soap *soap,
	const std::string& Username,
	const std::string& Password,
	const std::string& Version)
{	struct __ns1__Login2___ *_p = soap_new___ns1__Login2___(soap);
	if (_p)
	{	soap_default___ns1__Login2___(soap, _p);
		_p->Username = Username;
		_p->Password = Password;
		_p->Version = Version;
	}
	return _p;
}

inline struct __ns1__Login2___ * soap_new_set___ns1__Login2___(
	struct soap *soap,
	const std::string& Username,
	const std::string& Password,
	const std::string& Version)
{	struct __ns1__Login2___ *_p = soap_new___ns1__Login2___(soap);
	if (_p)
	{	soap_default___ns1__Login2___(soap, _p);
		_p->Username = Username;
		_p->Password = Password;
		_p->Version = Version;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Login2___(struct soap*, const struct __ns1__Login2___ *, const char*, const char*);

#ifndef soap_write___ns1__Login2___
#define soap_write___ns1__Login2___(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__Login2___(soap, data), 0) || ns::soap_put___ns1__Login2___(soap, data, "-ns1:Login2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__Login2___ * SOAP_FMAC4 soap_get___ns1__Login2___(struct soap*, struct __ns1__Login2___ *, const char*, const char*);

#ifndef soap_read___ns1__Login2___
#define soap_read___ns1__Login2___(soap, data) ( ((data) ? (ns::soap_default___ns1__Login2___(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__Login2___(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__Login___
#define SOAP_TYPE_ns___ns1__Login___ (430)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Login___(struct soap*, struct __ns1__Login___ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Login___(struct soap*, const struct __ns1__Login___ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Login___(struct soap*, const char*, int, const struct __ns1__Login___ *, const char*);
SOAP_FMAC3 struct __ns1__Login___ * SOAP_FMAC4 soap_in___ns1__Login___(struct soap*, const char*, struct __ns1__Login___ *, const char*);
SOAP_FMAC1 struct __ns1__Login___ * SOAP_FMAC2 soap_instantiate___ns1__Login___(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Login___ * soap_new___ns1__Login___(struct soap *soap, int n = -1) { return soap_instantiate___ns1__Login___(soap, n, NULL, NULL, NULL); }

inline struct __ns1__Login___ * soap_new_req___ns1__Login___(
	struct soap *soap,
	const std::string& Username,
	const std::string& Password)
{	struct __ns1__Login___ *_p = soap_new___ns1__Login___(soap);
	if (_p)
	{	soap_default___ns1__Login___(soap, _p);
		_p->Username = Username;
		_p->Password = Password;
	}
	return _p;
}

inline struct __ns1__Login___ * soap_new_set___ns1__Login___(
	struct soap *soap,
	const std::string& Username,
	const std::string& Password)
{	struct __ns1__Login___ *_p = soap_new___ns1__Login___(soap);
	if (_p)
	{	soap_default___ns1__Login___(soap, _p);
		_p->Username = Username;
		_p->Password = Password;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Login___(struct soap*, const struct __ns1__Login___ *, const char*, const char*);

#ifndef soap_write___ns1__Login___
#define soap_write___ns1__Login___(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__Login___(soap, data), 0) || ns::soap_put___ns1__Login___(soap, data, "-ns1:Login", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__Login___ * SOAP_FMAC4 soap_get___ns1__Login___(struct soap*, struct __ns1__Login___ *, const char*, const char*);

#ifndef soap_read___ns1__Login___
#define soap_read___ns1__Login___(soap, data) ( ((data) ? (ns::soap_default___ns1__Login___(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__Login___(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__ValidateAccessResponse__
#define SOAP_TYPE_ns___ns1__ValidateAccessResponse__ (428)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ValidateAccessResponse__(struct soap*, struct __ns1__ValidateAccessResponse__ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ValidateAccessResponse__(struct soap*, const struct __ns1__ValidateAccessResponse__ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ValidateAccessResponse__(struct soap*, const char*, int, const struct __ns1__ValidateAccessResponse__ *, const char*);
SOAP_FMAC3 struct __ns1__ValidateAccessResponse__ * SOAP_FMAC4 soap_in___ns1__ValidateAccessResponse__(struct soap*, const char*, struct __ns1__ValidateAccessResponse__ *, const char*);
SOAP_FMAC1 struct __ns1__ValidateAccessResponse__ * SOAP_FMAC2 soap_instantiate___ns1__ValidateAccessResponse__(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ValidateAccessResponse__ * soap_new___ns1__ValidateAccessResponse__(struct soap *soap, int n = -1) { return soap_instantiate___ns1__ValidateAccessResponse__(soap, n, NULL, NULL, NULL); }

inline struct __ns1__ValidateAccessResponse__ * soap_new_req___ns1__ValidateAccessResponse__(
	struct soap *soap)
{	struct __ns1__ValidateAccessResponse__ *_p = soap_new___ns1__ValidateAccessResponse__(soap);
	if (_p)
	{	soap_default___ns1__ValidateAccessResponse__(soap, _p);
	}
	return _p;
}

inline struct __ns1__ValidateAccessResponse__ * soap_new_set___ns1__ValidateAccessResponse__(
	struct soap *soap)
{	struct __ns1__ValidateAccessResponse__ *_p = soap_new___ns1__ValidateAccessResponse__(soap);
	if (_p)
	{	soap_default___ns1__ValidateAccessResponse__(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ValidateAccessResponse__(struct soap*, const struct __ns1__ValidateAccessResponse__ *, const char*, const char*);

#ifndef soap_write___ns1__ValidateAccessResponse__
#define soap_write___ns1__ValidateAccessResponse__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__ValidateAccessResponse__(soap, data), 0) || ns::soap_put___ns1__ValidateAccessResponse__(soap, data, "-ns1:ValidateAccessResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__ValidateAccessResponse__ * SOAP_FMAC4 soap_get___ns1__ValidateAccessResponse__(struct soap*, struct __ns1__ValidateAccessResponse__ *, const char*, const char*);

#ifndef soap_read___ns1__ValidateAccessResponse__
#define soap_read___ns1__ValidateAccessResponse__(soap, data) ( ((data) ? (ns::soap_default___ns1__ValidateAccessResponse__(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__ValidateAccessResponse__(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__UpdateDataFormatResponse__
#define SOAP_TYPE_ns___ns1__UpdateDataFormatResponse__ (426)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__UpdateDataFormatResponse__(struct soap*, struct __ns1__UpdateDataFormatResponse__ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__UpdateDataFormatResponse__(struct soap*, const struct __ns1__UpdateDataFormatResponse__ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__UpdateDataFormatResponse__(struct soap*, const char*, int, const struct __ns1__UpdateDataFormatResponse__ *, const char*);
SOAP_FMAC3 struct __ns1__UpdateDataFormatResponse__ * SOAP_FMAC4 soap_in___ns1__UpdateDataFormatResponse__(struct soap*, const char*, struct __ns1__UpdateDataFormatResponse__ *, const char*);
SOAP_FMAC1 struct __ns1__UpdateDataFormatResponse__ * SOAP_FMAC2 soap_instantiate___ns1__UpdateDataFormatResponse__(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__UpdateDataFormatResponse__ * soap_new___ns1__UpdateDataFormatResponse__(struct soap *soap, int n = -1) { return soap_instantiate___ns1__UpdateDataFormatResponse__(soap, n, NULL, NULL, NULL); }

inline struct __ns1__UpdateDataFormatResponse__ * soap_new_req___ns1__UpdateDataFormatResponse__(
	struct soap *soap)
{	struct __ns1__UpdateDataFormatResponse__ *_p = soap_new___ns1__UpdateDataFormatResponse__(soap);
	if (_p)
	{	soap_default___ns1__UpdateDataFormatResponse__(soap, _p);
	}
	return _p;
}

inline struct __ns1__UpdateDataFormatResponse__ * soap_new_set___ns1__UpdateDataFormatResponse__(
	struct soap *soap)
{	struct __ns1__UpdateDataFormatResponse__ *_p = soap_new___ns1__UpdateDataFormatResponse__(soap);
	if (_p)
	{	soap_default___ns1__UpdateDataFormatResponse__(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__UpdateDataFormatResponse__(struct soap*, const struct __ns1__UpdateDataFormatResponse__ *, const char*, const char*);

#ifndef soap_write___ns1__UpdateDataFormatResponse__
#define soap_write___ns1__UpdateDataFormatResponse__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__UpdateDataFormatResponse__(soap, data), 0) || ns::soap_put___ns1__UpdateDataFormatResponse__(soap, data, "-ns1:UpdateDataFormatResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__UpdateDataFormatResponse__ * SOAP_FMAC4 soap_get___ns1__UpdateDataFormatResponse__(struct soap*, struct __ns1__UpdateDataFormatResponse__ *, const char*, const char*);

#ifndef soap_read___ns1__UpdateDataFormatResponse__
#define soap_read___ns1__UpdateDataFormatResponse__(soap, data) ( ((data) ? (ns::soap_default___ns1__UpdateDataFormatResponse__(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__UpdateDataFormatResponse__(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__DataFormatsResponse__
#define SOAP_TYPE_ns___ns1__DataFormatsResponse__ (424)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DataFormatsResponse__(struct soap*, struct __ns1__DataFormatsResponse__ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DataFormatsResponse__(struct soap*, const struct __ns1__DataFormatsResponse__ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DataFormatsResponse__(struct soap*, const char*, int, const struct __ns1__DataFormatsResponse__ *, const char*);
SOAP_FMAC3 struct __ns1__DataFormatsResponse__ * SOAP_FMAC4 soap_in___ns1__DataFormatsResponse__(struct soap*, const char*, struct __ns1__DataFormatsResponse__ *, const char*);
SOAP_FMAC1 struct __ns1__DataFormatsResponse__ * SOAP_FMAC2 soap_instantiate___ns1__DataFormatsResponse__(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__DataFormatsResponse__ * soap_new___ns1__DataFormatsResponse__(struct soap *soap, int n = -1) { return soap_instantiate___ns1__DataFormatsResponse__(soap, n, NULL, NULL, NULL); }

inline struct __ns1__DataFormatsResponse__ * soap_new_req___ns1__DataFormatsResponse__(
	struct soap *soap)
{	struct __ns1__DataFormatsResponse__ *_p = soap_new___ns1__DataFormatsResponse__(soap);
	if (_p)
	{	soap_default___ns1__DataFormatsResponse__(soap, _p);
	}
	return _p;
}

inline struct __ns1__DataFormatsResponse__ * soap_new_set___ns1__DataFormatsResponse__(
	struct soap *soap)
{	struct __ns1__DataFormatsResponse__ *_p = soap_new___ns1__DataFormatsResponse__(soap);
	if (_p)
	{	soap_default___ns1__DataFormatsResponse__(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DataFormatsResponse__(struct soap*, const struct __ns1__DataFormatsResponse__ *, const char*, const char*);

#ifndef soap_write___ns1__DataFormatsResponse__
#define soap_write___ns1__DataFormatsResponse__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__DataFormatsResponse__(soap, data), 0) || ns::soap_put___ns1__DataFormatsResponse__(soap, data, "-ns1:DataFormatsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__DataFormatsResponse__ * SOAP_FMAC4 soap_get___ns1__DataFormatsResponse__(struct soap*, struct __ns1__DataFormatsResponse__ *, const char*, const char*);

#ifndef soap_read___ns1__DataFormatsResponse__
#define soap_read___ns1__DataFormatsResponse__(soap, data) ( ((data) ? (ns::soap_default___ns1__DataFormatsResponse__(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__DataFormatsResponse__(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__DataClientLatestVersionResponse__
#define SOAP_TYPE_ns___ns1__DataClientLatestVersionResponse__ (422)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DataClientLatestVersionResponse__(struct soap*, struct __ns1__DataClientLatestVersionResponse__ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DataClientLatestVersionResponse__(struct soap*, const struct __ns1__DataClientLatestVersionResponse__ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DataClientLatestVersionResponse__(struct soap*, const char*, int, const struct __ns1__DataClientLatestVersionResponse__ *, const char*);
SOAP_FMAC3 struct __ns1__DataClientLatestVersionResponse__ * SOAP_FMAC4 soap_in___ns1__DataClientLatestVersionResponse__(struct soap*, const char*, struct __ns1__DataClientLatestVersionResponse__ *, const char*);
SOAP_FMAC1 struct __ns1__DataClientLatestVersionResponse__ * SOAP_FMAC2 soap_instantiate___ns1__DataClientLatestVersionResponse__(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__DataClientLatestVersionResponse__ * soap_new___ns1__DataClientLatestVersionResponse__(struct soap *soap, int n = -1) { return soap_instantiate___ns1__DataClientLatestVersionResponse__(soap, n, NULL, NULL, NULL); }

inline struct __ns1__DataClientLatestVersionResponse__ * soap_new_req___ns1__DataClientLatestVersionResponse__(
	struct soap *soap)
{	struct __ns1__DataClientLatestVersionResponse__ *_p = soap_new___ns1__DataClientLatestVersionResponse__(soap);
	if (_p)
	{	soap_default___ns1__DataClientLatestVersionResponse__(soap, _p);
	}
	return _p;
}

inline struct __ns1__DataClientLatestVersionResponse__ * soap_new_set___ns1__DataClientLatestVersionResponse__(
	struct soap *soap)
{	struct __ns1__DataClientLatestVersionResponse__ *_p = soap_new___ns1__DataClientLatestVersionResponse__(soap);
	if (_p)
	{	soap_default___ns1__DataClientLatestVersionResponse__(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DataClientLatestVersionResponse__(struct soap*, const struct __ns1__DataClientLatestVersionResponse__ *, const char*, const char*);

#ifndef soap_write___ns1__DataClientLatestVersionResponse__
#define soap_write___ns1__DataClientLatestVersionResponse__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__DataClientLatestVersionResponse__(soap, data), 0) || ns::soap_put___ns1__DataClientLatestVersionResponse__(soap, data, "-ns1:DataClientLatestVersionResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__DataClientLatestVersionResponse__ * SOAP_FMAC4 soap_get___ns1__DataClientLatestVersionResponse__(struct soap*, struct __ns1__DataClientLatestVersionResponse__ *, const char*, const char*);

#ifndef soap_read___ns1__DataClientLatestVersionResponse__
#define soap_read___ns1__DataClientLatestVersionResponse__(soap, data) ( ((data) ? (ns::soap_default___ns1__DataClientLatestVersionResponse__(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__DataClientLatestVersionResponse__(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__SymbolChangesByExchangeResponse__
#define SOAP_TYPE_ns___ns1__SymbolChangesByExchangeResponse__ (420)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SymbolChangesByExchangeResponse__(struct soap*, struct __ns1__SymbolChangesByExchangeResponse__ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SymbolChangesByExchangeResponse__(struct soap*, const struct __ns1__SymbolChangesByExchangeResponse__ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SymbolChangesByExchangeResponse__(struct soap*, const char*, int, const struct __ns1__SymbolChangesByExchangeResponse__ *, const char*);
SOAP_FMAC3 struct __ns1__SymbolChangesByExchangeResponse__ * SOAP_FMAC4 soap_in___ns1__SymbolChangesByExchangeResponse__(struct soap*, const char*, struct __ns1__SymbolChangesByExchangeResponse__ *, const char*);
SOAP_FMAC1 struct __ns1__SymbolChangesByExchangeResponse__ * SOAP_FMAC2 soap_instantiate___ns1__SymbolChangesByExchangeResponse__(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SymbolChangesByExchangeResponse__ * soap_new___ns1__SymbolChangesByExchangeResponse__(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SymbolChangesByExchangeResponse__(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SymbolChangesByExchangeResponse__ * soap_new_req___ns1__SymbolChangesByExchangeResponse__(
	struct soap *soap)
{	struct __ns1__SymbolChangesByExchangeResponse__ *_p = soap_new___ns1__SymbolChangesByExchangeResponse__(soap);
	if (_p)
	{	soap_default___ns1__SymbolChangesByExchangeResponse__(soap, _p);
	}
	return _p;
}

inline struct __ns1__SymbolChangesByExchangeResponse__ * soap_new_set___ns1__SymbolChangesByExchangeResponse__(
	struct soap *soap)
{	struct __ns1__SymbolChangesByExchangeResponse__ *_p = soap_new___ns1__SymbolChangesByExchangeResponse__(soap);
	if (_p)
	{	soap_default___ns1__SymbolChangesByExchangeResponse__(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SymbolChangesByExchangeResponse__(struct soap*, const struct __ns1__SymbolChangesByExchangeResponse__ *, const char*, const char*);

#ifndef soap_write___ns1__SymbolChangesByExchangeResponse__
#define soap_write___ns1__SymbolChangesByExchangeResponse__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__SymbolChangesByExchangeResponse__(soap, data), 0) || ns::soap_put___ns1__SymbolChangesByExchangeResponse__(soap, data, "-ns1:SymbolChangesByExchangeResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SymbolChangesByExchangeResponse__ * SOAP_FMAC4 soap_get___ns1__SymbolChangesByExchangeResponse__(struct soap*, struct __ns1__SymbolChangesByExchangeResponse__ *, const char*, const char*);

#ifndef soap_read___ns1__SymbolChangesByExchangeResponse__
#define soap_read___ns1__SymbolChangesByExchangeResponse__(soap, data) ( ((data) ? (ns::soap_default___ns1__SymbolChangesByExchangeResponse__(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__SymbolChangesByExchangeResponse__(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__QuoteListByDatePeriod2Response__
#define SOAP_TYPE_ns___ns1__QuoteListByDatePeriod2Response__ (418)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__QuoteListByDatePeriod2Response__(struct soap*, struct __ns1__QuoteListByDatePeriod2Response__ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__QuoteListByDatePeriod2Response__(struct soap*, const struct __ns1__QuoteListByDatePeriod2Response__ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__QuoteListByDatePeriod2Response__(struct soap*, const char*, int, const struct __ns1__QuoteListByDatePeriod2Response__ *, const char*);
SOAP_FMAC3 struct __ns1__QuoteListByDatePeriod2Response__ * SOAP_FMAC4 soap_in___ns1__QuoteListByDatePeriod2Response__(struct soap*, const char*, struct __ns1__QuoteListByDatePeriod2Response__ *, const char*);
SOAP_FMAC1 struct __ns1__QuoteListByDatePeriod2Response__ * SOAP_FMAC2 soap_instantiate___ns1__QuoteListByDatePeriod2Response__(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__QuoteListByDatePeriod2Response__ * soap_new___ns1__QuoteListByDatePeriod2Response__(struct soap *soap, int n = -1) { return soap_instantiate___ns1__QuoteListByDatePeriod2Response__(soap, n, NULL, NULL, NULL); }

inline struct __ns1__QuoteListByDatePeriod2Response__ * soap_new_req___ns1__QuoteListByDatePeriod2Response__(
	struct soap *soap)
{	struct __ns1__QuoteListByDatePeriod2Response__ *_p = soap_new___ns1__QuoteListByDatePeriod2Response__(soap);
	if (_p)
	{	soap_default___ns1__QuoteListByDatePeriod2Response__(soap, _p);
	}
	return _p;
}

inline struct __ns1__QuoteListByDatePeriod2Response__ * soap_new_set___ns1__QuoteListByDatePeriod2Response__(
	struct soap *soap)
{	struct __ns1__QuoteListByDatePeriod2Response__ *_p = soap_new___ns1__QuoteListByDatePeriod2Response__(soap);
	if (_p)
	{	soap_default___ns1__QuoteListByDatePeriod2Response__(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__QuoteListByDatePeriod2Response__(struct soap*, const struct __ns1__QuoteListByDatePeriod2Response__ *, const char*, const char*);

#ifndef soap_write___ns1__QuoteListByDatePeriod2Response__
#define soap_write___ns1__QuoteListByDatePeriod2Response__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__QuoteListByDatePeriod2Response__(soap, data), 0) || ns::soap_put___ns1__QuoteListByDatePeriod2Response__(soap, data, "-ns1:QuoteListByDatePeriod2Response", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__QuoteListByDatePeriod2Response__ * SOAP_FMAC4 soap_get___ns1__QuoteListByDatePeriod2Response__(struct soap*, struct __ns1__QuoteListByDatePeriod2Response__ *, const char*, const char*);

#ifndef soap_read___ns1__QuoteListByDatePeriod2Response__
#define soap_read___ns1__QuoteListByDatePeriod2Response__(soap, data) ( ((data) ? (ns::soap_default___ns1__QuoteListByDatePeriod2Response__(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__QuoteListByDatePeriod2Response__(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__QuoteListByDatePeriodResponse__
#define SOAP_TYPE_ns___ns1__QuoteListByDatePeriodResponse__ (416)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__QuoteListByDatePeriodResponse__(struct soap*, struct __ns1__QuoteListByDatePeriodResponse__ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__QuoteListByDatePeriodResponse__(struct soap*, const struct __ns1__QuoteListByDatePeriodResponse__ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__QuoteListByDatePeriodResponse__(struct soap*, const char*, int, const struct __ns1__QuoteListByDatePeriodResponse__ *, const char*);
SOAP_FMAC3 struct __ns1__QuoteListByDatePeriodResponse__ * SOAP_FMAC4 soap_in___ns1__QuoteListByDatePeriodResponse__(struct soap*, const char*, struct __ns1__QuoteListByDatePeriodResponse__ *, const char*);
SOAP_FMAC1 struct __ns1__QuoteListByDatePeriodResponse__ * SOAP_FMAC2 soap_instantiate___ns1__QuoteListByDatePeriodResponse__(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__QuoteListByDatePeriodResponse__ * soap_new___ns1__QuoteListByDatePeriodResponse__(struct soap *soap, int n = -1) { return soap_instantiate___ns1__QuoteListByDatePeriodResponse__(soap, n, NULL, NULL, NULL); }

inline struct __ns1__QuoteListByDatePeriodResponse__ * soap_new_req___ns1__QuoteListByDatePeriodResponse__(
	struct soap *soap)
{	struct __ns1__QuoteListByDatePeriodResponse__ *_p = soap_new___ns1__QuoteListByDatePeriodResponse__(soap);
	if (_p)
	{	soap_default___ns1__QuoteListByDatePeriodResponse__(soap, _p);
	}
	return _p;
}

inline struct __ns1__QuoteListByDatePeriodResponse__ * soap_new_set___ns1__QuoteListByDatePeriodResponse__(
	struct soap *soap)
{	struct __ns1__QuoteListByDatePeriodResponse__ *_p = soap_new___ns1__QuoteListByDatePeriodResponse__(soap);
	if (_p)
	{	soap_default___ns1__QuoteListByDatePeriodResponse__(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__QuoteListByDatePeriodResponse__(struct soap*, const struct __ns1__QuoteListByDatePeriodResponse__ *, const char*, const char*);

#ifndef soap_write___ns1__QuoteListByDatePeriodResponse__
#define soap_write___ns1__QuoteListByDatePeriodResponse__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__QuoteListByDatePeriodResponse__(soap, data), 0) || ns::soap_put___ns1__QuoteListByDatePeriodResponse__(soap, data, "-ns1:QuoteListByDatePeriodResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__QuoteListByDatePeriodResponse__ * SOAP_FMAC4 soap_get___ns1__QuoteListByDatePeriodResponse__(struct soap*, struct __ns1__QuoteListByDatePeriodResponse__ *, const char*, const char*);

#ifndef soap_read___ns1__QuoteListByDatePeriodResponse__
#define soap_read___ns1__QuoteListByDatePeriodResponse__(soap, data) ( ((data) ? (ns::soap_default___ns1__QuoteListByDatePeriodResponse__(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__QuoteListByDatePeriodResponse__(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__SymbolHistoryPeriodByDateRangeResponse__
#define SOAP_TYPE_ns___ns1__SymbolHistoryPeriodByDateRangeResponse__ (414)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SymbolHistoryPeriodByDateRangeResponse__(struct soap*, struct __ns1__SymbolHistoryPeriodByDateRangeResponse__ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SymbolHistoryPeriodByDateRangeResponse__(struct soap*, const struct __ns1__SymbolHistoryPeriodByDateRangeResponse__ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SymbolHistoryPeriodByDateRangeResponse__(struct soap*, const char*, int, const struct __ns1__SymbolHistoryPeriodByDateRangeResponse__ *, const char*);
SOAP_FMAC3 struct __ns1__SymbolHistoryPeriodByDateRangeResponse__ * SOAP_FMAC4 soap_in___ns1__SymbolHistoryPeriodByDateRangeResponse__(struct soap*, const char*, struct __ns1__SymbolHistoryPeriodByDateRangeResponse__ *, const char*);
SOAP_FMAC1 struct __ns1__SymbolHistoryPeriodByDateRangeResponse__ * SOAP_FMAC2 soap_instantiate___ns1__SymbolHistoryPeriodByDateRangeResponse__(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SymbolHistoryPeriodByDateRangeResponse__ * soap_new___ns1__SymbolHistoryPeriodByDateRangeResponse__(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SymbolHistoryPeriodByDateRangeResponse__(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SymbolHistoryPeriodByDateRangeResponse__ * soap_new_req___ns1__SymbolHistoryPeriodByDateRangeResponse__(
	struct soap *soap)
{	struct __ns1__SymbolHistoryPeriodByDateRangeResponse__ *_p = soap_new___ns1__SymbolHistoryPeriodByDateRangeResponse__(soap);
	if (_p)
	{	soap_default___ns1__SymbolHistoryPeriodByDateRangeResponse__(soap, _p);
	}
	return _p;
}

inline struct __ns1__SymbolHistoryPeriodByDateRangeResponse__ * soap_new_set___ns1__SymbolHistoryPeriodByDateRangeResponse__(
	struct soap *soap)
{	struct __ns1__SymbolHistoryPeriodByDateRangeResponse__ *_p = soap_new___ns1__SymbolHistoryPeriodByDateRangeResponse__(soap);
	if (_p)
	{	soap_default___ns1__SymbolHistoryPeriodByDateRangeResponse__(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SymbolHistoryPeriodByDateRangeResponse__(struct soap*, const struct __ns1__SymbolHistoryPeriodByDateRangeResponse__ *, const char*, const char*);

#ifndef soap_write___ns1__SymbolHistoryPeriodByDateRangeResponse__
#define soap_write___ns1__SymbolHistoryPeriodByDateRangeResponse__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__SymbolHistoryPeriodByDateRangeResponse__(soap, data), 0) || ns::soap_put___ns1__SymbolHistoryPeriodByDateRangeResponse__(soap, data, "-ns1:SymbolHistoryPeriodByDateRangeResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SymbolHistoryPeriodByDateRangeResponse__ * SOAP_FMAC4 soap_get___ns1__SymbolHistoryPeriodByDateRangeResponse__(struct soap*, struct __ns1__SymbolHistoryPeriodByDateRangeResponse__ *, const char*, const char*);

#ifndef soap_read___ns1__SymbolHistoryPeriodByDateRangeResponse__
#define soap_read___ns1__SymbolHistoryPeriodByDateRangeResponse__(soap, data) ( ((data) ? (ns::soap_default___ns1__SymbolHistoryPeriodByDateRangeResponse__(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__SymbolHistoryPeriodByDateRangeResponse__(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__SymbolHistoryPeriodResponse__
#define SOAP_TYPE_ns___ns1__SymbolHistoryPeriodResponse__ (412)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SymbolHistoryPeriodResponse__(struct soap*, struct __ns1__SymbolHistoryPeriodResponse__ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SymbolHistoryPeriodResponse__(struct soap*, const struct __ns1__SymbolHistoryPeriodResponse__ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SymbolHistoryPeriodResponse__(struct soap*, const char*, int, const struct __ns1__SymbolHistoryPeriodResponse__ *, const char*);
SOAP_FMAC3 struct __ns1__SymbolHistoryPeriodResponse__ * SOAP_FMAC4 soap_in___ns1__SymbolHistoryPeriodResponse__(struct soap*, const char*, struct __ns1__SymbolHistoryPeriodResponse__ *, const char*);
SOAP_FMAC1 struct __ns1__SymbolHistoryPeriodResponse__ * SOAP_FMAC2 soap_instantiate___ns1__SymbolHistoryPeriodResponse__(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SymbolHistoryPeriodResponse__ * soap_new___ns1__SymbolHistoryPeriodResponse__(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SymbolHistoryPeriodResponse__(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SymbolHistoryPeriodResponse__ * soap_new_req___ns1__SymbolHistoryPeriodResponse__(
	struct soap *soap)
{	struct __ns1__SymbolHistoryPeriodResponse__ *_p = soap_new___ns1__SymbolHistoryPeriodResponse__(soap);
	if (_p)
	{	soap_default___ns1__SymbolHistoryPeriodResponse__(soap, _p);
	}
	return _p;
}

inline struct __ns1__SymbolHistoryPeriodResponse__ * soap_new_set___ns1__SymbolHistoryPeriodResponse__(
	struct soap *soap)
{	struct __ns1__SymbolHistoryPeriodResponse__ *_p = soap_new___ns1__SymbolHistoryPeriodResponse__(soap);
	if (_p)
	{	soap_default___ns1__SymbolHistoryPeriodResponse__(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SymbolHistoryPeriodResponse__(struct soap*, const struct __ns1__SymbolHistoryPeriodResponse__ *, const char*, const char*);

#ifndef soap_write___ns1__SymbolHistoryPeriodResponse__
#define soap_write___ns1__SymbolHistoryPeriodResponse__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__SymbolHistoryPeriodResponse__(soap, data), 0) || ns::soap_put___ns1__SymbolHistoryPeriodResponse__(soap, data, "-ns1:SymbolHistoryPeriodResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SymbolHistoryPeriodResponse__ * SOAP_FMAC4 soap_get___ns1__SymbolHistoryPeriodResponse__(struct soap*, struct __ns1__SymbolHistoryPeriodResponse__ *, const char*, const char*);

#ifndef soap_read___ns1__SymbolHistoryPeriodResponse__
#define soap_read___ns1__SymbolHistoryPeriodResponse__(soap, data) ( ((data) ? (ns::soap_default___ns1__SymbolHistoryPeriodResponse__(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__SymbolHistoryPeriodResponse__(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__CountryListResponse__
#define SOAP_TYPE_ns___ns1__CountryListResponse__ (410)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CountryListResponse__(struct soap*, struct __ns1__CountryListResponse__ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CountryListResponse__(struct soap*, const struct __ns1__CountryListResponse__ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CountryListResponse__(struct soap*, const char*, int, const struct __ns1__CountryListResponse__ *, const char*);
SOAP_FMAC3 struct __ns1__CountryListResponse__ * SOAP_FMAC4 soap_in___ns1__CountryListResponse__(struct soap*, const char*, struct __ns1__CountryListResponse__ *, const char*);
SOAP_FMAC1 struct __ns1__CountryListResponse__ * SOAP_FMAC2 soap_instantiate___ns1__CountryListResponse__(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__CountryListResponse__ * soap_new___ns1__CountryListResponse__(struct soap *soap, int n = -1) { return soap_instantiate___ns1__CountryListResponse__(soap, n, NULL, NULL, NULL); }

inline struct __ns1__CountryListResponse__ * soap_new_req___ns1__CountryListResponse__(
	struct soap *soap)
{	struct __ns1__CountryListResponse__ *_p = soap_new___ns1__CountryListResponse__(soap);
	if (_p)
	{	soap_default___ns1__CountryListResponse__(soap, _p);
	}
	return _p;
}

inline struct __ns1__CountryListResponse__ * soap_new_set___ns1__CountryListResponse__(
	struct soap *soap)
{	struct __ns1__CountryListResponse__ *_p = soap_new___ns1__CountryListResponse__(soap);
	if (_p)
	{	soap_default___ns1__CountryListResponse__(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CountryListResponse__(struct soap*, const struct __ns1__CountryListResponse__ *, const char*, const char*);

#ifndef soap_write___ns1__CountryListResponse__
#define soap_write___ns1__CountryListResponse__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__CountryListResponse__(soap, data), 0) || ns::soap_put___ns1__CountryListResponse__(soap, data, "-ns1:CountryListResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__CountryListResponse__ * SOAP_FMAC4 soap_get___ns1__CountryListResponse__(struct soap*, struct __ns1__CountryListResponse__ *, const char*, const char*);

#ifndef soap_read___ns1__CountryListResponse__
#define soap_read___ns1__CountryListResponse__(soap, data) ( ((data) ? (ns::soap_default___ns1__CountryListResponse__(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__CountryListResponse__(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__SplitListBySymbolResponse__
#define SOAP_TYPE_ns___ns1__SplitListBySymbolResponse__ (408)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SplitListBySymbolResponse__(struct soap*, struct __ns1__SplitListBySymbolResponse__ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SplitListBySymbolResponse__(struct soap*, const struct __ns1__SplitListBySymbolResponse__ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SplitListBySymbolResponse__(struct soap*, const char*, int, const struct __ns1__SplitListBySymbolResponse__ *, const char*);
SOAP_FMAC3 struct __ns1__SplitListBySymbolResponse__ * SOAP_FMAC4 soap_in___ns1__SplitListBySymbolResponse__(struct soap*, const char*, struct __ns1__SplitListBySymbolResponse__ *, const char*);
SOAP_FMAC1 struct __ns1__SplitListBySymbolResponse__ * SOAP_FMAC2 soap_instantiate___ns1__SplitListBySymbolResponse__(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SplitListBySymbolResponse__ * soap_new___ns1__SplitListBySymbolResponse__(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SplitListBySymbolResponse__(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SplitListBySymbolResponse__ * soap_new_req___ns1__SplitListBySymbolResponse__(
	struct soap *soap)
{	struct __ns1__SplitListBySymbolResponse__ *_p = soap_new___ns1__SplitListBySymbolResponse__(soap);
	if (_p)
	{	soap_default___ns1__SplitListBySymbolResponse__(soap, _p);
	}
	return _p;
}

inline struct __ns1__SplitListBySymbolResponse__ * soap_new_set___ns1__SplitListBySymbolResponse__(
	struct soap *soap)
{	struct __ns1__SplitListBySymbolResponse__ *_p = soap_new___ns1__SplitListBySymbolResponse__(soap);
	if (_p)
	{	soap_default___ns1__SplitListBySymbolResponse__(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SplitListBySymbolResponse__(struct soap*, const struct __ns1__SplitListBySymbolResponse__ *, const char*, const char*);

#ifndef soap_write___ns1__SplitListBySymbolResponse__
#define soap_write___ns1__SplitListBySymbolResponse__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__SplitListBySymbolResponse__(soap, data), 0) || ns::soap_put___ns1__SplitListBySymbolResponse__(soap, data, "-ns1:SplitListBySymbolResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SplitListBySymbolResponse__ * SOAP_FMAC4 soap_get___ns1__SplitListBySymbolResponse__(struct soap*, struct __ns1__SplitListBySymbolResponse__ *, const char*, const char*);

#ifndef soap_read___ns1__SplitListBySymbolResponse__
#define soap_read___ns1__SplitListBySymbolResponse__(soap, data) ( ((data) ? (ns::soap_default___ns1__SplitListBySymbolResponse__(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__SplitListBySymbolResponse__(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__SplitListByExchangeResponse__
#define SOAP_TYPE_ns___ns1__SplitListByExchangeResponse__ (406)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SplitListByExchangeResponse__(struct soap*, struct __ns1__SplitListByExchangeResponse__ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SplitListByExchangeResponse__(struct soap*, const struct __ns1__SplitListByExchangeResponse__ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SplitListByExchangeResponse__(struct soap*, const char*, int, const struct __ns1__SplitListByExchangeResponse__ *, const char*);
SOAP_FMAC3 struct __ns1__SplitListByExchangeResponse__ * SOAP_FMAC4 soap_in___ns1__SplitListByExchangeResponse__(struct soap*, const char*, struct __ns1__SplitListByExchangeResponse__ *, const char*);
SOAP_FMAC1 struct __ns1__SplitListByExchangeResponse__ * SOAP_FMAC2 soap_instantiate___ns1__SplitListByExchangeResponse__(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SplitListByExchangeResponse__ * soap_new___ns1__SplitListByExchangeResponse__(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SplitListByExchangeResponse__(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SplitListByExchangeResponse__ * soap_new_req___ns1__SplitListByExchangeResponse__(
	struct soap *soap)
{	struct __ns1__SplitListByExchangeResponse__ *_p = soap_new___ns1__SplitListByExchangeResponse__(soap);
	if (_p)
	{	soap_default___ns1__SplitListByExchangeResponse__(soap, _p);
	}
	return _p;
}

inline struct __ns1__SplitListByExchangeResponse__ * soap_new_set___ns1__SplitListByExchangeResponse__(
	struct soap *soap)
{	struct __ns1__SplitListByExchangeResponse__ *_p = soap_new___ns1__SplitListByExchangeResponse__(soap);
	if (_p)
	{	soap_default___ns1__SplitListByExchangeResponse__(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SplitListByExchangeResponse__(struct soap*, const struct __ns1__SplitListByExchangeResponse__ *, const char*, const char*);

#ifndef soap_write___ns1__SplitListByExchangeResponse__
#define soap_write___ns1__SplitListByExchangeResponse__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__SplitListByExchangeResponse__(soap, data), 0) || ns::soap_put___ns1__SplitListByExchangeResponse__(soap, data, "-ns1:SplitListByExchangeResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SplitListByExchangeResponse__ * SOAP_FMAC4 soap_get___ns1__SplitListByExchangeResponse__(struct soap*, struct __ns1__SplitListByExchangeResponse__ *, const char*, const char*);

#ifndef soap_read___ns1__SplitListByExchangeResponse__
#define soap_read___ns1__SplitListByExchangeResponse__(soap, data) ( ((data) ? (ns::soap_default___ns1__SplitListByExchangeResponse__(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__SplitListByExchangeResponse__(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__ExchangeMonthsResponse__
#define SOAP_TYPE_ns___ns1__ExchangeMonthsResponse__ (404)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ExchangeMonthsResponse__(struct soap*, struct __ns1__ExchangeMonthsResponse__ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ExchangeMonthsResponse__(struct soap*, const struct __ns1__ExchangeMonthsResponse__ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ExchangeMonthsResponse__(struct soap*, const char*, int, const struct __ns1__ExchangeMonthsResponse__ *, const char*);
SOAP_FMAC3 struct __ns1__ExchangeMonthsResponse__ * SOAP_FMAC4 soap_in___ns1__ExchangeMonthsResponse__(struct soap*, const char*, struct __ns1__ExchangeMonthsResponse__ *, const char*);
SOAP_FMAC1 struct __ns1__ExchangeMonthsResponse__ * SOAP_FMAC2 soap_instantiate___ns1__ExchangeMonthsResponse__(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ExchangeMonthsResponse__ * soap_new___ns1__ExchangeMonthsResponse__(struct soap *soap, int n = -1) { return soap_instantiate___ns1__ExchangeMonthsResponse__(soap, n, NULL, NULL, NULL); }

inline struct __ns1__ExchangeMonthsResponse__ * soap_new_req___ns1__ExchangeMonthsResponse__(
	struct soap *soap)
{	struct __ns1__ExchangeMonthsResponse__ *_p = soap_new___ns1__ExchangeMonthsResponse__(soap);
	if (_p)
	{	soap_default___ns1__ExchangeMonthsResponse__(soap, _p);
	}
	return _p;
}

inline struct __ns1__ExchangeMonthsResponse__ * soap_new_set___ns1__ExchangeMonthsResponse__(
	struct soap *soap)
{	struct __ns1__ExchangeMonthsResponse__ *_p = soap_new___ns1__ExchangeMonthsResponse__(soap);
	if (_p)
	{	soap_default___ns1__ExchangeMonthsResponse__(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ExchangeMonthsResponse__(struct soap*, const struct __ns1__ExchangeMonthsResponse__ *, const char*, const char*);

#ifndef soap_write___ns1__ExchangeMonthsResponse__
#define soap_write___ns1__ExchangeMonthsResponse__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__ExchangeMonthsResponse__(soap, data), 0) || ns::soap_put___ns1__ExchangeMonthsResponse__(soap, data, "-ns1:ExchangeMonthsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__ExchangeMonthsResponse__ * SOAP_FMAC4 soap_get___ns1__ExchangeMonthsResponse__(struct soap*, struct __ns1__ExchangeMonthsResponse__ *, const char*, const char*);

#ifndef soap_read___ns1__ExchangeMonthsResponse__
#define soap_read___ns1__ExchangeMonthsResponse__(soap, data) ( ((data) ? (ns::soap_default___ns1__ExchangeMonthsResponse__(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__ExchangeMonthsResponse__(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__SymbolChartResponse__
#define SOAP_TYPE_ns___ns1__SymbolChartResponse__ (402)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SymbolChartResponse__(struct soap*, struct __ns1__SymbolChartResponse__ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SymbolChartResponse__(struct soap*, const struct __ns1__SymbolChartResponse__ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SymbolChartResponse__(struct soap*, const char*, int, const struct __ns1__SymbolChartResponse__ *, const char*);
SOAP_FMAC3 struct __ns1__SymbolChartResponse__ * SOAP_FMAC4 soap_in___ns1__SymbolChartResponse__(struct soap*, const char*, struct __ns1__SymbolChartResponse__ *, const char*);
SOAP_FMAC1 struct __ns1__SymbolChartResponse__ * SOAP_FMAC2 soap_instantiate___ns1__SymbolChartResponse__(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SymbolChartResponse__ * soap_new___ns1__SymbolChartResponse__(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SymbolChartResponse__(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SymbolChartResponse__ * soap_new_req___ns1__SymbolChartResponse__(
	struct soap *soap)
{	struct __ns1__SymbolChartResponse__ *_p = soap_new___ns1__SymbolChartResponse__(soap);
	if (_p)
	{	soap_default___ns1__SymbolChartResponse__(soap, _p);
	}
	return _p;
}

inline struct __ns1__SymbolChartResponse__ * soap_new_set___ns1__SymbolChartResponse__(
	struct soap *soap)
{	struct __ns1__SymbolChartResponse__ *_p = soap_new___ns1__SymbolChartResponse__(soap);
	if (_p)
	{	soap_default___ns1__SymbolChartResponse__(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SymbolChartResponse__(struct soap*, const struct __ns1__SymbolChartResponse__ *, const char*, const char*);

#ifndef soap_write___ns1__SymbolChartResponse__
#define soap_write___ns1__SymbolChartResponse__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__SymbolChartResponse__(soap, data), 0) || ns::soap_put___ns1__SymbolChartResponse__(soap, data, "-ns1:SymbolChartResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SymbolChartResponse__ * SOAP_FMAC4 soap_get___ns1__SymbolChartResponse__(struct soap*, struct __ns1__SymbolChartResponse__ *, const char*, const char*);

#ifndef soap_read___ns1__SymbolChartResponse__
#define soap_read___ns1__SymbolChartResponse__(soap, data) ( ((data) ? (ns::soap_default___ns1__SymbolChartResponse__(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__SymbolChartResponse__(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__Top10LossesResponse__
#define SOAP_TYPE_ns___ns1__Top10LossesResponse__ (400)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Top10LossesResponse__(struct soap*, struct __ns1__Top10LossesResponse__ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Top10LossesResponse__(struct soap*, const struct __ns1__Top10LossesResponse__ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Top10LossesResponse__(struct soap*, const char*, int, const struct __ns1__Top10LossesResponse__ *, const char*);
SOAP_FMAC3 struct __ns1__Top10LossesResponse__ * SOAP_FMAC4 soap_in___ns1__Top10LossesResponse__(struct soap*, const char*, struct __ns1__Top10LossesResponse__ *, const char*);
SOAP_FMAC1 struct __ns1__Top10LossesResponse__ * SOAP_FMAC2 soap_instantiate___ns1__Top10LossesResponse__(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Top10LossesResponse__ * soap_new___ns1__Top10LossesResponse__(struct soap *soap, int n = -1) { return soap_instantiate___ns1__Top10LossesResponse__(soap, n, NULL, NULL, NULL); }

inline struct __ns1__Top10LossesResponse__ * soap_new_req___ns1__Top10LossesResponse__(
	struct soap *soap)
{	struct __ns1__Top10LossesResponse__ *_p = soap_new___ns1__Top10LossesResponse__(soap);
	if (_p)
	{	soap_default___ns1__Top10LossesResponse__(soap, _p);
	}
	return _p;
}

inline struct __ns1__Top10LossesResponse__ * soap_new_set___ns1__Top10LossesResponse__(
	struct soap *soap)
{	struct __ns1__Top10LossesResponse__ *_p = soap_new___ns1__Top10LossesResponse__(soap);
	if (_p)
	{	soap_default___ns1__Top10LossesResponse__(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Top10LossesResponse__(struct soap*, const struct __ns1__Top10LossesResponse__ *, const char*, const char*);

#ifndef soap_write___ns1__Top10LossesResponse__
#define soap_write___ns1__Top10LossesResponse__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__Top10LossesResponse__(soap, data), 0) || ns::soap_put___ns1__Top10LossesResponse__(soap, data, "-ns1:Top10LossesResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__Top10LossesResponse__ * SOAP_FMAC4 soap_get___ns1__Top10LossesResponse__(struct soap*, struct __ns1__Top10LossesResponse__ *, const char*, const char*);

#ifndef soap_read___ns1__Top10LossesResponse__
#define soap_read___ns1__Top10LossesResponse__(soap, data) ( ((data) ? (ns::soap_default___ns1__Top10LossesResponse__(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__Top10LossesResponse__(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__Top10GainsResponse__
#define SOAP_TYPE_ns___ns1__Top10GainsResponse__ (398)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Top10GainsResponse__(struct soap*, struct __ns1__Top10GainsResponse__ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Top10GainsResponse__(struct soap*, const struct __ns1__Top10GainsResponse__ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Top10GainsResponse__(struct soap*, const char*, int, const struct __ns1__Top10GainsResponse__ *, const char*);
SOAP_FMAC3 struct __ns1__Top10GainsResponse__ * SOAP_FMAC4 soap_in___ns1__Top10GainsResponse__(struct soap*, const char*, struct __ns1__Top10GainsResponse__ *, const char*);
SOAP_FMAC1 struct __ns1__Top10GainsResponse__ * SOAP_FMAC2 soap_instantiate___ns1__Top10GainsResponse__(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Top10GainsResponse__ * soap_new___ns1__Top10GainsResponse__(struct soap *soap, int n = -1) { return soap_instantiate___ns1__Top10GainsResponse__(soap, n, NULL, NULL, NULL); }

inline struct __ns1__Top10GainsResponse__ * soap_new_req___ns1__Top10GainsResponse__(
	struct soap *soap)
{	struct __ns1__Top10GainsResponse__ *_p = soap_new___ns1__Top10GainsResponse__(soap);
	if (_p)
	{	soap_default___ns1__Top10GainsResponse__(soap, _p);
	}
	return _p;
}

inline struct __ns1__Top10GainsResponse__ * soap_new_set___ns1__Top10GainsResponse__(
	struct soap *soap)
{	struct __ns1__Top10GainsResponse__ *_p = soap_new___ns1__Top10GainsResponse__(soap);
	if (_p)
	{	soap_default___ns1__Top10GainsResponse__(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Top10GainsResponse__(struct soap*, const struct __ns1__Top10GainsResponse__ *, const char*, const char*);

#ifndef soap_write___ns1__Top10GainsResponse__
#define soap_write___ns1__Top10GainsResponse__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__Top10GainsResponse__(soap, data), 0) || ns::soap_put___ns1__Top10GainsResponse__(soap, data, "-ns1:Top10GainsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__Top10GainsResponse__ * SOAP_FMAC4 soap_get___ns1__Top10GainsResponse__(struct soap*, struct __ns1__Top10GainsResponse__ *, const char*, const char*);

#ifndef soap_read___ns1__Top10GainsResponse__
#define soap_read___ns1__Top10GainsResponse__(soap, data) ( ((data) ? (ns::soap_default___ns1__Top10GainsResponse__(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__Top10GainsResponse__(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__SymbolHistoryResponse__
#define SOAP_TYPE_ns___ns1__SymbolHistoryResponse__ (396)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SymbolHistoryResponse__(struct soap*, struct __ns1__SymbolHistoryResponse__ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SymbolHistoryResponse__(struct soap*, const struct __ns1__SymbolHistoryResponse__ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SymbolHistoryResponse__(struct soap*, const char*, int, const struct __ns1__SymbolHistoryResponse__ *, const char*);
SOAP_FMAC3 struct __ns1__SymbolHistoryResponse__ * SOAP_FMAC4 soap_in___ns1__SymbolHistoryResponse__(struct soap*, const char*, struct __ns1__SymbolHistoryResponse__ *, const char*);
SOAP_FMAC1 struct __ns1__SymbolHistoryResponse__ * SOAP_FMAC2 soap_instantiate___ns1__SymbolHistoryResponse__(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SymbolHistoryResponse__ * soap_new___ns1__SymbolHistoryResponse__(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SymbolHistoryResponse__(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SymbolHistoryResponse__ * soap_new_req___ns1__SymbolHistoryResponse__(
	struct soap *soap)
{	struct __ns1__SymbolHistoryResponse__ *_p = soap_new___ns1__SymbolHistoryResponse__(soap);
	if (_p)
	{	soap_default___ns1__SymbolHistoryResponse__(soap, _p);
	}
	return _p;
}

inline struct __ns1__SymbolHistoryResponse__ * soap_new_set___ns1__SymbolHistoryResponse__(
	struct soap *soap)
{	struct __ns1__SymbolHistoryResponse__ *_p = soap_new___ns1__SymbolHistoryResponse__(soap);
	if (_p)
	{	soap_default___ns1__SymbolHistoryResponse__(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SymbolHistoryResponse__(struct soap*, const struct __ns1__SymbolHistoryResponse__ *, const char*, const char*);

#ifndef soap_write___ns1__SymbolHistoryResponse__
#define soap_write___ns1__SymbolHistoryResponse__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__SymbolHistoryResponse__(soap, data), 0) || ns::soap_put___ns1__SymbolHistoryResponse__(soap, data, "-ns1:SymbolHistoryResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SymbolHistoryResponse__ * SOAP_FMAC4 soap_get___ns1__SymbolHistoryResponse__(struct soap*, struct __ns1__SymbolHistoryResponse__ *, const char*, const char*);

#ifndef soap_read___ns1__SymbolHistoryResponse__
#define soap_read___ns1__SymbolHistoryResponse__(soap, data) ( ((data) ? (ns::soap_default___ns1__SymbolHistoryResponse__(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__SymbolHistoryResponse__(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__QuoteListByDate2Response__
#define SOAP_TYPE_ns___ns1__QuoteListByDate2Response__ (394)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__QuoteListByDate2Response__(struct soap*, struct __ns1__QuoteListByDate2Response__ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__QuoteListByDate2Response__(struct soap*, const struct __ns1__QuoteListByDate2Response__ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__QuoteListByDate2Response__(struct soap*, const char*, int, const struct __ns1__QuoteListByDate2Response__ *, const char*);
SOAP_FMAC3 struct __ns1__QuoteListByDate2Response__ * SOAP_FMAC4 soap_in___ns1__QuoteListByDate2Response__(struct soap*, const char*, struct __ns1__QuoteListByDate2Response__ *, const char*);
SOAP_FMAC1 struct __ns1__QuoteListByDate2Response__ * SOAP_FMAC2 soap_instantiate___ns1__QuoteListByDate2Response__(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__QuoteListByDate2Response__ * soap_new___ns1__QuoteListByDate2Response__(struct soap *soap, int n = -1) { return soap_instantiate___ns1__QuoteListByDate2Response__(soap, n, NULL, NULL, NULL); }

inline struct __ns1__QuoteListByDate2Response__ * soap_new_req___ns1__QuoteListByDate2Response__(
	struct soap *soap)
{	struct __ns1__QuoteListByDate2Response__ *_p = soap_new___ns1__QuoteListByDate2Response__(soap);
	if (_p)
	{	soap_default___ns1__QuoteListByDate2Response__(soap, _p);
	}
	return _p;
}

inline struct __ns1__QuoteListByDate2Response__ * soap_new_set___ns1__QuoteListByDate2Response__(
	struct soap *soap)
{	struct __ns1__QuoteListByDate2Response__ *_p = soap_new___ns1__QuoteListByDate2Response__(soap);
	if (_p)
	{	soap_default___ns1__QuoteListByDate2Response__(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__QuoteListByDate2Response__(struct soap*, const struct __ns1__QuoteListByDate2Response__ *, const char*, const char*);

#ifndef soap_write___ns1__QuoteListByDate2Response__
#define soap_write___ns1__QuoteListByDate2Response__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__QuoteListByDate2Response__(soap, data), 0) || ns::soap_put___ns1__QuoteListByDate2Response__(soap, data, "-ns1:QuoteListByDate2Response", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__QuoteListByDate2Response__ * SOAP_FMAC4 soap_get___ns1__QuoteListByDate2Response__(struct soap*, struct __ns1__QuoteListByDate2Response__ *, const char*, const char*);

#ifndef soap_read___ns1__QuoteListByDate2Response__
#define soap_read___ns1__QuoteListByDate2Response__(soap, data) ( ((data) ? (ns::soap_default___ns1__QuoteListByDate2Response__(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__QuoteListByDate2Response__(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__QuoteListByDateResponse__
#define SOAP_TYPE_ns___ns1__QuoteListByDateResponse__ (392)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__QuoteListByDateResponse__(struct soap*, struct __ns1__QuoteListByDateResponse__ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__QuoteListByDateResponse__(struct soap*, const struct __ns1__QuoteListByDateResponse__ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__QuoteListByDateResponse__(struct soap*, const char*, int, const struct __ns1__QuoteListByDateResponse__ *, const char*);
SOAP_FMAC3 struct __ns1__QuoteListByDateResponse__ * SOAP_FMAC4 soap_in___ns1__QuoteListByDateResponse__(struct soap*, const char*, struct __ns1__QuoteListByDateResponse__ *, const char*);
SOAP_FMAC1 struct __ns1__QuoteListByDateResponse__ * SOAP_FMAC2 soap_instantiate___ns1__QuoteListByDateResponse__(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__QuoteListByDateResponse__ * soap_new___ns1__QuoteListByDateResponse__(struct soap *soap, int n = -1) { return soap_instantiate___ns1__QuoteListByDateResponse__(soap, n, NULL, NULL, NULL); }

inline struct __ns1__QuoteListByDateResponse__ * soap_new_req___ns1__QuoteListByDateResponse__(
	struct soap *soap)
{	struct __ns1__QuoteListByDateResponse__ *_p = soap_new___ns1__QuoteListByDateResponse__(soap);
	if (_p)
	{	soap_default___ns1__QuoteListByDateResponse__(soap, _p);
	}
	return _p;
}

inline struct __ns1__QuoteListByDateResponse__ * soap_new_set___ns1__QuoteListByDateResponse__(
	struct soap *soap)
{	struct __ns1__QuoteListByDateResponse__ *_p = soap_new___ns1__QuoteListByDateResponse__(soap);
	if (_p)
	{	soap_default___ns1__QuoteListByDateResponse__(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__QuoteListByDateResponse__(struct soap*, const struct __ns1__QuoteListByDateResponse__ *, const char*, const char*);

#ifndef soap_write___ns1__QuoteListByDateResponse__
#define soap_write___ns1__QuoteListByDateResponse__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__QuoteListByDateResponse__(soap, data), 0) || ns::soap_put___ns1__QuoteListByDateResponse__(soap, data, "-ns1:QuoteListByDateResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__QuoteListByDateResponse__ * SOAP_FMAC4 soap_get___ns1__QuoteListByDateResponse__(struct soap*, struct __ns1__QuoteListByDateResponse__ *, const char*, const char*);

#ifndef soap_read___ns1__QuoteListByDateResponse__
#define soap_read___ns1__QuoteListByDateResponse__(soap, data) ( ((data) ? (ns::soap_default___ns1__QuoteListByDateResponse__(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__QuoteListByDateResponse__(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__TechnicalListResponse__
#define SOAP_TYPE_ns___ns1__TechnicalListResponse__ (390)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__TechnicalListResponse__(struct soap*, struct __ns1__TechnicalListResponse__ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__TechnicalListResponse__(struct soap*, const struct __ns1__TechnicalListResponse__ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__TechnicalListResponse__(struct soap*, const char*, int, const struct __ns1__TechnicalListResponse__ *, const char*);
SOAP_FMAC3 struct __ns1__TechnicalListResponse__ * SOAP_FMAC4 soap_in___ns1__TechnicalListResponse__(struct soap*, const char*, struct __ns1__TechnicalListResponse__ *, const char*);
SOAP_FMAC1 struct __ns1__TechnicalListResponse__ * SOAP_FMAC2 soap_instantiate___ns1__TechnicalListResponse__(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__TechnicalListResponse__ * soap_new___ns1__TechnicalListResponse__(struct soap *soap, int n = -1) { return soap_instantiate___ns1__TechnicalListResponse__(soap, n, NULL, NULL, NULL); }

inline struct __ns1__TechnicalListResponse__ * soap_new_req___ns1__TechnicalListResponse__(
	struct soap *soap)
{	struct __ns1__TechnicalListResponse__ *_p = soap_new___ns1__TechnicalListResponse__(soap);
	if (_p)
	{	soap_default___ns1__TechnicalListResponse__(soap, _p);
	}
	return _p;
}

inline struct __ns1__TechnicalListResponse__ * soap_new_set___ns1__TechnicalListResponse__(
	struct soap *soap)
{	struct __ns1__TechnicalListResponse__ *_p = soap_new___ns1__TechnicalListResponse__(soap);
	if (_p)
	{	soap_default___ns1__TechnicalListResponse__(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__TechnicalListResponse__(struct soap*, const struct __ns1__TechnicalListResponse__ *, const char*, const char*);

#ifndef soap_write___ns1__TechnicalListResponse__
#define soap_write___ns1__TechnicalListResponse__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__TechnicalListResponse__(soap, data), 0) || ns::soap_put___ns1__TechnicalListResponse__(soap, data, "-ns1:TechnicalListResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__TechnicalListResponse__ * SOAP_FMAC4 soap_get___ns1__TechnicalListResponse__(struct soap*, struct __ns1__TechnicalListResponse__ *, const char*, const char*);

#ifndef soap_read___ns1__TechnicalListResponse__
#define soap_read___ns1__TechnicalListResponse__(soap, data) ( ((data) ? (ns::soap_default___ns1__TechnicalListResponse__(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__TechnicalListResponse__(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__FundamentalListResponse__
#define SOAP_TYPE_ns___ns1__FundamentalListResponse__ (388)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__FundamentalListResponse__(struct soap*, struct __ns1__FundamentalListResponse__ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__FundamentalListResponse__(struct soap*, const struct __ns1__FundamentalListResponse__ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__FundamentalListResponse__(struct soap*, const char*, int, const struct __ns1__FundamentalListResponse__ *, const char*);
SOAP_FMAC3 struct __ns1__FundamentalListResponse__ * SOAP_FMAC4 soap_in___ns1__FundamentalListResponse__(struct soap*, const char*, struct __ns1__FundamentalListResponse__ *, const char*);
SOAP_FMAC1 struct __ns1__FundamentalListResponse__ * SOAP_FMAC2 soap_instantiate___ns1__FundamentalListResponse__(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__FundamentalListResponse__ * soap_new___ns1__FundamentalListResponse__(struct soap *soap, int n = -1) { return soap_instantiate___ns1__FundamentalListResponse__(soap, n, NULL, NULL, NULL); }

inline struct __ns1__FundamentalListResponse__ * soap_new_req___ns1__FundamentalListResponse__(
	struct soap *soap)
{	struct __ns1__FundamentalListResponse__ *_p = soap_new___ns1__FundamentalListResponse__(soap);
	if (_p)
	{	soap_default___ns1__FundamentalListResponse__(soap, _p);
	}
	return _p;
}

inline struct __ns1__FundamentalListResponse__ * soap_new_set___ns1__FundamentalListResponse__(
	struct soap *soap)
{	struct __ns1__FundamentalListResponse__ *_p = soap_new___ns1__FundamentalListResponse__(soap);
	if (_p)
	{	soap_default___ns1__FundamentalListResponse__(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__FundamentalListResponse__(struct soap*, const struct __ns1__FundamentalListResponse__ *, const char*, const char*);

#ifndef soap_write___ns1__FundamentalListResponse__
#define soap_write___ns1__FundamentalListResponse__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__FundamentalListResponse__(soap, data), 0) || ns::soap_put___ns1__FundamentalListResponse__(soap, data, "-ns1:FundamentalListResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__FundamentalListResponse__ * SOAP_FMAC4 soap_get___ns1__FundamentalListResponse__(struct soap*, struct __ns1__FundamentalListResponse__ *, const char*, const char*);

#ifndef soap_read___ns1__FundamentalListResponse__
#define soap_read___ns1__FundamentalListResponse__(soap, data) ( ((data) ? (ns::soap_default___ns1__FundamentalListResponse__(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__FundamentalListResponse__(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__NewsListBySymbolResponse__
#define SOAP_TYPE_ns___ns1__NewsListBySymbolResponse__ (386)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__NewsListBySymbolResponse__(struct soap*, struct __ns1__NewsListBySymbolResponse__ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__NewsListBySymbolResponse__(struct soap*, const struct __ns1__NewsListBySymbolResponse__ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__NewsListBySymbolResponse__(struct soap*, const char*, int, const struct __ns1__NewsListBySymbolResponse__ *, const char*);
SOAP_FMAC3 struct __ns1__NewsListBySymbolResponse__ * SOAP_FMAC4 soap_in___ns1__NewsListBySymbolResponse__(struct soap*, const char*, struct __ns1__NewsListBySymbolResponse__ *, const char*);
SOAP_FMAC1 struct __ns1__NewsListBySymbolResponse__ * SOAP_FMAC2 soap_instantiate___ns1__NewsListBySymbolResponse__(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__NewsListBySymbolResponse__ * soap_new___ns1__NewsListBySymbolResponse__(struct soap *soap, int n = -1) { return soap_instantiate___ns1__NewsListBySymbolResponse__(soap, n, NULL, NULL, NULL); }

inline struct __ns1__NewsListBySymbolResponse__ * soap_new_req___ns1__NewsListBySymbolResponse__(
	struct soap *soap)
{	struct __ns1__NewsListBySymbolResponse__ *_p = soap_new___ns1__NewsListBySymbolResponse__(soap);
	if (_p)
	{	soap_default___ns1__NewsListBySymbolResponse__(soap, _p);
	}
	return _p;
}

inline struct __ns1__NewsListBySymbolResponse__ * soap_new_set___ns1__NewsListBySymbolResponse__(
	struct soap *soap)
{	struct __ns1__NewsListBySymbolResponse__ *_p = soap_new___ns1__NewsListBySymbolResponse__(soap);
	if (_p)
	{	soap_default___ns1__NewsListBySymbolResponse__(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__NewsListBySymbolResponse__(struct soap*, const struct __ns1__NewsListBySymbolResponse__ *, const char*, const char*);

#ifndef soap_write___ns1__NewsListBySymbolResponse__
#define soap_write___ns1__NewsListBySymbolResponse__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__NewsListBySymbolResponse__(soap, data), 0) || ns::soap_put___ns1__NewsListBySymbolResponse__(soap, data, "-ns1:NewsListBySymbolResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__NewsListBySymbolResponse__ * SOAP_FMAC4 soap_get___ns1__NewsListBySymbolResponse__(struct soap*, struct __ns1__NewsListBySymbolResponse__ *, const char*, const char*);

#ifndef soap_read___ns1__NewsListBySymbolResponse__
#define soap_read___ns1__NewsListBySymbolResponse__(soap, data) ( ((data) ? (ns::soap_default___ns1__NewsListBySymbolResponse__(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__NewsListBySymbolResponse__(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__NewsListResponse__
#define SOAP_TYPE_ns___ns1__NewsListResponse__ (384)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__NewsListResponse__(struct soap*, struct __ns1__NewsListResponse__ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__NewsListResponse__(struct soap*, const struct __ns1__NewsListResponse__ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__NewsListResponse__(struct soap*, const char*, int, const struct __ns1__NewsListResponse__ *, const char*);
SOAP_FMAC3 struct __ns1__NewsListResponse__ * SOAP_FMAC4 soap_in___ns1__NewsListResponse__(struct soap*, const char*, struct __ns1__NewsListResponse__ *, const char*);
SOAP_FMAC1 struct __ns1__NewsListResponse__ * SOAP_FMAC2 soap_instantiate___ns1__NewsListResponse__(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__NewsListResponse__ * soap_new___ns1__NewsListResponse__(struct soap *soap, int n = -1) { return soap_instantiate___ns1__NewsListResponse__(soap, n, NULL, NULL, NULL); }

inline struct __ns1__NewsListResponse__ * soap_new_req___ns1__NewsListResponse__(
	struct soap *soap)
{	struct __ns1__NewsListResponse__ *_p = soap_new___ns1__NewsListResponse__(soap);
	if (_p)
	{	soap_default___ns1__NewsListResponse__(soap, _p);
	}
	return _p;
}

inline struct __ns1__NewsListResponse__ * soap_new_set___ns1__NewsListResponse__(
	struct soap *soap)
{	struct __ns1__NewsListResponse__ *_p = soap_new___ns1__NewsListResponse__(soap);
	if (_p)
	{	soap_default___ns1__NewsListResponse__(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__NewsListResponse__(struct soap*, const struct __ns1__NewsListResponse__ *, const char*, const char*);

#ifndef soap_write___ns1__NewsListResponse__
#define soap_write___ns1__NewsListResponse__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__NewsListResponse__(soap, data), 0) || ns::soap_put___ns1__NewsListResponse__(soap, data, "-ns1:NewsListResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__NewsListResponse__ * SOAP_FMAC4 soap_get___ns1__NewsListResponse__(struct soap*, struct __ns1__NewsListResponse__ *, const char*, const char*);

#ifndef soap_read___ns1__NewsListResponse__
#define soap_read___ns1__NewsListResponse__(soap, data) ( ((data) ? (ns::soap_default___ns1__NewsListResponse__(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__NewsListResponse__(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__QuoteListResponse__
#define SOAP_TYPE_ns___ns1__QuoteListResponse__ (382)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__QuoteListResponse__(struct soap*, struct __ns1__QuoteListResponse__ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__QuoteListResponse__(struct soap*, const struct __ns1__QuoteListResponse__ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__QuoteListResponse__(struct soap*, const char*, int, const struct __ns1__QuoteListResponse__ *, const char*);
SOAP_FMAC3 struct __ns1__QuoteListResponse__ * SOAP_FMAC4 soap_in___ns1__QuoteListResponse__(struct soap*, const char*, struct __ns1__QuoteListResponse__ *, const char*);
SOAP_FMAC1 struct __ns1__QuoteListResponse__ * SOAP_FMAC2 soap_instantiate___ns1__QuoteListResponse__(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__QuoteListResponse__ * soap_new___ns1__QuoteListResponse__(struct soap *soap, int n = -1) { return soap_instantiate___ns1__QuoteListResponse__(soap, n, NULL, NULL, NULL); }

inline struct __ns1__QuoteListResponse__ * soap_new_req___ns1__QuoteListResponse__(
	struct soap *soap)
{	struct __ns1__QuoteListResponse__ *_p = soap_new___ns1__QuoteListResponse__(soap);
	if (_p)
	{	soap_default___ns1__QuoteListResponse__(soap, _p);
	}
	return _p;
}

inline struct __ns1__QuoteListResponse__ * soap_new_set___ns1__QuoteListResponse__(
	struct soap *soap)
{	struct __ns1__QuoteListResponse__ *_p = soap_new___ns1__QuoteListResponse__(soap);
	if (_p)
	{	soap_default___ns1__QuoteListResponse__(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__QuoteListResponse__(struct soap*, const struct __ns1__QuoteListResponse__ *, const char*, const char*);

#ifndef soap_write___ns1__QuoteListResponse__
#define soap_write___ns1__QuoteListResponse__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__QuoteListResponse__(soap, data), 0) || ns::soap_put___ns1__QuoteListResponse__(soap, data, "-ns1:QuoteListResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__QuoteListResponse__ * SOAP_FMAC4 soap_get___ns1__QuoteListResponse__(struct soap*, struct __ns1__QuoteListResponse__ *, const char*, const char*);

#ifndef soap_read___ns1__QuoteListResponse__
#define soap_read___ns1__QuoteListResponse__(soap, data) ( ((data) ? (ns::soap_default___ns1__QuoteListResponse__(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__QuoteListResponse__(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__SymbolGetResponse__
#define SOAP_TYPE_ns___ns1__SymbolGetResponse__ (380)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SymbolGetResponse__(struct soap*, struct __ns1__SymbolGetResponse__ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SymbolGetResponse__(struct soap*, const struct __ns1__SymbolGetResponse__ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SymbolGetResponse__(struct soap*, const char*, int, const struct __ns1__SymbolGetResponse__ *, const char*);
SOAP_FMAC3 struct __ns1__SymbolGetResponse__ * SOAP_FMAC4 soap_in___ns1__SymbolGetResponse__(struct soap*, const char*, struct __ns1__SymbolGetResponse__ *, const char*);
SOAP_FMAC1 struct __ns1__SymbolGetResponse__ * SOAP_FMAC2 soap_instantiate___ns1__SymbolGetResponse__(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SymbolGetResponse__ * soap_new___ns1__SymbolGetResponse__(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SymbolGetResponse__(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SymbolGetResponse__ * soap_new_req___ns1__SymbolGetResponse__(
	struct soap *soap)
{	struct __ns1__SymbolGetResponse__ *_p = soap_new___ns1__SymbolGetResponse__(soap);
	if (_p)
	{	soap_default___ns1__SymbolGetResponse__(soap, _p);
	}
	return _p;
}

inline struct __ns1__SymbolGetResponse__ * soap_new_set___ns1__SymbolGetResponse__(
	struct soap *soap)
{	struct __ns1__SymbolGetResponse__ *_p = soap_new___ns1__SymbolGetResponse__(soap);
	if (_p)
	{	soap_default___ns1__SymbolGetResponse__(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SymbolGetResponse__(struct soap*, const struct __ns1__SymbolGetResponse__ *, const char*, const char*);

#ifndef soap_write___ns1__SymbolGetResponse__
#define soap_write___ns1__SymbolGetResponse__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__SymbolGetResponse__(soap, data), 0) || ns::soap_put___ns1__SymbolGetResponse__(soap, data, "-ns1:SymbolGetResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SymbolGetResponse__ * SOAP_FMAC4 soap_get___ns1__SymbolGetResponse__(struct soap*, struct __ns1__SymbolGetResponse__ *, const char*, const char*);

#ifndef soap_read___ns1__SymbolGetResponse__
#define soap_read___ns1__SymbolGetResponse__(soap, data) ( ((data) ? (ns::soap_default___ns1__SymbolGetResponse__(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__SymbolGetResponse__(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__QuoteList2Response__
#define SOAP_TYPE_ns___ns1__QuoteList2Response__ (378)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__QuoteList2Response__(struct soap*, struct __ns1__QuoteList2Response__ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__QuoteList2Response__(struct soap*, const struct __ns1__QuoteList2Response__ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__QuoteList2Response__(struct soap*, const char*, int, const struct __ns1__QuoteList2Response__ *, const char*);
SOAP_FMAC3 struct __ns1__QuoteList2Response__ * SOAP_FMAC4 soap_in___ns1__QuoteList2Response__(struct soap*, const char*, struct __ns1__QuoteList2Response__ *, const char*);
SOAP_FMAC1 struct __ns1__QuoteList2Response__ * SOAP_FMAC2 soap_instantiate___ns1__QuoteList2Response__(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__QuoteList2Response__ * soap_new___ns1__QuoteList2Response__(struct soap *soap, int n = -1) { return soap_instantiate___ns1__QuoteList2Response__(soap, n, NULL, NULL, NULL); }

inline struct __ns1__QuoteList2Response__ * soap_new_req___ns1__QuoteList2Response__(
	struct soap *soap)
{	struct __ns1__QuoteList2Response__ *_p = soap_new___ns1__QuoteList2Response__(soap);
	if (_p)
	{	soap_default___ns1__QuoteList2Response__(soap, _p);
	}
	return _p;
}

inline struct __ns1__QuoteList2Response__ * soap_new_set___ns1__QuoteList2Response__(
	struct soap *soap)
{	struct __ns1__QuoteList2Response__ *_p = soap_new___ns1__QuoteList2Response__(soap);
	if (_p)
	{	soap_default___ns1__QuoteList2Response__(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__QuoteList2Response__(struct soap*, const struct __ns1__QuoteList2Response__ *, const char*, const char*);

#ifndef soap_write___ns1__QuoteList2Response__
#define soap_write___ns1__QuoteList2Response__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__QuoteList2Response__(soap, data), 0) || ns::soap_put___ns1__QuoteList2Response__(soap, data, "-ns1:QuoteList2Response", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__QuoteList2Response__ * SOAP_FMAC4 soap_get___ns1__QuoteList2Response__(struct soap*, struct __ns1__QuoteList2Response__ *, const char*, const char*);

#ifndef soap_read___ns1__QuoteList2Response__
#define soap_read___ns1__QuoteList2Response__(soap, data) ( ((data) ? (ns::soap_default___ns1__QuoteList2Response__(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__QuoteList2Response__(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__QuoteGetResponse__
#define SOAP_TYPE_ns___ns1__QuoteGetResponse__ (376)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__QuoteGetResponse__(struct soap*, struct __ns1__QuoteGetResponse__ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__QuoteGetResponse__(struct soap*, const struct __ns1__QuoteGetResponse__ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__QuoteGetResponse__(struct soap*, const char*, int, const struct __ns1__QuoteGetResponse__ *, const char*);
SOAP_FMAC3 struct __ns1__QuoteGetResponse__ * SOAP_FMAC4 soap_in___ns1__QuoteGetResponse__(struct soap*, const char*, struct __ns1__QuoteGetResponse__ *, const char*);
SOAP_FMAC1 struct __ns1__QuoteGetResponse__ * SOAP_FMAC2 soap_instantiate___ns1__QuoteGetResponse__(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__QuoteGetResponse__ * soap_new___ns1__QuoteGetResponse__(struct soap *soap, int n = -1) { return soap_instantiate___ns1__QuoteGetResponse__(soap, n, NULL, NULL, NULL); }

inline struct __ns1__QuoteGetResponse__ * soap_new_req___ns1__QuoteGetResponse__(
	struct soap *soap)
{	struct __ns1__QuoteGetResponse__ *_p = soap_new___ns1__QuoteGetResponse__(soap);
	if (_p)
	{	soap_default___ns1__QuoteGetResponse__(soap, _p);
	}
	return _p;
}

inline struct __ns1__QuoteGetResponse__ * soap_new_set___ns1__QuoteGetResponse__(
	struct soap *soap)
{	struct __ns1__QuoteGetResponse__ *_p = soap_new___ns1__QuoteGetResponse__(soap);
	if (_p)
	{	soap_default___ns1__QuoteGetResponse__(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__QuoteGetResponse__(struct soap*, const struct __ns1__QuoteGetResponse__ *, const char*, const char*);

#ifndef soap_write___ns1__QuoteGetResponse__
#define soap_write___ns1__QuoteGetResponse__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__QuoteGetResponse__(soap, data), 0) || ns::soap_put___ns1__QuoteGetResponse__(soap, data, "-ns1:QuoteGetResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__QuoteGetResponse__ * SOAP_FMAC4 soap_get___ns1__QuoteGetResponse__(struct soap*, struct __ns1__QuoteGetResponse__ *, const char*, const char*);

#ifndef soap_read___ns1__QuoteGetResponse__
#define soap_read___ns1__QuoteGetResponse__(soap, data) ( ((data) ? (ns::soap_default___ns1__QuoteGetResponse__(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__QuoteGetResponse__(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__SymbolList2Response__
#define SOAP_TYPE_ns___ns1__SymbolList2Response__ (374)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SymbolList2Response__(struct soap*, struct __ns1__SymbolList2Response__ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SymbolList2Response__(struct soap*, const struct __ns1__SymbolList2Response__ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SymbolList2Response__(struct soap*, const char*, int, const struct __ns1__SymbolList2Response__ *, const char*);
SOAP_FMAC3 struct __ns1__SymbolList2Response__ * SOAP_FMAC4 soap_in___ns1__SymbolList2Response__(struct soap*, const char*, struct __ns1__SymbolList2Response__ *, const char*);
SOAP_FMAC1 struct __ns1__SymbolList2Response__ * SOAP_FMAC2 soap_instantiate___ns1__SymbolList2Response__(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SymbolList2Response__ * soap_new___ns1__SymbolList2Response__(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SymbolList2Response__(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SymbolList2Response__ * soap_new_req___ns1__SymbolList2Response__(
	struct soap *soap)
{	struct __ns1__SymbolList2Response__ *_p = soap_new___ns1__SymbolList2Response__(soap);
	if (_p)
	{	soap_default___ns1__SymbolList2Response__(soap, _p);
	}
	return _p;
}

inline struct __ns1__SymbolList2Response__ * soap_new_set___ns1__SymbolList2Response__(
	struct soap *soap)
{	struct __ns1__SymbolList2Response__ *_p = soap_new___ns1__SymbolList2Response__(soap);
	if (_p)
	{	soap_default___ns1__SymbolList2Response__(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SymbolList2Response__(struct soap*, const struct __ns1__SymbolList2Response__ *, const char*, const char*);

#ifndef soap_write___ns1__SymbolList2Response__
#define soap_write___ns1__SymbolList2Response__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__SymbolList2Response__(soap, data), 0) || ns::soap_put___ns1__SymbolList2Response__(soap, data, "-ns1:SymbolList2Response", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SymbolList2Response__ * SOAP_FMAC4 soap_get___ns1__SymbolList2Response__(struct soap*, struct __ns1__SymbolList2Response__ *, const char*, const char*);

#ifndef soap_read___ns1__SymbolList2Response__
#define soap_read___ns1__SymbolList2Response__(soap, data) ( ((data) ? (ns::soap_default___ns1__SymbolList2Response__(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__SymbolList2Response__(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__SymbolListResponse__
#define SOAP_TYPE_ns___ns1__SymbolListResponse__ (372)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SymbolListResponse__(struct soap*, struct __ns1__SymbolListResponse__ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SymbolListResponse__(struct soap*, const struct __ns1__SymbolListResponse__ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SymbolListResponse__(struct soap*, const char*, int, const struct __ns1__SymbolListResponse__ *, const char*);
SOAP_FMAC3 struct __ns1__SymbolListResponse__ * SOAP_FMAC4 soap_in___ns1__SymbolListResponse__(struct soap*, const char*, struct __ns1__SymbolListResponse__ *, const char*);
SOAP_FMAC1 struct __ns1__SymbolListResponse__ * SOAP_FMAC2 soap_instantiate___ns1__SymbolListResponse__(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SymbolListResponse__ * soap_new___ns1__SymbolListResponse__(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SymbolListResponse__(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SymbolListResponse__ * soap_new_req___ns1__SymbolListResponse__(
	struct soap *soap)
{	struct __ns1__SymbolListResponse__ *_p = soap_new___ns1__SymbolListResponse__(soap);
	if (_p)
	{	soap_default___ns1__SymbolListResponse__(soap, _p);
	}
	return _p;
}

inline struct __ns1__SymbolListResponse__ * soap_new_set___ns1__SymbolListResponse__(
	struct soap *soap)
{	struct __ns1__SymbolListResponse__ *_p = soap_new___ns1__SymbolListResponse__(soap);
	if (_p)
	{	soap_default___ns1__SymbolListResponse__(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SymbolListResponse__(struct soap*, const struct __ns1__SymbolListResponse__ *, const char*, const char*);

#ifndef soap_write___ns1__SymbolListResponse__
#define soap_write___ns1__SymbolListResponse__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__SymbolListResponse__(soap, data), 0) || ns::soap_put___ns1__SymbolListResponse__(soap, data, "-ns1:SymbolListResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SymbolListResponse__ * SOAP_FMAC4 soap_get___ns1__SymbolListResponse__(struct soap*, struct __ns1__SymbolListResponse__ *, const char*, const char*);

#ifndef soap_read___ns1__SymbolListResponse__
#define soap_read___ns1__SymbolListResponse__(soap, data) ( ((data) ? (ns::soap_default___ns1__SymbolListResponse__(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__SymbolListResponse__(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__ExchangeGetResponse__
#define SOAP_TYPE_ns___ns1__ExchangeGetResponse__ (370)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ExchangeGetResponse__(struct soap*, struct __ns1__ExchangeGetResponse__ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ExchangeGetResponse__(struct soap*, const struct __ns1__ExchangeGetResponse__ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ExchangeGetResponse__(struct soap*, const char*, int, const struct __ns1__ExchangeGetResponse__ *, const char*);
SOAP_FMAC3 struct __ns1__ExchangeGetResponse__ * SOAP_FMAC4 soap_in___ns1__ExchangeGetResponse__(struct soap*, const char*, struct __ns1__ExchangeGetResponse__ *, const char*);
SOAP_FMAC1 struct __ns1__ExchangeGetResponse__ * SOAP_FMAC2 soap_instantiate___ns1__ExchangeGetResponse__(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ExchangeGetResponse__ * soap_new___ns1__ExchangeGetResponse__(struct soap *soap, int n = -1) { return soap_instantiate___ns1__ExchangeGetResponse__(soap, n, NULL, NULL, NULL); }

inline struct __ns1__ExchangeGetResponse__ * soap_new_req___ns1__ExchangeGetResponse__(
	struct soap *soap)
{	struct __ns1__ExchangeGetResponse__ *_p = soap_new___ns1__ExchangeGetResponse__(soap);
	if (_p)
	{	soap_default___ns1__ExchangeGetResponse__(soap, _p);
	}
	return _p;
}

inline struct __ns1__ExchangeGetResponse__ * soap_new_set___ns1__ExchangeGetResponse__(
	struct soap *soap)
{	struct __ns1__ExchangeGetResponse__ *_p = soap_new___ns1__ExchangeGetResponse__(soap);
	if (_p)
	{	soap_default___ns1__ExchangeGetResponse__(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ExchangeGetResponse__(struct soap*, const struct __ns1__ExchangeGetResponse__ *, const char*, const char*);

#ifndef soap_write___ns1__ExchangeGetResponse__
#define soap_write___ns1__ExchangeGetResponse__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__ExchangeGetResponse__(soap, data), 0) || ns::soap_put___ns1__ExchangeGetResponse__(soap, data, "-ns1:ExchangeGetResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__ExchangeGetResponse__ * SOAP_FMAC4 soap_get___ns1__ExchangeGetResponse__(struct soap*, struct __ns1__ExchangeGetResponse__ *, const char*, const char*);

#ifndef soap_read___ns1__ExchangeGetResponse__
#define soap_read___ns1__ExchangeGetResponse__(soap, data) ( ((data) ? (ns::soap_default___ns1__ExchangeGetResponse__(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__ExchangeGetResponse__(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__ExchangeListResponse__
#define SOAP_TYPE_ns___ns1__ExchangeListResponse__ (368)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ExchangeListResponse__(struct soap*, struct __ns1__ExchangeListResponse__ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ExchangeListResponse__(struct soap*, const struct __ns1__ExchangeListResponse__ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ExchangeListResponse__(struct soap*, const char*, int, const struct __ns1__ExchangeListResponse__ *, const char*);
SOAP_FMAC3 struct __ns1__ExchangeListResponse__ * SOAP_FMAC4 soap_in___ns1__ExchangeListResponse__(struct soap*, const char*, struct __ns1__ExchangeListResponse__ *, const char*);
SOAP_FMAC1 struct __ns1__ExchangeListResponse__ * SOAP_FMAC2 soap_instantiate___ns1__ExchangeListResponse__(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ExchangeListResponse__ * soap_new___ns1__ExchangeListResponse__(struct soap *soap, int n = -1) { return soap_instantiate___ns1__ExchangeListResponse__(soap, n, NULL, NULL, NULL); }

inline struct __ns1__ExchangeListResponse__ * soap_new_req___ns1__ExchangeListResponse__(
	struct soap *soap)
{	struct __ns1__ExchangeListResponse__ *_p = soap_new___ns1__ExchangeListResponse__(soap);
	if (_p)
	{	soap_default___ns1__ExchangeListResponse__(soap, _p);
	}
	return _p;
}

inline struct __ns1__ExchangeListResponse__ * soap_new_set___ns1__ExchangeListResponse__(
	struct soap *soap)
{	struct __ns1__ExchangeListResponse__ *_p = soap_new___ns1__ExchangeListResponse__(soap);
	if (_p)
	{	soap_default___ns1__ExchangeListResponse__(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ExchangeListResponse__(struct soap*, const struct __ns1__ExchangeListResponse__ *, const char*, const char*);

#ifndef soap_write___ns1__ExchangeListResponse__
#define soap_write___ns1__ExchangeListResponse__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__ExchangeListResponse__(soap, data), 0) || ns::soap_put___ns1__ExchangeListResponse__(soap, data, "-ns1:ExchangeListResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__ExchangeListResponse__ * SOAP_FMAC4 soap_get___ns1__ExchangeListResponse__(struct soap*, struct __ns1__ExchangeListResponse__ *, const char*, const char*);

#ifndef soap_read___ns1__ExchangeListResponse__
#define soap_read___ns1__ExchangeListResponse__(soap, data) ( ((data) ? (ns::soap_default___ns1__ExchangeListResponse__(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__ExchangeListResponse__(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__MembershipResponse__
#define SOAP_TYPE_ns___ns1__MembershipResponse__ (366)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__MembershipResponse__(struct soap*, struct __ns1__MembershipResponse__ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__MembershipResponse__(struct soap*, const struct __ns1__MembershipResponse__ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__MembershipResponse__(struct soap*, const char*, int, const struct __ns1__MembershipResponse__ *, const char*);
SOAP_FMAC3 struct __ns1__MembershipResponse__ * SOAP_FMAC4 soap_in___ns1__MembershipResponse__(struct soap*, const char*, struct __ns1__MembershipResponse__ *, const char*);
SOAP_FMAC1 struct __ns1__MembershipResponse__ * SOAP_FMAC2 soap_instantiate___ns1__MembershipResponse__(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__MembershipResponse__ * soap_new___ns1__MembershipResponse__(struct soap *soap, int n = -1) { return soap_instantiate___ns1__MembershipResponse__(soap, n, NULL, NULL, NULL); }

inline struct __ns1__MembershipResponse__ * soap_new_req___ns1__MembershipResponse__(
	struct soap *soap)
{	struct __ns1__MembershipResponse__ *_p = soap_new___ns1__MembershipResponse__(soap);
	if (_p)
	{	soap_default___ns1__MembershipResponse__(soap, _p);
	}
	return _p;
}

inline struct __ns1__MembershipResponse__ * soap_new_set___ns1__MembershipResponse__(
	struct soap *soap)
{	struct __ns1__MembershipResponse__ *_p = soap_new___ns1__MembershipResponse__(soap);
	if (_p)
	{	soap_default___ns1__MembershipResponse__(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__MembershipResponse__(struct soap*, const struct __ns1__MembershipResponse__ *, const char*, const char*);

#ifndef soap_write___ns1__MembershipResponse__
#define soap_write___ns1__MembershipResponse__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__MembershipResponse__(soap, data), 0) || ns::soap_put___ns1__MembershipResponse__(soap, data, "-ns1:MembershipResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__MembershipResponse__ * SOAP_FMAC4 soap_get___ns1__MembershipResponse__(struct soap*, struct __ns1__MembershipResponse__ *, const char*, const char*);

#ifndef soap_read___ns1__MembershipResponse__
#define soap_read___ns1__MembershipResponse__(soap, data) ( ((data) ? (ns::soap_default___ns1__MembershipResponse__(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__MembershipResponse__(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__Login2Response__
#define SOAP_TYPE_ns___ns1__Login2Response__ (363)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Login2Response__(struct soap*, struct __ns1__Login2Response__ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Login2Response__(struct soap*, const struct __ns1__Login2Response__ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Login2Response__(struct soap*, const char*, int, const struct __ns1__Login2Response__ *, const char*);
SOAP_FMAC3 struct __ns1__Login2Response__ * SOAP_FMAC4 soap_in___ns1__Login2Response__(struct soap*, const char*, struct __ns1__Login2Response__ *, const char*);
SOAP_FMAC1 struct __ns1__Login2Response__ * SOAP_FMAC2 soap_instantiate___ns1__Login2Response__(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Login2Response__ * soap_new___ns1__Login2Response__(struct soap *soap, int n = -1) { return soap_instantiate___ns1__Login2Response__(soap, n, NULL, NULL, NULL); }

inline struct __ns1__Login2Response__ * soap_new_req___ns1__Login2Response__(
	struct soap *soap)
{	struct __ns1__Login2Response__ *_p = soap_new___ns1__Login2Response__(soap);
	if (_p)
	{	soap_default___ns1__Login2Response__(soap, _p);
	}
	return _p;
}

inline struct __ns1__Login2Response__ * soap_new_set___ns1__Login2Response__(
	struct soap *soap)
{	struct __ns1__Login2Response__ *_p = soap_new___ns1__Login2Response__(soap);
	if (_p)
	{	soap_default___ns1__Login2Response__(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Login2Response__(struct soap*, const struct __ns1__Login2Response__ *, const char*, const char*);

#ifndef soap_write___ns1__Login2Response__
#define soap_write___ns1__Login2Response__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__Login2Response__(soap, data), 0) || ns::soap_put___ns1__Login2Response__(soap, data, "-ns1:Login2Response", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__Login2Response__ * SOAP_FMAC4 soap_get___ns1__Login2Response__(struct soap*, struct __ns1__Login2Response__ *, const char*, const char*);

#ifndef soap_read___ns1__Login2Response__
#define soap_read___ns1__Login2Response__(soap, data) ( ((data) ? (ns::soap_default___ns1__Login2Response__(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__Login2Response__(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__LoginResponse__
#define SOAP_TYPE_ns___ns1__LoginResponse__ (361)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__LoginResponse__(struct soap*, struct __ns1__LoginResponse__ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__LoginResponse__(struct soap*, const struct __ns1__LoginResponse__ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__LoginResponse__(struct soap*, const char*, int, const struct __ns1__LoginResponse__ *, const char*);
SOAP_FMAC3 struct __ns1__LoginResponse__ * SOAP_FMAC4 soap_in___ns1__LoginResponse__(struct soap*, const char*, struct __ns1__LoginResponse__ *, const char*);
SOAP_FMAC1 struct __ns1__LoginResponse__ * SOAP_FMAC2 soap_instantiate___ns1__LoginResponse__(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__LoginResponse__ * soap_new___ns1__LoginResponse__(struct soap *soap, int n = -1) { return soap_instantiate___ns1__LoginResponse__(soap, n, NULL, NULL, NULL); }

inline struct __ns1__LoginResponse__ * soap_new_req___ns1__LoginResponse__(
	struct soap *soap)
{	struct __ns1__LoginResponse__ *_p = soap_new___ns1__LoginResponse__(soap);
	if (_p)
	{	soap_default___ns1__LoginResponse__(soap, _p);
	}
	return _p;
}

inline struct __ns1__LoginResponse__ * soap_new_set___ns1__LoginResponse__(
	struct soap *soap)
{	struct __ns1__LoginResponse__ *_p = soap_new___ns1__LoginResponse__(soap);
	if (_p)
	{	soap_default___ns1__LoginResponse__(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__LoginResponse__(struct soap*, const struct __ns1__LoginResponse__ *, const char*, const char*);

#ifndef soap_write___ns1__LoginResponse__
#define soap_write___ns1__LoginResponse__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__LoginResponse__(soap, data), 0) || ns::soap_put___ns1__LoginResponse__(soap, data, "-ns1:LoginResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__LoginResponse__ * SOAP_FMAC4 soap_get___ns1__LoginResponse__(struct soap*, struct __ns1__LoginResponse__ *, const char*, const char*);

#ifndef soap_read___ns1__LoginResponse__
#define soap_read___ns1__LoginResponse__(soap, data) ( ((data) ? (ns::soap_default___ns1__LoginResponse__(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__LoginResponse__(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__ValidateAccess_
#define SOAP_TYPE_ns___ns1__ValidateAccess_ (358)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ValidateAccess_(struct soap*, struct __ns1__ValidateAccess_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ValidateAccess_(struct soap*, const struct __ns1__ValidateAccess_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ValidateAccess_(struct soap*, const char*, int, const struct __ns1__ValidateAccess_ *, const char*);
SOAP_FMAC3 struct __ns1__ValidateAccess_ * SOAP_FMAC4 soap_in___ns1__ValidateAccess_(struct soap*, const char*, struct __ns1__ValidateAccess_ *, const char*);
SOAP_FMAC1 struct __ns1__ValidateAccess_ * SOAP_FMAC2 soap_instantiate___ns1__ValidateAccess_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ValidateAccess_ * soap_new___ns1__ValidateAccess_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__ValidateAccess_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__ValidateAccess_ * soap_new_req___ns1__ValidateAccess_(
	struct soap *soap)
{	struct __ns1__ValidateAccess_ *_p = soap_new___ns1__ValidateAccess_(soap);
	if (_p)
	{	soap_default___ns1__ValidateAccess_(soap, _p);
	}
	return _p;
}

inline struct __ns1__ValidateAccess_ * soap_new_set___ns1__ValidateAccess_(
	struct soap *soap,
	_ns1__ValidateAccess *ns1__ValidateAccess)
{	struct __ns1__ValidateAccess_ *_p = soap_new___ns1__ValidateAccess_(soap);
	if (_p)
	{	soap_default___ns1__ValidateAccess_(soap, _p);
		_p->ns1__ValidateAccess = ns1__ValidateAccess;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ValidateAccess_(struct soap*, const struct __ns1__ValidateAccess_ *, const char*, const char*);

#ifndef soap_write___ns1__ValidateAccess_
#define soap_write___ns1__ValidateAccess_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__ValidateAccess_(soap, data), 0) || ns::soap_put___ns1__ValidateAccess_(soap, data, "-ns1:ValidateAccess", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__ValidateAccess_ * SOAP_FMAC4 soap_get___ns1__ValidateAccess_(struct soap*, struct __ns1__ValidateAccess_ *, const char*, const char*);

#ifndef soap_read___ns1__ValidateAccess_
#define soap_read___ns1__ValidateAccess_(soap, data) ( ((data) ? (ns::soap_default___ns1__ValidateAccess_(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__ValidateAccess_(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__UpdateDataFormat_
#define SOAP_TYPE_ns___ns1__UpdateDataFormat_ (356)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__UpdateDataFormat_(struct soap*, struct __ns1__UpdateDataFormat_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__UpdateDataFormat_(struct soap*, const struct __ns1__UpdateDataFormat_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__UpdateDataFormat_(struct soap*, const char*, int, const struct __ns1__UpdateDataFormat_ *, const char*);
SOAP_FMAC3 struct __ns1__UpdateDataFormat_ * SOAP_FMAC4 soap_in___ns1__UpdateDataFormat_(struct soap*, const char*, struct __ns1__UpdateDataFormat_ *, const char*);
SOAP_FMAC1 struct __ns1__UpdateDataFormat_ * SOAP_FMAC2 soap_instantiate___ns1__UpdateDataFormat_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__UpdateDataFormat_ * soap_new___ns1__UpdateDataFormat_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__UpdateDataFormat_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__UpdateDataFormat_ * soap_new_req___ns1__UpdateDataFormat_(
	struct soap *soap)
{	struct __ns1__UpdateDataFormat_ *_p = soap_new___ns1__UpdateDataFormat_(soap);
	if (_p)
	{	soap_default___ns1__UpdateDataFormat_(soap, _p);
	}
	return _p;
}

inline struct __ns1__UpdateDataFormat_ * soap_new_set___ns1__UpdateDataFormat_(
	struct soap *soap,
	_ns1__UpdateDataFormat *ns1__UpdateDataFormat)
{	struct __ns1__UpdateDataFormat_ *_p = soap_new___ns1__UpdateDataFormat_(soap);
	if (_p)
	{	soap_default___ns1__UpdateDataFormat_(soap, _p);
		_p->ns1__UpdateDataFormat = ns1__UpdateDataFormat;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__UpdateDataFormat_(struct soap*, const struct __ns1__UpdateDataFormat_ *, const char*, const char*);

#ifndef soap_write___ns1__UpdateDataFormat_
#define soap_write___ns1__UpdateDataFormat_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__UpdateDataFormat_(soap, data), 0) || ns::soap_put___ns1__UpdateDataFormat_(soap, data, "-ns1:UpdateDataFormat", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__UpdateDataFormat_ * SOAP_FMAC4 soap_get___ns1__UpdateDataFormat_(struct soap*, struct __ns1__UpdateDataFormat_ *, const char*, const char*);

#ifndef soap_read___ns1__UpdateDataFormat_
#define soap_read___ns1__UpdateDataFormat_(soap, data) ( ((data) ? (ns::soap_default___ns1__UpdateDataFormat_(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__UpdateDataFormat_(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__DataFormats_
#define SOAP_TYPE_ns___ns1__DataFormats_ (354)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DataFormats_(struct soap*, struct __ns1__DataFormats_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DataFormats_(struct soap*, const struct __ns1__DataFormats_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DataFormats_(struct soap*, const char*, int, const struct __ns1__DataFormats_ *, const char*);
SOAP_FMAC3 struct __ns1__DataFormats_ * SOAP_FMAC4 soap_in___ns1__DataFormats_(struct soap*, const char*, struct __ns1__DataFormats_ *, const char*);
SOAP_FMAC1 struct __ns1__DataFormats_ * SOAP_FMAC2 soap_instantiate___ns1__DataFormats_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__DataFormats_ * soap_new___ns1__DataFormats_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__DataFormats_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__DataFormats_ * soap_new_req___ns1__DataFormats_(
	struct soap *soap)
{	struct __ns1__DataFormats_ *_p = soap_new___ns1__DataFormats_(soap);
	if (_p)
	{	soap_default___ns1__DataFormats_(soap, _p);
	}
	return _p;
}

inline struct __ns1__DataFormats_ * soap_new_set___ns1__DataFormats_(
	struct soap *soap,
	_ns1__DataFormats *ns1__DataFormats)
{	struct __ns1__DataFormats_ *_p = soap_new___ns1__DataFormats_(soap);
	if (_p)
	{	soap_default___ns1__DataFormats_(soap, _p);
		_p->ns1__DataFormats = ns1__DataFormats;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DataFormats_(struct soap*, const struct __ns1__DataFormats_ *, const char*, const char*);

#ifndef soap_write___ns1__DataFormats_
#define soap_write___ns1__DataFormats_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__DataFormats_(soap, data), 0) || ns::soap_put___ns1__DataFormats_(soap, data, "-ns1:DataFormats", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__DataFormats_ * SOAP_FMAC4 soap_get___ns1__DataFormats_(struct soap*, struct __ns1__DataFormats_ *, const char*, const char*);

#ifndef soap_read___ns1__DataFormats_
#define soap_read___ns1__DataFormats_(soap, data) ( ((data) ? (ns::soap_default___ns1__DataFormats_(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__DataFormats_(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__DataClientLatestVersion_
#define SOAP_TYPE_ns___ns1__DataClientLatestVersion_ (352)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DataClientLatestVersion_(struct soap*, struct __ns1__DataClientLatestVersion_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DataClientLatestVersion_(struct soap*, const struct __ns1__DataClientLatestVersion_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DataClientLatestVersion_(struct soap*, const char*, int, const struct __ns1__DataClientLatestVersion_ *, const char*);
SOAP_FMAC3 struct __ns1__DataClientLatestVersion_ * SOAP_FMAC4 soap_in___ns1__DataClientLatestVersion_(struct soap*, const char*, struct __ns1__DataClientLatestVersion_ *, const char*);
SOAP_FMAC1 struct __ns1__DataClientLatestVersion_ * SOAP_FMAC2 soap_instantiate___ns1__DataClientLatestVersion_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__DataClientLatestVersion_ * soap_new___ns1__DataClientLatestVersion_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__DataClientLatestVersion_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__DataClientLatestVersion_ * soap_new_req___ns1__DataClientLatestVersion_(
	struct soap *soap)
{	struct __ns1__DataClientLatestVersion_ *_p = soap_new___ns1__DataClientLatestVersion_(soap);
	if (_p)
	{	soap_default___ns1__DataClientLatestVersion_(soap, _p);
	}
	return _p;
}

inline struct __ns1__DataClientLatestVersion_ * soap_new_set___ns1__DataClientLatestVersion_(
	struct soap *soap,
	_ns1__DataClientLatestVersion *ns1__DataClientLatestVersion)
{	struct __ns1__DataClientLatestVersion_ *_p = soap_new___ns1__DataClientLatestVersion_(soap);
	if (_p)
	{	soap_default___ns1__DataClientLatestVersion_(soap, _p);
		_p->ns1__DataClientLatestVersion = ns1__DataClientLatestVersion;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DataClientLatestVersion_(struct soap*, const struct __ns1__DataClientLatestVersion_ *, const char*, const char*);

#ifndef soap_write___ns1__DataClientLatestVersion_
#define soap_write___ns1__DataClientLatestVersion_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__DataClientLatestVersion_(soap, data), 0) || ns::soap_put___ns1__DataClientLatestVersion_(soap, data, "-ns1:DataClientLatestVersion", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__DataClientLatestVersion_ * SOAP_FMAC4 soap_get___ns1__DataClientLatestVersion_(struct soap*, struct __ns1__DataClientLatestVersion_ *, const char*, const char*);

#ifndef soap_read___ns1__DataClientLatestVersion_
#define soap_read___ns1__DataClientLatestVersion_(soap, data) ( ((data) ? (ns::soap_default___ns1__DataClientLatestVersion_(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__DataClientLatestVersion_(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__SymbolChangesByExchange_
#define SOAP_TYPE_ns___ns1__SymbolChangesByExchange_ (350)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SymbolChangesByExchange_(struct soap*, struct __ns1__SymbolChangesByExchange_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SymbolChangesByExchange_(struct soap*, const struct __ns1__SymbolChangesByExchange_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SymbolChangesByExchange_(struct soap*, const char*, int, const struct __ns1__SymbolChangesByExchange_ *, const char*);
SOAP_FMAC3 struct __ns1__SymbolChangesByExchange_ * SOAP_FMAC4 soap_in___ns1__SymbolChangesByExchange_(struct soap*, const char*, struct __ns1__SymbolChangesByExchange_ *, const char*);
SOAP_FMAC1 struct __ns1__SymbolChangesByExchange_ * SOAP_FMAC2 soap_instantiate___ns1__SymbolChangesByExchange_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SymbolChangesByExchange_ * soap_new___ns1__SymbolChangesByExchange_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SymbolChangesByExchange_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SymbolChangesByExchange_ * soap_new_req___ns1__SymbolChangesByExchange_(
	struct soap *soap)
{	struct __ns1__SymbolChangesByExchange_ *_p = soap_new___ns1__SymbolChangesByExchange_(soap);
	if (_p)
	{	soap_default___ns1__SymbolChangesByExchange_(soap, _p);
	}
	return _p;
}

inline struct __ns1__SymbolChangesByExchange_ * soap_new_set___ns1__SymbolChangesByExchange_(
	struct soap *soap,
	_ns1__SymbolChangesByExchange *ns1__SymbolChangesByExchange)
{	struct __ns1__SymbolChangesByExchange_ *_p = soap_new___ns1__SymbolChangesByExchange_(soap);
	if (_p)
	{	soap_default___ns1__SymbolChangesByExchange_(soap, _p);
		_p->ns1__SymbolChangesByExchange = ns1__SymbolChangesByExchange;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SymbolChangesByExchange_(struct soap*, const struct __ns1__SymbolChangesByExchange_ *, const char*, const char*);

#ifndef soap_write___ns1__SymbolChangesByExchange_
#define soap_write___ns1__SymbolChangesByExchange_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__SymbolChangesByExchange_(soap, data), 0) || ns::soap_put___ns1__SymbolChangesByExchange_(soap, data, "-ns1:SymbolChangesByExchange", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SymbolChangesByExchange_ * SOAP_FMAC4 soap_get___ns1__SymbolChangesByExchange_(struct soap*, struct __ns1__SymbolChangesByExchange_ *, const char*, const char*);

#ifndef soap_read___ns1__SymbolChangesByExchange_
#define soap_read___ns1__SymbolChangesByExchange_(soap, data) ( ((data) ? (ns::soap_default___ns1__SymbolChangesByExchange_(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__SymbolChangesByExchange_(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__QuoteListByDatePeriod2_
#define SOAP_TYPE_ns___ns1__QuoteListByDatePeriod2_ (348)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__QuoteListByDatePeriod2_(struct soap*, struct __ns1__QuoteListByDatePeriod2_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__QuoteListByDatePeriod2_(struct soap*, const struct __ns1__QuoteListByDatePeriod2_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__QuoteListByDatePeriod2_(struct soap*, const char*, int, const struct __ns1__QuoteListByDatePeriod2_ *, const char*);
SOAP_FMAC3 struct __ns1__QuoteListByDatePeriod2_ * SOAP_FMAC4 soap_in___ns1__QuoteListByDatePeriod2_(struct soap*, const char*, struct __ns1__QuoteListByDatePeriod2_ *, const char*);
SOAP_FMAC1 struct __ns1__QuoteListByDatePeriod2_ * SOAP_FMAC2 soap_instantiate___ns1__QuoteListByDatePeriod2_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__QuoteListByDatePeriod2_ * soap_new___ns1__QuoteListByDatePeriod2_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__QuoteListByDatePeriod2_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__QuoteListByDatePeriod2_ * soap_new_req___ns1__QuoteListByDatePeriod2_(
	struct soap *soap)
{	struct __ns1__QuoteListByDatePeriod2_ *_p = soap_new___ns1__QuoteListByDatePeriod2_(soap);
	if (_p)
	{	soap_default___ns1__QuoteListByDatePeriod2_(soap, _p);
	}
	return _p;
}

inline struct __ns1__QuoteListByDatePeriod2_ * soap_new_set___ns1__QuoteListByDatePeriod2_(
	struct soap *soap,
	_ns1__QuoteListByDatePeriod2 *ns1__QuoteListByDatePeriod2)
{	struct __ns1__QuoteListByDatePeriod2_ *_p = soap_new___ns1__QuoteListByDatePeriod2_(soap);
	if (_p)
	{	soap_default___ns1__QuoteListByDatePeriod2_(soap, _p);
		_p->ns1__QuoteListByDatePeriod2 = ns1__QuoteListByDatePeriod2;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__QuoteListByDatePeriod2_(struct soap*, const struct __ns1__QuoteListByDatePeriod2_ *, const char*, const char*);

#ifndef soap_write___ns1__QuoteListByDatePeriod2_
#define soap_write___ns1__QuoteListByDatePeriod2_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__QuoteListByDatePeriod2_(soap, data), 0) || ns::soap_put___ns1__QuoteListByDatePeriod2_(soap, data, "-ns1:QuoteListByDatePeriod2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__QuoteListByDatePeriod2_ * SOAP_FMAC4 soap_get___ns1__QuoteListByDatePeriod2_(struct soap*, struct __ns1__QuoteListByDatePeriod2_ *, const char*, const char*);

#ifndef soap_read___ns1__QuoteListByDatePeriod2_
#define soap_read___ns1__QuoteListByDatePeriod2_(soap, data) ( ((data) ? (ns::soap_default___ns1__QuoteListByDatePeriod2_(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__QuoteListByDatePeriod2_(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__QuoteListByDatePeriod_
#define SOAP_TYPE_ns___ns1__QuoteListByDatePeriod_ (346)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__QuoteListByDatePeriod_(struct soap*, struct __ns1__QuoteListByDatePeriod_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__QuoteListByDatePeriod_(struct soap*, const struct __ns1__QuoteListByDatePeriod_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__QuoteListByDatePeriod_(struct soap*, const char*, int, const struct __ns1__QuoteListByDatePeriod_ *, const char*);
SOAP_FMAC3 struct __ns1__QuoteListByDatePeriod_ * SOAP_FMAC4 soap_in___ns1__QuoteListByDatePeriod_(struct soap*, const char*, struct __ns1__QuoteListByDatePeriod_ *, const char*);
SOAP_FMAC1 struct __ns1__QuoteListByDatePeriod_ * SOAP_FMAC2 soap_instantiate___ns1__QuoteListByDatePeriod_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__QuoteListByDatePeriod_ * soap_new___ns1__QuoteListByDatePeriod_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__QuoteListByDatePeriod_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__QuoteListByDatePeriod_ * soap_new_req___ns1__QuoteListByDatePeriod_(
	struct soap *soap)
{	struct __ns1__QuoteListByDatePeriod_ *_p = soap_new___ns1__QuoteListByDatePeriod_(soap);
	if (_p)
	{	soap_default___ns1__QuoteListByDatePeriod_(soap, _p);
	}
	return _p;
}

inline struct __ns1__QuoteListByDatePeriod_ * soap_new_set___ns1__QuoteListByDatePeriod_(
	struct soap *soap,
	_ns1__QuoteListByDatePeriod *ns1__QuoteListByDatePeriod)
{	struct __ns1__QuoteListByDatePeriod_ *_p = soap_new___ns1__QuoteListByDatePeriod_(soap);
	if (_p)
	{	soap_default___ns1__QuoteListByDatePeriod_(soap, _p);
		_p->ns1__QuoteListByDatePeriod = ns1__QuoteListByDatePeriod;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__QuoteListByDatePeriod_(struct soap*, const struct __ns1__QuoteListByDatePeriod_ *, const char*, const char*);

#ifndef soap_write___ns1__QuoteListByDatePeriod_
#define soap_write___ns1__QuoteListByDatePeriod_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__QuoteListByDatePeriod_(soap, data), 0) || ns::soap_put___ns1__QuoteListByDatePeriod_(soap, data, "-ns1:QuoteListByDatePeriod", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__QuoteListByDatePeriod_ * SOAP_FMAC4 soap_get___ns1__QuoteListByDatePeriod_(struct soap*, struct __ns1__QuoteListByDatePeriod_ *, const char*, const char*);

#ifndef soap_read___ns1__QuoteListByDatePeriod_
#define soap_read___ns1__QuoteListByDatePeriod_(soap, data) ( ((data) ? (ns::soap_default___ns1__QuoteListByDatePeriod_(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__QuoteListByDatePeriod_(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__SymbolHistoryPeriodByDateRange_
#define SOAP_TYPE_ns___ns1__SymbolHistoryPeriodByDateRange_ (344)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SymbolHistoryPeriodByDateRange_(struct soap*, struct __ns1__SymbolHistoryPeriodByDateRange_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SymbolHistoryPeriodByDateRange_(struct soap*, const struct __ns1__SymbolHistoryPeriodByDateRange_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SymbolHistoryPeriodByDateRange_(struct soap*, const char*, int, const struct __ns1__SymbolHistoryPeriodByDateRange_ *, const char*);
SOAP_FMAC3 struct __ns1__SymbolHistoryPeriodByDateRange_ * SOAP_FMAC4 soap_in___ns1__SymbolHistoryPeriodByDateRange_(struct soap*, const char*, struct __ns1__SymbolHistoryPeriodByDateRange_ *, const char*);
SOAP_FMAC1 struct __ns1__SymbolHistoryPeriodByDateRange_ * SOAP_FMAC2 soap_instantiate___ns1__SymbolHistoryPeriodByDateRange_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SymbolHistoryPeriodByDateRange_ * soap_new___ns1__SymbolHistoryPeriodByDateRange_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SymbolHistoryPeriodByDateRange_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SymbolHistoryPeriodByDateRange_ * soap_new_req___ns1__SymbolHistoryPeriodByDateRange_(
	struct soap *soap)
{	struct __ns1__SymbolHistoryPeriodByDateRange_ *_p = soap_new___ns1__SymbolHistoryPeriodByDateRange_(soap);
	if (_p)
	{	soap_default___ns1__SymbolHistoryPeriodByDateRange_(soap, _p);
	}
	return _p;
}

inline struct __ns1__SymbolHistoryPeriodByDateRange_ * soap_new_set___ns1__SymbolHistoryPeriodByDateRange_(
	struct soap *soap,
	_ns1__SymbolHistoryPeriodByDateRange *ns1__SymbolHistoryPeriodByDateRange)
{	struct __ns1__SymbolHistoryPeriodByDateRange_ *_p = soap_new___ns1__SymbolHistoryPeriodByDateRange_(soap);
	if (_p)
	{	soap_default___ns1__SymbolHistoryPeriodByDateRange_(soap, _p);
		_p->ns1__SymbolHistoryPeriodByDateRange = ns1__SymbolHistoryPeriodByDateRange;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SymbolHistoryPeriodByDateRange_(struct soap*, const struct __ns1__SymbolHistoryPeriodByDateRange_ *, const char*, const char*);

#ifndef soap_write___ns1__SymbolHistoryPeriodByDateRange_
#define soap_write___ns1__SymbolHistoryPeriodByDateRange_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__SymbolHistoryPeriodByDateRange_(soap, data), 0) || ns::soap_put___ns1__SymbolHistoryPeriodByDateRange_(soap, data, "-ns1:SymbolHistoryPeriodByDateRange", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SymbolHistoryPeriodByDateRange_ * SOAP_FMAC4 soap_get___ns1__SymbolHistoryPeriodByDateRange_(struct soap*, struct __ns1__SymbolHistoryPeriodByDateRange_ *, const char*, const char*);

#ifndef soap_read___ns1__SymbolHistoryPeriodByDateRange_
#define soap_read___ns1__SymbolHistoryPeriodByDateRange_(soap, data) ( ((data) ? (ns::soap_default___ns1__SymbolHistoryPeriodByDateRange_(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__SymbolHistoryPeriodByDateRange_(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__SymbolHistoryPeriod_
#define SOAP_TYPE_ns___ns1__SymbolHistoryPeriod_ (342)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SymbolHistoryPeriod_(struct soap*, struct __ns1__SymbolHistoryPeriod_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SymbolHistoryPeriod_(struct soap*, const struct __ns1__SymbolHistoryPeriod_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SymbolHistoryPeriod_(struct soap*, const char*, int, const struct __ns1__SymbolHistoryPeriod_ *, const char*);
SOAP_FMAC3 struct __ns1__SymbolHistoryPeriod_ * SOAP_FMAC4 soap_in___ns1__SymbolHistoryPeriod_(struct soap*, const char*, struct __ns1__SymbolHistoryPeriod_ *, const char*);
SOAP_FMAC1 struct __ns1__SymbolHistoryPeriod_ * SOAP_FMAC2 soap_instantiate___ns1__SymbolHistoryPeriod_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SymbolHistoryPeriod_ * soap_new___ns1__SymbolHistoryPeriod_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SymbolHistoryPeriod_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SymbolHistoryPeriod_ * soap_new_req___ns1__SymbolHistoryPeriod_(
	struct soap *soap)
{	struct __ns1__SymbolHistoryPeriod_ *_p = soap_new___ns1__SymbolHistoryPeriod_(soap);
	if (_p)
	{	soap_default___ns1__SymbolHistoryPeriod_(soap, _p);
	}
	return _p;
}

inline struct __ns1__SymbolHistoryPeriod_ * soap_new_set___ns1__SymbolHistoryPeriod_(
	struct soap *soap,
	_ns1__SymbolHistoryPeriod *ns1__SymbolHistoryPeriod)
{	struct __ns1__SymbolHistoryPeriod_ *_p = soap_new___ns1__SymbolHistoryPeriod_(soap);
	if (_p)
	{	soap_default___ns1__SymbolHistoryPeriod_(soap, _p);
		_p->ns1__SymbolHistoryPeriod = ns1__SymbolHistoryPeriod;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SymbolHistoryPeriod_(struct soap*, const struct __ns1__SymbolHistoryPeriod_ *, const char*, const char*);

#ifndef soap_write___ns1__SymbolHistoryPeriod_
#define soap_write___ns1__SymbolHistoryPeriod_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__SymbolHistoryPeriod_(soap, data), 0) || ns::soap_put___ns1__SymbolHistoryPeriod_(soap, data, "-ns1:SymbolHistoryPeriod", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SymbolHistoryPeriod_ * SOAP_FMAC4 soap_get___ns1__SymbolHistoryPeriod_(struct soap*, struct __ns1__SymbolHistoryPeriod_ *, const char*, const char*);

#ifndef soap_read___ns1__SymbolHistoryPeriod_
#define soap_read___ns1__SymbolHistoryPeriod_(soap, data) ( ((data) ? (ns::soap_default___ns1__SymbolHistoryPeriod_(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__SymbolHistoryPeriod_(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__CountryList_
#define SOAP_TYPE_ns___ns1__CountryList_ (340)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CountryList_(struct soap*, struct __ns1__CountryList_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CountryList_(struct soap*, const struct __ns1__CountryList_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CountryList_(struct soap*, const char*, int, const struct __ns1__CountryList_ *, const char*);
SOAP_FMAC3 struct __ns1__CountryList_ * SOAP_FMAC4 soap_in___ns1__CountryList_(struct soap*, const char*, struct __ns1__CountryList_ *, const char*);
SOAP_FMAC1 struct __ns1__CountryList_ * SOAP_FMAC2 soap_instantiate___ns1__CountryList_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__CountryList_ * soap_new___ns1__CountryList_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__CountryList_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__CountryList_ * soap_new_req___ns1__CountryList_(
	struct soap *soap)
{	struct __ns1__CountryList_ *_p = soap_new___ns1__CountryList_(soap);
	if (_p)
	{	soap_default___ns1__CountryList_(soap, _p);
	}
	return _p;
}

inline struct __ns1__CountryList_ * soap_new_set___ns1__CountryList_(
	struct soap *soap,
	_ns1__CountryList *ns1__CountryList)
{	struct __ns1__CountryList_ *_p = soap_new___ns1__CountryList_(soap);
	if (_p)
	{	soap_default___ns1__CountryList_(soap, _p);
		_p->ns1__CountryList = ns1__CountryList;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CountryList_(struct soap*, const struct __ns1__CountryList_ *, const char*, const char*);

#ifndef soap_write___ns1__CountryList_
#define soap_write___ns1__CountryList_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__CountryList_(soap, data), 0) || ns::soap_put___ns1__CountryList_(soap, data, "-ns1:CountryList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__CountryList_ * SOAP_FMAC4 soap_get___ns1__CountryList_(struct soap*, struct __ns1__CountryList_ *, const char*, const char*);

#ifndef soap_read___ns1__CountryList_
#define soap_read___ns1__CountryList_(soap, data) ( ((data) ? (ns::soap_default___ns1__CountryList_(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__CountryList_(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__SplitListBySymbol_
#define SOAP_TYPE_ns___ns1__SplitListBySymbol_ (338)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SplitListBySymbol_(struct soap*, struct __ns1__SplitListBySymbol_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SplitListBySymbol_(struct soap*, const struct __ns1__SplitListBySymbol_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SplitListBySymbol_(struct soap*, const char*, int, const struct __ns1__SplitListBySymbol_ *, const char*);
SOAP_FMAC3 struct __ns1__SplitListBySymbol_ * SOAP_FMAC4 soap_in___ns1__SplitListBySymbol_(struct soap*, const char*, struct __ns1__SplitListBySymbol_ *, const char*);
SOAP_FMAC1 struct __ns1__SplitListBySymbol_ * SOAP_FMAC2 soap_instantiate___ns1__SplitListBySymbol_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SplitListBySymbol_ * soap_new___ns1__SplitListBySymbol_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SplitListBySymbol_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SplitListBySymbol_ * soap_new_req___ns1__SplitListBySymbol_(
	struct soap *soap)
{	struct __ns1__SplitListBySymbol_ *_p = soap_new___ns1__SplitListBySymbol_(soap);
	if (_p)
	{	soap_default___ns1__SplitListBySymbol_(soap, _p);
	}
	return _p;
}

inline struct __ns1__SplitListBySymbol_ * soap_new_set___ns1__SplitListBySymbol_(
	struct soap *soap,
	_ns1__SplitListBySymbol *ns1__SplitListBySymbol)
{	struct __ns1__SplitListBySymbol_ *_p = soap_new___ns1__SplitListBySymbol_(soap);
	if (_p)
	{	soap_default___ns1__SplitListBySymbol_(soap, _p);
		_p->ns1__SplitListBySymbol = ns1__SplitListBySymbol;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SplitListBySymbol_(struct soap*, const struct __ns1__SplitListBySymbol_ *, const char*, const char*);

#ifndef soap_write___ns1__SplitListBySymbol_
#define soap_write___ns1__SplitListBySymbol_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__SplitListBySymbol_(soap, data), 0) || ns::soap_put___ns1__SplitListBySymbol_(soap, data, "-ns1:SplitListBySymbol", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SplitListBySymbol_ * SOAP_FMAC4 soap_get___ns1__SplitListBySymbol_(struct soap*, struct __ns1__SplitListBySymbol_ *, const char*, const char*);

#ifndef soap_read___ns1__SplitListBySymbol_
#define soap_read___ns1__SplitListBySymbol_(soap, data) ( ((data) ? (ns::soap_default___ns1__SplitListBySymbol_(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__SplitListBySymbol_(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__SplitListByExchange_
#define SOAP_TYPE_ns___ns1__SplitListByExchange_ (336)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SplitListByExchange_(struct soap*, struct __ns1__SplitListByExchange_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SplitListByExchange_(struct soap*, const struct __ns1__SplitListByExchange_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SplitListByExchange_(struct soap*, const char*, int, const struct __ns1__SplitListByExchange_ *, const char*);
SOAP_FMAC3 struct __ns1__SplitListByExchange_ * SOAP_FMAC4 soap_in___ns1__SplitListByExchange_(struct soap*, const char*, struct __ns1__SplitListByExchange_ *, const char*);
SOAP_FMAC1 struct __ns1__SplitListByExchange_ * SOAP_FMAC2 soap_instantiate___ns1__SplitListByExchange_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SplitListByExchange_ * soap_new___ns1__SplitListByExchange_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SplitListByExchange_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SplitListByExchange_ * soap_new_req___ns1__SplitListByExchange_(
	struct soap *soap)
{	struct __ns1__SplitListByExchange_ *_p = soap_new___ns1__SplitListByExchange_(soap);
	if (_p)
	{	soap_default___ns1__SplitListByExchange_(soap, _p);
	}
	return _p;
}

inline struct __ns1__SplitListByExchange_ * soap_new_set___ns1__SplitListByExchange_(
	struct soap *soap,
	_ns1__SplitListByExchange *ns1__SplitListByExchange)
{	struct __ns1__SplitListByExchange_ *_p = soap_new___ns1__SplitListByExchange_(soap);
	if (_p)
	{	soap_default___ns1__SplitListByExchange_(soap, _p);
		_p->ns1__SplitListByExchange = ns1__SplitListByExchange;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SplitListByExchange_(struct soap*, const struct __ns1__SplitListByExchange_ *, const char*, const char*);

#ifndef soap_write___ns1__SplitListByExchange_
#define soap_write___ns1__SplitListByExchange_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__SplitListByExchange_(soap, data), 0) || ns::soap_put___ns1__SplitListByExchange_(soap, data, "-ns1:SplitListByExchange", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SplitListByExchange_ * SOAP_FMAC4 soap_get___ns1__SplitListByExchange_(struct soap*, struct __ns1__SplitListByExchange_ *, const char*, const char*);

#ifndef soap_read___ns1__SplitListByExchange_
#define soap_read___ns1__SplitListByExchange_(soap, data) ( ((data) ? (ns::soap_default___ns1__SplitListByExchange_(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__SplitListByExchange_(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__ExchangeMonths_
#define SOAP_TYPE_ns___ns1__ExchangeMonths_ (334)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ExchangeMonths_(struct soap*, struct __ns1__ExchangeMonths_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ExchangeMonths_(struct soap*, const struct __ns1__ExchangeMonths_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ExchangeMonths_(struct soap*, const char*, int, const struct __ns1__ExchangeMonths_ *, const char*);
SOAP_FMAC3 struct __ns1__ExchangeMonths_ * SOAP_FMAC4 soap_in___ns1__ExchangeMonths_(struct soap*, const char*, struct __ns1__ExchangeMonths_ *, const char*);
SOAP_FMAC1 struct __ns1__ExchangeMonths_ * SOAP_FMAC2 soap_instantiate___ns1__ExchangeMonths_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ExchangeMonths_ * soap_new___ns1__ExchangeMonths_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__ExchangeMonths_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__ExchangeMonths_ * soap_new_req___ns1__ExchangeMonths_(
	struct soap *soap)
{	struct __ns1__ExchangeMonths_ *_p = soap_new___ns1__ExchangeMonths_(soap);
	if (_p)
	{	soap_default___ns1__ExchangeMonths_(soap, _p);
	}
	return _p;
}

inline struct __ns1__ExchangeMonths_ * soap_new_set___ns1__ExchangeMonths_(
	struct soap *soap,
	_ns1__ExchangeMonths *ns1__ExchangeMonths)
{	struct __ns1__ExchangeMonths_ *_p = soap_new___ns1__ExchangeMonths_(soap);
	if (_p)
	{	soap_default___ns1__ExchangeMonths_(soap, _p);
		_p->ns1__ExchangeMonths = ns1__ExchangeMonths;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ExchangeMonths_(struct soap*, const struct __ns1__ExchangeMonths_ *, const char*, const char*);

#ifndef soap_write___ns1__ExchangeMonths_
#define soap_write___ns1__ExchangeMonths_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__ExchangeMonths_(soap, data), 0) || ns::soap_put___ns1__ExchangeMonths_(soap, data, "-ns1:ExchangeMonths", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__ExchangeMonths_ * SOAP_FMAC4 soap_get___ns1__ExchangeMonths_(struct soap*, struct __ns1__ExchangeMonths_ *, const char*, const char*);

#ifndef soap_read___ns1__ExchangeMonths_
#define soap_read___ns1__ExchangeMonths_(soap, data) ( ((data) ? (ns::soap_default___ns1__ExchangeMonths_(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__ExchangeMonths_(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__SymbolChart_
#define SOAP_TYPE_ns___ns1__SymbolChart_ (332)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SymbolChart_(struct soap*, struct __ns1__SymbolChart_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SymbolChart_(struct soap*, const struct __ns1__SymbolChart_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SymbolChart_(struct soap*, const char*, int, const struct __ns1__SymbolChart_ *, const char*);
SOAP_FMAC3 struct __ns1__SymbolChart_ * SOAP_FMAC4 soap_in___ns1__SymbolChart_(struct soap*, const char*, struct __ns1__SymbolChart_ *, const char*);
SOAP_FMAC1 struct __ns1__SymbolChart_ * SOAP_FMAC2 soap_instantiate___ns1__SymbolChart_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SymbolChart_ * soap_new___ns1__SymbolChart_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SymbolChart_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SymbolChart_ * soap_new_req___ns1__SymbolChart_(
	struct soap *soap)
{	struct __ns1__SymbolChart_ *_p = soap_new___ns1__SymbolChart_(soap);
	if (_p)
	{	soap_default___ns1__SymbolChart_(soap, _p);
	}
	return _p;
}

inline struct __ns1__SymbolChart_ * soap_new_set___ns1__SymbolChart_(
	struct soap *soap,
	_ns1__SymbolChart *ns1__SymbolChart)
{	struct __ns1__SymbolChart_ *_p = soap_new___ns1__SymbolChart_(soap);
	if (_p)
	{	soap_default___ns1__SymbolChart_(soap, _p);
		_p->ns1__SymbolChart = ns1__SymbolChart;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SymbolChart_(struct soap*, const struct __ns1__SymbolChart_ *, const char*, const char*);

#ifndef soap_write___ns1__SymbolChart_
#define soap_write___ns1__SymbolChart_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__SymbolChart_(soap, data), 0) || ns::soap_put___ns1__SymbolChart_(soap, data, "-ns1:SymbolChart", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SymbolChart_ * SOAP_FMAC4 soap_get___ns1__SymbolChart_(struct soap*, struct __ns1__SymbolChart_ *, const char*, const char*);

#ifndef soap_read___ns1__SymbolChart_
#define soap_read___ns1__SymbolChart_(soap, data) ( ((data) ? (ns::soap_default___ns1__SymbolChart_(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__SymbolChart_(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__Top10Losses_
#define SOAP_TYPE_ns___ns1__Top10Losses_ (330)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Top10Losses_(struct soap*, struct __ns1__Top10Losses_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Top10Losses_(struct soap*, const struct __ns1__Top10Losses_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Top10Losses_(struct soap*, const char*, int, const struct __ns1__Top10Losses_ *, const char*);
SOAP_FMAC3 struct __ns1__Top10Losses_ * SOAP_FMAC4 soap_in___ns1__Top10Losses_(struct soap*, const char*, struct __ns1__Top10Losses_ *, const char*);
SOAP_FMAC1 struct __ns1__Top10Losses_ * SOAP_FMAC2 soap_instantiate___ns1__Top10Losses_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Top10Losses_ * soap_new___ns1__Top10Losses_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__Top10Losses_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__Top10Losses_ * soap_new_req___ns1__Top10Losses_(
	struct soap *soap)
{	struct __ns1__Top10Losses_ *_p = soap_new___ns1__Top10Losses_(soap);
	if (_p)
	{	soap_default___ns1__Top10Losses_(soap, _p);
	}
	return _p;
}

inline struct __ns1__Top10Losses_ * soap_new_set___ns1__Top10Losses_(
	struct soap *soap,
	_ns1__Top10Losses *ns1__Top10Losses)
{	struct __ns1__Top10Losses_ *_p = soap_new___ns1__Top10Losses_(soap);
	if (_p)
	{	soap_default___ns1__Top10Losses_(soap, _p);
		_p->ns1__Top10Losses = ns1__Top10Losses;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Top10Losses_(struct soap*, const struct __ns1__Top10Losses_ *, const char*, const char*);

#ifndef soap_write___ns1__Top10Losses_
#define soap_write___ns1__Top10Losses_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__Top10Losses_(soap, data), 0) || ns::soap_put___ns1__Top10Losses_(soap, data, "-ns1:Top10Losses", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__Top10Losses_ * SOAP_FMAC4 soap_get___ns1__Top10Losses_(struct soap*, struct __ns1__Top10Losses_ *, const char*, const char*);

#ifndef soap_read___ns1__Top10Losses_
#define soap_read___ns1__Top10Losses_(soap, data) ( ((data) ? (ns::soap_default___ns1__Top10Losses_(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__Top10Losses_(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__Top10Gains_
#define SOAP_TYPE_ns___ns1__Top10Gains_ (328)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Top10Gains_(struct soap*, struct __ns1__Top10Gains_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Top10Gains_(struct soap*, const struct __ns1__Top10Gains_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Top10Gains_(struct soap*, const char*, int, const struct __ns1__Top10Gains_ *, const char*);
SOAP_FMAC3 struct __ns1__Top10Gains_ * SOAP_FMAC4 soap_in___ns1__Top10Gains_(struct soap*, const char*, struct __ns1__Top10Gains_ *, const char*);
SOAP_FMAC1 struct __ns1__Top10Gains_ * SOAP_FMAC2 soap_instantiate___ns1__Top10Gains_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Top10Gains_ * soap_new___ns1__Top10Gains_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__Top10Gains_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__Top10Gains_ * soap_new_req___ns1__Top10Gains_(
	struct soap *soap)
{	struct __ns1__Top10Gains_ *_p = soap_new___ns1__Top10Gains_(soap);
	if (_p)
	{	soap_default___ns1__Top10Gains_(soap, _p);
	}
	return _p;
}

inline struct __ns1__Top10Gains_ * soap_new_set___ns1__Top10Gains_(
	struct soap *soap,
	_ns1__Top10Gains *ns1__Top10Gains)
{	struct __ns1__Top10Gains_ *_p = soap_new___ns1__Top10Gains_(soap);
	if (_p)
	{	soap_default___ns1__Top10Gains_(soap, _p);
		_p->ns1__Top10Gains = ns1__Top10Gains;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Top10Gains_(struct soap*, const struct __ns1__Top10Gains_ *, const char*, const char*);

#ifndef soap_write___ns1__Top10Gains_
#define soap_write___ns1__Top10Gains_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__Top10Gains_(soap, data), 0) || ns::soap_put___ns1__Top10Gains_(soap, data, "-ns1:Top10Gains", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__Top10Gains_ * SOAP_FMAC4 soap_get___ns1__Top10Gains_(struct soap*, struct __ns1__Top10Gains_ *, const char*, const char*);

#ifndef soap_read___ns1__Top10Gains_
#define soap_read___ns1__Top10Gains_(soap, data) ( ((data) ? (ns::soap_default___ns1__Top10Gains_(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__Top10Gains_(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__SymbolHistory_
#define SOAP_TYPE_ns___ns1__SymbolHistory_ (326)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SymbolHistory_(struct soap*, struct __ns1__SymbolHistory_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SymbolHistory_(struct soap*, const struct __ns1__SymbolHistory_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SymbolHistory_(struct soap*, const char*, int, const struct __ns1__SymbolHistory_ *, const char*);
SOAP_FMAC3 struct __ns1__SymbolHistory_ * SOAP_FMAC4 soap_in___ns1__SymbolHistory_(struct soap*, const char*, struct __ns1__SymbolHistory_ *, const char*);
SOAP_FMAC1 struct __ns1__SymbolHistory_ * SOAP_FMAC2 soap_instantiate___ns1__SymbolHistory_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SymbolHistory_ * soap_new___ns1__SymbolHistory_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SymbolHistory_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SymbolHistory_ * soap_new_req___ns1__SymbolHistory_(
	struct soap *soap)
{	struct __ns1__SymbolHistory_ *_p = soap_new___ns1__SymbolHistory_(soap);
	if (_p)
	{	soap_default___ns1__SymbolHistory_(soap, _p);
	}
	return _p;
}

inline struct __ns1__SymbolHistory_ * soap_new_set___ns1__SymbolHistory_(
	struct soap *soap,
	_ns1__SymbolHistory *ns1__SymbolHistory)
{	struct __ns1__SymbolHistory_ *_p = soap_new___ns1__SymbolHistory_(soap);
	if (_p)
	{	soap_default___ns1__SymbolHistory_(soap, _p);
		_p->ns1__SymbolHistory = ns1__SymbolHistory;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SymbolHistory_(struct soap*, const struct __ns1__SymbolHistory_ *, const char*, const char*);

#ifndef soap_write___ns1__SymbolHistory_
#define soap_write___ns1__SymbolHistory_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__SymbolHistory_(soap, data), 0) || ns::soap_put___ns1__SymbolHistory_(soap, data, "-ns1:SymbolHistory", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SymbolHistory_ * SOAP_FMAC4 soap_get___ns1__SymbolHistory_(struct soap*, struct __ns1__SymbolHistory_ *, const char*, const char*);

#ifndef soap_read___ns1__SymbolHistory_
#define soap_read___ns1__SymbolHistory_(soap, data) ( ((data) ? (ns::soap_default___ns1__SymbolHistory_(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__SymbolHistory_(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__QuoteListByDate2_
#define SOAP_TYPE_ns___ns1__QuoteListByDate2_ (324)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__QuoteListByDate2_(struct soap*, struct __ns1__QuoteListByDate2_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__QuoteListByDate2_(struct soap*, const struct __ns1__QuoteListByDate2_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__QuoteListByDate2_(struct soap*, const char*, int, const struct __ns1__QuoteListByDate2_ *, const char*);
SOAP_FMAC3 struct __ns1__QuoteListByDate2_ * SOAP_FMAC4 soap_in___ns1__QuoteListByDate2_(struct soap*, const char*, struct __ns1__QuoteListByDate2_ *, const char*);
SOAP_FMAC1 struct __ns1__QuoteListByDate2_ * SOAP_FMAC2 soap_instantiate___ns1__QuoteListByDate2_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__QuoteListByDate2_ * soap_new___ns1__QuoteListByDate2_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__QuoteListByDate2_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__QuoteListByDate2_ * soap_new_req___ns1__QuoteListByDate2_(
	struct soap *soap)
{	struct __ns1__QuoteListByDate2_ *_p = soap_new___ns1__QuoteListByDate2_(soap);
	if (_p)
	{	soap_default___ns1__QuoteListByDate2_(soap, _p);
	}
	return _p;
}

inline struct __ns1__QuoteListByDate2_ * soap_new_set___ns1__QuoteListByDate2_(
	struct soap *soap,
	_ns1__QuoteListByDate2 *ns1__QuoteListByDate2)
{	struct __ns1__QuoteListByDate2_ *_p = soap_new___ns1__QuoteListByDate2_(soap);
	if (_p)
	{	soap_default___ns1__QuoteListByDate2_(soap, _p);
		_p->ns1__QuoteListByDate2 = ns1__QuoteListByDate2;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__QuoteListByDate2_(struct soap*, const struct __ns1__QuoteListByDate2_ *, const char*, const char*);

#ifndef soap_write___ns1__QuoteListByDate2_
#define soap_write___ns1__QuoteListByDate2_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__QuoteListByDate2_(soap, data), 0) || ns::soap_put___ns1__QuoteListByDate2_(soap, data, "-ns1:QuoteListByDate2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__QuoteListByDate2_ * SOAP_FMAC4 soap_get___ns1__QuoteListByDate2_(struct soap*, struct __ns1__QuoteListByDate2_ *, const char*, const char*);

#ifndef soap_read___ns1__QuoteListByDate2_
#define soap_read___ns1__QuoteListByDate2_(soap, data) ( ((data) ? (ns::soap_default___ns1__QuoteListByDate2_(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__QuoteListByDate2_(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__QuoteListByDate_
#define SOAP_TYPE_ns___ns1__QuoteListByDate_ (322)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__QuoteListByDate_(struct soap*, struct __ns1__QuoteListByDate_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__QuoteListByDate_(struct soap*, const struct __ns1__QuoteListByDate_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__QuoteListByDate_(struct soap*, const char*, int, const struct __ns1__QuoteListByDate_ *, const char*);
SOAP_FMAC3 struct __ns1__QuoteListByDate_ * SOAP_FMAC4 soap_in___ns1__QuoteListByDate_(struct soap*, const char*, struct __ns1__QuoteListByDate_ *, const char*);
SOAP_FMAC1 struct __ns1__QuoteListByDate_ * SOAP_FMAC2 soap_instantiate___ns1__QuoteListByDate_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__QuoteListByDate_ * soap_new___ns1__QuoteListByDate_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__QuoteListByDate_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__QuoteListByDate_ * soap_new_req___ns1__QuoteListByDate_(
	struct soap *soap)
{	struct __ns1__QuoteListByDate_ *_p = soap_new___ns1__QuoteListByDate_(soap);
	if (_p)
	{	soap_default___ns1__QuoteListByDate_(soap, _p);
	}
	return _p;
}

inline struct __ns1__QuoteListByDate_ * soap_new_set___ns1__QuoteListByDate_(
	struct soap *soap,
	_ns1__QuoteListByDate *ns1__QuoteListByDate)
{	struct __ns1__QuoteListByDate_ *_p = soap_new___ns1__QuoteListByDate_(soap);
	if (_p)
	{	soap_default___ns1__QuoteListByDate_(soap, _p);
		_p->ns1__QuoteListByDate = ns1__QuoteListByDate;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__QuoteListByDate_(struct soap*, const struct __ns1__QuoteListByDate_ *, const char*, const char*);

#ifndef soap_write___ns1__QuoteListByDate_
#define soap_write___ns1__QuoteListByDate_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__QuoteListByDate_(soap, data), 0) || ns::soap_put___ns1__QuoteListByDate_(soap, data, "-ns1:QuoteListByDate", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__QuoteListByDate_ * SOAP_FMAC4 soap_get___ns1__QuoteListByDate_(struct soap*, struct __ns1__QuoteListByDate_ *, const char*, const char*);

#ifndef soap_read___ns1__QuoteListByDate_
#define soap_read___ns1__QuoteListByDate_(soap, data) ( ((data) ? (ns::soap_default___ns1__QuoteListByDate_(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__QuoteListByDate_(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__TechnicalList_
#define SOAP_TYPE_ns___ns1__TechnicalList_ (320)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__TechnicalList_(struct soap*, struct __ns1__TechnicalList_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__TechnicalList_(struct soap*, const struct __ns1__TechnicalList_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__TechnicalList_(struct soap*, const char*, int, const struct __ns1__TechnicalList_ *, const char*);
SOAP_FMAC3 struct __ns1__TechnicalList_ * SOAP_FMAC4 soap_in___ns1__TechnicalList_(struct soap*, const char*, struct __ns1__TechnicalList_ *, const char*);
SOAP_FMAC1 struct __ns1__TechnicalList_ * SOAP_FMAC2 soap_instantiate___ns1__TechnicalList_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__TechnicalList_ * soap_new___ns1__TechnicalList_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__TechnicalList_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__TechnicalList_ * soap_new_req___ns1__TechnicalList_(
	struct soap *soap)
{	struct __ns1__TechnicalList_ *_p = soap_new___ns1__TechnicalList_(soap);
	if (_p)
	{	soap_default___ns1__TechnicalList_(soap, _p);
	}
	return _p;
}

inline struct __ns1__TechnicalList_ * soap_new_set___ns1__TechnicalList_(
	struct soap *soap,
	_ns1__TechnicalList *ns1__TechnicalList)
{	struct __ns1__TechnicalList_ *_p = soap_new___ns1__TechnicalList_(soap);
	if (_p)
	{	soap_default___ns1__TechnicalList_(soap, _p);
		_p->ns1__TechnicalList = ns1__TechnicalList;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__TechnicalList_(struct soap*, const struct __ns1__TechnicalList_ *, const char*, const char*);

#ifndef soap_write___ns1__TechnicalList_
#define soap_write___ns1__TechnicalList_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__TechnicalList_(soap, data), 0) || ns::soap_put___ns1__TechnicalList_(soap, data, "-ns1:TechnicalList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__TechnicalList_ * SOAP_FMAC4 soap_get___ns1__TechnicalList_(struct soap*, struct __ns1__TechnicalList_ *, const char*, const char*);

#ifndef soap_read___ns1__TechnicalList_
#define soap_read___ns1__TechnicalList_(soap, data) ( ((data) ? (ns::soap_default___ns1__TechnicalList_(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__TechnicalList_(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__FundamentalList_
#define SOAP_TYPE_ns___ns1__FundamentalList_ (318)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__FundamentalList_(struct soap*, struct __ns1__FundamentalList_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__FundamentalList_(struct soap*, const struct __ns1__FundamentalList_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__FundamentalList_(struct soap*, const char*, int, const struct __ns1__FundamentalList_ *, const char*);
SOAP_FMAC3 struct __ns1__FundamentalList_ * SOAP_FMAC4 soap_in___ns1__FundamentalList_(struct soap*, const char*, struct __ns1__FundamentalList_ *, const char*);
SOAP_FMAC1 struct __ns1__FundamentalList_ * SOAP_FMAC2 soap_instantiate___ns1__FundamentalList_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__FundamentalList_ * soap_new___ns1__FundamentalList_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__FundamentalList_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__FundamentalList_ * soap_new_req___ns1__FundamentalList_(
	struct soap *soap)
{	struct __ns1__FundamentalList_ *_p = soap_new___ns1__FundamentalList_(soap);
	if (_p)
	{	soap_default___ns1__FundamentalList_(soap, _p);
	}
	return _p;
}

inline struct __ns1__FundamentalList_ * soap_new_set___ns1__FundamentalList_(
	struct soap *soap,
	_ns1__FundamentalList *ns1__FundamentalList)
{	struct __ns1__FundamentalList_ *_p = soap_new___ns1__FundamentalList_(soap);
	if (_p)
	{	soap_default___ns1__FundamentalList_(soap, _p);
		_p->ns1__FundamentalList = ns1__FundamentalList;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__FundamentalList_(struct soap*, const struct __ns1__FundamentalList_ *, const char*, const char*);

#ifndef soap_write___ns1__FundamentalList_
#define soap_write___ns1__FundamentalList_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__FundamentalList_(soap, data), 0) || ns::soap_put___ns1__FundamentalList_(soap, data, "-ns1:FundamentalList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__FundamentalList_ * SOAP_FMAC4 soap_get___ns1__FundamentalList_(struct soap*, struct __ns1__FundamentalList_ *, const char*, const char*);

#ifndef soap_read___ns1__FundamentalList_
#define soap_read___ns1__FundamentalList_(soap, data) ( ((data) ? (ns::soap_default___ns1__FundamentalList_(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__FundamentalList_(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__NewsListBySymbol_
#define SOAP_TYPE_ns___ns1__NewsListBySymbol_ (316)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__NewsListBySymbol_(struct soap*, struct __ns1__NewsListBySymbol_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__NewsListBySymbol_(struct soap*, const struct __ns1__NewsListBySymbol_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__NewsListBySymbol_(struct soap*, const char*, int, const struct __ns1__NewsListBySymbol_ *, const char*);
SOAP_FMAC3 struct __ns1__NewsListBySymbol_ * SOAP_FMAC4 soap_in___ns1__NewsListBySymbol_(struct soap*, const char*, struct __ns1__NewsListBySymbol_ *, const char*);
SOAP_FMAC1 struct __ns1__NewsListBySymbol_ * SOAP_FMAC2 soap_instantiate___ns1__NewsListBySymbol_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__NewsListBySymbol_ * soap_new___ns1__NewsListBySymbol_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__NewsListBySymbol_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__NewsListBySymbol_ * soap_new_req___ns1__NewsListBySymbol_(
	struct soap *soap)
{	struct __ns1__NewsListBySymbol_ *_p = soap_new___ns1__NewsListBySymbol_(soap);
	if (_p)
	{	soap_default___ns1__NewsListBySymbol_(soap, _p);
	}
	return _p;
}

inline struct __ns1__NewsListBySymbol_ * soap_new_set___ns1__NewsListBySymbol_(
	struct soap *soap,
	_ns1__NewsListBySymbol *ns1__NewsListBySymbol)
{	struct __ns1__NewsListBySymbol_ *_p = soap_new___ns1__NewsListBySymbol_(soap);
	if (_p)
	{	soap_default___ns1__NewsListBySymbol_(soap, _p);
		_p->ns1__NewsListBySymbol = ns1__NewsListBySymbol;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__NewsListBySymbol_(struct soap*, const struct __ns1__NewsListBySymbol_ *, const char*, const char*);

#ifndef soap_write___ns1__NewsListBySymbol_
#define soap_write___ns1__NewsListBySymbol_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__NewsListBySymbol_(soap, data), 0) || ns::soap_put___ns1__NewsListBySymbol_(soap, data, "-ns1:NewsListBySymbol", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__NewsListBySymbol_ * SOAP_FMAC4 soap_get___ns1__NewsListBySymbol_(struct soap*, struct __ns1__NewsListBySymbol_ *, const char*, const char*);

#ifndef soap_read___ns1__NewsListBySymbol_
#define soap_read___ns1__NewsListBySymbol_(soap, data) ( ((data) ? (ns::soap_default___ns1__NewsListBySymbol_(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__NewsListBySymbol_(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__NewsList_
#define SOAP_TYPE_ns___ns1__NewsList_ (314)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__NewsList_(struct soap*, struct __ns1__NewsList_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__NewsList_(struct soap*, const struct __ns1__NewsList_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__NewsList_(struct soap*, const char*, int, const struct __ns1__NewsList_ *, const char*);
SOAP_FMAC3 struct __ns1__NewsList_ * SOAP_FMAC4 soap_in___ns1__NewsList_(struct soap*, const char*, struct __ns1__NewsList_ *, const char*);
SOAP_FMAC1 struct __ns1__NewsList_ * SOAP_FMAC2 soap_instantiate___ns1__NewsList_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__NewsList_ * soap_new___ns1__NewsList_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__NewsList_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__NewsList_ * soap_new_req___ns1__NewsList_(
	struct soap *soap)
{	struct __ns1__NewsList_ *_p = soap_new___ns1__NewsList_(soap);
	if (_p)
	{	soap_default___ns1__NewsList_(soap, _p);
	}
	return _p;
}

inline struct __ns1__NewsList_ * soap_new_set___ns1__NewsList_(
	struct soap *soap,
	_ns1__NewsList *ns1__NewsList)
{	struct __ns1__NewsList_ *_p = soap_new___ns1__NewsList_(soap);
	if (_p)
	{	soap_default___ns1__NewsList_(soap, _p);
		_p->ns1__NewsList = ns1__NewsList;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__NewsList_(struct soap*, const struct __ns1__NewsList_ *, const char*, const char*);

#ifndef soap_write___ns1__NewsList_
#define soap_write___ns1__NewsList_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__NewsList_(soap, data), 0) || ns::soap_put___ns1__NewsList_(soap, data, "-ns1:NewsList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__NewsList_ * SOAP_FMAC4 soap_get___ns1__NewsList_(struct soap*, struct __ns1__NewsList_ *, const char*, const char*);

#ifndef soap_read___ns1__NewsList_
#define soap_read___ns1__NewsList_(soap, data) ( ((data) ? (ns::soap_default___ns1__NewsList_(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__NewsList_(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__QuoteList_
#define SOAP_TYPE_ns___ns1__QuoteList_ (312)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__QuoteList_(struct soap*, struct __ns1__QuoteList_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__QuoteList_(struct soap*, const struct __ns1__QuoteList_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__QuoteList_(struct soap*, const char*, int, const struct __ns1__QuoteList_ *, const char*);
SOAP_FMAC3 struct __ns1__QuoteList_ * SOAP_FMAC4 soap_in___ns1__QuoteList_(struct soap*, const char*, struct __ns1__QuoteList_ *, const char*);
SOAP_FMAC1 struct __ns1__QuoteList_ * SOAP_FMAC2 soap_instantiate___ns1__QuoteList_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__QuoteList_ * soap_new___ns1__QuoteList_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__QuoteList_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__QuoteList_ * soap_new_req___ns1__QuoteList_(
	struct soap *soap)
{	struct __ns1__QuoteList_ *_p = soap_new___ns1__QuoteList_(soap);
	if (_p)
	{	soap_default___ns1__QuoteList_(soap, _p);
	}
	return _p;
}

inline struct __ns1__QuoteList_ * soap_new_set___ns1__QuoteList_(
	struct soap *soap,
	_ns1__QuoteList *ns1__QuoteList)
{	struct __ns1__QuoteList_ *_p = soap_new___ns1__QuoteList_(soap);
	if (_p)
	{	soap_default___ns1__QuoteList_(soap, _p);
		_p->ns1__QuoteList = ns1__QuoteList;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__QuoteList_(struct soap*, const struct __ns1__QuoteList_ *, const char*, const char*);

#ifndef soap_write___ns1__QuoteList_
#define soap_write___ns1__QuoteList_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__QuoteList_(soap, data), 0) || ns::soap_put___ns1__QuoteList_(soap, data, "-ns1:QuoteList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__QuoteList_ * SOAP_FMAC4 soap_get___ns1__QuoteList_(struct soap*, struct __ns1__QuoteList_ *, const char*, const char*);

#ifndef soap_read___ns1__QuoteList_
#define soap_read___ns1__QuoteList_(soap, data) ( ((data) ? (ns::soap_default___ns1__QuoteList_(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__QuoteList_(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__SymbolGet_
#define SOAP_TYPE_ns___ns1__SymbolGet_ (310)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SymbolGet_(struct soap*, struct __ns1__SymbolGet_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SymbolGet_(struct soap*, const struct __ns1__SymbolGet_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SymbolGet_(struct soap*, const char*, int, const struct __ns1__SymbolGet_ *, const char*);
SOAP_FMAC3 struct __ns1__SymbolGet_ * SOAP_FMAC4 soap_in___ns1__SymbolGet_(struct soap*, const char*, struct __ns1__SymbolGet_ *, const char*);
SOAP_FMAC1 struct __ns1__SymbolGet_ * SOAP_FMAC2 soap_instantiate___ns1__SymbolGet_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SymbolGet_ * soap_new___ns1__SymbolGet_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SymbolGet_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SymbolGet_ * soap_new_req___ns1__SymbolGet_(
	struct soap *soap)
{	struct __ns1__SymbolGet_ *_p = soap_new___ns1__SymbolGet_(soap);
	if (_p)
	{	soap_default___ns1__SymbolGet_(soap, _p);
	}
	return _p;
}

inline struct __ns1__SymbolGet_ * soap_new_set___ns1__SymbolGet_(
	struct soap *soap,
	_ns1__SymbolGet *ns1__SymbolGet)
{	struct __ns1__SymbolGet_ *_p = soap_new___ns1__SymbolGet_(soap);
	if (_p)
	{	soap_default___ns1__SymbolGet_(soap, _p);
		_p->ns1__SymbolGet = ns1__SymbolGet;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SymbolGet_(struct soap*, const struct __ns1__SymbolGet_ *, const char*, const char*);

#ifndef soap_write___ns1__SymbolGet_
#define soap_write___ns1__SymbolGet_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__SymbolGet_(soap, data), 0) || ns::soap_put___ns1__SymbolGet_(soap, data, "-ns1:SymbolGet", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SymbolGet_ * SOAP_FMAC4 soap_get___ns1__SymbolGet_(struct soap*, struct __ns1__SymbolGet_ *, const char*, const char*);

#ifndef soap_read___ns1__SymbolGet_
#define soap_read___ns1__SymbolGet_(soap, data) ( ((data) ? (ns::soap_default___ns1__SymbolGet_(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__SymbolGet_(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__QuoteList2_
#define SOAP_TYPE_ns___ns1__QuoteList2_ (308)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__QuoteList2_(struct soap*, struct __ns1__QuoteList2_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__QuoteList2_(struct soap*, const struct __ns1__QuoteList2_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__QuoteList2_(struct soap*, const char*, int, const struct __ns1__QuoteList2_ *, const char*);
SOAP_FMAC3 struct __ns1__QuoteList2_ * SOAP_FMAC4 soap_in___ns1__QuoteList2_(struct soap*, const char*, struct __ns1__QuoteList2_ *, const char*);
SOAP_FMAC1 struct __ns1__QuoteList2_ * SOAP_FMAC2 soap_instantiate___ns1__QuoteList2_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__QuoteList2_ * soap_new___ns1__QuoteList2_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__QuoteList2_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__QuoteList2_ * soap_new_req___ns1__QuoteList2_(
	struct soap *soap)
{	struct __ns1__QuoteList2_ *_p = soap_new___ns1__QuoteList2_(soap);
	if (_p)
	{	soap_default___ns1__QuoteList2_(soap, _p);
	}
	return _p;
}

inline struct __ns1__QuoteList2_ * soap_new_set___ns1__QuoteList2_(
	struct soap *soap,
	_ns1__QuoteList2 *ns1__QuoteList2)
{	struct __ns1__QuoteList2_ *_p = soap_new___ns1__QuoteList2_(soap);
	if (_p)
	{	soap_default___ns1__QuoteList2_(soap, _p);
		_p->ns1__QuoteList2 = ns1__QuoteList2;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__QuoteList2_(struct soap*, const struct __ns1__QuoteList2_ *, const char*, const char*);

#ifndef soap_write___ns1__QuoteList2_
#define soap_write___ns1__QuoteList2_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__QuoteList2_(soap, data), 0) || ns::soap_put___ns1__QuoteList2_(soap, data, "-ns1:QuoteList2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__QuoteList2_ * SOAP_FMAC4 soap_get___ns1__QuoteList2_(struct soap*, struct __ns1__QuoteList2_ *, const char*, const char*);

#ifndef soap_read___ns1__QuoteList2_
#define soap_read___ns1__QuoteList2_(soap, data) ( ((data) ? (ns::soap_default___ns1__QuoteList2_(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__QuoteList2_(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__QuoteGet_
#define SOAP_TYPE_ns___ns1__QuoteGet_ (306)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__QuoteGet_(struct soap*, struct __ns1__QuoteGet_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__QuoteGet_(struct soap*, const struct __ns1__QuoteGet_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__QuoteGet_(struct soap*, const char*, int, const struct __ns1__QuoteGet_ *, const char*);
SOAP_FMAC3 struct __ns1__QuoteGet_ * SOAP_FMAC4 soap_in___ns1__QuoteGet_(struct soap*, const char*, struct __ns1__QuoteGet_ *, const char*);
SOAP_FMAC1 struct __ns1__QuoteGet_ * SOAP_FMAC2 soap_instantiate___ns1__QuoteGet_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__QuoteGet_ * soap_new___ns1__QuoteGet_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__QuoteGet_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__QuoteGet_ * soap_new_req___ns1__QuoteGet_(
	struct soap *soap)
{	struct __ns1__QuoteGet_ *_p = soap_new___ns1__QuoteGet_(soap);
	if (_p)
	{	soap_default___ns1__QuoteGet_(soap, _p);
	}
	return _p;
}

inline struct __ns1__QuoteGet_ * soap_new_set___ns1__QuoteGet_(
	struct soap *soap,
	_ns1__QuoteGet *ns1__QuoteGet)
{	struct __ns1__QuoteGet_ *_p = soap_new___ns1__QuoteGet_(soap);
	if (_p)
	{	soap_default___ns1__QuoteGet_(soap, _p);
		_p->ns1__QuoteGet = ns1__QuoteGet;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__QuoteGet_(struct soap*, const struct __ns1__QuoteGet_ *, const char*, const char*);

#ifndef soap_write___ns1__QuoteGet_
#define soap_write___ns1__QuoteGet_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__QuoteGet_(soap, data), 0) || ns::soap_put___ns1__QuoteGet_(soap, data, "-ns1:QuoteGet", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__QuoteGet_ * SOAP_FMAC4 soap_get___ns1__QuoteGet_(struct soap*, struct __ns1__QuoteGet_ *, const char*, const char*);

#ifndef soap_read___ns1__QuoteGet_
#define soap_read___ns1__QuoteGet_(soap, data) ( ((data) ? (ns::soap_default___ns1__QuoteGet_(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__QuoteGet_(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__SymbolList2_
#define SOAP_TYPE_ns___ns1__SymbolList2_ (304)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SymbolList2_(struct soap*, struct __ns1__SymbolList2_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SymbolList2_(struct soap*, const struct __ns1__SymbolList2_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SymbolList2_(struct soap*, const char*, int, const struct __ns1__SymbolList2_ *, const char*);
SOAP_FMAC3 struct __ns1__SymbolList2_ * SOAP_FMAC4 soap_in___ns1__SymbolList2_(struct soap*, const char*, struct __ns1__SymbolList2_ *, const char*);
SOAP_FMAC1 struct __ns1__SymbolList2_ * SOAP_FMAC2 soap_instantiate___ns1__SymbolList2_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SymbolList2_ * soap_new___ns1__SymbolList2_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SymbolList2_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SymbolList2_ * soap_new_req___ns1__SymbolList2_(
	struct soap *soap)
{	struct __ns1__SymbolList2_ *_p = soap_new___ns1__SymbolList2_(soap);
	if (_p)
	{	soap_default___ns1__SymbolList2_(soap, _p);
	}
	return _p;
}

inline struct __ns1__SymbolList2_ * soap_new_set___ns1__SymbolList2_(
	struct soap *soap,
	_ns1__SymbolList2 *ns1__SymbolList2)
{	struct __ns1__SymbolList2_ *_p = soap_new___ns1__SymbolList2_(soap);
	if (_p)
	{	soap_default___ns1__SymbolList2_(soap, _p);
		_p->ns1__SymbolList2 = ns1__SymbolList2;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SymbolList2_(struct soap*, const struct __ns1__SymbolList2_ *, const char*, const char*);

#ifndef soap_write___ns1__SymbolList2_
#define soap_write___ns1__SymbolList2_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__SymbolList2_(soap, data), 0) || ns::soap_put___ns1__SymbolList2_(soap, data, "-ns1:SymbolList2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SymbolList2_ * SOAP_FMAC4 soap_get___ns1__SymbolList2_(struct soap*, struct __ns1__SymbolList2_ *, const char*, const char*);

#ifndef soap_read___ns1__SymbolList2_
#define soap_read___ns1__SymbolList2_(soap, data) ( ((data) ? (ns::soap_default___ns1__SymbolList2_(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__SymbolList2_(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__SymbolList_
#define SOAP_TYPE_ns___ns1__SymbolList_ (302)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SymbolList_(struct soap*, struct __ns1__SymbolList_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SymbolList_(struct soap*, const struct __ns1__SymbolList_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SymbolList_(struct soap*, const char*, int, const struct __ns1__SymbolList_ *, const char*);
SOAP_FMAC3 struct __ns1__SymbolList_ * SOAP_FMAC4 soap_in___ns1__SymbolList_(struct soap*, const char*, struct __ns1__SymbolList_ *, const char*);
SOAP_FMAC1 struct __ns1__SymbolList_ * SOAP_FMAC2 soap_instantiate___ns1__SymbolList_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SymbolList_ * soap_new___ns1__SymbolList_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SymbolList_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SymbolList_ * soap_new_req___ns1__SymbolList_(
	struct soap *soap)
{	struct __ns1__SymbolList_ *_p = soap_new___ns1__SymbolList_(soap);
	if (_p)
	{	soap_default___ns1__SymbolList_(soap, _p);
	}
	return _p;
}

inline struct __ns1__SymbolList_ * soap_new_set___ns1__SymbolList_(
	struct soap *soap,
	_ns1__SymbolList *ns1__SymbolList)
{	struct __ns1__SymbolList_ *_p = soap_new___ns1__SymbolList_(soap);
	if (_p)
	{	soap_default___ns1__SymbolList_(soap, _p);
		_p->ns1__SymbolList = ns1__SymbolList;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SymbolList_(struct soap*, const struct __ns1__SymbolList_ *, const char*, const char*);

#ifndef soap_write___ns1__SymbolList_
#define soap_write___ns1__SymbolList_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__SymbolList_(soap, data), 0) || ns::soap_put___ns1__SymbolList_(soap, data, "-ns1:SymbolList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SymbolList_ * SOAP_FMAC4 soap_get___ns1__SymbolList_(struct soap*, struct __ns1__SymbolList_ *, const char*, const char*);

#ifndef soap_read___ns1__SymbolList_
#define soap_read___ns1__SymbolList_(soap, data) ( ((data) ? (ns::soap_default___ns1__SymbolList_(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__SymbolList_(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__ExchangeGet_
#define SOAP_TYPE_ns___ns1__ExchangeGet_ (300)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ExchangeGet_(struct soap*, struct __ns1__ExchangeGet_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ExchangeGet_(struct soap*, const struct __ns1__ExchangeGet_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ExchangeGet_(struct soap*, const char*, int, const struct __ns1__ExchangeGet_ *, const char*);
SOAP_FMAC3 struct __ns1__ExchangeGet_ * SOAP_FMAC4 soap_in___ns1__ExchangeGet_(struct soap*, const char*, struct __ns1__ExchangeGet_ *, const char*);
SOAP_FMAC1 struct __ns1__ExchangeGet_ * SOAP_FMAC2 soap_instantiate___ns1__ExchangeGet_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ExchangeGet_ * soap_new___ns1__ExchangeGet_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__ExchangeGet_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__ExchangeGet_ * soap_new_req___ns1__ExchangeGet_(
	struct soap *soap)
{	struct __ns1__ExchangeGet_ *_p = soap_new___ns1__ExchangeGet_(soap);
	if (_p)
	{	soap_default___ns1__ExchangeGet_(soap, _p);
	}
	return _p;
}

inline struct __ns1__ExchangeGet_ * soap_new_set___ns1__ExchangeGet_(
	struct soap *soap,
	_ns1__ExchangeGet *ns1__ExchangeGet)
{	struct __ns1__ExchangeGet_ *_p = soap_new___ns1__ExchangeGet_(soap);
	if (_p)
	{	soap_default___ns1__ExchangeGet_(soap, _p);
		_p->ns1__ExchangeGet = ns1__ExchangeGet;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ExchangeGet_(struct soap*, const struct __ns1__ExchangeGet_ *, const char*, const char*);

#ifndef soap_write___ns1__ExchangeGet_
#define soap_write___ns1__ExchangeGet_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__ExchangeGet_(soap, data), 0) || ns::soap_put___ns1__ExchangeGet_(soap, data, "-ns1:ExchangeGet", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__ExchangeGet_ * SOAP_FMAC4 soap_get___ns1__ExchangeGet_(struct soap*, struct __ns1__ExchangeGet_ *, const char*, const char*);

#ifndef soap_read___ns1__ExchangeGet_
#define soap_read___ns1__ExchangeGet_(soap, data) ( ((data) ? (ns::soap_default___ns1__ExchangeGet_(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__ExchangeGet_(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__ExchangeList_
#define SOAP_TYPE_ns___ns1__ExchangeList_ (298)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ExchangeList_(struct soap*, struct __ns1__ExchangeList_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ExchangeList_(struct soap*, const struct __ns1__ExchangeList_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ExchangeList_(struct soap*, const char*, int, const struct __ns1__ExchangeList_ *, const char*);
SOAP_FMAC3 struct __ns1__ExchangeList_ * SOAP_FMAC4 soap_in___ns1__ExchangeList_(struct soap*, const char*, struct __ns1__ExchangeList_ *, const char*);
SOAP_FMAC1 struct __ns1__ExchangeList_ * SOAP_FMAC2 soap_instantiate___ns1__ExchangeList_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ExchangeList_ * soap_new___ns1__ExchangeList_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__ExchangeList_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__ExchangeList_ * soap_new_req___ns1__ExchangeList_(
	struct soap *soap)
{	struct __ns1__ExchangeList_ *_p = soap_new___ns1__ExchangeList_(soap);
	if (_p)
	{	soap_default___ns1__ExchangeList_(soap, _p);
	}
	return _p;
}

inline struct __ns1__ExchangeList_ * soap_new_set___ns1__ExchangeList_(
	struct soap *soap,
	_ns1__ExchangeList *ns1__ExchangeList)
{	struct __ns1__ExchangeList_ *_p = soap_new___ns1__ExchangeList_(soap);
	if (_p)
	{	soap_default___ns1__ExchangeList_(soap, _p);
		_p->ns1__ExchangeList = ns1__ExchangeList;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ExchangeList_(struct soap*, const struct __ns1__ExchangeList_ *, const char*, const char*);

#ifndef soap_write___ns1__ExchangeList_
#define soap_write___ns1__ExchangeList_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__ExchangeList_(soap, data), 0) || ns::soap_put___ns1__ExchangeList_(soap, data, "-ns1:ExchangeList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__ExchangeList_ * SOAP_FMAC4 soap_get___ns1__ExchangeList_(struct soap*, struct __ns1__ExchangeList_ *, const char*, const char*);

#ifndef soap_read___ns1__ExchangeList_
#define soap_read___ns1__ExchangeList_(soap, data) ( ((data) ? (ns::soap_default___ns1__ExchangeList_(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__ExchangeList_(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__Membership_
#define SOAP_TYPE_ns___ns1__Membership_ (296)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Membership_(struct soap*, struct __ns1__Membership_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Membership_(struct soap*, const struct __ns1__Membership_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Membership_(struct soap*, const char*, int, const struct __ns1__Membership_ *, const char*);
SOAP_FMAC3 struct __ns1__Membership_ * SOAP_FMAC4 soap_in___ns1__Membership_(struct soap*, const char*, struct __ns1__Membership_ *, const char*);
SOAP_FMAC1 struct __ns1__Membership_ * SOAP_FMAC2 soap_instantiate___ns1__Membership_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Membership_ * soap_new___ns1__Membership_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__Membership_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__Membership_ * soap_new_req___ns1__Membership_(
	struct soap *soap)
{	struct __ns1__Membership_ *_p = soap_new___ns1__Membership_(soap);
	if (_p)
	{	soap_default___ns1__Membership_(soap, _p);
	}
	return _p;
}

inline struct __ns1__Membership_ * soap_new_set___ns1__Membership_(
	struct soap *soap,
	_ns1__Membership *ns1__Membership)
{	struct __ns1__Membership_ *_p = soap_new___ns1__Membership_(soap);
	if (_p)
	{	soap_default___ns1__Membership_(soap, _p);
		_p->ns1__Membership = ns1__Membership;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Membership_(struct soap*, const struct __ns1__Membership_ *, const char*, const char*);

#ifndef soap_write___ns1__Membership_
#define soap_write___ns1__Membership_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__Membership_(soap, data), 0) || ns::soap_put___ns1__Membership_(soap, data, "-ns1:Membership", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__Membership_ * SOAP_FMAC4 soap_get___ns1__Membership_(struct soap*, struct __ns1__Membership_ *, const char*, const char*);

#ifndef soap_read___ns1__Membership_
#define soap_read___ns1__Membership_(soap, data) ( ((data) ? (ns::soap_default___ns1__Membership_(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__Membership_(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__Login2_
#define SOAP_TYPE_ns___ns1__Login2_ (294)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Login2_(struct soap*, struct __ns1__Login2_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Login2_(struct soap*, const struct __ns1__Login2_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Login2_(struct soap*, const char*, int, const struct __ns1__Login2_ *, const char*);
SOAP_FMAC3 struct __ns1__Login2_ * SOAP_FMAC4 soap_in___ns1__Login2_(struct soap*, const char*, struct __ns1__Login2_ *, const char*);
SOAP_FMAC1 struct __ns1__Login2_ * SOAP_FMAC2 soap_instantiate___ns1__Login2_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Login2_ * soap_new___ns1__Login2_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__Login2_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__Login2_ * soap_new_req___ns1__Login2_(
	struct soap *soap)
{	struct __ns1__Login2_ *_p = soap_new___ns1__Login2_(soap);
	if (_p)
	{	soap_default___ns1__Login2_(soap, _p);
	}
	return _p;
}

inline struct __ns1__Login2_ * soap_new_set___ns1__Login2_(
	struct soap *soap,
	_ns1__Login2 *ns1__Login2)
{	struct __ns1__Login2_ *_p = soap_new___ns1__Login2_(soap);
	if (_p)
	{	soap_default___ns1__Login2_(soap, _p);
		_p->ns1__Login2 = ns1__Login2;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Login2_(struct soap*, const struct __ns1__Login2_ *, const char*, const char*);

#ifndef soap_write___ns1__Login2_
#define soap_write___ns1__Login2_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__Login2_(soap, data), 0) || ns::soap_put___ns1__Login2_(soap, data, "-ns1:Login2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__Login2_ * SOAP_FMAC4 soap_get___ns1__Login2_(struct soap*, struct __ns1__Login2_ *, const char*, const char*);

#ifndef soap_read___ns1__Login2_
#define soap_read___ns1__Login2_(soap, data) ( ((data) ? (ns::soap_default___ns1__Login2_(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__Login2_(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__Login_
#define SOAP_TYPE_ns___ns1__Login_ (292)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Login_(struct soap*, struct __ns1__Login_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Login_(struct soap*, const struct __ns1__Login_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Login_(struct soap*, const char*, int, const struct __ns1__Login_ *, const char*);
SOAP_FMAC3 struct __ns1__Login_ * SOAP_FMAC4 soap_in___ns1__Login_(struct soap*, const char*, struct __ns1__Login_ *, const char*);
SOAP_FMAC1 struct __ns1__Login_ * SOAP_FMAC2 soap_instantiate___ns1__Login_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Login_ * soap_new___ns1__Login_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__Login_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__Login_ * soap_new_req___ns1__Login_(
	struct soap *soap)
{	struct __ns1__Login_ *_p = soap_new___ns1__Login_(soap);
	if (_p)
	{	soap_default___ns1__Login_(soap, _p);
	}
	return _p;
}

inline struct __ns1__Login_ * soap_new_set___ns1__Login_(
	struct soap *soap,
	_ns1__Login *ns1__Login)
{	struct __ns1__Login_ *_p = soap_new___ns1__Login_(soap);
	if (_p)
	{	soap_default___ns1__Login_(soap, _p);
		_p->ns1__Login = ns1__Login;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Login_(struct soap*, const struct __ns1__Login_ *, const char*, const char*);

#ifndef soap_write___ns1__Login_
#define soap_write___ns1__Login_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__Login_(soap, data), 0) || ns::soap_put___ns1__Login_(soap, data, "-ns1:Login", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__Login_ * SOAP_FMAC4 soap_get___ns1__Login_(struct soap*, struct __ns1__Login_ *, const char*, const char*);

#ifndef soap_read___ns1__Login_
#define soap_read___ns1__Login_(soap, data) ( ((data) ? (ns::soap_default___ns1__Login_(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__Login_(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__ValidateAccess
#define SOAP_TYPE_ns___ns1__ValidateAccess (290)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ValidateAccess(struct soap*, struct __ns1__ValidateAccess *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ValidateAccess(struct soap*, const struct __ns1__ValidateAccess *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ValidateAccess(struct soap*, const char*, int, const struct __ns1__ValidateAccess *, const char*);
SOAP_FMAC3 struct __ns1__ValidateAccess * SOAP_FMAC4 soap_in___ns1__ValidateAccess(struct soap*, const char*, struct __ns1__ValidateAccess *, const char*);
SOAP_FMAC1 struct __ns1__ValidateAccess * SOAP_FMAC2 soap_instantiate___ns1__ValidateAccess(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ValidateAccess * soap_new___ns1__ValidateAccess(struct soap *soap, int n = -1) { return soap_instantiate___ns1__ValidateAccess(soap, n, NULL, NULL, NULL); }

inline struct __ns1__ValidateAccess * soap_new_req___ns1__ValidateAccess(
	struct soap *soap)
{	struct __ns1__ValidateAccess *_p = soap_new___ns1__ValidateAccess(soap);
	if (_p)
	{	soap_default___ns1__ValidateAccess(soap, _p);
	}
	return _p;
}

inline struct __ns1__ValidateAccess * soap_new_set___ns1__ValidateAccess(
	struct soap *soap,
	_ns1__ValidateAccess *ns1__ValidateAccess)
{	struct __ns1__ValidateAccess *_p = soap_new___ns1__ValidateAccess(soap);
	if (_p)
	{	soap_default___ns1__ValidateAccess(soap, _p);
		_p->ns1__ValidateAccess = ns1__ValidateAccess;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ValidateAccess(struct soap*, const struct __ns1__ValidateAccess *, const char*, const char*);

#ifndef soap_write___ns1__ValidateAccess
#define soap_write___ns1__ValidateAccess(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__ValidateAccess(soap, data), 0) || ns::soap_put___ns1__ValidateAccess(soap, data, "-ns1:ValidateAccess", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__ValidateAccess * SOAP_FMAC4 soap_get___ns1__ValidateAccess(struct soap*, struct __ns1__ValidateAccess *, const char*, const char*);

#ifndef soap_read___ns1__ValidateAccess
#define soap_read___ns1__ValidateAccess(soap, data) ( ((data) ? (ns::soap_default___ns1__ValidateAccess(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__ValidateAccess(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__UpdateDataFormat
#define SOAP_TYPE_ns___ns1__UpdateDataFormat (286)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__UpdateDataFormat(struct soap*, struct __ns1__UpdateDataFormat *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__UpdateDataFormat(struct soap*, const struct __ns1__UpdateDataFormat *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__UpdateDataFormat(struct soap*, const char*, int, const struct __ns1__UpdateDataFormat *, const char*);
SOAP_FMAC3 struct __ns1__UpdateDataFormat * SOAP_FMAC4 soap_in___ns1__UpdateDataFormat(struct soap*, const char*, struct __ns1__UpdateDataFormat *, const char*);
SOAP_FMAC1 struct __ns1__UpdateDataFormat * SOAP_FMAC2 soap_instantiate___ns1__UpdateDataFormat(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__UpdateDataFormat * soap_new___ns1__UpdateDataFormat(struct soap *soap, int n = -1) { return soap_instantiate___ns1__UpdateDataFormat(soap, n, NULL, NULL, NULL); }

inline struct __ns1__UpdateDataFormat * soap_new_req___ns1__UpdateDataFormat(
	struct soap *soap)
{	struct __ns1__UpdateDataFormat *_p = soap_new___ns1__UpdateDataFormat(soap);
	if (_p)
	{	soap_default___ns1__UpdateDataFormat(soap, _p);
	}
	return _p;
}

inline struct __ns1__UpdateDataFormat * soap_new_set___ns1__UpdateDataFormat(
	struct soap *soap,
	_ns1__UpdateDataFormat *ns1__UpdateDataFormat)
{	struct __ns1__UpdateDataFormat *_p = soap_new___ns1__UpdateDataFormat(soap);
	if (_p)
	{	soap_default___ns1__UpdateDataFormat(soap, _p);
		_p->ns1__UpdateDataFormat = ns1__UpdateDataFormat;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__UpdateDataFormat(struct soap*, const struct __ns1__UpdateDataFormat *, const char*, const char*);

#ifndef soap_write___ns1__UpdateDataFormat
#define soap_write___ns1__UpdateDataFormat(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__UpdateDataFormat(soap, data), 0) || ns::soap_put___ns1__UpdateDataFormat(soap, data, "-ns1:UpdateDataFormat", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__UpdateDataFormat * SOAP_FMAC4 soap_get___ns1__UpdateDataFormat(struct soap*, struct __ns1__UpdateDataFormat *, const char*, const char*);

#ifndef soap_read___ns1__UpdateDataFormat
#define soap_read___ns1__UpdateDataFormat(soap, data) ( ((data) ? (ns::soap_default___ns1__UpdateDataFormat(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__UpdateDataFormat(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__DataFormats
#define SOAP_TYPE_ns___ns1__DataFormats (282)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DataFormats(struct soap*, struct __ns1__DataFormats *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DataFormats(struct soap*, const struct __ns1__DataFormats *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DataFormats(struct soap*, const char*, int, const struct __ns1__DataFormats *, const char*);
SOAP_FMAC3 struct __ns1__DataFormats * SOAP_FMAC4 soap_in___ns1__DataFormats(struct soap*, const char*, struct __ns1__DataFormats *, const char*);
SOAP_FMAC1 struct __ns1__DataFormats * SOAP_FMAC2 soap_instantiate___ns1__DataFormats(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__DataFormats * soap_new___ns1__DataFormats(struct soap *soap, int n = -1) { return soap_instantiate___ns1__DataFormats(soap, n, NULL, NULL, NULL); }

inline struct __ns1__DataFormats * soap_new_req___ns1__DataFormats(
	struct soap *soap)
{	struct __ns1__DataFormats *_p = soap_new___ns1__DataFormats(soap);
	if (_p)
	{	soap_default___ns1__DataFormats(soap, _p);
	}
	return _p;
}

inline struct __ns1__DataFormats * soap_new_set___ns1__DataFormats(
	struct soap *soap,
	_ns1__DataFormats *ns1__DataFormats)
{	struct __ns1__DataFormats *_p = soap_new___ns1__DataFormats(soap);
	if (_p)
	{	soap_default___ns1__DataFormats(soap, _p);
		_p->ns1__DataFormats = ns1__DataFormats;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DataFormats(struct soap*, const struct __ns1__DataFormats *, const char*, const char*);

#ifndef soap_write___ns1__DataFormats
#define soap_write___ns1__DataFormats(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__DataFormats(soap, data), 0) || ns::soap_put___ns1__DataFormats(soap, data, "-ns1:DataFormats", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__DataFormats * SOAP_FMAC4 soap_get___ns1__DataFormats(struct soap*, struct __ns1__DataFormats *, const char*, const char*);

#ifndef soap_read___ns1__DataFormats
#define soap_read___ns1__DataFormats(soap, data) ( ((data) ? (ns::soap_default___ns1__DataFormats(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__DataFormats(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__DataClientLatestVersion
#define SOAP_TYPE_ns___ns1__DataClientLatestVersion (278)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DataClientLatestVersion(struct soap*, struct __ns1__DataClientLatestVersion *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DataClientLatestVersion(struct soap*, const struct __ns1__DataClientLatestVersion *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DataClientLatestVersion(struct soap*, const char*, int, const struct __ns1__DataClientLatestVersion *, const char*);
SOAP_FMAC3 struct __ns1__DataClientLatestVersion * SOAP_FMAC4 soap_in___ns1__DataClientLatestVersion(struct soap*, const char*, struct __ns1__DataClientLatestVersion *, const char*);
SOAP_FMAC1 struct __ns1__DataClientLatestVersion * SOAP_FMAC2 soap_instantiate___ns1__DataClientLatestVersion(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__DataClientLatestVersion * soap_new___ns1__DataClientLatestVersion(struct soap *soap, int n = -1) { return soap_instantiate___ns1__DataClientLatestVersion(soap, n, NULL, NULL, NULL); }

inline struct __ns1__DataClientLatestVersion * soap_new_req___ns1__DataClientLatestVersion(
	struct soap *soap)
{	struct __ns1__DataClientLatestVersion *_p = soap_new___ns1__DataClientLatestVersion(soap);
	if (_p)
	{	soap_default___ns1__DataClientLatestVersion(soap, _p);
	}
	return _p;
}

inline struct __ns1__DataClientLatestVersion * soap_new_set___ns1__DataClientLatestVersion(
	struct soap *soap,
	_ns1__DataClientLatestVersion *ns1__DataClientLatestVersion)
{	struct __ns1__DataClientLatestVersion *_p = soap_new___ns1__DataClientLatestVersion(soap);
	if (_p)
	{	soap_default___ns1__DataClientLatestVersion(soap, _p);
		_p->ns1__DataClientLatestVersion = ns1__DataClientLatestVersion;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DataClientLatestVersion(struct soap*, const struct __ns1__DataClientLatestVersion *, const char*, const char*);

#ifndef soap_write___ns1__DataClientLatestVersion
#define soap_write___ns1__DataClientLatestVersion(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__DataClientLatestVersion(soap, data), 0) || ns::soap_put___ns1__DataClientLatestVersion(soap, data, "-ns1:DataClientLatestVersion", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__DataClientLatestVersion * SOAP_FMAC4 soap_get___ns1__DataClientLatestVersion(struct soap*, struct __ns1__DataClientLatestVersion *, const char*, const char*);

#ifndef soap_read___ns1__DataClientLatestVersion
#define soap_read___ns1__DataClientLatestVersion(soap, data) ( ((data) ? (ns::soap_default___ns1__DataClientLatestVersion(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__DataClientLatestVersion(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__SymbolChangesByExchange
#define SOAP_TYPE_ns___ns1__SymbolChangesByExchange (274)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SymbolChangesByExchange(struct soap*, struct __ns1__SymbolChangesByExchange *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SymbolChangesByExchange(struct soap*, const struct __ns1__SymbolChangesByExchange *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SymbolChangesByExchange(struct soap*, const char*, int, const struct __ns1__SymbolChangesByExchange *, const char*);
SOAP_FMAC3 struct __ns1__SymbolChangesByExchange * SOAP_FMAC4 soap_in___ns1__SymbolChangesByExchange(struct soap*, const char*, struct __ns1__SymbolChangesByExchange *, const char*);
SOAP_FMAC1 struct __ns1__SymbolChangesByExchange * SOAP_FMAC2 soap_instantiate___ns1__SymbolChangesByExchange(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SymbolChangesByExchange * soap_new___ns1__SymbolChangesByExchange(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SymbolChangesByExchange(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SymbolChangesByExchange * soap_new_req___ns1__SymbolChangesByExchange(
	struct soap *soap)
{	struct __ns1__SymbolChangesByExchange *_p = soap_new___ns1__SymbolChangesByExchange(soap);
	if (_p)
	{	soap_default___ns1__SymbolChangesByExchange(soap, _p);
	}
	return _p;
}

inline struct __ns1__SymbolChangesByExchange * soap_new_set___ns1__SymbolChangesByExchange(
	struct soap *soap,
	_ns1__SymbolChangesByExchange *ns1__SymbolChangesByExchange)
{	struct __ns1__SymbolChangesByExchange *_p = soap_new___ns1__SymbolChangesByExchange(soap);
	if (_p)
	{	soap_default___ns1__SymbolChangesByExchange(soap, _p);
		_p->ns1__SymbolChangesByExchange = ns1__SymbolChangesByExchange;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SymbolChangesByExchange(struct soap*, const struct __ns1__SymbolChangesByExchange *, const char*, const char*);

#ifndef soap_write___ns1__SymbolChangesByExchange
#define soap_write___ns1__SymbolChangesByExchange(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__SymbolChangesByExchange(soap, data), 0) || ns::soap_put___ns1__SymbolChangesByExchange(soap, data, "-ns1:SymbolChangesByExchange", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SymbolChangesByExchange * SOAP_FMAC4 soap_get___ns1__SymbolChangesByExchange(struct soap*, struct __ns1__SymbolChangesByExchange *, const char*, const char*);

#ifndef soap_read___ns1__SymbolChangesByExchange
#define soap_read___ns1__SymbolChangesByExchange(soap, data) ( ((data) ? (ns::soap_default___ns1__SymbolChangesByExchange(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__SymbolChangesByExchange(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__QuoteListByDatePeriod2
#define SOAP_TYPE_ns___ns1__QuoteListByDatePeriod2 (270)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__QuoteListByDatePeriod2(struct soap*, struct __ns1__QuoteListByDatePeriod2 *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__QuoteListByDatePeriod2(struct soap*, const struct __ns1__QuoteListByDatePeriod2 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__QuoteListByDatePeriod2(struct soap*, const char*, int, const struct __ns1__QuoteListByDatePeriod2 *, const char*);
SOAP_FMAC3 struct __ns1__QuoteListByDatePeriod2 * SOAP_FMAC4 soap_in___ns1__QuoteListByDatePeriod2(struct soap*, const char*, struct __ns1__QuoteListByDatePeriod2 *, const char*);
SOAP_FMAC1 struct __ns1__QuoteListByDatePeriod2 * SOAP_FMAC2 soap_instantiate___ns1__QuoteListByDatePeriod2(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__QuoteListByDatePeriod2 * soap_new___ns1__QuoteListByDatePeriod2(struct soap *soap, int n = -1) { return soap_instantiate___ns1__QuoteListByDatePeriod2(soap, n, NULL, NULL, NULL); }

inline struct __ns1__QuoteListByDatePeriod2 * soap_new_req___ns1__QuoteListByDatePeriod2(
	struct soap *soap)
{	struct __ns1__QuoteListByDatePeriod2 *_p = soap_new___ns1__QuoteListByDatePeriod2(soap);
	if (_p)
	{	soap_default___ns1__QuoteListByDatePeriod2(soap, _p);
	}
	return _p;
}

inline struct __ns1__QuoteListByDatePeriod2 * soap_new_set___ns1__QuoteListByDatePeriod2(
	struct soap *soap,
	_ns1__QuoteListByDatePeriod2 *ns1__QuoteListByDatePeriod2)
{	struct __ns1__QuoteListByDatePeriod2 *_p = soap_new___ns1__QuoteListByDatePeriod2(soap);
	if (_p)
	{	soap_default___ns1__QuoteListByDatePeriod2(soap, _p);
		_p->ns1__QuoteListByDatePeriod2 = ns1__QuoteListByDatePeriod2;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__QuoteListByDatePeriod2(struct soap*, const struct __ns1__QuoteListByDatePeriod2 *, const char*, const char*);

#ifndef soap_write___ns1__QuoteListByDatePeriod2
#define soap_write___ns1__QuoteListByDatePeriod2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__QuoteListByDatePeriod2(soap, data), 0) || ns::soap_put___ns1__QuoteListByDatePeriod2(soap, data, "-ns1:QuoteListByDatePeriod2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__QuoteListByDatePeriod2 * SOAP_FMAC4 soap_get___ns1__QuoteListByDatePeriod2(struct soap*, struct __ns1__QuoteListByDatePeriod2 *, const char*, const char*);

#ifndef soap_read___ns1__QuoteListByDatePeriod2
#define soap_read___ns1__QuoteListByDatePeriod2(soap, data) ( ((data) ? (ns::soap_default___ns1__QuoteListByDatePeriod2(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__QuoteListByDatePeriod2(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__QuoteListByDatePeriod
#define SOAP_TYPE_ns___ns1__QuoteListByDatePeriod (266)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__QuoteListByDatePeriod(struct soap*, struct __ns1__QuoteListByDatePeriod *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__QuoteListByDatePeriod(struct soap*, const struct __ns1__QuoteListByDatePeriod *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__QuoteListByDatePeriod(struct soap*, const char*, int, const struct __ns1__QuoteListByDatePeriod *, const char*);
SOAP_FMAC3 struct __ns1__QuoteListByDatePeriod * SOAP_FMAC4 soap_in___ns1__QuoteListByDatePeriod(struct soap*, const char*, struct __ns1__QuoteListByDatePeriod *, const char*);
SOAP_FMAC1 struct __ns1__QuoteListByDatePeriod * SOAP_FMAC2 soap_instantiate___ns1__QuoteListByDatePeriod(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__QuoteListByDatePeriod * soap_new___ns1__QuoteListByDatePeriod(struct soap *soap, int n = -1) { return soap_instantiate___ns1__QuoteListByDatePeriod(soap, n, NULL, NULL, NULL); }

inline struct __ns1__QuoteListByDatePeriod * soap_new_req___ns1__QuoteListByDatePeriod(
	struct soap *soap)
{	struct __ns1__QuoteListByDatePeriod *_p = soap_new___ns1__QuoteListByDatePeriod(soap);
	if (_p)
	{	soap_default___ns1__QuoteListByDatePeriod(soap, _p);
	}
	return _p;
}

inline struct __ns1__QuoteListByDatePeriod * soap_new_set___ns1__QuoteListByDatePeriod(
	struct soap *soap,
	_ns1__QuoteListByDatePeriod *ns1__QuoteListByDatePeriod)
{	struct __ns1__QuoteListByDatePeriod *_p = soap_new___ns1__QuoteListByDatePeriod(soap);
	if (_p)
	{	soap_default___ns1__QuoteListByDatePeriod(soap, _p);
		_p->ns1__QuoteListByDatePeriod = ns1__QuoteListByDatePeriod;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__QuoteListByDatePeriod(struct soap*, const struct __ns1__QuoteListByDatePeriod *, const char*, const char*);

#ifndef soap_write___ns1__QuoteListByDatePeriod
#define soap_write___ns1__QuoteListByDatePeriod(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__QuoteListByDatePeriod(soap, data), 0) || ns::soap_put___ns1__QuoteListByDatePeriod(soap, data, "-ns1:QuoteListByDatePeriod", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__QuoteListByDatePeriod * SOAP_FMAC4 soap_get___ns1__QuoteListByDatePeriod(struct soap*, struct __ns1__QuoteListByDatePeriod *, const char*, const char*);

#ifndef soap_read___ns1__QuoteListByDatePeriod
#define soap_read___ns1__QuoteListByDatePeriod(soap, data) ( ((data) ? (ns::soap_default___ns1__QuoteListByDatePeriod(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__QuoteListByDatePeriod(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__SymbolHistoryPeriodByDateRange
#define SOAP_TYPE_ns___ns1__SymbolHistoryPeriodByDateRange (262)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SymbolHistoryPeriodByDateRange(struct soap*, struct __ns1__SymbolHistoryPeriodByDateRange *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SymbolHistoryPeriodByDateRange(struct soap*, const struct __ns1__SymbolHistoryPeriodByDateRange *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SymbolHistoryPeriodByDateRange(struct soap*, const char*, int, const struct __ns1__SymbolHistoryPeriodByDateRange *, const char*);
SOAP_FMAC3 struct __ns1__SymbolHistoryPeriodByDateRange * SOAP_FMAC4 soap_in___ns1__SymbolHistoryPeriodByDateRange(struct soap*, const char*, struct __ns1__SymbolHistoryPeriodByDateRange *, const char*);
SOAP_FMAC1 struct __ns1__SymbolHistoryPeriodByDateRange * SOAP_FMAC2 soap_instantiate___ns1__SymbolHistoryPeriodByDateRange(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SymbolHistoryPeriodByDateRange * soap_new___ns1__SymbolHistoryPeriodByDateRange(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SymbolHistoryPeriodByDateRange(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SymbolHistoryPeriodByDateRange * soap_new_req___ns1__SymbolHistoryPeriodByDateRange(
	struct soap *soap)
{	struct __ns1__SymbolHistoryPeriodByDateRange *_p = soap_new___ns1__SymbolHistoryPeriodByDateRange(soap);
	if (_p)
	{	soap_default___ns1__SymbolHistoryPeriodByDateRange(soap, _p);
	}
	return _p;
}

inline struct __ns1__SymbolHistoryPeriodByDateRange * soap_new_set___ns1__SymbolHistoryPeriodByDateRange(
	struct soap *soap,
	_ns1__SymbolHistoryPeriodByDateRange *ns1__SymbolHistoryPeriodByDateRange)
{	struct __ns1__SymbolHistoryPeriodByDateRange *_p = soap_new___ns1__SymbolHistoryPeriodByDateRange(soap);
	if (_p)
	{	soap_default___ns1__SymbolHistoryPeriodByDateRange(soap, _p);
		_p->ns1__SymbolHistoryPeriodByDateRange = ns1__SymbolHistoryPeriodByDateRange;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SymbolHistoryPeriodByDateRange(struct soap*, const struct __ns1__SymbolHistoryPeriodByDateRange *, const char*, const char*);

#ifndef soap_write___ns1__SymbolHistoryPeriodByDateRange
#define soap_write___ns1__SymbolHistoryPeriodByDateRange(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__SymbolHistoryPeriodByDateRange(soap, data), 0) || ns::soap_put___ns1__SymbolHistoryPeriodByDateRange(soap, data, "-ns1:SymbolHistoryPeriodByDateRange", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SymbolHistoryPeriodByDateRange * SOAP_FMAC4 soap_get___ns1__SymbolHistoryPeriodByDateRange(struct soap*, struct __ns1__SymbolHistoryPeriodByDateRange *, const char*, const char*);

#ifndef soap_read___ns1__SymbolHistoryPeriodByDateRange
#define soap_read___ns1__SymbolHistoryPeriodByDateRange(soap, data) ( ((data) ? (ns::soap_default___ns1__SymbolHistoryPeriodByDateRange(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__SymbolHistoryPeriodByDateRange(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__SymbolHistoryPeriod
#define SOAP_TYPE_ns___ns1__SymbolHistoryPeriod (258)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SymbolHistoryPeriod(struct soap*, struct __ns1__SymbolHistoryPeriod *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SymbolHistoryPeriod(struct soap*, const struct __ns1__SymbolHistoryPeriod *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SymbolHistoryPeriod(struct soap*, const char*, int, const struct __ns1__SymbolHistoryPeriod *, const char*);
SOAP_FMAC3 struct __ns1__SymbolHistoryPeriod * SOAP_FMAC4 soap_in___ns1__SymbolHistoryPeriod(struct soap*, const char*, struct __ns1__SymbolHistoryPeriod *, const char*);
SOAP_FMAC1 struct __ns1__SymbolHistoryPeriod * SOAP_FMAC2 soap_instantiate___ns1__SymbolHistoryPeriod(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SymbolHistoryPeriod * soap_new___ns1__SymbolHistoryPeriod(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SymbolHistoryPeriod(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SymbolHistoryPeriod * soap_new_req___ns1__SymbolHistoryPeriod(
	struct soap *soap)
{	struct __ns1__SymbolHistoryPeriod *_p = soap_new___ns1__SymbolHistoryPeriod(soap);
	if (_p)
	{	soap_default___ns1__SymbolHistoryPeriod(soap, _p);
	}
	return _p;
}

inline struct __ns1__SymbolHistoryPeriod * soap_new_set___ns1__SymbolHistoryPeriod(
	struct soap *soap,
	_ns1__SymbolHistoryPeriod *ns1__SymbolHistoryPeriod)
{	struct __ns1__SymbolHistoryPeriod *_p = soap_new___ns1__SymbolHistoryPeriod(soap);
	if (_p)
	{	soap_default___ns1__SymbolHistoryPeriod(soap, _p);
		_p->ns1__SymbolHistoryPeriod = ns1__SymbolHistoryPeriod;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SymbolHistoryPeriod(struct soap*, const struct __ns1__SymbolHistoryPeriod *, const char*, const char*);

#ifndef soap_write___ns1__SymbolHistoryPeriod
#define soap_write___ns1__SymbolHistoryPeriod(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__SymbolHistoryPeriod(soap, data), 0) || ns::soap_put___ns1__SymbolHistoryPeriod(soap, data, "-ns1:SymbolHistoryPeriod", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SymbolHistoryPeriod * SOAP_FMAC4 soap_get___ns1__SymbolHistoryPeriod(struct soap*, struct __ns1__SymbolHistoryPeriod *, const char*, const char*);

#ifndef soap_read___ns1__SymbolHistoryPeriod
#define soap_read___ns1__SymbolHistoryPeriod(soap, data) ( ((data) ? (ns::soap_default___ns1__SymbolHistoryPeriod(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__SymbolHistoryPeriod(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__CountryList
#define SOAP_TYPE_ns___ns1__CountryList (254)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CountryList(struct soap*, struct __ns1__CountryList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CountryList(struct soap*, const struct __ns1__CountryList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CountryList(struct soap*, const char*, int, const struct __ns1__CountryList *, const char*);
SOAP_FMAC3 struct __ns1__CountryList * SOAP_FMAC4 soap_in___ns1__CountryList(struct soap*, const char*, struct __ns1__CountryList *, const char*);
SOAP_FMAC1 struct __ns1__CountryList * SOAP_FMAC2 soap_instantiate___ns1__CountryList(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__CountryList * soap_new___ns1__CountryList(struct soap *soap, int n = -1) { return soap_instantiate___ns1__CountryList(soap, n, NULL, NULL, NULL); }

inline struct __ns1__CountryList * soap_new_req___ns1__CountryList(
	struct soap *soap)
{	struct __ns1__CountryList *_p = soap_new___ns1__CountryList(soap);
	if (_p)
	{	soap_default___ns1__CountryList(soap, _p);
	}
	return _p;
}

inline struct __ns1__CountryList * soap_new_set___ns1__CountryList(
	struct soap *soap,
	_ns1__CountryList *ns1__CountryList)
{	struct __ns1__CountryList *_p = soap_new___ns1__CountryList(soap);
	if (_p)
	{	soap_default___ns1__CountryList(soap, _p);
		_p->ns1__CountryList = ns1__CountryList;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CountryList(struct soap*, const struct __ns1__CountryList *, const char*, const char*);

#ifndef soap_write___ns1__CountryList
#define soap_write___ns1__CountryList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__CountryList(soap, data), 0) || ns::soap_put___ns1__CountryList(soap, data, "-ns1:CountryList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__CountryList * SOAP_FMAC4 soap_get___ns1__CountryList(struct soap*, struct __ns1__CountryList *, const char*, const char*);

#ifndef soap_read___ns1__CountryList
#define soap_read___ns1__CountryList(soap, data) ( ((data) ? (ns::soap_default___ns1__CountryList(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__CountryList(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__SplitListBySymbol
#define SOAP_TYPE_ns___ns1__SplitListBySymbol (250)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SplitListBySymbol(struct soap*, struct __ns1__SplitListBySymbol *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SplitListBySymbol(struct soap*, const struct __ns1__SplitListBySymbol *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SplitListBySymbol(struct soap*, const char*, int, const struct __ns1__SplitListBySymbol *, const char*);
SOAP_FMAC3 struct __ns1__SplitListBySymbol * SOAP_FMAC4 soap_in___ns1__SplitListBySymbol(struct soap*, const char*, struct __ns1__SplitListBySymbol *, const char*);
SOAP_FMAC1 struct __ns1__SplitListBySymbol * SOAP_FMAC2 soap_instantiate___ns1__SplitListBySymbol(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SplitListBySymbol * soap_new___ns1__SplitListBySymbol(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SplitListBySymbol(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SplitListBySymbol * soap_new_req___ns1__SplitListBySymbol(
	struct soap *soap)
{	struct __ns1__SplitListBySymbol *_p = soap_new___ns1__SplitListBySymbol(soap);
	if (_p)
	{	soap_default___ns1__SplitListBySymbol(soap, _p);
	}
	return _p;
}

inline struct __ns1__SplitListBySymbol * soap_new_set___ns1__SplitListBySymbol(
	struct soap *soap,
	_ns1__SplitListBySymbol *ns1__SplitListBySymbol)
{	struct __ns1__SplitListBySymbol *_p = soap_new___ns1__SplitListBySymbol(soap);
	if (_p)
	{	soap_default___ns1__SplitListBySymbol(soap, _p);
		_p->ns1__SplitListBySymbol = ns1__SplitListBySymbol;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SplitListBySymbol(struct soap*, const struct __ns1__SplitListBySymbol *, const char*, const char*);

#ifndef soap_write___ns1__SplitListBySymbol
#define soap_write___ns1__SplitListBySymbol(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__SplitListBySymbol(soap, data), 0) || ns::soap_put___ns1__SplitListBySymbol(soap, data, "-ns1:SplitListBySymbol", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SplitListBySymbol * SOAP_FMAC4 soap_get___ns1__SplitListBySymbol(struct soap*, struct __ns1__SplitListBySymbol *, const char*, const char*);

#ifndef soap_read___ns1__SplitListBySymbol
#define soap_read___ns1__SplitListBySymbol(soap, data) ( ((data) ? (ns::soap_default___ns1__SplitListBySymbol(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__SplitListBySymbol(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__SplitListByExchange
#define SOAP_TYPE_ns___ns1__SplitListByExchange (246)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SplitListByExchange(struct soap*, struct __ns1__SplitListByExchange *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SplitListByExchange(struct soap*, const struct __ns1__SplitListByExchange *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SplitListByExchange(struct soap*, const char*, int, const struct __ns1__SplitListByExchange *, const char*);
SOAP_FMAC3 struct __ns1__SplitListByExchange * SOAP_FMAC4 soap_in___ns1__SplitListByExchange(struct soap*, const char*, struct __ns1__SplitListByExchange *, const char*);
SOAP_FMAC1 struct __ns1__SplitListByExchange * SOAP_FMAC2 soap_instantiate___ns1__SplitListByExchange(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SplitListByExchange * soap_new___ns1__SplitListByExchange(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SplitListByExchange(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SplitListByExchange * soap_new_req___ns1__SplitListByExchange(
	struct soap *soap)
{	struct __ns1__SplitListByExchange *_p = soap_new___ns1__SplitListByExchange(soap);
	if (_p)
	{	soap_default___ns1__SplitListByExchange(soap, _p);
	}
	return _p;
}

inline struct __ns1__SplitListByExchange * soap_new_set___ns1__SplitListByExchange(
	struct soap *soap,
	_ns1__SplitListByExchange *ns1__SplitListByExchange)
{	struct __ns1__SplitListByExchange *_p = soap_new___ns1__SplitListByExchange(soap);
	if (_p)
	{	soap_default___ns1__SplitListByExchange(soap, _p);
		_p->ns1__SplitListByExchange = ns1__SplitListByExchange;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SplitListByExchange(struct soap*, const struct __ns1__SplitListByExchange *, const char*, const char*);

#ifndef soap_write___ns1__SplitListByExchange
#define soap_write___ns1__SplitListByExchange(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__SplitListByExchange(soap, data), 0) || ns::soap_put___ns1__SplitListByExchange(soap, data, "-ns1:SplitListByExchange", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SplitListByExchange * SOAP_FMAC4 soap_get___ns1__SplitListByExchange(struct soap*, struct __ns1__SplitListByExchange *, const char*, const char*);

#ifndef soap_read___ns1__SplitListByExchange
#define soap_read___ns1__SplitListByExchange(soap, data) ( ((data) ? (ns::soap_default___ns1__SplitListByExchange(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__SplitListByExchange(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__ExchangeMonths
#define SOAP_TYPE_ns___ns1__ExchangeMonths (242)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ExchangeMonths(struct soap*, struct __ns1__ExchangeMonths *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ExchangeMonths(struct soap*, const struct __ns1__ExchangeMonths *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ExchangeMonths(struct soap*, const char*, int, const struct __ns1__ExchangeMonths *, const char*);
SOAP_FMAC3 struct __ns1__ExchangeMonths * SOAP_FMAC4 soap_in___ns1__ExchangeMonths(struct soap*, const char*, struct __ns1__ExchangeMonths *, const char*);
SOAP_FMAC1 struct __ns1__ExchangeMonths * SOAP_FMAC2 soap_instantiate___ns1__ExchangeMonths(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ExchangeMonths * soap_new___ns1__ExchangeMonths(struct soap *soap, int n = -1) { return soap_instantiate___ns1__ExchangeMonths(soap, n, NULL, NULL, NULL); }

inline struct __ns1__ExchangeMonths * soap_new_req___ns1__ExchangeMonths(
	struct soap *soap)
{	struct __ns1__ExchangeMonths *_p = soap_new___ns1__ExchangeMonths(soap);
	if (_p)
	{	soap_default___ns1__ExchangeMonths(soap, _p);
	}
	return _p;
}

inline struct __ns1__ExchangeMonths * soap_new_set___ns1__ExchangeMonths(
	struct soap *soap,
	_ns1__ExchangeMonths *ns1__ExchangeMonths)
{	struct __ns1__ExchangeMonths *_p = soap_new___ns1__ExchangeMonths(soap);
	if (_p)
	{	soap_default___ns1__ExchangeMonths(soap, _p);
		_p->ns1__ExchangeMonths = ns1__ExchangeMonths;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ExchangeMonths(struct soap*, const struct __ns1__ExchangeMonths *, const char*, const char*);

#ifndef soap_write___ns1__ExchangeMonths
#define soap_write___ns1__ExchangeMonths(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__ExchangeMonths(soap, data), 0) || ns::soap_put___ns1__ExchangeMonths(soap, data, "-ns1:ExchangeMonths", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__ExchangeMonths * SOAP_FMAC4 soap_get___ns1__ExchangeMonths(struct soap*, struct __ns1__ExchangeMonths *, const char*, const char*);

#ifndef soap_read___ns1__ExchangeMonths
#define soap_read___ns1__ExchangeMonths(soap, data) ( ((data) ? (ns::soap_default___ns1__ExchangeMonths(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__ExchangeMonths(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__SymbolChart
#define SOAP_TYPE_ns___ns1__SymbolChart (238)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SymbolChart(struct soap*, struct __ns1__SymbolChart *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SymbolChart(struct soap*, const struct __ns1__SymbolChart *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SymbolChart(struct soap*, const char*, int, const struct __ns1__SymbolChart *, const char*);
SOAP_FMAC3 struct __ns1__SymbolChart * SOAP_FMAC4 soap_in___ns1__SymbolChart(struct soap*, const char*, struct __ns1__SymbolChart *, const char*);
SOAP_FMAC1 struct __ns1__SymbolChart * SOAP_FMAC2 soap_instantiate___ns1__SymbolChart(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SymbolChart * soap_new___ns1__SymbolChart(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SymbolChart(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SymbolChart * soap_new_req___ns1__SymbolChart(
	struct soap *soap)
{	struct __ns1__SymbolChart *_p = soap_new___ns1__SymbolChart(soap);
	if (_p)
	{	soap_default___ns1__SymbolChart(soap, _p);
	}
	return _p;
}

inline struct __ns1__SymbolChart * soap_new_set___ns1__SymbolChart(
	struct soap *soap,
	_ns1__SymbolChart *ns1__SymbolChart)
{	struct __ns1__SymbolChart *_p = soap_new___ns1__SymbolChart(soap);
	if (_p)
	{	soap_default___ns1__SymbolChart(soap, _p);
		_p->ns1__SymbolChart = ns1__SymbolChart;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SymbolChart(struct soap*, const struct __ns1__SymbolChart *, const char*, const char*);

#ifndef soap_write___ns1__SymbolChart
#define soap_write___ns1__SymbolChart(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__SymbolChart(soap, data), 0) || ns::soap_put___ns1__SymbolChart(soap, data, "-ns1:SymbolChart", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SymbolChart * SOAP_FMAC4 soap_get___ns1__SymbolChart(struct soap*, struct __ns1__SymbolChart *, const char*, const char*);

#ifndef soap_read___ns1__SymbolChart
#define soap_read___ns1__SymbolChart(soap, data) ( ((data) ? (ns::soap_default___ns1__SymbolChart(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__SymbolChart(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__Top10Losses
#define SOAP_TYPE_ns___ns1__Top10Losses (234)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Top10Losses(struct soap*, struct __ns1__Top10Losses *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Top10Losses(struct soap*, const struct __ns1__Top10Losses *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Top10Losses(struct soap*, const char*, int, const struct __ns1__Top10Losses *, const char*);
SOAP_FMAC3 struct __ns1__Top10Losses * SOAP_FMAC4 soap_in___ns1__Top10Losses(struct soap*, const char*, struct __ns1__Top10Losses *, const char*);
SOAP_FMAC1 struct __ns1__Top10Losses * SOAP_FMAC2 soap_instantiate___ns1__Top10Losses(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Top10Losses * soap_new___ns1__Top10Losses(struct soap *soap, int n = -1) { return soap_instantiate___ns1__Top10Losses(soap, n, NULL, NULL, NULL); }

inline struct __ns1__Top10Losses * soap_new_req___ns1__Top10Losses(
	struct soap *soap)
{	struct __ns1__Top10Losses *_p = soap_new___ns1__Top10Losses(soap);
	if (_p)
	{	soap_default___ns1__Top10Losses(soap, _p);
	}
	return _p;
}

inline struct __ns1__Top10Losses * soap_new_set___ns1__Top10Losses(
	struct soap *soap,
	_ns1__Top10Losses *ns1__Top10Losses)
{	struct __ns1__Top10Losses *_p = soap_new___ns1__Top10Losses(soap);
	if (_p)
	{	soap_default___ns1__Top10Losses(soap, _p);
		_p->ns1__Top10Losses = ns1__Top10Losses;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Top10Losses(struct soap*, const struct __ns1__Top10Losses *, const char*, const char*);

#ifndef soap_write___ns1__Top10Losses
#define soap_write___ns1__Top10Losses(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__Top10Losses(soap, data), 0) || ns::soap_put___ns1__Top10Losses(soap, data, "-ns1:Top10Losses", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__Top10Losses * SOAP_FMAC4 soap_get___ns1__Top10Losses(struct soap*, struct __ns1__Top10Losses *, const char*, const char*);

#ifndef soap_read___ns1__Top10Losses
#define soap_read___ns1__Top10Losses(soap, data) ( ((data) ? (ns::soap_default___ns1__Top10Losses(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__Top10Losses(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__Top10Gains
#define SOAP_TYPE_ns___ns1__Top10Gains (230)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Top10Gains(struct soap*, struct __ns1__Top10Gains *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Top10Gains(struct soap*, const struct __ns1__Top10Gains *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Top10Gains(struct soap*, const char*, int, const struct __ns1__Top10Gains *, const char*);
SOAP_FMAC3 struct __ns1__Top10Gains * SOAP_FMAC4 soap_in___ns1__Top10Gains(struct soap*, const char*, struct __ns1__Top10Gains *, const char*);
SOAP_FMAC1 struct __ns1__Top10Gains * SOAP_FMAC2 soap_instantiate___ns1__Top10Gains(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Top10Gains * soap_new___ns1__Top10Gains(struct soap *soap, int n = -1) { return soap_instantiate___ns1__Top10Gains(soap, n, NULL, NULL, NULL); }

inline struct __ns1__Top10Gains * soap_new_req___ns1__Top10Gains(
	struct soap *soap)
{	struct __ns1__Top10Gains *_p = soap_new___ns1__Top10Gains(soap);
	if (_p)
	{	soap_default___ns1__Top10Gains(soap, _p);
	}
	return _p;
}

inline struct __ns1__Top10Gains * soap_new_set___ns1__Top10Gains(
	struct soap *soap,
	_ns1__Top10Gains *ns1__Top10Gains)
{	struct __ns1__Top10Gains *_p = soap_new___ns1__Top10Gains(soap);
	if (_p)
	{	soap_default___ns1__Top10Gains(soap, _p);
		_p->ns1__Top10Gains = ns1__Top10Gains;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Top10Gains(struct soap*, const struct __ns1__Top10Gains *, const char*, const char*);

#ifndef soap_write___ns1__Top10Gains
#define soap_write___ns1__Top10Gains(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__Top10Gains(soap, data), 0) || ns::soap_put___ns1__Top10Gains(soap, data, "-ns1:Top10Gains", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__Top10Gains * SOAP_FMAC4 soap_get___ns1__Top10Gains(struct soap*, struct __ns1__Top10Gains *, const char*, const char*);

#ifndef soap_read___ns1__Top10Gains
#define soap_read___ns1__Top10Gains(soap, data) ( ((data) ? (ns::soap_default___ns1__Top10Gains(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__Top10Gains(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__SymbolHistory
#define SOAP_TYPE_ns___ns1__SymbolHistory (226)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SymbolHistory(struct soap*, struct __ns1__SymbolHistory *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SymbolHistory(struct soap*, const struct __ns1__SymbolHistory *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SymbolHistory(struct soap*, const char*, int, const struct __ns1__SymbolHistory *, const char*);
SOAP_FMAC3 struct __ns1__SymbolHistory * SOAP_FMAC4 soap_in___ns1__SymbolHistory(struct soap*, const char*, struct __ns1__SymbolHistory *, const char*);
SOAP_FMAC1 struct __ns1__SymbolHistory * SOAP_FMAC2 soap_instantiate___ns1__SymbolHistory(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SymbolHistory * soap_new___ns1__SymbolHistory(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SymbolHistory(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SymbolHistory * soap_new_req___ns1__SymbolHistory(
	struct soap *soap)
{	struct __ns1__SymbolHistory *_p = soap_new___ns1__SymbolHistory(soap);
	if (_p)
	{	soap_default___ns1__SymbolHistory(soap, _p);
	}
	return _p;
}

inline struct __ns1__SymbolHistory * soap_new_set___ns1__SymbolHistory(
	struct soap *soap,
	_ns1__SymbolHistory *ns1__SymbolHistory)
{	struct __ns1__SymbolHistory *_p = soap_new___ns1__SymbolHistory(soap);
	if (_p)
	{	soap_default___ns1__SymbolHistory(soap, _p);
		_p->ns1__SymbolHistory = ns1__SymbolHistory;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SymbolHistory(struct soap*, const struct __ns1__SymbolHistory *, const char*, const char*);

#ifndef soap_write___ns1__SymbolHistory
#define soap_write___ns1__SymbolHistory(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__SymbolHistory(soap, data), 0) || ns::soap_put___ns1__SymbolHistory(soap, data, "-ns1:SymbolHistory", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SymbolHistory * SOAP_FMAC4 soap_get___ns1__SymbolHistory(struct soap*, struct __ns1__SymbolHistory *, const char*, const char*);

#ifndef soap_read___ns1__SymbolHistory
#define soap_read___ns1__SymbolHistory(soap, data) ( ((data) ? (ns::soap_default___ns1__SymbolHistory(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__SymbolHistory(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__QuoteListByDate2
#define SOAP_TYPE_ns___ns1__QuoteListByDate2 (222)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__QuoteListByDate2(struct soap*, struct __ns1__QuoteListByDate2 *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__QuoteListByDate2(struct soap*, const struct __ns1__QuoteListByDate2 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__QuoteListByDate2(struct soap*, const char*, int, const struct __ns1__QuoteListByDate2 *, const char*);
SOAP_FMAC3 struct __ns1__QuoteListByDate2 * SOAP_FMAC4 soap_in___ns1__QuoteListByDate2(struct soap*, const char*, struct __ns1__QuoteListByDate2 *, const char*);
SOAP_FMAC1 struct __ns1__QuoteListByDate2 * SOAP_FMAC2 soap_instantiate___ns1__QuoteListByDate2(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__QuoteListByDate2 * soap_new___ns1__QuoteListByDate2(struct soap *soap, int n = -1) { return soap_instantiate___ns1__QuoteListByDate2(soap, n, NULL, NULL, NULL); }

inline struct __ns1__QuoteListByDate2 * soap_new_req___ns1__QuoteListByDate2(
	struct soap *soap)
{	struct __ns1__QuoteListByDate2 *_p = soap_new___ns1__QuoteListByDate2(soap);
	if (_p)
	{	soap_default___ns1__QuoteListByDate2(soap, _p);
	}
	return _p;
}

inline struct __ns1__QuoteListByDate2 * soap_new_set___ns1__QuoteListByDate2(
	struct soap *soap,
	_ns1__QuoteListByDate2 *ns1__QuoteListByDate2)
{	struct __ns1__QuoteListByDate2 *_p = soap_new___ns1__QuoteListByDate2(soap);
	if (_p)
	{	soap_default___ns1__QuoteListByDate2(soap, _p);
		_p->ns1__QuoteListByDate2 = ns1__QuoteListByDate2;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__QuoteListByDate2(struct soap*, const struct __ns1__QuoteListByDate2 *, const char*, const char*);

#ifndef soap_write___ns1__QuoteListByDate2
#define soap_write___ns1__QuoteListByDate2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__QuoteListByDate2(soap, data), 0) || ns::soap_put___ns1__QuoteListByDate2(soap, data, "-ns1:QuoteListByDate2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__QuoteListByDate2 * SOAP_FMAC4 soap_get___ns1__QuoteListByDate2(struct soap*, struct __ns1__QuoteListByDate2 *, const char*, const char*);

#ifndef soap_read___ns1__QuoteListByDate2
#define soap_read___ns1__QuoteListByDate2(soap, data) ( ((data) ? (ns::soap_default___ns1__QuoteListByDate2(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__QuoteListByDate2(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__QuoteListByDate
#define SOAP_TYPE_ns___ns1__QuoteListByDate (218)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__QuoteListByDate(struct soap*, struct __ns1__QuoteListByDate *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__QuoteListByDate(struct soap*, const struct __ns1__QuoteListByDate *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__QuoteListByDate(struct soap*, const char*, int, const struct __ns1__QuoteListByDate *, const char*);
SOAP_FMAC3 struct __ns1__QuoteListByDate * SOAP_FMAC4 soap_in___ns1__QuoteListByDate(struct soap*, const char*, struct __ns1__QuoteListByDate *, const char*);
SOAP_FMAC1 struct __ns1__QuoteListByDate * SOAP_FMAC2 soap_instantiate___ns1__QuoteListByDate(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__QuoteListByDate * soap_new___ns1__QuoteListByDate(struct soap *soap, int n = -1) { return soap_instantiate___ns1__QuoteListByDate(soap, n, NULL, NULL, NULL); }

inline struct __ns1__QuoteListByDate * soap_new_req___ns1__QuoteListByDate(
	struct soap *soap)
{	struct __ns1__QuoteListByDate *_p = soap_new___ns1__QuoteListByDate(soap);
	if (_p)
	{	soap_default___ns1__QuoteListByDate(soap, _p);
	}
	return _p;
}

inline struct __ns1__QuoteListByDate * soap_new_set___ns1__QuoteListByDate(
	struct soap *soap,
	_ns1__QuoteListByDate *ns1__QuoteListByDate)
{	struct __ns1__QuoteListByDate *_p = soap_new___ns1__QuoteListByDate(soap);
	if (_p)
	{	soap_default___ns1__QuoteListByDate(soap, _p);
		_p->ns1__QuoteListByDate = ns1__QuoteListByDate;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__QuoteListByDate(struct soap*, const struct __ns1__QuoteListByDate *, const char*, const char*);

#ifndef soap_write___ns1__QuoteListByDate
#define soap_write___ns1__QuoteListByDate(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__QuoteListByDate(soap, data), 0) || ns::soap_put___ns1__QuoteListByDate(soap, data, "-ns1:QuoteListByDate", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__QuoteListByDate * SOAP_FMAC4 soap_get___ns1__QuoteListByDate(struct soap*, struct __ns1__QuoteListByDate *, const char*, const char*);

#ifndef soap_read___ns1__QuoteListByDate
#define soap_read___ns1__QuoteListByDate(soap, data) ( ((data) ? (ns::soap_default___ns1__QuoteListByDate(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__QuoteListByDate(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__TechnicalList
#define SOAP_TYPE_ns___ns1__TechnicalList (214)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__TechnicalList(struct soap*, struct __ns1__TechnicalList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__TechnicalList(struct soap*, const struct __ns1__TechnicalList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__TechnicalList(struct soap*, const char*, int, const struct __ns1__TechnicalList *, const char*);
SOAP_FMAC3 struct __ns1__TechnicalList * SOAP_FMAC4 soap_in___ns1__TechnicalList(struct soap*, const char*, struct __ns1__TechnicalList *, const char*);
SOAP_FMAC1 struct __ns1__TechnicalList * SOAP_FMAC2 soap_instantiate___ns1__TechnicalList(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__TechnicalList * soap_new___ns1__TechnicalList(struct soap *soap, int n = -1) { return soap_instantiate___ns1__TechnicalList(soap, n, NULL, NULL, NULL); }

inline struct __ns1__TechnicalList * soap_new_req___ns1__TechnicalList(
	struct soap *soap)
{	struct __ns1__TechnicalList *_p = soap_new___ns1__TechnicalList(soap);
	if (_p)
	{	soap_default___ns1__TechnicalList(soap, _p);
	}
	return _p;
}

inline struct __ns1__TechnicalList * soap_new_set___ns1__TechnicalList(
	struct soap *soap,
	_ns1__TechnicalList *ns1__TechnicalList)
{	struct __ns1__TechnicalList *_p = soap_new___ns1__TechnicalList(soap);
	if (_p)
	{	soap_default___ns1__TechnicalList(soap, _p);
		_p->ns1__TechnicalList = ns1__TechnicalList;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__TechnicalList(struct soap*, const struct __ns1__TechnicalList *, const char*, const char*);

#ifndef soap_write___ns1__TechnicalList
#define soap_write___ns1__TechnicalList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__TechnicalList(soap, data), 0) || ns::soap_put___ns1__TechnicalList(soap, data, "-ns1:TechnicalList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__TechnicalList * SOAP_FMAC4 soap_get___ns1__TechnicalList(struct soap*, struct __ns1__TechnicalList *, const char*, const char*);

#ifndef soap_read___ns1__TechnicalList
#define soap_read___ns1__TechnicalList(soap, data) ( ((data) ? (ns::soap_default___ns1__TechnicalList(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__TechnicalList(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__FundamentalList
#define SOAP_TYPE_ns___ns1__FundamentalList (210)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__FundamentalList(struct soap*, struct __ns1__FundamentalList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__FundamentalList(struct soap*, const struct __ns1__FundamentalList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__FundamentalList(struct soap*, const char*, int, const struct __ns1__FundamentalList *, const char*);
SOAP_FMAC3 struct __ns1__FundamentalList * SOAP_FMAC4 soap_in___ns1__FundamentalList(struct soap*, const char*, struct __ns1__FundamentalList *, const char*);
SOAP_FMAC1 struct __ns1__FundamentalList * SOAP_FMAC2 soap_instantiate___ns1__FundamentalList(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__FundamentalList * soap_new___ns1__FundamentalList(struct soap *soap, int n = -1) { return soap_instantiate___ns1__FundamentalList(soap, n, NULL, NULL, NULL); }

inline struct __ns1__FundamentalList * soap_new_req___ns1__FundamentalList(
	struct soap *soap)
{	struct __ns1__FundamentalList *_p = soap_new___ns1__FundamentalList(soap);
	if (_p)
	{	soap_default___ns1__FundamentalList(soap, _p);
	}
	return _p;
}

inline struct __ns1__FundamentalList * soap_new_set___ns1__FundamentalList(
	struct soap *soap,
	_ns1__FundamentalList *ns1__FundamentalList)
{	struct __ns1__FundamentalList *_p = soap_new___ns1__FundamentalList(soap);
	if (_p)
	{	soap_default___ns1__FundamentalList(soap, _p);
		_p->ns1__FundamentalList = ns1__FundamentalList;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__FundamentalList(struct soap*, const struct __ns1__FundamentalList *, const char*, const char*);

#ifndef soap_write___ns1__FundamentalList
#define soap_write___ns1__FundamentalList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__FundamentalList(soap, data), 0) || ns::soap_put___ns1__FundamentalList(soap, data, "-ns1:FundamentalList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__FundamentalList * SOAP_FMAC4 soap_get___ns1__FundamentalList(struct soap*, struct __ns1__FundamentalList *, const char*, const char*);

#ifndef soap_read___ns1__FundamentalList
#define soap_read___ns1__FundamentalList(soap, data) ( ((data) ? (ns::soap_default___ns1__FundamentalList(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__FundamentalList(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__NewsListBySymbol
#define SOAP_TYPE_ns___ns1__NewsListBySymbol (206)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__NewsListBySymbol(struct soap*, struct __ns1__NewsListBySymbol *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__NewsListBySymbol(struct soap*, const struct __ns1__NewsListBySymbol *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__NewsListBySymbol(struct soap*, const char*, int, const struct __ns1__NewsListBySymbol *, const char*);
SOAP_FMAC3 struct __ns1__NewsListBySymbol * SOAP_FMAC4 soap_in___ns1__NewsListBySymbol(struct soap*, const char*, struct __ns1__NewsListBySymbol *, const char*);
SOAP_FMAC1 struct __ns1__NewsListBySymbol * SOAP_FMAC2 soap_instantiate___ns1__NewsListBySymbol(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__NewsListBySymbol * soap_new___ns1__NewsListBySymbol(struct soap *soap, int n = -1) { return soap_instantiate___ns1__NewsListBySymbol(soap, n, NULL, NULL, NULL); }

inline struct __ns1__NewsListBySymbol * soap_new_req___ns1__NewsListBySymbol(
	struct soap *soap)
{	struct __ns1__NewsListBySymbol *_p = soap_new___ns1__NewsListBySymbol(soap);
	if (_p)
	{	soap_default___ns1__NewsListBySymbol(soap, _p);
	}
	return _p;
}

inline struct __ns1__NewsListBySymbol * soap_new_set___ns1__NewsListBySymbol(
	struct soap *soap,
	_ns1__NewsListBySymbol *ns1__NewsListBySymbol)
{	struct __ns1__NewsListBySymbol *_p = soap_new___ns1__NewsListBySymbol(soap);
	if (_p)
	{	soap_default___ns1__NewsListBySymbol(soap, _p);
		_p->ns1__NewsListBySymbol = ns1__NewsListBySymbol;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__NewsListBySymbol(struct soap*, const struct __ns1__NewsListBySymbol *, const char*, const char*);

#ifndef soap_write___ns1__NewsListBySymbol
#define soap_write___ns1__NewsListBySymbol(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__NewsListBySymbol(soap, data), 0) || ns::soap_put___ns1__NewsListBySymbol(soap, data, "-ns1:NewsListBySymbol", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__NewsListBySymbol * SOAP_FMAC4 soap_get___ns1__NewsListBySymbol(struct soap*, struct __ns1__NewsListBySymbol *, const char*, const char*);

#ifndef soap_read___ns1__NewsListBySymbol
#define soap_read___ns1__NewsListBySymbol(soap, data) ( ((data) ? (ns::soap_default___ns1__NewsListBySymbol(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__NewsListBySymbol(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__NewsList
#define SOAP_TYPE_ns___ns1__NewsList (202)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__NewsList(struct soap*, struct __ns1__NewsList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__NewsList(struct soap*, const struct __ns1__NewsList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__NewsList(struct soap*, const char*, int, const struct __ns1__NewsList *, const char*);
SOAP_FMAC3 struct __ns1__NewsList * SOAP_FMAC4 soap_in___ns1__NewsList(struct soap*, const char*, struct __ns1__NewsList *, const char*);
SOAP_FMAC1 struct __ns1__NewsList * SOAP_FMAC2 soap_instantiate___ns1__NewsList(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__NewsList * soap_new___ns1__NewsList(struct soap *soap, int n = -1) { return soap_instantiate___ns1__NewsList(soap, n, NULL, NULL, NULL); }

inline struct __ns1__NewsList * soap_new_req___ns1__NewsList(
	struct soap *soap)
{	struct __ns1__NewsList *_p = soap_new___ns1__NewsList(soap);
	if (_p)
	{	soap_default___ns1__NewsList(soap, _p);
	}
	return _p;
}

inline struct __ns1__NewsList * soap_new_set___ns1__NewsList(
	struct soap *soap,
	_ns1__NewsList *ns1__NewsList)
{	struct __ns1__NewsList *_p = soap_new___ns1__NewsList(soap);
	if (_p)
	{	soap_default___ns1__NewsList(soap, _p);
		_p->ns1__NewsList = ns1__NewsList;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__NewsList(struct soap*, const struct __ns1__NewsList *, const char*, const char*);

#ifndef soap_write___ns1__NewsList
#define soap_write___ns1__NewsList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__NewsList(soap, data), 0) || ns::soap_put___ns1__NewsList(soap, data, "-ns1:NewsList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__NewsList * SOAP_FMAC4 soap_get___ns1__NewsList(struct soap*, struct __ns1__NewsList *, const char*, const char*);

#ifndef soap_read___ns1__NewsList
#define soap_read___ns1__NewsList(soap, data) ( ((data) ? (ns::soap_default___ns1__NewsList(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__NewsList(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__QuoteList
#define SOAP_TYPE_ns___ns1__QuoteList (198)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__QuoteList(struct soap*, struct __ns1__QuoteList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__QuoteList(struct soap*, const struct __ns1__QuoteList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__QuoteList(struct soap*, const char*, int, const struct __ns1__QuoteList *, const char*);
SOAP_FMAC3 struct __ns1__QuoteList * SOAP_FMAC4 soap_in___ns1__QuoteList(struct soap*, const char*, struct __ns1__QuoteList *, const char*);
SOAP_FMAC1 struct __ns1__QuoteList * SOAP_FMAC2 soap_instantiate___ns1__QuoteList(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__QuoteList * soap_new___ns1__QuoteList(struct soap *soap, int n = -1) { return soap_instantiate___ns1__QuoteList(soap, n, NULL, NULL, NULL); }

inline struct __ns1__QuoteList * soap_new_req___ns1__QuoteList(
	struct soap *soap)
{	struct __ns1__QuoteList *_p = soap_new___ns1__QuoteList(soap);
	if (_p)
	{	soap_default___ns1__QuoteList(soap, _p);
	}
	return _p;
}

inline struct __ns1__QuoteList * soap_new_set___ns1__QuoteList(
	struct soap *soap,
	_ns1__QuoteList *ns1__QuoteList)
{	struct __ns1__QuoteList *_p = soap_new___ns1__QuoteList(soap);
	if (_p)
	{	soap_default___ns1__QuoteList(soap, _p);
		_p->ns1__QuoteList = ns1__QuoteList;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__QuoteList(struct soap*, const struct __ns1__QuoteList *, const char*, const char*);

#ifndef soap_write___ns1__QuoteList
#define soap_write___ns1__QuoteList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__QuoteList(soap, data), 0) || ns::soap_put___ns1__QuoteList(soap, data, "-ns1:QuoteList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__QuoteList * SOAP_FMAC4 soap_get___ns1__QuoteList(struct soap*, struct __ns1__QuoteList *, const char*, const char*);

#ifndef soap_read___ns1__QuoteList
#define soap_read___ns1__QuoteList(soap, data) ( ((data) ? (ns::soap_default___ns1__QuoteList(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__QuoteList(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__SymbolGet
#define SOAP_TYPE_ns___ns1__SymbolGet (194)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SymbolGet(struct soap*, struct __ns1__SymbolGet *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SymbolGet(struct soap*, const struct __ns1__SymbolGet *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SymbolGet(struct soap*, const char*, int, const struct __ns1__SymbolGet *, const char*);
SOAP_FMAC3 struct __ns1__SymbolGet * SOAP_FMAC4 soap_in___ns1__SymbolGet(struct soap*, const char*, struct __ns1__SymbolGet *, const char*);
SOAP_FMAC1 struct __ns1__SymbolGet * SOAP_FMAC2 soap_instantiate___ns1__SymbolGet(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SymbolGet * soap_new___ns1__SymbolGet(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SymbolGet(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SymbolGet * soap_new_req___ns1__SymbolGet(
	struct soap *soap)
{	struct __ns1__SymbolGet *_p = soap_new___ns1__SymbolGet(soap);
	if (_p)
	{	soap_default___ns1__SymbolGet(soap, _p);
	}
	return _p;
}

inline struct __ns1__SymbolGet * soap_new_set___ns1__SymbolGet(
	struct soap *soap,
	_ns1__SymbolGet *ns1__SymbolGet)
{	struct __ns1__SymbolGet *_p = soap_new___ns1__SymbolGet(soap);
	if (_p)
	{	soap_default___ns1__SymbolGet(soap, _p);
		_p->ns1__SymbolGet = ns1__SymbolGet;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SymbolGet(struct soap*, const struct __ns1__SymbolGet *, const char*, const char*);

#ifndef soap_write___ns1__SymbolGet
#define soap_write___ns1__SymbolGet(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__SymbolGet(soap, data), 0) || ns::soap_put___ns1__SymbolGet(soap, data, "-ns1:SymbolGet", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SymbolGet * SOAP_FMAC4 soap_get___ns1__SymbolGet(struct soap*, struct __ns1__SymbolGet *, const char*, const char*);

#ifndef soap_read___ns1__SymbolGet
#define soap_read___ns1__SymbolGet(soap, data) ( ((data) ? (ns::soap_default___ns1__SymbolGet(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__SymbolGet(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__QuoteList2
#define SOAP_TYPE_ns___ns1__QuoteList2 (190)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__QuoteList2(struct soap*, struct __ns1__QuoteList2 *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__QuoteList2(struct soap*, const struct __ns1__QuoteList2 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__QuoteList2(struct soap*, const char*, int, const struct __ns1__QuoteList2 *, const char*);
SOAP_FMAC3 struct __ns1__QuoteList2 * SOAP_FMAC4 soap_in___ns1__QuoteList2(struct soap*, const char*, struct __ns1__QuoteList2 *, const char*);
SOAP_FMAC1 struct __ns1__QuoteList2 * SOAP_FMAC2 soap_instantiate___ns1__QuoteList2(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__QuoteList2 * soap_new___ns1__QuoteList2(struct soap *soap, int n = -1) { return soap_instantiate___ns1__QuoteList2(soap, n, NULL, NULL, NULL); }

inline struct __ns1__QuoteList2 * soap_new_req___ns1__QuoteList2(
	struct soap *soap)
{	struct __ns1__QuoteList2 *_p = soap_new___ns1__QuoteList2(soap);
	if (_p)
	{	soap_default___ns1__QuoteList2(soap, _p);
	}
	return _p;
}

inline struct __ns1__QuoteList2 * soap_new_set___ns1__QuoteList2(
	struct soap *soap,
	_ns1__QuoteList2 *ns1__QuoteList2)
{	struct __ns1__QuoteList2 *_p = soap_new___ns1__QuoteList2(soap);
	if (_p)
	{	soap_default___ns1__QuoteList2(soap, _p);
		_p->ns1__QuoteList2 = ns1__QuoteList2;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__QuoteList2(struct soap*, const struct __ns1__QuoteList2 *, const char*, const char*);

#ifndef soap_write___ns1__QuoteList2
#define soap_write___ns1__QuoteList2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__QuoteList2(soap, data), 0) || ns::soap_put___ns1__QuoteList2(soap, data, "-ns1:QuoteList2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__QuoteList2 * SOAP_FMAC4 soap_get___ns1__QuoteList2(struct soap*, struct __ns1__QuoteList2 *, const char*, const char*);

#ifndef soap_read___ns1__QuoteList2
#define soap_read___ns1__QuoteList2(soap, data) ( ((data) ? (ns::soap_default___ns1__QuoteList2(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__QuoteList2(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__QuoteGet
#define SOAP_TYPE_ns___ns1__QuoteGet (186)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__QuoteGet(struct soap*, struct __ns1__QuoteGet *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__QuoteGet(struct soap*, const struct __ns1__QuoteGet *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__QuoteGet(struct soap*, const char*, int, const struct __ns1__QuoteGet *, const char*);
SOAP_FMAC3 struct __ns1__QuoteGet * SOAP_FMAC4 soap_in___ns1__QuoteGet(struct soap*, const char*, struct __ns1__QuoteGet *, const char*);
SOAP_FMAC1 struct __ns1__QuoteGet * SOAP_FMAC2 soap_instantiate___ns1__QuoteGet(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__QuoteGet * soap_new___ns1__QuoteGet(struct soap *soap, int n = -1) { return soap_instantiate___ns1__QuoteGet(soap, n, NULL, NULL, NULL); }

inline struct __ns1__QuoteGet * soap_new_req___ns1__QuoteGet(
	struct soap *soap)
{	struct __ns1__QuoteGet *_p = soap_new___ns1__QuoteGet(soap);
	if (_p)
	{	soap_default___ns1__QuoteGet(soap, _p);
	}
	return _p;
}

inline struct __ns1__QuoteGet * soap_new_set___ns1__QuoteGet(
	struct soap *soap,
	_ns1__QuoteGet *ns1__QuoteGet)
{	struct __ns1__QuoteGet *_p = soap_new___ns1__QuoteGet(soap);
	if (_p)
	{	soap_default___ns1__QuoteGet(soap, _p);
		_p->ns1__QuoteGet = ns1__QuoteGet;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__QuoteGet(struct soap*, const struct __ns1__QuoteGet *, const char*, const char*);

#ifndef soap_write___ns1__QuoteGet
#define soap_write___ns1__QuoteGet(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__QuoteGet(soap, data), 0) || ns::soap_put___ns1__QuoteGet(soap, data, "-ns1:QuoteGet", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__QuoteGet * SOAP_FMAC4 soap_get___ns1__QuoteGet(struct soap*, struct __ns1__QuoteGet *, const char*, const char*);

#ifndef soap_read___ns1__QuoteGet
#define soap_read___ns1__QuoteGet(soap, data) ( ((data) ? (ns::soap_default___ns1__QuoteGet(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__QuoteGet(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__SymbolList2
#define SOAP_TYPE_ns___ns1__SymbolList2 (182)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SymbolList2(struct soap*, struct __ns1__SymbolList2 *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SymbolList2(struct soap*, const struct __ns1__SymbolList2 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SymbolList2(struct soap*, const char*, int, const struct __ns1__SymbolList2 *, const char*);
SOAP_FMAC3 struct __ns1__SymbolList2 * SOAP_FMAC4 soap_in___ns1__SymbolList2(struct soap*, const char*, struct __ns1__SymbolList2 *, const char*);
SOAP_FMAC1 struct __ns1__SymbolList2 * SOAP_FMAC2 soap_instantiate___ns1__SymbolList2(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SymbolList2 * soap_new___ns1__SymbolList2(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SymbolList2(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SymbolList2 * soap_new_req___ns1__SymbolList2(
	struct soap *soap)
{	struct __ns1__SymbolList2 *_p = soap_new___ns1__SymbolList2(soap);
	if (_p)
	{	soap_default___ns1__SymbolList2(soap, _p);
	}
	return _p;
}

inline struct __ns1__SymbolList2 * soap_new_set___ns1__SymbolList2(
	struct soap *soap,
	_ns1__SymbolList2 *ns1__SymbolList2)
{	struct __ns1__SymbolList2 *_p = soap_new___ns1__SymbolList2(soap);
	if (_p)
	{	soap_default___ns1__SymbolList2(soap, _p);
		_p->ns1__SymbolList2 = ns1__SymbolList2;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SymbolList2(struct soap*, const struct __ns1__SymbolList2 *, const char*, const char*);

#ifndef soap_write___ns1__SymbolList2
#define soap_write___ns1__SymbolList2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__SymbolList2(soap, data), 0) || ns::soap_put___ns1__SymbolList2(soap, data, "-ns1:SymbolList2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SymbolList2 * SOAP_FMAC4 soap_get___ns1__SymbolList2(struct soap*, struct __ns1__SymbolList2 *, const char*, const char*);

#ifndef soap_read___ns1__SymbolList2
#define soap_read___ns1__SymbolList2(soap, data) ( ((data) ? (ns::soap_default___ns1__SymbolList2(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__SymbolList2(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__SymbolList
#define SOAP_TYPE_ns___ns1__SymbolList (178)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SymbolList(struct soap*, struct __ns1__SymbolList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SymbolList(struct soap*, const struct __ns1__SymbolList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SymbolList(struct soap*, const char*, int, const struct __ns1__SymbolList *, const char*);
SOAP_FMAC3 struct __ns1__SymbolList * SOAP_FMAC4 soap_in___ns1__SymbolList(struct soap*, const char*, struct __ns1__SymbolList *, const char*);
SOAP_FMAC1 struct __ns1__SymbolList * SOAP_FMAC2 soap_instantiate___ns1__SymbolList(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SymbolList * soap_new___ns1__SymbolList(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SymbolList(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SymbolList * soap_new_req___ns1__SymbolList(
	struct soap *soap)
{	struct __ns1__SymbolList *_p = soap_new___ns1__SymbolList(soap);
	if (_p)
	{	soap_default___ns1__SymbolList(soap, _p);
	}
	return _p;
}

inline struct __ns1__SymbolList * soap_new_set___ns1__SymbolList(
	struct soap *soap,
	_ns1__SymbolList *ns1__SymbolList)
{	struct __ns1__SymbolList *_p = soap_new___ns1__SymbolList(soap);
	if (_p)
	{	soap_default___ns1__SymbolList(soap, _p);
		_p->ns1__SymbolList = ns1__SymbolList;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SymbolList(struct soap*, const struct __ns1__SymbolList *, const char*, const char*);

#ifndef soap_write___ns1__SymbolList
#define soap_write___ns1__SymbolList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__SymbolList(soap, data), 0) || ns::soap_put___ns1__SymbolList(soap, data, "-ns1:SymbolList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SymbolList * SOAP_FMAC4 soap_get___ns1__SymbolList(struct soap*, struct __ns1__SymbolList *, const char*, const char*);

#ifndef soap_read___ns1__SymbolList
#define soap_read___ns1__SymbolList(soap, data) ( ((data) ? (ns::soap_default___ns1__SymbolList(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__SymbolList(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__ExchangeGet
#define SOAP_TYPE_ns___ns1__ExchangeGet (174)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ExchangeGet(struct soap*, struct __ns1__ExchangeGet *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ExchangeGet(struct soap*, const struct __ns1__ExchangeGet *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ExchangeGet(struct soap*, const char*, int, const struct __ns1__ExchangeGet *, const char*);
SOAP_FMAC3 struct __ns1__ExchangeGet * SOAP_FMAC4 soap_in___ns1__ExchangeGet(struct soap*, const char*, struct __ns1__ExchangeGet *, const char*);
SOAP_FMAC1 struct __ns1__ExchangeGet * SOAP_FMAC2 soap_instantiate___ns1__ExchangeGet(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ExchangeGet * soap_new___ns1__ExchangeGet(struct soap *soap, int n = -1) { return soap_instantiate___ns1__ExchangeGet(soap, n, NULL, NULL, NULL); }

inline struct __ns1__ExchangeGet * soap_new_req___ns1__ExchangeGet(
	struct soap *soap)
{	struct __ns1__ExchangeGet *_p = soap_new___ns1__ExchangeGet(soap);
	if (_p)
	{	soap_default___ns1__ExchangeGet(soap, _p);
	}
	return _p;
}

inline struct __ns1__ExchangeGet * soap_new_set___ns1__ExchangeGet(
	struct soap *soap,
	_ns1__ExchangeGet *ns1__ExchangeGet)
{	struct __ns1__ExchangeGet *_p = soap_new___ns1__ExchangeGet(soap);
	if (_p)
	{	soap_default___ns1__ExchangeGet(soap, _p);
		_p->ns1__ExchangeGet = ns1__ExchangeGet;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ExchangeGet(struct soap*, const struct __ns1__ExchangeGet *, const char*, const char*);

#ifndef soap_write___ns1__ExchangeGet
#define soap_write___ns1__ExchangeGet(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__ExchangeGet(soap, data), 0) || ns::soap_put___ns1__ExchangeGet(soap, data, "-ns1:ExchangeGet", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__ExchangeGet * SOAP_FMAC4 soap_get___ns1__ExchangeGet(struct soap*, struct __ns1__ExchangeGet *, const char*, const char*);

#ifndef soap_read___ns1__ExchangeGet
#define soap_read___ns1__ExchangeGet(soap, data) ( ((data) ? (ns::soap_default___ns1__ExchangeGet(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__ExchangeGet(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__ExchangeList
#define SOAP_TYPE_ns___ns1__ExchangeList (170)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ExchangeList(struct soap*, struct __ns1__ExchangeList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ExchangeList(struct soap*, const struct __ns1__ExchangeList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ExchangeList(struct soap*, const char*, int, const struct __ns1__ExchangeList *, const char*);
SOAP_FMAC3 struct __ns1__ExchangeList * SOAP_FMAC4 soap_in___ns1__ExchangeList(struct soap*, const char*, struct __ns1__ExchangeList *, const char*);
SOAP_FMAC1 struct __ns1__ExchangeList * SOAP_FMAC2 soap_instantiate___ns1__ExchangeList(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ExchangeList * soap_new___ns1__ExchangeList(struct soap *soap, int n = -1) { return soap_instantiate___ns1__ExchangeList(soap, n, NULL, NULL, NULL); }

inline struct __ns1__ExchangeList * soap_new_req___ns1__ExchangeList(
	struct soap *soap)
{	struct __ns1__ExchangeList *_p = soap_new___ns1__ExchangeList(soap);
	if (_p)
	{	soap_default___ns1__ExchangeList(soap, _p);
	}
	return _p;
}

inline struct __ns1__ExchangeList * soap_new_set___ns1__ExchangeList(
	struct soap *soap,
	_ns1__ExchangeList *ns1__ExchangeList)
{	struct __ns1__ExchangeList *_p = soap_new___ns1__ExchangeList(soap);
	if (_p)
	{	soap_default___ns1__ExchangeList(soap, _p);
		_p->ns1__ExchangeList = ns1__ExchangeList;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ExchangeList(struct soap*, const struct __ns1__ExchangeList *, const char*, const char*);

#ifndef soap_write___ns1__ExchangeList
#define soap_write___ns1__ExchangeList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__ExchangeList(soap, data), 0) || ns::soap_put___ns1__ExchangeList(soap, data, "-ns1:ExchangeList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__ExchangeList * SOAP_FMAC4 soap_get___ns1__ExchangeList(struct soap*, struct __ns1__ExchangeList *, const char*, const char*);

#ifndef soap_read___ns1__ExchangeList
#define soap_read___ns1__ExchangeList(soap, data) ( ((data) ? (ns::soap_default___ns1__ExchangeList(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__ExchangeList(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__Membership
#define SOAP_TYPE_ns___ns1__Membership (166)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Membership(struct soap*, struct __ns1__Membership *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Membership(struct soap*, const struct __ns1__Membership *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Membership(struct soap*, const char*, int, const struct __ns1__Membership *, const char*);
SOAP_FMAC3 struct __ns1__Membership * SOAP_FMAC4 soap_in___ns1__Membership(struct soap*, const char*, struct __ns1__Membership *, const char*);
SOAP_FMAC1 struct __ns1__Membership * SOAP_FMAC2 soap_instantiate___ns1__Membership(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Membership * soap_new___ns1__Membership(struct soap *soap, int n = -1) { return soap_instantiate___ns1__Membership(soap, n, NULL, NULL, NULL); }

inline struct __ns1__Membership * soap_new_req___ns1__Membership(
	struct soap *soap)
{	struct __ns1__Membership *_p = soap_new___ns1__Membership(soap);
	if (_p)
	{	soap_default___ns1__Membership(soap, _p);
	}
	return _p;
}

inline struct __ns1__Membership * soap_new_set___ns1__Membership(
	struct soap *soap,
	_ns1__Membership *ns1__Membership)
{	struct __ns1__Membership *_p = soap_new___ns1__Membership(soap);
	if (_p)
	{	soap_default___ns1__Membership(soap, _p);
		_p->ns1__Membership = ns1__Membership;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Membership(struct soap*, const struct __ns1__Membership *, const char*, const char*);

#ifndef soap_write___ns1__Membership
#define soap_write___ns1__Membership(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__Membership(soap, data), 0) || ns::soap_put___ns1__Membership(soap, data, "-ns1:Membership", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__Membership * SOAP_FMAC4 soap_get___ns1__Membership(struct soap*, struct __ns1__Membership *, const char*, const char*);

#ifndef soap_read___ns1__Membership
#define soap_read___ns1__Membership(soap, data) ( ((data) ? (ns::soap_default___ns1__Membership(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__Membership(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__Login2
#define SOAP_TYPE_ns___ns1__Login2 (162)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Login2(struct soap*, struct __ns1__Login2 *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Login2(struct soap*, const struct __ns1__Login2 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Login2(struct soap*, const char*, int, const struct __ns1__Login2 *, const char*);
SOAP_FMAC3 struct __ns1__Login2 * SOAP_FMAC4 soap_in___ns1__Login2(struct soap*, const char*, struct __ns1__Login2 *, const char*);
SOAP_FMAC1 struct __ns1__Login2 * SOAP_FMAC2 soap_instantiate___ns1__Login2(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Login2 * soap_new___ns1__Login2(struct soap *soap, int n = -1) { return soap_instantiate___ns1__Login2(soap, n, NULL, NULL, NULL); }

inline struct __ns1__Login2 * soap_new_req___ns1__Login2(
	struct soap *soap)
{	struct __ns1__Login2 *_p = soap_new___ns1__Login2(soap);
	if (_p)
	{	soap_default___ns1__Login2(soap, _p);
	}
	return _p;
}

inline struct __ns1__Login2 * soap_new_set___ns1__Login2(
	struct soap *soap,
	_ns1__Login2 *ns1__Login2)
{	struct __ns1__Login2 *_p = soap_new___ns1__Login2(soap);
	if (_p)
	{	soap_default___ns1__Login2(soap, _p);
		_p->ns1__Login2 = ns1__Login2;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Login2(struct soap*, const struct __ns1__Login2 *, const char*, const char*);

#ifndef soap_write___ns1__Login2
#define soap_write___ns1__Login2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__Login2(soap, data), 0) || ns::soap_put___ns1__Login2(soap, data, "-ns1:Login2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__Login2 * SOAP_FMAC4 soap_get___ns1__Login2(struct soap*, struct __ns1__Login2 *, const char*, const char*);

#ifndef soap_read___ns1__Login2
#define soap_read___ns1__Login2(soap, data) ( ((data) ? (ns::soap_default___ns1__Login2(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__Login2(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns___ns1__Login
#define SOAP_TYPE_ns___ns1__Login (158)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Login(struct soap*, struct __ns1__Login *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Login(struct soap*, const struct __ns1__Login *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Login(struct soap*, const char*, int, const struct __ns1__Login *, const char*);
SOAP_FMAC3 struct __ns1__Login * SOAP_FMAC4 soap_in___ns1__Login(struct soap*, const char*, struct __ns1__Login *, const char*);
SOAP_FMAC1 struct __ns1__Login * SOAP_FMAC2 soap_instantiate___ns1__Login(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Login * soap_new___ns1__Login(struct soap *soap, int n = -1) { return soap_instantiate___ns1__Login(soap, n, NULL, NULL, NULL); }

inline struct __ns1__Login * soap_new_req___ns1__Login(
	struct soap *soap)
{	struct __ns1__Login *_p = soap_new___ns1__Login(soap);
	if (_p)
	{	soap_default___ns1__Login(soap, _p);
	}
	return _p;
}

inline struct __ns1__Login * soap_new_set___ns1__Login(
	struct soap *soap,
	_ns1__Login *ns1__Login)
{	struct __ns1__Login *_p = soap_new___ns1__Login(soap);
	if (_p)
	{	soap_default___ns1__Login(soap, _p);
		_p->ns1__Login = ns1__Login;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Login(struct soap*, const struct __ns1__Login *, const char*, const char*);

#ifndef soap_write___ns1__Login
#define soap_write___ns1__Login(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize___ns1__Login(soap, data), 0) || ns::soap_put___ns1__Login(soap, data, "-ns1:Login", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__Login * SOAP_FMAC4 soap_get___ns1__Login(struct soap*, struct __ns1__Login *, const char*, const char*);

#ifndef soap_read___ns1__Login
#define soap_read___ns1__Login(soap, data) ( ((data) ? (ns::soap_default___ns1__Login(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get___ns1__Login(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_ns_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_ns_PointerToSOAP_ENV__Reason (506)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerToSOAP_ENV__Reason(soap, data), 0) || ns::soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( ((data) ? (ns::soap_default_PointerToSOAP_ENV__Reason(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerToSOAP_ENV__Reason(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_ns_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_ns_PointerToSOAP_ENV__Detail (505)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerToSOAP_ENV__Detail(soap, data), 0) || ns::soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( ((data) ? (ns::soap_default_PointerToSOAP_ENV__Detail(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerToSOAP_ENV__Detail(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_ns_PointerToSOAP_ENV__Code
#define SOAP_TYPE_ns_PointerToSOAP_ENV__Code (499)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerToSOAP_ENV__Code(soap, data), 0) || ns::soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( ((data) ? (ns::soap_default_PointerToSOAP_ENV__Code(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerToSOAP_ENV__Code(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE_ns_PointerTo_ns1__ValidateAccess
#define SOAP_TYPE_ns_PointerTo_ns1__ValidateAccess (287)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ValidateAccess(struct soap*, _ns1__ValidateAccess *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ValidateAccess(struct soap*, const char *, int, _ns1__ValidateAccess *const*, const char *);
SOAP_FMAC3 _ns1__ValidateAccess ** SOAP_FMAC4 soap_in_PointerTo_ns1__ValidateAccess(struct soap*, const char*, _ns1__ValidateAccess **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ValidateAccess(struct soap*, _ns1__ValidateAccess *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__ValidateAccess
#define soap_write_PointerTo_ns1__ValidateAccess(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTo_ns1__ValidateAccess(soap, data), 0) || ns::soap_put_PointerTo_ns1__ValidateAccess(soap, data, "ns1:ValidateAccess", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__ValidateAccess ** SOAP_FMAC4 soap_get_PointerTo_ns1__ValidateAccess(struct soap*, _ns1__ValidateAccess **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__ValidateAccess
#define soap_read_PointerTo_ns1__ValidateAccess(soap, data) ( ((data) ? (ns::soap_default_PointerTo_ns1__ValidateAccess(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTo_ns1__ValidateAccess(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTo_ns1__UpdateDataFormat
#define SOAP_TYPE_ns_PointerTo_ns1__UpdateDataFormat (283)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__UpdateDataFormat(struct soap*, _ns1__UpdateDataFormat *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__UpdateDataFormat(struct soap*, const char *, int, _ns1__UpdateDataFormat *const*, const char *);
SOAP_FMAC3 _ns1__UpdateDataFormat ** SOAP_FMAC4 soap_in_PointerTo_ns1__UpdateDataFormat(struct soap*, const char*, _ns1__UpdateDataFormat **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__UpdateDataFormat(struct soap*, _ns1__UpdateDataFormat *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__UpdateDataFormat
#define soap_write_PointerTo_ns1__UpdateDataFormat(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTo_ns1__UpdateDataFormat(soap, data), 0) || ns::soap_put_PointerTo_ns1__UpdateDataFormat(soap, data, "ns1:UpdateDataFormat", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__UpdateDataFormat ** SOAP_FMAC4 soap_get_PointerTo_ns1__UpdateDataFormat(struct soap*, _ns1__UpdateDataFormat **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__UpdateDataFormat
#define soap_read_PointerTo_ns1__UpdateDataFormat(soap, data) ( ((data) ? (ns::soap_default_PointerTo_ns1__UpdateDataFormat(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTo_ns1__UpdateDataFormat(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTo_ns1__DataFormats
#define SOAP_TYPE_ns_PointerTo_ns1__DataFormats (279)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__DataFormats(struct soap*, _ns1__DataFormats *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__DataFormats(struct soap*, const char *, int, _ns1__DataFormats *const*, const char *);
SOAP_FMAC3 _ns1__DataFormats ** SOAP_FMAC4 soap_in_PointerTo_ns1__DataFormats(struct soap*, const char*, _ns1__DataFormats **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__DataFormats(struct soap*, _ns1__DataFormats *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__DataFormats
#define soap_write_PointerTo_ns1__DataFormats(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTo_ns1__DataFormats(soap, data), 0) || ns::soap_put_PointerTo_ns1__DataFormats(soap, data, "ns1:DataFormats", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__DataFormats ** SOAP_FMAC4 soap_get_PointerTo_ns1__DataFormats(struct soap*, _ns1__DataFormats **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__DataFormats
#define soap_read_PointerTo_ns1__DataFormats(soap, data) ( ((data) ? (ns::soap_default_PointerTo_ns1__DataFormats(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTo_ns1__DataFormats(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTo_ns1__DataClientLatestVersion
#define SOAP_TYPE_ns_PointerTo_ns1__DataClientLatestVersion (275)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__DataClientLatestVersion(struct soap*, _ns1__DataClientLatestVersion *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__DataClientLatestVersion(struct soap*, const char *, int, _ns1__DataClientLatestVersion *const*, const char *);
SOAP_FMAC3 _ns1__DataClientLatestVersion ** SOAP_FMAC4 soap_in_PointerTo_ns1__DataClientLatestVersion(struct soap*, const char*, _ns1__DataClientLatestVersion **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__DataClientLatestVersion(struct soap*, _ns1__DataClientLatestVersion *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__DataClientLatestVersion
#define soap_write_PointerTo_ns1__DataClientLatestVersion(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTo_ns1__DataClientLatestVersion(soap, data), 0) || ns::soap_put_PointerTo_ns1__DataClientLatestVersion(soap, data, "ns1:DataClientLatestVersion", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__DataClientLatestVersion ** SOAP_FMAC4 soap_get_PointerTo_ns1__DataClientLatestVersion(struct soap*, _ns1__DataClientLatestVersion **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__DataClientLatestVersion
#define soap_read_PointerTo_ns1__DataClientLatestVersion(soap, data) ( ((data) ? (ns::soap_default_PointerTo_ns1__DataClientLatestVersion(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTo_ns1__DataClientLatestVersion(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTo_ns1__SymbolChangesByExchange
#define SOAP_TYPE_ns_PointerTo_ns1__SymbolChangesByExchange (271)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SymbolChangesByExchange(struct soap*, _ns1__SymbolChangesByExchange *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SymbolChangesByExchange(struct soap*, const char *, int, _ns1__SymbolChangesByExchange *const*, const char *);
SOAP_FMAC3 _ns1__SymbolChangesByExchange ** SOAP_FMAC4 soap_in_PointerTo_ns1__SymbolChangesByExchange(struct soap*, const char*, _ns1__SymbolChangesByExchange **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SymbolChangesByExchange(struct soap*, _ns1__SymbolChangesByExchange *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__SymbolChangesByExchange
#define soap_write_PointerTo_ns1__SymbolChangesByExchange(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTo_ns1__SymbolChangesByExchange(soap, data), 0) || ns::soap_put_PointerTo_ns1__SymbolChangesByExchange(soap, data, "ns1:SymbolChangesByExchange", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SymbolChangesByExchange ** SOAP_FMAC4 soap_get_PointerTo_ns1__SymbolChangesByExchange(struct soap*, _ns1__SymbolChangesByExchange **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__SymbolChangesByExchange
#define soap_read_PointerTo_ns1__SymbolChangesByExchange(soap, data) ( ((data) ? (ns::soap_default_PointerTo_ns1__SymbolChangesByExchange(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTo_ns1__SymbolChangesByExchange(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTo_ns1__QuoteListByDatePeriod2
#define SOAP_TYPE_ns_PointerTo_ns1__QuoteListByDatePeriod2 (267)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__QuoteListByDatePeriod2(struct soap*, _ns1__QuoteListByDatePeriod2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__QuoteListByDatePeriod2(struct soap*, const char *, int, _ns1__QuoteListByDatePeriod2 *const*, const char *);
SOAP_FMAC3 _ns1__QuoteListByDatePeriod2 ** SOAP_FMAC4 soap_in_PointerTo_ns1__QuoteListByDatePeriod2(struct soap*, const char*, _ns1__QuoteListByDatePeriod2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__QuoteListByDatePeriod2(struct soap*, _ns1__QuoteListByDatePeriod2 *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__QuoteListByDatePeriod2
#define soap_write_PointerTo_ns1__QuoteListByDatePeriod2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTo_ns1__QuoteListByDatePeriod2(soap, data), 0) || ns::soap_put_PointerTo_ns1__QuoteListByDatePeriod2(soap, data, "ns1:QuoteListByDatePeriod2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__QuoteListByDatePeriod2 ** SOAP_FMAC4 soap_get_PointerTo_ns1__QuoteListByDatePeriod2(struct soap*, _ns1__QuoteListByDatePeriod2 **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__QuoteListByDatePeriod2
#define soap_read_PointerTo_ns1__QuoteListByDatePeriod2(soap, data) ( ((data) ? (ns::soap_default_PointerTo_ns1__QuoteListByDatePeriod2(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTo_ns1__QuoteListByDatePeriod2(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTo_ns1__QuoteListByDatePeriod
#define SOAP_TYPE_ns_PointerTo_ns1__QuoteListByDatePeriod (263)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__QuoteListByDatePeriod(struct soap*, _ns1__QuoteListByDatePeriod *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__QuoteListByDatePeriod(struct soap*, const char *, int, _ns1__QuoteListByDatePeriod *const*, const char *);
SOAP_FMAC3 _ns1__QuoteListByDatePeriod ** SOAP_FMAC4 soap_in_PointerTo_ns1__QuoteListByDatePeriod(struct soap*, const char*, _ns1__QuoteListByDatePeriod **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__QuoteListByDatePeriod(struct soap*, _ns1__QuoteListByDatePeriod *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__QuoteListByDatePeriod
#define soap_write_PointerTo_ns1__QuoteListByDatePeriod(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTo_ns1__QuoteListByDatePeriod(soap, data), 0) || ns::soap_put_PointerTo_ns1__QuoteListByDatePeriod(soap, data, "ns1:QuoteListByDatePeriod", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__QuoteListByDatePeriod ** SOAP_FMAC4 soap_get_PointerTo_ns1__QuoteListByDatePeriod(struct soap*, _ns1__QuoteListByDatePeriod **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__QuoteListByDatePeriod
#define soap_read_PointerTo_ns1__QuoteListByDatePeriod(soap, data) ( ((data) ? (ns::soap_default_PointerTo_ns1__QuoteListByDatePeriod(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTo_ns1__QuoteListByDatePeriod(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTo_ns1__SymbolHistoryPeriodByDateRange
#define SOAP_TYPE_ns_PointerTo_ns1__SymbolHistoryPeriodByDateRange (259)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SymbolHistoryPeriodByDateRange(struct soap*, _ns1__SymbolHistoryPeriodByDateRange *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SymbolHistoryPeriodByDateRange(struct soap*, const char *, int, _ns1__SymbolHistoryPeriodByDateRange *const*, const char *);
SOAP_FMAC3 _ns1__SymbolHistoryPeriodByDateRange ** SOAP_FMAC4 soap_in_PointerTo_ns1__SymbolHistoryPeriodByDateRange(struct soap*, const char*, _ns1__SymbolHistoryPeriodByDateRange **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SymbolHistoryPeriodByDateRange(struct soap*, _ns1__SymbolHistoryPeriodByDateRange *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__SymbolHistoryPeriodByDateRange
#define soap_write_PointerTo_ns1__SymbolHistoryPeriodByDateRange(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTo_ns1__SymbolHistoryPeriodByDateRange(soap, data), 0) || ns::soap_put_PointerTo_ns1__SymbolHistoryPeriodByDateRange(soap, data, "ns1:SymbolHistoryPeriodByDateRange", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SymbolHistoryPeriodByDateRange ** SOAP_FMAC4 soap_get_PointerTo_ns1__SymbolHistoryPeriodByDateRange(struct soap*, _ns1__SymbolHistoryPeriodByDateRange **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__SymbolHistoryPeriodByDateRange
#define soap_read_PointerTo_ns1__SymbolHistoryPeriodByDateRange(soap, data) ( ((data) ? (ns::soap_default_PointerTo_ns1__SymbolHistoryPeriodByDateRange(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTo_ns1__SymbolHistoryPeriodByDateRange(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTo_ns1__SymbolHistoryPeriod
#define SOAP_TYPE_ns_PointerTo_ns1__SymbolHistoryPeriod (255)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SymbolHistoryPeriod(struct soap*, _ns1__SymbolHistoryPeriod *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SymbolHistoryPeriod(struct soap*, const char *, int, _ns1__SymbolHistoryPeriod *const*, const char *);
SOAP_FMAC3 _ns1__SymbolHistoryPeriod ** SOAP_FMAC4 soap_in_PointerTo_ns1__SymbolHistoryPeriod(struct soap*, const char*, _ns1__SymbolHistoryPeriod **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SymbolHistoryPeriod(struct soap*, _ns1__SymbolHistoryPeriod *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__SymbolHistoryPeriod
#define soap_write_PointerTo_ns1__SymbolHistoryPeriod(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTo_ns1__SymbolHistoryPeriod(soap, data), 0) || ns::soap_put_PointerTo_ns1__SymbolHistoryPeriod(soap, data, "ns1:SymbolHistoryPeriod", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SymbolHistoryPeriod ** SOAP_FMAC4 soap_get_PointerTo_ns1__SymbolHistoryPeriod(struct soap*, _ns1__SymbolHistoryPeriod **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__SymbolHistoryPeriod
#define soap_read_PointerTo_ns1__SymbolHistoryPeriod(soap, data) ( ((data) ? (ns::soap_default_PointerTo_ns1__SymbolHistoryPeriod(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTo_ns1__SymbolHistoryPeriod(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTo_ns1__CountryList
#define SOAP_TYPE_ns_PointerTo_ns1__CountryList (251)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CountryList(struct soap*, _ns1__CountryList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CountryList(struct soap*, const char *, int, _ns1__CountryList *const*, const char *);
SOAP_FMAC3 _ns1__CountryList ** SOAP_FMAC4 soap_in_PointerTo_ns1__CountryList(struct soap*, const char*, _ns1__CountryList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CountryList(struct soap*, _ns1__CountryList *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__CountryList
#define soap_write_PointerTo_ns1__CountryList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTo_ns1__CountryList(soap, data), 0) || ns::soap_put_PointerTo_ns1__CountryList(soap, data, "ns1:CountryList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__CountryList ** SOAP_FMAC4 soap_get_PointerTo_ns1__CountryList(struct soap*, _ns1__CountryList **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__CountryList
#define soap_read_PointerTo_ns1__CountryList(soap, data) ( ((data) ? (ns::soap_default_PointerTo_ns1__CountryList(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTo_ns1__CountryList(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTo_ns1__SplitListBySymbol
#define SOAP_TYPE_ns_PointerTo_ns1__SplitListBySymbol (247)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SplitListBySymbol(struct soap*, _ns1__SplitListBySymbol *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SplitListBySymbol(struct soap*, const char *, int, _ns1__SplitListBySymbol *const*, const char *);
SOAP_FMAC3 _ns1__SplitListBySymbol ** SOAP_FMAC4 soap_in_PointerTo_ns1__SplitListBySymbol(struct soap*, const char*, _ns1__SplitListBySymbol **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SplitListBySymbol(struct soap*, _ns1__SplitListBySymbol *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__SplitListBySymbol
#define soap_write_PointerTo_ns1__SplitListBySymbol(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTo_ns1__SplitListBySymbol(soap, data), 0) || ns::soap_put_PointerTo_ns1__SplitListBySymbol(soap, data, "ns1:SplitListBySymbol", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SplitListBySymbol ** SOAP_FMAC4 soap_get_PointerTo_ns1__SplitListBySymbol(struct soap*, _ns1__SplitListBySymbol **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__SplitListBySymbol
#define soap_read_PointerTo_ns1__SplitListBySymbol(soap, data) ( ((data) ? (ns::soap_default_PointerTo_ns1__SplitListBySymbol(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTo_ns1__SplitListBySymbol(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTo_ns1__SplitListByExchange
#define SOAP_TYPE_ns_PointerTo_ns1__SplitListByExchange (243)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SplitListByExchange(struct soap*, _ns1__SplitListByExchange *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SplitListByExchange(struct soap*, const char *, int, _ns1__SplitListByExchange *const*, const char *);
SOAP_FMAC3 _ns1__SplitListByExchange ** SOAP_FMAC4 soap_in_PointerTo_ns1__SplitListByExchange(struct soap*, const char*, _ns1__SplitListByExchange **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SplitListByExchange(struct soap*, _ns1__SplitListByExchange *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__SplitListByExchange
#define soap_write_PointerTo_ns1__SplitListByExchange(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTo_ns1__SplitListByExchange(soap, data), 0) || ns::soap_put_PointerTo_ns1__SplitListByExchange(soap, data, "ns1:SplitListByExchange", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SplitListByExchange ** SOAP_FMAC4 soap_get_PointerTo_ns1__SplitListByExchange(struct soap*, _ns1__SplitListByExchange **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__SplitListByExchange
#define soap_read_PointerTo_ns1__SplitListByExchange(soap, data) ( ((data) ? (ns::soap_default_PointerTo_ns1__SplitListByExchange(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTo_ns1__SplitListByExchange(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTo_ns1__ExchangeMonths
#define SOAP_TYPE_ns_PointerTo_ns1__ExchangeMonths (239)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ExchangeMonths(struct soap*, _ns1__ExchangeMonths *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ExchangeMonths(struct soap*, const char *, int, _ns1__ExchangeMonths *const*, const char *);
SOAP_FMAC3 _ns1__ExchangeMonths ** SOAP_FMAC4 soap_in_PointerTo_ns1__ExchangeMonths(struct soap*, const char*, _ns1__ExchangeMonths **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ExchangeMonths(struct soap*, _ns1__ExchangeMonths *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__ExchangeMonths
#define soap_write_PointerTo_ns1__ExchangeMonths(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTo_ns1__ExchangeMonths(soap, data), 0) || ns::soap_put_PointerTo_ns1__ExchangeMonths(soap, data, "ns1:ExchangeMonths", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__ExchangeMonths ** SOAP_FMAC4 soap_get_PointerTo_ns1__ExchangeMonths(struct soap*, _ns1__ExchangeMonths **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__ExchangeMonths
#define soap_read_PointerTo_ns1__ExchangeMonths(soap, data) ( ((data) ? (ns::soap_default_PointerTo_ns1__ExchangeMonths(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTo_ns1__ExchangeMonths(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTo_ns1__SymbolChart
#define SOAP_TYPE_ns_PointerTo_ns1__SymbolChart (235)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SymbolChart(struct soap*, _ns1__SymbolChart *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SymbolChart(struct soap*, const char *, int, _ns1__SymbolChart *const*, const char *);
SOAP_FMAC3 _ns1__SymbolChart ** SOAP_FMAC4 soap_in_PointerTo_ns1__SymbolChart(struct soap*, const char*, _ns1__SymbolChart **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SymbolChart(struct soap*, _ns1__SymbolChart *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__SymbolChart
#define soap_write_PointerTo_ns1__SymbolChart(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTo_ns1__SymbolChart(soap, data), 0) || ns::soap_put_PointerTo_ns1__SymbolChart(soap, data, "ns1:SymbolChart", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SymbolChart ** SOAP_FMAC4 soap_get_PointerTo_ns1__SymbolChart(struct soap*, _ns1__SymbolChart **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__SymbolChart
#define soap_read_PointerTo_ns1__SymbolChart(soap, data) ( ((data) ? (ns::soap_default_PointerTo_ns1__SymbolChart(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTo_ns1__SymbolChart(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTo_ns1__Top10Losses
#define SOAP_TYPE_ns_PointerTo_ns1__Top10Losses (231)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Top10Losses(struct soap*, _ns1__Top10Losses *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Top10Losses(struct soap*, const char *, int, _ns1__Top10Losses *const*, const char *);
SOAP_FMAC3 _ns1__Top10Losses ** SOAP_FMAC4 soap_in_PointerTo_ns1__Top10Losses(struct soap*, const char*, _ns1__Top10Losses **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Top10Losses(struct soap*, _ns1__Top10Losses *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__Top10Losses
#define soap_write_PointerTo_ns1__Top10Losses(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTo_ns1__Top10Losses(soap, data), 0) || ns::soap_put_PointerTo_ns1__Top10Losses(soap, data, "ns1:Top10Losses", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__Top10Losses ** SOAP_FMAC4 soap_get_PointerTo_ns1__Top10Losses(struct soap*, _ns1__Top10Losses **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__Top10Losses
#define soap_read_PointerTo_ns1__Top10Losses(soap, data) ( ((data) ? (ns::soap_default_PointerTo_ns1__Top10Losses(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTo_ns1__Top10Losses(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTo_ns1__Top10Gains
#define SOAP_TYPE_ns_PointerTo_ns1__Top10Gains (227)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Top10Gains(struct soap*, _ns1__Top10Gains *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Top10Gains(struct soap*, const char *, int, _ns1__Top10Gains *const*, const char *);
SOAP_FMAC3 _ns1__Top10Gains ** SOAP_FMAC4 soap_in_PointerTo_ns1__Top10Gains(struct soap*, const char*, _ns1__Top10Gains **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Top10Gains(struct soap*, _ns1__Top10Gains *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__Top10Gains
#define soap_write_PointerTo_ns1__Top10Gains(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTo_ns1__Top10Gains(soap, data), 0) || ns::soap_put_PointerTo_ns1__Top10Gains(soap, data, "ns1:Top10Gains", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__Top10Gains ** SOAP_FMAC4 soap_get_PointerTo_ns1__Top10Gains(struct soap*, _ns1__Top10Gains **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__Top10Gains
#define soap_read_PointerTo_ns1__Top10Gains(soap, data) ( ((data) ? (ns::soap_default_PointerTo_ns1__Top10Gains(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTo_ns1__Top10Gains(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTo_ns1__SymbolHistory
#define SOAP_TYPE_ns_PointerTo_ns1__SymbolHistory (223)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SymbolHistory(struct soap*, _ns1__SymbolHistory *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SymbolHistory(struct soap*, const char *, int, _ns1__SymbolHistory *const*, const char *);
SOAP_FMAC3 _ns1__SymbolHistory ** SOAP_FMAC4 soap_in_PointerTo_ns1__SymbolHistory(struct soap*, const char*, _ns1__SymbolHistory **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SymbolHistory(struct soap*, _ns1__SymbolHistory *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__SymbolHistory
#define soap_write_PointerTo_ns1__SymbolHistory(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTo_ns1__SymbolHistory(soap, data), 0) || ns::soap_put_PointerTo_ns1__SymbolHistory(soap, data, "ns1:SymbolHistory", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SymbolHistory ** SOAP_FMAC4 soap_get_PointerTo_ns1__SymbolHistory(struct soap*, _ns1__SymbolHistory **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__SymbolHistory
#define soap_read_PointerTo_ns1__SymbolHistory(soap, data) ( ((data) ? (ns::soap_default_PointerTo_ns1__SymbolHistory(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTo_ns1__SymbolHistory(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTo_ns1__QuoteListByDate2
#define SOAP_TYPE_ns_PointerTo_ns1__QuoteListByDate2 (219)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__QuoteListByDate2(struct soap*, _ns1__QuoteListByDate2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__QuoteListByDate2(struct soap*, const char *, int, _ns1__QuoteListByDate2 *const*, const char *);
SOAP_FMAC3 _ns1__QuoteListByDate2 ** SOAP_FMAC4 soap_in_PointerTo_ns1__QuoteListByDate2(struct soap*, const char*, _ns1__QuoteListByDate2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__QuoteListByDate2(struct soap*, _ns1__QuoteListByDate2 *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__QuoteListByDate2
#define soap_write_PointerTo_ns1__QuoteListByDate2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTo_ns1__QuoteListByDate2(soap, data), 0) || ns::soap_put_PointerTo_ns1__QuoteListByDate2(soap, data, "ns1:QuoteListByDate2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__QuoteListByDate2 ** SOAP_FMAC4 soap_get_PointerTo_ns1__QuoteListByDate2(struct soap*, _ns1__QuoteListByDate2 **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__QuoteListByDate2
#define soap_read_PointerTo_ns1__QuoteListByDate2(soap, data) ( ((data) ? (ns::soap_default_PointerTo_ns1__QuoteListByDate2(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTo_ns1__QuoteListByDate2(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTo_ns1__QuoteListByDate
#define SOAP_TYPE_ns_PointerTo_ns1__QuoteListByDate (215)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__QuoteListByDate(struct soap*, _ns1__QuoteListByDate *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__QuoteListByDate(struct soap*, const char *, int, _ns1__QuoteListByDate *const*, const char *);
SOAP_FMAC3 _ns1__QuoteListByDate ** SOAP_FMAC4 soap_in_PointerTo_ns1__QuoteListByDate(struct soap*, const char*, _ns1__QuoteListByDate **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__QuoteListByDate(struct soap*, _ns1__QuoteListByDate *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__QuoteListByDate
#define soap_write_PointerTo_ns1__QuoteListByDate(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTo_ns1__QuoteListByDate(soap, data), 0) || ns::soap_put_PointerTo_ns1__QuoteListByDate(soap, data, "ns1:QuoteListByDate", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__QuoteListByDate ** SOAP_FMAC4 soap_get_PointerTo_ns1__QuoteListByDate(struct soap*, _ns1__QuoteListByDate **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__QuoteListByDate
#define soap_read_PointerTo_ns1__QuoteListByDate(soap, data) ( ((data) ? (ns::soap_default_PointerTo_ns1__QuoteListByDate(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTo_ns1__QuoteListByDate(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTo_ns1__TechnicalList
#define SOAP_TYPE_ns_PointerTo_ns1__TechnicalList (211)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__TechnicalList(struct soap*, _ns1__TechnicalList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__TechnicalList(struct soap*, const char *, int, _ns1__TechnicalList *const*, const char *);
SOAP_FMAC3 _ns1__TechnicalList ** SOAP_FMAC4 soap_in_PointerTo_ns1__TechnicalList(struct soap*, const char*, _ns1__TechnicalList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__TechnicalList(struct soap*, _ns1__TechnicalList *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__TechnicalList
#define soap_write_PointerTo_ns1__TechnicalList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTo_ns1__TechnicalList(soap, data), 0) || ns::soap_put_PointerTo_ns1__TechnicalList(soap, data, "ns1:TechnicalList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__TechnicalList ** SOAP_FMAC4 soap_get_PointerTo_ns1__TechnicalList(struct soap*, _ns1__TechnicalList **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__TechnicalList
#define soap_read_PointerTo_ns1__TechnicalList(soap, data) ( ((data) ? (ns::soap_default_PointerTo_ns1__TechnicalList(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTo_ns1__TechnicalList(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTo_ns1__FundamentalList
#define SOAP_TYPE_ns_PointerTo_ns1__FundamentalList (207)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__FundamentalList(struct soap*, _ns1__FundamentalList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__FundamentalList(struct soap*, const char *, int, _ns1__FundamentalList *const*, const char *);
SOAP_FMAC3 _ns1__FundamentalList ** SOAP_FMAC4 soap_in_PointerTo_ns1__FundamentalList(struct soap*, const char*, _ns1__FundamentalList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__FundamentalList(struct soap*, _ns1__FundamentalList *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__FundamentalList
#define soap_write_PointerTo_ns1__FundamentalList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTo_ns1__FundamentalList(soap, data), 0) || ns::soap_put_PointerTo_ns1__FundamentalList(soap, data, "ns1:FundamentalList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__FundamentalList ** SOAP_FMAC4 soap_get_PointerTo_ns1__FundamentalList(struct soap*, _ns1__FundamentalList **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__FundamentalList
#define soap_read_PointerTo_ns1__FundamentalList(soap, data) ( ((data) ? (ns::soap_default_PointerTo_ns1__FundamentalList(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTo_ns1__FundamentalList(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTo_ns1__NewsListBySymbol
#define SOAP_TYPE_ns_PointerTo_ns1__NewsListBySymbol (203)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__NewsListBySymbol(struct soap*, _ns1__NewsListBySymbol *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__NewsListBySymbol(struct soap*, const char *, int, _ns1__NewsListBySymbol *const*, const char *);
SOAP_FMAC3 _ns1__NewsListBySymbol ** SOAP_FMAC4 soap_in_PointerTo_ns1__NewsListBySymbol(struct soap*, const char*, _ns1__NewsListBySymbol **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__NewsListBySymbol(struct soap*, _ns1__NewsListBySymbol *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__NewsListBySymbol
#define soap_write_PointerTo_ns1__NewsListBySymbol(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTo_ns1__NewsListBySymbol(soap, data), 0) || ns::soap_put_PointerTo_ns1__NewsListBySymbol(soap, data, "ns1:NewsListBySymbol", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__NewsListBySymbol ** SOAP_FMAC4 soap_get_PointerTo_ns1__NewsListBySymbol(struct soap*, _ns1__NewsListBySymbol **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__NewsListBySymbol
#define soap_read_PointerTo_ns1__NewsListBySymbol(soap, data) ( ((data) ? (ns::soap_default_PointerTo_ns1__NewsListBySymbol(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTo_ns1__NewsListBySymbol(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTo_ns1__NewsList
#define SOAP_TYPE_ns_PointerTo_ns1__NewsList (199)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__NewsList(struct soap*, _ns1__NewsList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__NewsList(struct soap*, const char *, int, _ns1__NewsList *const*, const char *);
SOAP_FMAC3 _ns1__NewsList ** SOAP_FMAC4 soap_in_PointerTo_ns1__NewsList(struct soap*, const char*, _ns1__NewsList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__NewsList(struct soap*, _ns1__NewsList *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__NewsList
#define soap_write_PointerTo_ns1__NewsList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTo_ns1__NewsList(soap, data), 0) || ns::soap_put_PointerTo_ns1__NewsList(soap, data, "ns1:NewsList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__NewsList ** SOAP_FMAC4 soap_get_PointerTo_ns1__NewsList(struct soap*, _ns1__NewsList **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__NewsList
#define soap_read_PointerTo_ns1__NewsList(soap, data) ( ((data) ? (ns::soap_default_PointerTo_ns1__NewsList(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTo_ns1__NewsList(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTo_ns1__QuoteList
#define SOAP_TYPE_ns_PointerTo_ns1__QuoteList (195)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__QuoteList(struct soap*, _ns1__QuoteList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__QuoteList(struct soap*, const char *, int, _ns1__QuoteList *const*, const char *);
SOAP_FMAC3 _ns1__QuoteList ** SOAP_FMAC4 soap_in_PointerTo_ns1__QuoteList(struct soap*, const char*, _ns1__QuoteList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__QuoteList(struct soap*, _ns1__QuoteList *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__QuoteList
#define soap_write_PointerTo_ns1__QuoteList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTo_ns1__QuoteList(soap, data), 0) || ns::soap_put_PointerTo_ns1__QuoteList(soap, data, "ns1:QuoteList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__QuoteList ** SOAP_FMAC4 soap_get_PointerTo_ns1__QuoteList(struct soap*, _ns1__QuoteList **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__QuoteList
#define soap_read_PointerTo_ns1__QuoteList(soap, data) ( ((data) ? (ns::soap_default_PointerTo_ns1__QuoteList(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTo_ns1__QuoteList(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTo_ns1__SymbolGet
#define SOAP_TYPE_ns_PointerTo_ns1__SymbolGet (191)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SymbolGet(struct soap*, _ns1__SymbolGet *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SymbolGet(struct soap*, const char *, int, _ns1__SymbolGet *const*, const char *);
SOAP_FMAC3 _ns1__SymbolGet ** SOAP_FMAC4 soap_in_PointerTo_ns1__SymbolGet(struct soap*, const char*, _ns1__SymbolGet **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SymbolGet(struct soap*, _ns1__SymbolGet *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__SymbolGet
#define soap_write_PointerTo_ns1__SymbolGet(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTo_ns1__SymbolGet(soap, data), 0) || ns::soap_put_PointerTo_ns1__SymbolGet(soap, data, "ns1:SymbolGet", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SymbolGet ** SOAP_FMAC4 soap_get_PointerTo_ns1__SymbolGet(struct soap*, _ns1__SymbolGet **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__SymbolGet
#define soap_read_PointerTo_ns1__SymbolGet(soap, data) ( ((data) ? (ns::soap_default_PointerTo_ns1__SymbolGet(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTo_ns1__SymbolGet(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTo_ns1__QuoteList2
#define SOAP_TYPE_ns_PointerTo_ns1__QuoteList2 (187)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__QuoteList2(struct soap*, _ns1__QuoteList2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__QuoteList2(struct soap*, const char *, int, _ns1__QuoteList2 *const*, const char *);
SOAP_FMAC3 _ns1__QuoteList2 ** SOAP_FMAC4 soap_in_PointerTo_ns1__QuoteList2(struct soap*, const char*, _ns1__QuoteList2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__QuoteList2(struct soap*, _ns1__QuoteList2 *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__QuoteList2
#define soap_write_PointerTo_ns1__QuoteList2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTo_ns1__QuoteList2(soap, data), 0) || ns::soap_put_PointerTo_ns1__QuoteList2(soap, data, "ns1:QuoteList2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__QuoteList2 ** SOAP_FMAC4 soap_get_PointerTo_ns1__QuoteList2(struct soap*, _ns1__QuoteList2 **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__QuoteList2
#define soap_read_PointerTo_ns1__QuoteList2(soap, data) ( ((data) ? (ns::soap_default_PointerTo_ns1__QuoteList2(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTo_ns1__QuoteList2(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTo_ns1__QuoteGet
#define SOAP_TYPE_ns_PointerTo_ns1__QuoteGet (183)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__QuoteGet(struct soap*, _ns1__QuoteGet *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__QuoteGet(struct soap*, const char *, int, _ns1__QuoteGet *const*, const char *);
SOAP_FMAC3 _ns1__QuoteGet ** SOAP_FMAC4 soap_in_PointerTo_ns1__QuoteGet(struct soap*, const char*, _ns1__QuoteGet **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__QuoteGet(struct soap*, _ns1__QuoteGet *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__QuoteGet
#define soap_write_PointerTo_ns1__QuoteGet(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTo_ns1__QuoteGet(soap, data), 0) || ns::soap_put_PointerTo_ns1__QuoteGet(soap, data, "ns1:QuoteGet", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__QuoteGet ** SOAP_FMAC4 soap_get_PointerTo_ns1__QuoteGet(struct soap*, _ns1__QuoteGet **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__QuoteGet
#define soap_read_PointerTo_ns1__QuoteGet(soap, data) ( ((data) ? (ns::soap_default_PointerTo_ns1__QuoteGet(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTo_ns1__QuoteGet(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTo_ns1__SymbolList2
#define SOAP_TYPE_ns_PointerTo_ns1__SymbolList2 (179)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SymbolList2(struct soap*, _ns1__SymbolList2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SymbolList2(struct soap*, const char *, int, _ns1__SymbolList2 *const*, const char *);
SOAP_FMAC3 _ns1__SymbolList2 ** SOAP_FMAC4 soap_in_PointerTo_ns1__SymbolList2(struct soap*, const char*, _ns1__SymbolList2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SymbolList2(struct soap*, _ns1__SymbolList2 *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__SymbolList2
#define soap_write_PointerTo_ns1__SymbolList2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTo_ns1__SymbolList2(soap, data), 0) || ns::soap_put_PointerTo_ns1__SymbolList2(soap, data, "ns1:SymbolList2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SymbolList2 ** SOAP_FMAC4 soap_get_PointerTo_ns1__SymbolList2(struct soap*, _ns1__SymbolList2 **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__SymbolList2
#define soap_read_PointerTo_ns1__SymbolList2(soap, data) ( ((data) ? (ns::soap_default_PointerTo_ns1__SymbolList2(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTo_ns1__SymbolList2(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTo_ns1__SymbolList
#define SOAP_TYPE_ns_PointerTo_ns1__SymbolList (175)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SymbolList(struct soap*, _ns1__SymbolList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SymbolList(struct soap*, const char *, int, _ns1__SymbolList *const*, const char *);
SOAP_FMAC3 _ns1__SymbolList ** SOAP_FMAC4 soap_in_PointerTo_ns1__SymbolList(struct soap*, const char*, _ns1__SymbolList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SymbolList(struct soap*, _ns1__SymbolList *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__SymbolList
#define soap_write_PointerTo_ns1__SymbolList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTo_ns1__SymbolList(soap, data), 0) || ns::soap_put_PointerTo_ns1__SymbolList(soap, data, "ns1:SymbolList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SymbolList ** SOAP_FMAC4 soap_get_PointerTo_ns1__SymbolList(struct soap*, _ns1__SymbolList **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__SymbolList
#define soap_read_PointerTo_ns1__SymbolList(soap, data) ( ((data) ? (ns::soap_default_PointerTo_ns1__SymbolList(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTo_ns1__SymbolList(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTo_ns1__ExchangeGet
#define SOAP_TYPE_ns_PointerTo_ns1__ExchangeGet (171)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ExchangeGet(struct soap*, _ns1__ExchangeGet *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ExchangeGet(struct soap*, const char *, int, _ns1__ExchangeGet *const*, const char *);
SOAP_FMAC3 _ns1__ExchangeGet ** SOAP_FMAC4 soap_in_PointerTo_ns1__ExchangeGet(struct soap*, const char*, _ns1__ExchangeGet **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ExchangeGet(struct soap*, _ns1__ExchangeGet *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__ExchangeGet
#define soap_write_PointerTo_ns1__ExchangeGet(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTo_ns1__ExchangeGet(soap, data), 0) || ns::soap_put_PointerTo_ns1__ExchangeGet(soap, data, "ns1:ExchangeGet", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__ExchangeGet ** SOAP_FMAC4 soap_get_PointerTo_ns1__ExchangeGet(struct soap*, _ns1__ExchangeGet **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__ExchangeGet
#define soap_read_PointerTo_ns1__ExchangeGet(soap, data) ( ((data) ? (ns::soap_default_PointerTo_ns1__ExchangeGet(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTo_ns1__ExchangeGet(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTo_ns1__ExchangeList
#define SOAP_TYPE_ns_PointerTo_ns1__ExchangeList (167)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ExchangeList(struct soap*, _ns1__ExchangeList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ExchangeList(struct soap*, const char *, int, _ns1__ExchangeList *const*, const char *);
SOAP_FMAC3 _ns1__ExchangeList ** SOAP_FMAC4 soap_in_PointerTo_ns1__ExchangeList(struct soap*, const char*, _ns1__ExchangeList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ExchangeList(struct soap*, _ns1__ExchangeList *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__ExchangeList
#define soap_write_PointerTo_ns1__ExchangeList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTo_ns1__ExchangeList(soap, data), 0) || ns::soap_put_PointerTo_ns1__ExchangeList(soap, data, "ns1:ExchangeList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__ExchangeList ** SOAP_FMAC4 soap_get_PointerTo_ns1__ExchangeList(struct soap*, _ns1__ExchangeList **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__ExchangeList
#define soap_read_PointerTo_ns1__ExchangeList(soap, data) ( ((data) ? (ns::soap_default_PointerTo_ns1__ExchangeList(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTo_ns1__ExchangeList(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTo_ns1__Membership
#define SOAP_TYPE_ns_PointerTo_ns1__Membership (163)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Membership(struct soap*, _ns1__Membership *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Membership(struct soap*, const char *, int, _ns1__Membership *const*, const char *);
SOAP_FMAC3 _ns1__Membership ** SOAP_FMAC4 soap_in_PointerTo_ns1__Membership(struct soap*, const char*, _ns1__Membership **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Membership(struct soap*, _ns1__Membership *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__Membership
#define soap_write_PointerTo_ns1__Membership(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTo_ns1__Membership(soap, data), 0) || ns::soap_put_PointerTo_ns1__Membership(soap, data, "ns1:Membership", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__Membership ** SOAP_FMAC4 soap_get_PointerTo_ns1__Membership(struct soap*, _ns1__Membership **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__Membership
#define soap_read_PointerTo_ns1__Membership(soap, data) ( ((data) ? (ns::soap_default_PointerTo_ns1__Membership(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTo_ns1__Membership(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTo_ns1__Login2
#define SOAP_TYPE_ns_PointerTo_ns1__Login2 (159)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Login2(struct soap*, _ns1__Login2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Login2(struct soap*, const char *, int, _ns1__Login2 *const*, const char *);
SOAP_FMAC3 _ns1__Login2 ** SOAP_FMAC4 soap_in_PointerTo_ns1__Login2(struct soap*, const char*, _ns1__Login2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Login2(struct soap*, _ns1__Login2 *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__Login2
#define soap_write_PointerTo_ns1__Login2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTo_ns1__Login2(soap, data), 0) || ns::soap_put_PointerTo_ns1__Login2(soap, data, "ns1:Login2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__Login2 ** SOAP_FMAC4 soap_get_PointerTo_ns1__Login2(struct soap*, _ns1__Login2 **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__Login2
#define soap_read_PointerTo_ns1__Login2(soap, data) ( ((data) ? (ns::soap_default_PointerTo_ns1__Login2(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTo_ns1__Login2(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTo_ns1__Login
#define SOAP_TYPE_ns_PointerTo_ns1__Login (155)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Login(struct soap*, _ns1__Login *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Login(struct soap*, const char *, int, _ns1__Login *const*, const char *);
SOAP_FMAC3 _ns1__Login ** SOAP_FMAC4 soap_in_PointerTo_ns1__Login(struct soap*, const char*, _ns1__Login **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Login(struct soap*, _ns1__Login *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__Login
#define soap_write_PointerTo_ns1__Login(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTo_ns1__Login(soap, data), 0) || ns::soap_put_PointerTo_ns1__Login(soap, data, "ns1:Login", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__Login ** SOAP_FMAC4 soap_get_PointerTo_ns1__Login(struct soap*, _ns1__Login **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__Login
#define soap_read_PointerTo_ns1__Login(soap, data) ( ((data) ? (ns::soap_default_PointerTo_ns1__Login(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTo_ns1__Login(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTons1__RESPONSE
#define SOAP_TYPE_ns_PointerTons1__RESPONSE (154)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__RESPONSE(struct soap*, ns1__RESPONSE *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__RESPONSE(struct soap*, const char *, int, ns1__RESPONSE *const*, const char *);
SOAP_FMAC3 ns1__RESPONSE ** SOAP_FMAC4 soap_in_PointerTons1__RESPONSE(struct soap*, const char*, ns1__RESPONSE **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__RESPONSE(struct soap*, ns1__RESPONSE *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__RESPONSE
#define soap_write_PointerTons1__RESPONSE(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTons1__RESPONSE(soap, data), 0) || ns::soap_put_PointerTons1__RESPONSE(soap, data, "ns1:RESPONSE", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__RESPONSE ** SOAP_FMAC4 soap_get_PointerTons1__RESPONSE(struct soap*, ns1__RESPONSE **, const char*, const char*);

#ifndef soap_read_PointerTons1__RESPONSE
#define soap_read_PointerTons1__RESPONSE(soap, data) ( ((data) ? (ns::soap_default_PointerTons1__RESPONSE(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTons1__RESPONSE(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTons1__LOGINRESPONSE
#define SOAP_TYPE_ns_PointerTons1__LOGINRESPONSE (153)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__LOGINRESPONSE(struct soap*, ns1__LOGINRESPONSE *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__LOGINRESPONSE(struct soap*, const char *, int, ns1__LOGINRESPONSE *const*, const char *);
SOAP_FMAC3 ns1__LOGINRESPONSE ** SOAP_FMAC4 soap_in_PointerTons1__LOGINRESPONSE(struct soap*, const char*, ns1__LOGINRESPONSE **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__LOGINRESPONSE(struct soap*, ns1__LOGINRESPONSE *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__LOGINRESPONSE
#define soap_write_PointerTons1__LOGINRESPONSE(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTons1__LOGINRESPONSE(soap, data), 0) || ns::soap_put_PointerTons1__LOGINRESPONSE(soap, data, "ns1:LOGINRESPONSE", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__LOGINRESPONSE ** SOAP_FMAC4 soap_get_PointerTons1__LOGINRESPONSE(struct soap*, ns1__LOGINRESPONSE **, const char*, const char*);

#ifndef soap_read_PointerTons1__LOGINRESPONSE
#define soap_read_PointerTons1__LOGINRESPONSE(soap, data) ( ((data) ? (ns::soap_default_PointerTons1__LOGINRESPONSE(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTons1__LOGINRESPONSE(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTons1__DATAFORMAT_USCORECOLUMN
#define SOAP_TYPE_ns_PointerTons1__DATAFORMAT_USCORECOLUMN (151)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__DATAFORMAT_USCORECOLUMN(struct soap*, ns1__DATAFORMAT_USCORECOLUMN *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__DATAFORMAT_USCORECOLUMN(struct soap*, const char *, int, ns1__DATAFORMAT_USCORECOLUMN *const*, const char *);
SOAP_FMAC3 ns1__DATAFORMAT_USCORECOLUMN ** SOAP_FMAC4 soap_in_PointerTons1__DATAFORMAT_USCORECOLUMN(struct soap*, const char*, ns1__DATAFORMAT_USCORECOLUMN **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__DATAFORMAT_USCORECOLUMN(struct soap*, ns1__DATAFORMAT_USCORECOLUMN *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__DATAFORMAT_USCORECOLUMN
#define soap_write_PointerTons1__DATAFORMAT_USCORECOLUMN(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTons1__DATAFORMAT_USCORECOLUMN(soap, data), 0) || ns::soap_put_PointerTons1__DATAFORMAT_USCORECOLUMN(soap, data, "ns1:DATAFORMAT_COLUMN", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__DATAFORMAT_USCORECOLUMN ** SOAP_FMAC4 soap_get_PointerTons1__DATAFORMAT_USCORECOLUMN(struct soap*, ns1__DATAFORMAT_USCORECOLUMN **, const char*, const char*);

#ifndef soap_read_PointerTons1__DATAFORMAT_USCORECOLUMN
#define soap_read_PointerTons1__DATAFORMAT_USCORECOLUMN(soap, data) ( ((data) ? (ns::soap_default_PointerTons1__DATAFORMAT_USCORECOLUMN(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTons1__DATAFORMAT_USCORECOLUMN(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTons1__ArrayOfDATAFORMAT_USCORECOLUMN
#define SOAP_TYPE_ns_PointerTons1__ArrayOfDATAFORMAT_USCORECOLUMN (150)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfDATAFORMAT_USCORECOLUMN(struct soap*, ns1__ArrayOfDATAFORMAT_USCORECOLUMN *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfDATAFORMAT_USCORECOLUMN(struct soap*, const char *, int, ns1__ArrayOfDATAFORMAT_USCORECOLUMN *const*, const char *);
SOAP_FMAC3 ns1__ArrayOfDATAFORMAT_USCORECOLUMN ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfDATAFORMAT_USCORECOLUMN(struct soap*, const char*, ns1__ArrayOfDATAFORMAT_USCORECOLUMN **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfDATAFORMAT_USCORECOLUMN(struct soap*, ns1__ArrayOfDATAFORMAT_USCORECOLUMN *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__ArrayOfDATAFORMAT_USCORECOLUMN
#define soap_write_PointerTons1__ArrayOfDATAFORMAT_USCORECOLUMN(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTons1__ArrayOfDATAFORMAT_USCORECOLUMN(soap, data), 0) || ns::soap_put_PointerTons1__ArrayOfDATAFORMAT_USCORECOLUMN(soap, data, "ns1:ArrayOfDATAFORMAT_COLUMN", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__ArrayOfDATAFORMAT_USCORECOLUMN ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfDATAFORMAT_USCORECOLUMN(struct soap*, ns1__ArrayOfDATAFORMAT_USCORECOLUMN **, const char*, const char*);

#ifndef soap_read_PointerTons1__ArrayOfDATAFORMAT_USCORECOLUMN
#define soap_read_PointerTons1__ArrayOfDATAFORMAT_USCORECOLUMN(soap, data) ( ((data) ? (ns::soap_default_PointerTons1__ArrayOfDATAFORMAT_USCORECOLUMN(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTons1__ArrayOfDATAFORMAT_USCORECOLUMN(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTons1__DATAFORMAT
#define SOAP_TYPE_ns_PointerTons1__DATAFORMAT (148)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__DATAFORMAT(struct soap*, ns1__DATAFORMAT *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__DATAFORMAT(struct soap*, const char *, int, ns1__DATAFORMAT *const*, const char *);
SOAP_FMAC3 ns1__DATAFORMAT ** SOAP_FMAC4 soap_in_PointerTons1__DATAFORMAT(struct soap*, const char*, ns1__DATAFORMAT **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__DATAFORMAT(struct soap*, ns1__DATAFORMAT *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__DATAFORMAT
#define soap_write_PointerTons1__DATAFORMAT(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTons1__DATAFORMAT(soap, data), 0) || ns::soap_put_PointerTons1__DATAFORMAT(soap, data, "ns1:DATAFORMAT", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__DATAFORMAT ** SOAP_FMAC4 soap_get_PointerTons1__DATAFORMAT(struct soap*, ns1__DATAFORMAT **, const char*, const char*);

#ifndef soap_read_PointerTons1__DATAFORMAT
#define soap_read_PointerTons1__DATAFORMAT(soap, data) ( ((data) ? (ns::soap_default_PointerTons1__DATAFORMAT(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTons1__DATAFORMAT(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTons1__NEWS
#define SOAP_TYPE_ns_PointerTons1__NEWS (146)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__NEWS(struct soap*, ns1__NEWS *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__NEWS(struct soap*, const char *, int, ns1__NEWS *const*, const char *);
SOAP_FMAC3 ns1__NEWS ** SOAP_FMAC4 soap_in_PointerTons1__NEWS(struct soap*, const char*, ns1__NEWS **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__NEWS(struct soap*, ns1__NEWS *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__NEWS
#define soap_write_PointerTons1__NEWS(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTons1__NEWS(soap, data), 0) || ns::soap_put_PointerTons1__NEWS(soap, data, "ns1:NEWS", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__NEWS ** SOAP_FMAC4 soap_get_PointerTons1__NEWS(struct soap*, ns1__NEWS **, const char*, const char*);

#ifndef soap_read_PointerTons1__NEWS
#define soap_read_PointerTons1__NEWS(soap, data) ( ((data) ? (ns::soap_default_PointerTons1__NEWS(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTons1__NEWS(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTons1__SYMBOLCHANGE
#define SOAP_TYPE_ns_PointerTons1__SYMBOLCHANGE (144)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SYMBOLCHANGE(struct soap*, ns1__SYMBOLCHANGE *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SYMBOLCHANGE(struct soap*, const char *, int, ns1__SYMBOLCHANGE *const*, const char *);
SOAP_FMAC3 ns1__SYMBOLCHANGE ** SOAP_FMAC4 soap_in_PointerTons1__SYMBOLCHANGE(struct soap*, const char*, ns1__SYMBOLCHANGE **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SYMBOLCHANGE(struct soap*, ns1__SYMBOLCHANGE *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__SYMBOLCHANGE
#define soap_write_PointerTons1__SYMBOLCHANGE(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTons1__SYMBOLCHANGE(soap, data), 0) || ns::soap_put_PointerTons1__SYMBOLCHANGE(soap, data, "ns1:SYMBOLCHANGE", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__SYMBOLCHANGE ** SOAP_FMAC4 soap_get_PointerTons1__SYMBOLCHANGE(struct soap*, ns1__SYMBOLCHANGE **, const char*, const char*);

#ifndef soap_read_PointerTons1__SYMBOLCHANGE
#define soap_read_PointerTons1__SYMBOLCHANGE(soap, data) ( ((data) ? (ns::soap_default_PointerTons1__SYMBOLCHANGE(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTons1__SYMBOLCHANGE(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTons1__TECHNICAL
#define SOAP_TYPE_ns_PointerTons1__TECHNICAL (142)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__TECHNICAL(struct soap*, ns1__TECHNICAL *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__TECHNICAL(struct soap*, const char *, int, ns1__TECHNICAL *const*, const char *);
SOAP_FMAC3 ns1__TECHNICAL ** SOAP_FMAC4 soap_in_PointerTons1__TECHNICAL(struct soap*, const char*, ns1__TECHNICAL **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__TECHNICAL(struct soap*, ns1__TECHNICAL *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__TECHNICAL
#define soap_write_PointerTons1__TECHNICAL(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTons1__TECHNICAL(soap, data), 0) || ns::soap_put_PointerTons1__TECHNICAL(soap, data, "ns1:TECHNICAL", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__TECHNICAL ** SOAP_FMAC4 soap_get_PointerTons1__TECHNICAL(struct soap*, ns1__TECHNICAL **, const char*, const char*);

#ifndef soap_read_PointerTons1__TECHNICAL
#define soap_read_PointerTons1__TECHNICAL(soap, data) ( ((data) ? (ns::soap_default_PointerTons1__TECHNICAL(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTons1__TECHNICAL(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTons1__FUNDAMENTAL
#define SOAP_TYPE_ns_PointerTons1__FUNDAMENTAL (140)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__FUNDAMENTAL(struct soap*, ns1__FUNDAMENTAL *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__FUNDAMENTAL(struct soap*, const char *, int, ns1__FUNDAMENTAL *const*, const char *);
SOAP_FMAC3 ns1__FUNDAMENTAL ** SOAP_FMAC4 soap_in_PointerTons1__FUNDAMENTAL(struct soap*, const char*, ns1__FUNDAMENTAL **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__FUNDAMENTAL(struct soap*, ns1__FUNDAMENTAL *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__FUNDAMENTAL
#define soap_write_PointerTons1__FUNDAMENTAL(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTons1__FUNDAMENTAL(soap, data), 0) || ns::soap_put_PointerTons1__FUNDAMENTAL(soap, data, "ns1:FUNDAMENTAL", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__FUNDAMENTAL ** SOAP_FMAC4 soap_get_PointerTons1__FUNDAMENTAL(struct soap*, ns1__FUNDAMENTAL **, const char*, const char*);

#ifndef soap_read_PointerTons1__FUNDAMENTAL
#define soap_read_PointerTons1__FUNDAMENTAL(soap, data) ( ((data) ? (ns::soap_default_PointerTons1__FUNDAMENTAL(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTons1__FUNDAMENTAL(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTons1__CountryBase
#define SOAP_TYPE_ns_PointerTons1__CountryBase (138)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CountryBase(struct soap*, ns1__CountryBase *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CountryBase(struct soap*, const char *, int, ns1__CountryBase *const*, const char *);
SOAP_FMAC3 ns1__CountryBase ** SOAP_FMAC4 soap_in_PointerTons1__CountryBase(struct soap*, const char*, ns1__CountryBase **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CountryBase(struct soap*, ns1__CountryBase *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__CountryBase
#define soap_write_PointerTons1__CountryBase(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTons1__CountryBase(soap, data), 0) || ns::soap_put_PointerTons1__CountryBase(soap, data, "ns1:CountryBase", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__CountryBase ** SOAP_FMAC4 soap_get_PointerTons1__CountryBase(struct soap*, ns1__CountryBase **, const char*, const char*);

#ifndef soap_read_PointerTons1__CountryBase
#define soap_read_PointerTons1__CountryBase(soap, data) ( ((data) ? (ns::soap_default_PointerTons1__CountryBase(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTons1__CountryBase(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTons1__SPLIT
#define SOAP_TYPE_ns_PointerTons1__SPLIT (136)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SPLIT(struct soap*, ns1__SPLIT *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SPLIT(struct soap*, const char *, int, ns1__SPLIT *const*, const char *);
SOAP_FMAC3 ns1__SPLIT ** SOAP_FMAC4 soap_in_PointerTons1__SPLIT(struct soap*, const char*, ns1__SPLIT **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SPLIT(struct soap*, ns1__SPLIT *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__SPLIT
#define soap_write_PointerTons1__SPLIT(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTons1__SPLIT(soap, data), 0) || ns::soap_put_PointerTons1__SPLIT(soap, data, "ns1:SPLIT", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__SPLIT ** SOAP_FMAC4 soap_get_PointerTons1__SPLIT(struct soap*, ns1__SPLIT **, const char*, const char*);

#ifndef soap_read_PointerTons1__SPLIT
#define soap_read_PointerTons1__SPLIT(soap, data) ( ((data) ? (ns::soap_default_PointerTons1__SPLIT(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTons1__SPLIT(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTons1__QUOTE2
#define SOAP_TYPE_ns_PointerTons1__QUOTE2 (134)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__QUOTE2(struct soap*, ns1__QUOTE2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__QUOTE2(struct soap*, const char *, int, ns1__QUOTE2 *const*, const char *);
SOAP_FMAC3 ns1__QUOTE2 ** SOAP_FMAC4 soap_in_PointerTons1__QUOTE2(struct soap*, const char*, ns1__QUOTE2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__QUOTE2(struct soap*, ns1__QUOTE2 *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__QUOTE2
#define soap_write_PointerTons1__QUOTE2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTons1__QUOTE2(soap, data), 0) || ns::soap_put_PointerTons1__QUOTE2(soap, data, "ns1:QUOTE2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__QUOTE2 ** SOAP_FMAC4 soap_get_PointerTons1__QUOTE2(struct soap*, ns1__QUOTE2 **, const char*, const char*);

#ifndef soap_read_PointerTons1__QUOTE2
#define soap_read_PointerTons1__QUOTE2(soap, data) ( ((data) ? (ns::soap_default_PointerTons1__QUOTE2(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTons1__QUOTE2(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTons1__SYMBOL2
#define SOAP_TYPE_ns_PointerTons1__SYMBOL2 (129)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SYMBOL2(struct soap*, ns1__SYMBOL2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SYMBOL2(struct soap*, const char *, int, ns1__SYMBOL2 *const*, const char *);
SOAP_FMAC3 ns1__SYMBOL2 ** SOAP_FMAC4 soap_in_PointerTons1__SYMBOL2(struct soap*, const char*, ns1__SYMBOL2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SYMBOL2(struct soap*, ns1__SYMBOL2 *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__SYMBOL2
#define soap_write_PointerTons1__SYMBOL2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTons1__SYMBOL2(soap, data), 0) || ns::soap_put_PointerTons1__SYMBOL2(soap, data, "ns1:SYMBOL2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__SYMBOL2 ** SOAP_FMAC4 soap_get_PointerTons1__SYMBOL2(struct soap*, ns1__SYMBOL2 **, const char*, const char*);

#ifndef soap_read_PointerTons1__SYMBOL2
#define soap_read_PointerTons1__SYMBOL2(soap, data) ( ((data) ? (ns::soap_default_PointerTons1__SYMBOL2(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTons1__SYMBOL2(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTons1__ArrayOfDATAFORMAT
#define SOAP_TYPE_ns_PointerTons1__ArrayOfDATAFORMAT (125)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfDATAFORMAT(struct soap*, ns1__ArrayOfDATAFORMAT *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfDATAFORMAT(struct soap*, const char *, int, ns1__ArrayOfDATAFORMAT *const*, const char *);
SOAP_FMAC3 ns1__ArrayOfDATAFORMAT ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfDATAFORMAT(struct soap*, const char*, ns1__ArrayOfDATAFORMAT **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfDATAFORMAT(struct soap*, ns1__ArrayOfDATAFORMAT *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__ArrayOfDATAFORMAT
#define soap_write_PointerTons1__ArrayOfDATAFORMAT(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTons1__ArrayOfDATAFORMAT(soap, data), 0) || ns::soap_put_PointerTons1__ArrayOfDATAFORMAT(soap, data, "ns1:ArrayOfDATAFORMAT", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__ArrayOfDATAFORMAT ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfDATAFORMAT(struct soap*, ns1__ArrayOfDATAFORMAT **, const char*, const char*);

#ifndef soap_read_PointerTons1__ArrayOfDATAFORMAT
#define soap_read_PointerTons1__ArrayOfDATAFORMAT(soap, data) ( ((data) ? (ns::soap_default_PointerTons1__ArrayOfDATAFORMAT(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTons1__ArrayOfDATAFORMAT(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTons1__ArrayOfNEWS
#define SOAP_TYPE_ns_PointerTons1__ArrayOfNEWS (124)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfNEWS(struct soap*, ns1__ArrayOfNEWS *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfNEWS(struct soap*, const char *, int, ns1__ArrayOfNEWS *const*, const char *);
SOAP_FMAC3 ns1__ArrayOfNEWS ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfNEWS(struct soap*, const char*, ns1__ArrayOfNEWS **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfNEWS(struct soap*, ns1__ArrayOfNEWS *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__ArrayOfNEWS
#define soap_write_PointerTons1__ArrayOfNEWS(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTons1__ArrayOfNEWS(soap, data), 0) || ns::soap_put_PointerTons1__ArrayOfNEWS(soap, data, "ns1:ArrayOfNEWS", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__ArrayOfNEWS ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfNEWS(struct soap*, ns1__ArrayOfNEWS **, const char*, const char*);

#ifndef soap_read_PointerTons1__ArrayOfNEWS
#define soap_read_PointerTons1__ArrayOfNEWS(soap, data) ( ((data) ? (ns::soap_default_PointerTons1__ArrayOfNEWS(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTons1__ArrayOfNEWS(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTons1__ArrayOfSYMBOLCHANGE
#define SOAP_TYPE_ns_PointerTons1__ArrayOfSYMBOLCHANGE (123)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfSYMBOLCHANGE(struct soap*, ns1__ArrayOfSYMBOLCHANGE *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfSYMBOLCHANGE(struct soap*, const char *, int, ns1__ArrayOfSYMBOLCHANGE *const*, const char *);
SOAP_FMAC3 ns1__ArrayOfSYMBOLCHANGE ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfSYMBOLCHANGE(struct soap*, const char*, ns1__ArrayOfSYMBOLCHANGE **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfSYMBOLCHANGE(struct soap*, ns1__ArrayOfSYMBOLCHANGE *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__ArrayOfSYMBOLCHANGE
#define soap_write_PointerTons1__ArrayOfSYMBOLCHANGE(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTons1__ArrayOfSYMBOLCHANGE(soap, data), 0) || ns::soap_put_PointerTons1__ArrayOfSYMBOLCHANGE(soap, data, "ns1:ArrayOfSYMBOLCHANGE", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__ArrayOfSYMBOLCHANGE ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfSYMBOLCHANGE(struct soap*, ns1__ArrayOfSYMBOLCHANGE **, const char*, const char*);

#ifndef soap_read_PointerTons1__ArrayOfSYMBOLCHANGE
#define soap_read_PointerTons1__ArrayOfSYMBOLCHANGE(soap, data) ( ((data) ? (ns::soap_default_PointerTons1__ArrayOfSYMBOLCHANGE(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTons1__ArrayOfSYMBOLCHANGE(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTons1__ArrayOfTECHNICAL
#define SOAP_TYPE_ns_PointerTons1__ArrayOfTECHNICAL (122)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfTECHNICAL(struct soap*, ns1__ArrayOfTECHNICAL *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfTECHNICAL(struct soap*, const char *, int, ns1__ArrayOfTECHNICAL *const*, const char *);
SOAP_FMAC3 ns1__ArrayOfTECHNICAL ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfTECHNICAL(struct soap*, const char*, ns1__ArrayOfTECHNICAL **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfTECHNICAL(struct soap*, ns1__ArrayOfTECHNICAL *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__ArrayOfTECHNICAL
#define soap_write_PointerTons1__ArrayOfTECHNICAL(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTons1__ArrayOfTECHNICAL(soap, data), 0) || ns::soap_put_PointerTons1__ArrayOfTECHNICAL(soap, data, "ns1:ArrayOfTECHNICAL", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__ArrayOfTECHNICAL ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfTECHNICAL(struct soap*, ns1__ArrayOfTECHNICAL **, const char*, const char*);

#ifndef soap_read_PointerTons1__ArrayOfTECHNICAL
#define soap_read_PointerTons1__ArrayOfTECHNICAL(soap, data) ( ((data) ? (ns::soap_default_PointerTons1__ArrayOfTECHNICAL(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTons1__ArrayOfTECHNICAL(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTons1__ArrayOfFUNDAMENTAL
#define SOAP_TYPE_ns_PointerTons1__ArrayOfFUNDAMENTAL (121)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfFUNDAMENTAL(struct soap*, ns1__ArrayOfFUNDAMENTAL *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfFUNDAMENTAL(struct soap*, const char *, int, ns1__ArrayOfFUNDAMENTAL *const*, const char *);
SOAP_FMAC3 ns1__ArrayOfFUNDAMENTAL ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfFUNDAMENTAL(struct soap*, const char*, ns1__ArrayOfFUNDAMENTAL **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfFUNDAMENTAL(struct soap*, ns1__ArrayOfFUNDAMENTAL *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__ArrayOfFUNDAMENTAL
#define soap_write_PointerTons1__ArrayOfFUNDAMENTAL(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTons1__ArrayOfFUNDAMENTAL(soap, data), 0) || ns::soap_put_PointerTons1__ArrayOfFUNDAMENTAL(soap, data, "ns1:ArrayOfFUNDAMENTAL", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__ArrayOfFUNDAMENTAL ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfFUNDAMENTAL(struct soap*, ns1__ArrayOfFUNDAMENTAL **, const char*, const char*);

#ifndef soap_read_PointerTons1__ArrayOfFUNDAMENTAL
#define soap_read_PointerTons1__ArrayOfFUNDAMENTAL(soap, data) ( ((data) ? (ns::soap_default_PointerTons1__ArrayOfFUNDAMENTAL(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTons1__ArrayOfFUNDAMENTAL(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTons1__ArrayOfCountryBase
#define SOAP_TYPE_ns_PointerTons1__ArrayOfCountryBase (120)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfCountryBase(struct soap*, ns1__ArrayOfCountryBase *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfCountryBase(struct soap*, const char *, int, ns1__ArrayOfCountryBase *const*, const char *);
SOAP_FMAC3 ns1__ArrayOfCountryBase ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfCountryBase(struct soap*, const char*, ns1__ArrayOfCountryBase **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfCountryBase(struct soap*, ns1__ArrayOfCountryBase *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__ArrayOfCountryBase
#define soap_write_PointerTons1__ArrayOfCountryBase(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTons1__ArrayOfCountryBase(soap, data), 0) || ns::soap_put_PointerTons1__ArrayOfCountryBase(soap, data, "ns1:ArrayOfCountryBase", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__ArrayOfCountryBase ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfCountryBase(struct soap*, ns1__ArrayOfCountryBase **, const char*, const char*);

#ifndef soap_read_PointerTons1__ArrayOfCountryBase
#define soap_read_PointerTons1__ArrayOfCountryBase(soap, data) ( ((data) ? (ns::soap_default_PointerTons1__ArrayOfCountryBase(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTons1__ArrayOfCountryBase(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTons1__ArrayOfSPLIT
#define SOAP_TYPE_ns_PointerTons1__ArrayOfSPLIT (119)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfSPLIT(struct soap*, ns1__ArrayOfSPLIT *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfSPLIT(struct soap*, const char *, int, ns1__ArrayOfSPLIT *const*, const char *);
SOAP_FMAC3 ns1__ArrayOfSPLIT ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfSPLIT(struct soap*, const char*, ns1__ArrayOfSPLIT **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfSPLIT(struct soap*, ns1__ArrayOfSPLIT *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__ArrayOfSPLIT
#define soap_write_PointerTons1__ArrayOfSPLIT(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTons1__ArrayOfSPLIT(soap, data), 0) || ns::soap_put_PointerTons1__ArrayOfSPLIT(soap, data, "ns1:ArrayOfSPLIT", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__ArrayOfSPLIT ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfSPLIT(struct soap*, ns1__ArrayOfSPLIT **, const char*, const char*);

#ifndef soap_read_PointerTons1__ArrayOfSPLIT
#define soap_read_PointerTons1__ArrayOfSPLIT(soap, data) ( ((data) ? (ns::soap_default_PointerTons1__ArrayOfSPLIT(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTons1__ArrayOfSPLIT(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTons1__ArrayOfQUOTE2
#define SOAP_TYPE_ns_PointerTons1__ArrayOfQUOTE2 (118)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfQUOTE2(struct soap*, ns1__ArrayOfQUOTE2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfQUOTE2(struct soap*, const char *, int, ns1__ArrayOfQUOTE2 *const*, const char *);
SOAP_FMAC3 ns1__ArrayOfQUOTE2 ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfQUOTE2(struct soap*, const char*, ns1__ArrayOfQUOTE2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfQUOTE2(struct soap*, ns1__ArrayOfQUOTE2 *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__ArrayOfQUOTE2
#define soap_write_PointerTons1__ArrayOfQUOTE2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTons1__ArrayOfQUOTE2(soap, data), 0) || ns::soap_put_PointerTons1__ArrayOfQUOTE2(soap, data, "ns1:ArrayOfQUOTE2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__ArrayOfQUOTE2 ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfQUOTE2(struct soap*, ns1__ArrayOfQUOTE2 **, const char*, const char*);

#ifndef soap_read_PointerTons1__ArrayOfQUOTE2
#define soap_read_PointerTons1__ArrayOfQUOTE2(soap, data) ( ((data) ? (ns::soap_default_PointerTons1__ArrayOfQUOTE2(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTons1__ArrayOfQUOTE2(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTons1__ArrayOfQUOTE
#define SOAP_TYPE_ns_PointerTons1__ArrayOfQUOTE (117)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfQUOTE(struct soap*, ns1__ArrayOfQUOTE *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfQUOTE(struct soap*, const char *, int, ns1__ArrayOfQUOTE *const*, const char *);
SOAP_FMAC3 ns1__ArrayOfQUOTE ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfQUOTE(struct soap*, const char*, ns1__ArrayOfQUOTE **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfQUOTE(struct soap*, ns1__ArrayOfQUOTE *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__ArrayOfQUOTE
#define soap_write_PointerTons1__ArrayOfQUOTE(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTons1__ArrayOfQUOTE(soap, data), 0) || ns::soap_put_PointerTons1__ArrayOfQUOTE(soap, data, "ns1:ArrayOfQUOTE", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__ArrayOfQUOTE ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfQUOTE(struct soap*, ns1__ArrayOfQUOTE **, const char*, const char*);

#ifndef soap_read_PointerTons1__ArrayOfQUOTE
#define soap_read_PointerTons1__ArrayOfQUOTE(soap, data) ( ((data) ? (ns::soap_default_PointerTons1__ArrayOfQUOTE(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTons1__ArrayOfQUOTE(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTons1__QUOTE
#define SOAP_TYPE_ns_PointerTons1__QUOTE (116)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__QUOTE(struct soap*, ns1__QUOTE *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__QUOTE(struct soap*, const char *, int, ns1__QUOTE *const*, const char *);
SOAP_FMAC3 ns1__QUOTE ** SOAP_FMAC4 soap_in_PointerTons1__QUOTE(struct soap*, const char*, ns1__QUOTE **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__QUOTE(struct soap*, ns1__QUOTE *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__QUOTE
#define soap_write_PointerTons1__QUOTE(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTons1__QUOTE(soap, data), 0) || ns::soap_put_PointerTons1__QUOTE(soap, data, "ns1:QUOTE", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__QUOTE ** SOAP_FMAC4 soap_get_PointerTons1__QUOTE(struct soap*, ns1__QUOTE **, const char*, const char*);

#ifndef soap_read_PointerTons1__QUOTE
#define soap_read_PointerTons1__QUOTE(soap, data) ( ((data) ? (ns::soap_default_PointerTons1__QUOTE(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTons1__QUOTE(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTons1__ArrayOfSYMBOL2
#define SOAP_TYPE_ns_PointerTons1__ArrayOfSYMBOL2 (115)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfSYMBOL2(struct soap*, ns1__ArrayOfSYMBOL2 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfSYMBOL2(struct soap*, const char *, int, ns1__ArrayOfSYMBOL2 *const*, const char *);
SOAP_FMAC3 ns1__ArrayOfSYMBOL2 ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfSYMBOL2(struct soap*, const char*, ns1__ArrayOfSYMBOL2 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfSYMBOL2(struct soap*, ns1__ArrayOfSYMBOL2 *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__ArrayOfSYMBOL2
#define soap_write_PointerTons1__ArrayOfSYMBOL2(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTons1__ArrayOfSYMBOL2(soap, data), 0) || ns::soap_put_PointerTons1__ArrayOfSYMBOL2(soap, data, "ns1:ArrayOfSYMBOL2", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__ArrayOfSYMBOL2 ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfSYMBOL2(struct soap*, ns1__ArrayOfSYMBOL2 **, const char*, const char*);

#ifndef soap_read_PointerTons1__ArrayOfSYMBOL2
#define soap_read_PointerTons1__ArrayOfSYMBOL2(soap, data) ( ((data) ? (ns::soap_default_PointerTons1__ArrayOfSYMBOL2(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTons1__ArrayOfSYMBOL2(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTons1__ArrayOfSYMBOL
#define SOAP_TYPE_ns_PointerTons1__ArrayOfSYMBOL (114)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfSYMBOL(struct soap*, ns1__ArrayOfSYMBOL *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfSYMBOL(struct soap*, const char *, int, ns1__ArrayOfSYMBOL *const*, const char *);
SOAP_FMAC3 ns1__ArrayOfSYMBOL ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfSYMBOL(struct soap*, const char*, ns1__ArrayOfSYMBOL **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfSYMBOL(struct soap*, ns1__ArrayOfSYMBOL *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__ArrayOfSYMBOL
#define soap_write_PointerTons1__ArrayOfSYMBOL(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTons1__ArrayOfSYMBOL(soap, data), 0) || ns::soap_put_PointerTons1__ArrayOfSYMBOL(soap, data, "ns1:ArrayOfSYMBOL", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__ArrayOfSYMBOL ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfSYMBOL(struct soap*, ns1__ArrayOfSYMBOL **, const char*, const char*);

#ifndef soap_read_PointerTons1__ArrayOfSYMBOL
#define soap_read_PointerTons1__ArrayOfSYMBOL(soap, data) ( ((data) ? (ns::soap_default_PointerTons1__ArrayOfSYMBOL(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTons1__ArrayOfSYMBOL(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTons1__SYMBOL
#define SOAP_TYPE_ns_PointerTons1__SYMBOL (113)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SYMBOL(struct soap*, ns1__SYMBOL *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SYMBOL(struct soap*, const char *, int, ns1__SYMBOL *const*, const char *);
SOAP_FMAC3 ns1__SYMBOL ** SOAP_FMAC4 soap_in_PointerTons1__SYMBOL(struct soap*, const char*, ns1__SYMBOL **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SYMBOL(struct soap*, ns1__SYMBOL *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__SYMBOL
#define soap_write_PointerTons1__SYMBOL(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTons1__SYMBOL(soap, data), 0) || ns::soap_put_PointerTons1__SYMBOL(soap, data, "ns1:SYMBOL", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__SYMBOL ** SOAP_FMAC4 soap_get_PointerTons1__SYMBOL(struct soap*, ns1__SYMBOL **, const char*, const char*);

#ifndef soap_read_PointerTons1__SYMBOL
#define soap_read_PointerTons1__SYMBOL(soap, data) ( ((data) ? (ns::soap_default_PointerTons1__SYMBOL(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTons1__SYMBOL(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTons1__ArrayOfEXCHANGE
#define SOAP_TYPE_ns_PointerTons1__ArrayOfEXCHANGE (112)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfEXCHANGE(struct soap*, ns1__ArrayOfEXCHANGE *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfEXCHANGE(struct soap*, const char *, int, ns1__ArrayOfEXCHANGE *const*, const char *);
SOAP_FMAC3 ns1__ArrayOfEXCHANGE ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfEXCHANGE(struct soap*, const char*, ns1__ArrayOfEXCHANGE **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfEXCHANGE(struct soap*, ns1__ArrayOfEXCHANGE *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__ArrayOfEXCHANGE
#define soap_write_PointerTons1__ArrayOfEXCHANGE(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTons1__ArrayOfEXCHANGE(soap, data), 0) || ns::soap_put_PointerTons1__ArrayOfEXCHANGE(soap, data, "ns1:ArrayOfEXCHANGE", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__ArrayOfEXCHANGE ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfEXCHANGE(struct soap*, ns1__ArrayOfEXCHANGE **, const char*, const char*);

#ifndef soap_read_PointerTons1__ArrayOfEXCHANGE
#define soap_read_PointerTons1__ArrayOfEXCHANGE(soap, data) ( ((data) ? (ns::soap_default_PointerTons1__ArrayOfEXCHANGE(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTons1__ArrayOfEXCHANGE(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTons1__EXCHANGE
#define SOAP_TYPE_ns_PointerTons1__EXCHANGE (111)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__EXCHANGE(struct soap*, ns1__EXCHANGE *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__EXCHANGE(struct soap*, const char *, int, ns1__EXCHANGE *const*, const char *);
SOAP_FMAC3 ns1__EXCHANGE ** SOAP_FMAC4 soap_in_PointerTons1__EXCHANGE(struct soap*, const char*, ns1__EXCHANGE **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__EXCHANGE(struct soap*, ns1__EXCHANGE *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__EXCHANGE
#define soap_write_PointerTons1__EXCHANGE(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTons1__EXCHANGE(soap, data), 0) || ns::soap_put_PointerTons1__EXCHANGE(soap, data, "ns1:EXCHANGE", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns1__EXCHANGE ** SOAP_FMAC4 soap_get_PointerTons1__EXCHANGE(struct soap*, ns1__EXCHANGE **, const char*, const char*);

#ifndef soap_read_PointerTons1__EXCHANGE
#define soap_read_PointerTons1__EXCHANGE(soap, data) ( ((data) ? (ns::soap_default_PointerTons1__EXCHANGE(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTons1__EXCHANGE(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_PointerTostd__string
#define SOAP_TYPE_ns_PointerTostd__string (108)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTostd__string
#define soap_write_PointerTostd__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_PointerTostd__string(soap, data), 0) || ns::soap_put_PointerTostd__string(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTostd__string
#define soap_read_PointerTostd__string(soap, data) ( ((data) ? (ns::soap_default_PointerTostd__string(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_PointerTostd__string(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__QName
#define SOAP_TYPE_ns__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize__QName(soap, data), 0) || ns::soap_put__QName(soap, data, "QName", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( ((data) ? (ns::soap_default__QName(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get__QName(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_string
#define SOAP_TYPE_ns_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (ns::soap_serialize_string(soap, data), 0) || ns::soap_put_string(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( ((data) ? (ns::soap_default_string(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !ns::soap_get_string(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns_std__vectorTemplateOfPointerTons1__DATAFORMAT_USCORECOLUMN
#define SOAP_TYPE_ns_std__vectorTemplateOfPointerTons1__DATAFORMAT_USCORECOLUMN (152)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__DATAFORMAT_USCORECOLUMN(struct soap*, std::vector<ns1__DATAFORMAT_USCORECOLUMN *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__DATAFORMAT_USCORECOLUMN(struct soap*, const std::vector<ns1__DATAFORMAT_USCORECOLUMN *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__DATAFORMAT_USCORECOLUMN(struct soap*, const char*, int, const std::vector<ns1__DATAFORMAT_USCORECOLUMN *> *, const char*);
SOAP_FMAC3 std::vector<ns1__DATAFORMAT_USCORECOLUMN *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__DATAFORMAT_USCORECOLUMN(struct soap*, const char*, std::vector<ns1__DATAFORMAT_USCORECOLUMN *> *, const char*);
SOAP_FMAC1 std::vector<ns1__DATAFORMAT_USCORECOLUMN *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__DATAFORMAT_USCORECOLUMN(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__DATAFORMAT_USCORECOLUMN *>  * soap_new_std__vectorTemplateOfPointerTons1__DATAFORMAT_USCORECOLUMN(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons1__DATAFORMAT_USCORECOLUMN(soap, n, NULL, NULL, NULL); }

#ifndef SOAP_TYPE_ns_std__vectorTemplateOfPointerTons1__DATAFORMAT
#define SOAP_TYPE_ns_std__vectorTemplateOfPointerTons1__DATAFORMAT (149)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__DATAFORMAT(struct soap*, std::vector<ns1__DATAFORMAT *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__DATAFORMAT(struct soap*, const std::vector<ns1__DATAFORMAT *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__DATAFORMAT(struct soap*, const char*, int, const std::vector<ns1__DATAFORMAT *> *, const char*);
SOAP_FMAC3 std::vector<ns1__DATAFORMAT *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__DATAFORMAT(struct soap*, const char*, std::vector<ns1__DATAFORMAT *> *, const char*);
SOAP_FMAC1 std::vector<ns1__DATAFORMAT *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__DATAFORMAT(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__DATAFORMAT *>  * soap_new_std__vectorTemplateOfPointerTons1__DATAFORMAT(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons1__DATAFORMAT(soap, n, NULL, NULL, NULL); }

#ifndef SOAP_TYPE_ns_std__vectorTemplateOfPointerTons1__NEWS
#define SOAP_TYPE_ns_std__vectorTemplateOfPointerTons1__NEWS (147)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__NEWS(struct soap*, std::vector<ns1__NEWS *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__NEWS(struct soap*, const std::vector<ns1__NEWS *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__NEWS(struct soap*, const char*, int, const std::vector<ns1__NEWS *> *, const char*);
SOAP_FMAC3 std::vector<ns1__NEWS *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__NEWS(struct soap*, const char*, std::vector<ns1__NEWS *> *, const char*);
SOAP_FMAC1 std::vector<ns1__NEWS *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__NEWS(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__NEWS *>  * soap_new_std__vectorTemplateOfPointerTons1__NEWS(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons1__NEWS(soap, n, NULL, NULL, NULL); }

#ifndef SOAP_TYPE_ns_std__vectorTemplateOfPointerTons1__SYMBOLCHANGE
#define SOAP_TYPE_ns_std__vectorTemplateOfPointerTons1__SYMBOLCHANGE (145)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__SYMBOLCHANGE(struct soap*, std::vector<ns1__SYMBOLCHANGE *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__SYMBOLCHANGE(struct soap*, const std::vector<ns1__SYMBOLCHANGE *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__SYMBOLCHANGE(struct soap*, const char*, int, const std::vector<ns1__SYMBOLCHANGE *> *, const char*);
SOAP_FMAC3 std::vector<ns1__SYMBOLCHANGE *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__SYMBOLCHANGE(struct soap*, const char*, std::vector<ns1__SYMBOLCHANGE *> *, const char*);
SOAP_FMAC1 std::vector<ns1__SYMBOLCHANGE *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__SYMBOLCHANGE(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__SYMBOLCHANGE *>  * soap_new_std__vectorTemplateOfPointerTons1__SYMBOLCHANGE(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons1__SYMBOLCHANGE(soap, n, NULL, NULL, NULL); }

#ifndef SOAP_TYPE_ns_std__vectorTemplateOfPointerTons1__TECHNICAL
#define SOAP_TYPE_ns_std__vectorTemplateOfPointerTons1__TECHNICAL (143)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__TECHNICAL(struct soap*, std::vector<ns1__TECHNICAL *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__TECHNICAL(struct soap*, const std::vector<ns1__TECHNICAL *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__TECHNICAL(struct soap*, const char*, int, const std::vector<ns1__TECHNICAL *> *, const char*);
SOAP_FMAC3 std::vector<ns1__TECHNICAL *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__TECHNICAL(struct soap*, const char*, std::vector<ns1__TECHNICAL *> *, const char*);
SOAP_FMAC1 std::vector<ns1__TECHNICAL *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__TECHNICAL(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__TECHNICAL *>  * soap_new_std__vectorTemplateOfPointerTons1__TECHNICAL(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons1__TECHNICAL(soap, n, NULL, NULL, NULL); }

#ifndef SOAP_TYPE_ns_std__vectorTemplateOfPointerTons1__FUNDAMENTAL
#define SOAP_TYPE_ns_std__vectorTemplateOfPointerTons1__FUNDAMENTAL (141)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__FUNDAMENTAL(struct soap*, std::vector<ns1__FUNDAMENTAL *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__FUNDAMENTAL(struct soap*, const std::vector<ns1__FUNDAMENTAL *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__FUNDAMENTAL(struct soap*, const char*, int, const std::vector<ns1__FUNDAMENTAL *> *, const char*);
SOAP_FMAC3 std::vector<ns1__FUNDAMENTAL *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__FUNDAMENTAL(struct soap*, const char*, std::vector<ns1__FUNDAMENTAL *> *, const char*);
SOAP_FMAC1 std::vector<ns1__FUNDAMENTAL *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__FUNDAMENTAL(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__FUNDAMENTAL *>  * soap_new_std__vectorTemplateOfPointerTons1__FUNDAMENTAL(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons1__FUNDAMENTAL(soap, n, NULL, NULL, NULL); }

#ifndef SOAP_TYPE_ns_std__vectorTemplateOfPointerTons1__CountryBase
#define SOAP_TYPE_ns_std__vectorTemplateOfPointerTons1__CountryBase (139)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__CountryBase(struct soap*, std::vector<ns1__CountryBase *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__CountryBase(struct soap*, const std::vector<ns1__CountryBase *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__CountryBase(struct soap*, const char*, int, const std::vector<ns1__CountryBase *> *, const char*);
SOAP_FMAC3 std::vector<ns1__CountryBase *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__CountryBase(struct soap*, const char*, std::vector<ns1__CountryBase *> *, const char*);
SOAP_FMAC1 std::vector<ns1__CountryBase *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__CountryBase(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__CountryBase *>  * soap_new_std__vectorTemplateOfPointerTons1__CountryBase(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons1__CountryBase(soap, n, NULL, NULL, NULL); }

#ifndef SOAP_TYPE_ns_std__vectorTemplateOfPointerTons1__SPLIT
#define SOAP_TYPE_ns_std__vectorTemplateOfPointerTons1__SPLIT (137)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__SPLIT(struct soap*, std::vector<ns1__SPLIT *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__SPLIT(struct soap*, const std::vector<ns1__SPLIT *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__SPLIT(struct soap*, const char*, int, const std::vector<ns1__SPLIT *> *, const char*);
SOAP_FMAC3 std::vector<ns1__SPLIT *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__SPLIT(struct soap*, const char*, std::vector<ns1__SPLIT *> *, const char*);
SOAP_FMAC1 std::vector<ns1__SPLIT *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__SPLIT(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__SPLIT *>  * soap_new_std__vectorTemplateOfPointerTons1__SPLIT(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons1__SPLIT(soap, n, NULL, NULL, NULL); }

#ifndef SOAP_TYPE_ns_std__vectorTemplateOfPointerTons1__QUOTE2
#define SOAP_TYPE_ns_std__vectorTemplateOfPointerTons1__QUOTE2 (135)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__QUOTE2(struct soap*, std::vector<ns1__QUOTE2 *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__QUOTE2(struct soap*, const std::vector<ns1__QUOTE2 *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__QUOTE2(struct soap*, const char*, int, const std::vector<ns1__QUOTE2 *> *, const char*);
SOAP_FMAC3 std::vector<ns1__QUOTE2 *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__QUOTE2(struct soap*, const char*, std::vector<ns1__QUOTE2 *> *, const char*);
SOAP_FMAC1 std::vector<ns1__QUOTE2 *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__QUOTE2(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__QUOTE2 *>  * soap_new_std__vectorTemplateOfPointerTons1__QUOTE2(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons1__QUOTE2(soap, n, NULL, NULL, NULL); }

#ifndef SOAP_TYPE_ns_std__vectorTemplateOfPointerTons1__QUOTE
#define SOAP_TYPE_ns_std__vectorTemplateOfPointerTons1__QUOTE (133)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__QUOTE(struct soap*, std::vector<ns1__QUOTE *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__QUOTE(struct soap*, const std::vector<ns1__QUOTE *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__QUOTE(struct soap*, const char*, int, const std::vector<ns1__QUOTE *> *, const char*);
SOAP_FMAC3 std::vector<ns1__QUOTE *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__QUOTE(struct soap*, const char*, std::vector<ns1__QUOTE *> *, const char*);
SOAP_FMAC1 std::vector<ns1__QUOTE *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__QUOTE(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__QUOTE *>  * soap_new_std__vectorTemplateOfPointerTons1__QUOTE(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons1__QUOTE(soap, n, NULL, NULL, NULL); }

#ifndef SOAP_TYPE_ns_std__vectorTemplateOfPointerTons1__SYMBOL2
#define SOAP_TYPE_ns_std__vectorTemplateOfPointerTons1__SYMBOL2 (130)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__SYMBOL2(struct soap*, std::vector<ns1__SYMBOL2 *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__SYMBOL2(struct soap*, const std::vector<ns1__SYMBOL2 *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__SYMBOL2(struct soap*, const char*, int, const std::vector<ns1__SYMBOL2 *> *, const char*);
SOAP_FMAC3 std::vector<ns1__SYMBOL2 *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__SYMBOL2(struct soap*, const char*, std::vector<ns1__SYMBOL2 *> *, const char*);
SOAP_FMAC1 std::vector<ns1__SYMBOL2 *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__SYMBOL2(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__SYMBOL2 *>  * soap_new_std__vectorTemplateOfPointerTons1__SYMBOL2(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons1__SYMBOL2(soap, n, NULL, NULL, NULL); }

#ifndef SOAP_TYPE_ns_std__vectorTemplateOfPointerTons1__SYMBOL
#define SOAP_TYPE_ns_std__vectorTemplateOfPointerTons1__SYMBOL (128)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__SYMBOL(struct soap*, std::vector<ns1__SYMBOL *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__SYMBOL(struct soap*, const std::vector<ns1__SYMBOL *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__SYMBOL(struct soap*, const char*, int, const std::vector<ns1__SYMBOL *> *, const char*);
SOAP_FMAC3 std::vector<ns1__SYMBOL *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__SYMBOL(struct soap*, const char*, std::vector<ns1__SYMBOL *> *, const char*);
SOAP_FMAC1 std::vector<ns1__SYMBOL *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__SYMBOL(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__SYMBOL *>  * soap_new_std__vectorTemplateOfPointerTons1__SYMBOL(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons1__SYMBOL(soap, n, NULL, NULL, NULL); }

#ifndef SOAP_TYPE_ns_std__vectorTemplateOfPointerTons1__EXCHANGE
#define SOAP_TYPE_ns_std__vectorTemplateOfPointerTons1__EXCHANGE (127)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__EXCHANGE(struct soap*, std::vector<ns1__EXCHANGE *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__EXCHANGE(struct soap*, const std::vector<ns1__EXCHANGE *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__EXCHANGE(struct soap*, const char*, int, const std::vector<ns1__EXCHANGE *> *, const char*);
SOAP_FMAC3 std::vector<ns1__EXCHANGE *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__EXCHANGE(struct soap*, const char*, std::vector<ns1__EXCHANGE *> *, const char*);
SOAP_FMAC1 std::vector<ns1__EXCHANGE *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__EXCHANGE(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__EXCHANGE *>  * soap_new_std__vectorTemplateOfPointerTons1__EXCHANGE(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons1__EXCHANGE(soap, n, NULL, NULL, NULL); }

} // namespace ns


#endif

/* End of nsH.h */
